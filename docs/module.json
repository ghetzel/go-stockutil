{
    "Metadata": {
        "Title": "go-stockutil",
        "Version": "1.13.0",
        "GeneratorVersion": "0.0.7",
        "URL": "https://github.com/ghetzel/go-stockutil"
    },
    "PackageList": [
        {
            "Name": "colorutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/colorutil",
            "ImportPath": "colorutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Utilities for parsing and manipulating colors.\n",
            "MainFunction": false,
            "CommentWordCount": 498,
            "LineCount": 1364,
            "SourceLineCount": 1059,
            "FunctionCount": 27,
            "TypeCount": 1,
            "ConstantCount": 4,
            "VariableCount": 1,
            "Statistics": {
                "Mean": 0.7517,
                "StdDev": 0.4256,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 1,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "convutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/convutil",
            "ImportPath": "convutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "",
            "MainFunction": false,
            "CommentWordCount": 0,
            "LineCount": 590,
            "SourceLineCount": 507,
            "FunctionCount": 15,
            "TypeCount": 4,
            "ConstantCount": 55,
            "VariableCount": 1,
            "Statistics": {
                "Mean": 0,
                "StdDev": 0,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 0
            }
        },
        {
            "Name": "executil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/executil",
            "ImportPath": "executil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Utilities that make executing commands on the local system a little bit easier.\n",
            "MainFunction": false,
            "CommentWordCount": 710,
            "LineCount": 1083,
            "SourceLineCount": 818,
            "FunctionCount": 44,
            "TypeCount": 4,
            "ConstantCount": 0,
            "VariableCount": 3,
            "Statistics": {
                "Mean": 0.5229,
                "StdDev": 0.4864,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0.8,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "fileutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/fileutil",
            "ImportPath": "fileutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Helpers for working with files and filesystems\n",
            "MainFunction": false,
            "CommentWordCount": 1499,
            "LineCount": 3153,
            "SourceLineCount": 2509,
            "FunctionCount": 81,
            "TypeCount": 18,
            "ConstantCount": 4,
            "VariableCount": 30,
            "Statistics": {
                "Mean": 0.3478,
                "StdDev": 0.4615,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "geoutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/geoutil",
            "ImportPath": "geoutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Types and functions for working with Geospatial Data\n",
            "MainFunction": false,
            "CommentWordCount": 135,
            "LineCount": 2586,
            "SourceLineCount": 2453,
            "FunctionCount": 29,
            "TypeCount": 9,
            "ConstantCount": 286,
            "VariableCount": 3,
            "Statistics": {
                "Mean": 0.0632,
                "StdDev": 0.2328,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "httputil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/httputil",
            "ImportPath": "httputil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Utilities for extracting and formatting data encountered in HTTP requests\n",
            "MainFunction": false,
            "CommentWordCount": 1266,
            "LineCount": 2063,
            "SourceLineCount": 1469,
            "FunctionCount": 79,
            "TypeCount": 14,
            "ConstantCount": 13,
            "VariableCount": 7,
            "Statistics": {
                "Mean": 0.6609,
                "StdDev": 0.4482,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 1,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "log",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/log",
            "ImportPath": "log",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Package log package provides convenient and flexible utilities for logging messages.\n\n# Overview\n\nLogging is done by calling functions in this package that correspond to the\nseverity of the log message being output.  At the package level, a minimum\nseverity can be set.  Messages less severe than this minimum logging level will\nnot be output.\n\n# Color Expressions\n\nIn addition to the standard printf-style formatting options (as defined in the\nstandard fmt package), this package supports inline expressions that control the\noutput of ANSI terminal escape sequences.  These expressions allow for a simple\nmechanism to colorize log output, as well as applying graphical effects like\nbold, underline, and blinking text (for terminals that support it).\n\nBy default, color expressions will only be honored if os.Stdin is attached to a\npseudoterminal.  This is the case when the program is run on the command line\nand is not piped or redirected to another file.  This default ensures that the\ncolors are visible only in a visual context, but do not corrupt files or\npipelines with ANSI escape sequences.  Color sequences can be explicitly enabled\nor disabled by setting the EnableColorExpressions package variable.\n\nUsing color expressions in format strings is done by wrapping the expression in\n${expr}.  The general format for color expressions is:\n\n\tforegroundColor[+attributes[:backgroundColor[+attributes]]]\n\nColors (foreground and background):\n\n\tblack\n\tred\n\tgreen\n\tyellow\n\tblue\n\tmagenta\n\tcyan\n\twhite\n\t[0-255]: numeric 8-bit color (for 256 color terminals)\n\treset: Reset all color and graphics attributes to their defaults\n\nForeground Attributes:\n\n\tb: bold text\n\tB: blinking text\n\th: high-intensity (bright text)\n\ti: inverted/reverse colors\n\ts: strikethrough\n\tu: underline\n\nBackground Attributes:\n\n\th: high-intensity (bright text)\n\n# Examples\n\nBelow are some examples showing various formatting options for logs.\n\n\tlog.Info(\"Hello, world!\")\n\t// [11:22:33 0001] INFO Hello, world!\n\n\tlog.Warningf(\"The %q operation could not be completed.\", \"add\")\n\t// [11:22:33 0002] WARN The \"add\" operation could not be completed.\n\n\tlog.Errorf(\"There was an ${red}error${reset} opening file ${blue+b:white}%s${reset}\", filename)\n\t// [11:22:33 0003] ERRO There was an error opening file /tmp/file.txt\n\t//                                   ^^^^^              ^^^^^^^^^^^^^\n\t//                                   red text           blue text on white background\n\n# Log Interception\n\nIt is sometimes useful to be able to act on logs as they are emitted, especially in cases where this\npackage is used in other projects that are imported.  Log Interceptors are called before each log\nline is emitted.  The LogInterceptFunc is called with the level the message was emitted with, the\nmessage itself as a string, and a stack trace struct that defines exactly where the log was emitted\nfrom.\n\n\t// print a complete stack trace before every debug-level message that is encountered\n\tlog.AddLogIntercept(func(level log.Level, line string, stack log.StackItems){\n\t\tif level == log.DEBUG {\n\t\t\tfor _, item := range stack {\n\t\t\t\tfmt.Println(item.String())\n\t\t\t}\n\t\t}\n\t})\n\n# Writable Logger\n\nThe WritableLogger implements the io.Writer interface, acting as a bridge between byte streams from\nvarious sources and the log package.  This is frequently useful in situations like parsing the\noutput of other programs.  A WritableLogger accepts a custom LogParseFunc that allows individual\nlines being written to the WritableLogger to be parsed, rewritten, and given a log severity level.\n\n\timport (\n\t\t\"os/exec\"\n\t\t\"github.com/ghetzel/go-stockutil/log\"\n\t)\n\n\tvar wr = log.NewWritableLogger(log.INFO, `ls: `)\n\n\twr.SetParserFunc(func(line string) (log.Level, string) {\n\t\tif strings.Contains(line, `root`) {\n\t\t\t// root-owned files show up as errors\n\t\t\treturn log.ERROR, line\n\t\t} else if strings.Contains(line, os.Getenv(`USER`)) {\n\t\t\t// current user files are notices\n\t\t\treturn log.NOTICE, line\n\t\t} else {\n\t\t\t// all other lines are not logged at all\n\t\t\treturn log.DEBUG, ``\n\t\t}\n\t})\n\n\tvar ls = exec.Command(`ls`, `-l`)\n\tls.Stdout = wr\n\tls.Run()\n",
            "MainFunction": false,
            "CommentWordCount": 1139,
            "LineCount": 1046,
            "SourceLineCount": 794,
            "FunctionCount": 59,
            "TypeCount": 10,
            "ConstantCount": 8,
            "VariableCount": 8,
            "Statistics": {
                "Mean": 0.2519,
                "StdDev": 0.4278,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "maputil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/maputil",
            "ImportPath": "maputil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Utilities for converting, manipulating, and iterating over maps\n",
            "MainFunction": false,
            "CommentWordCount": 1475,
            "LineCount": 4653,
            "SourceLineCount": 3562,
            "FunctionCount": 84,
            "TypeCount": 14,
            "ConstantCount": 1,
            "VariableCount": 4,
            "Statistics": {
                "Mean": 0.5853,
                "StdDev": 0.4778,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0.95,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "mathutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/mathutil",
            "ImportPath": "mathutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "",
            "MainFunction": false,
            "CommentWordCount": 14,
            "LineCount": 167,
            "SourceLineCount": 107,
            "FunctionCount": 6,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0,
            "Statistics": {
                "Mean": 0.1667,
                "StdDev": 0.3727,
                "GeometricMean": 0,
                "HarmonicMean": 1,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "netutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/netutil",
            "ImportPath": "netutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Utilities for working with networks and network accessories.\n\nUtilities for working with networks and network accessories.\n",
            "MainFunction": false,
            "CommentWordCount": 461,
            "LineCount": 737,
            "SourceLineCount": 505,
            "FunctionCount": 22,
            "TypeCount": 4,
            "ConstantCount": 0,
            "VariableCount": 4,
            "Statistics": {
                "Mean": 0.3673,
                "StdDev": 0.4586,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "pathutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/pathutil",
            "ImportPath": "pathutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Additional helpers for working with file paths and filesystem information\n",
            "MainFunction": false,
            "CommentWordCount": 368,
            "LineCount": 311,
            "SourceLineCount": 217,
            "FunctionCount": 23,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0,
            "Statistics": {
                "Mean": 0.513,
                "StdDev": 0.4928,
                "GeometricMean": 1,
                "HarmonicMean": 0,
                "Median": 0.8,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "rxutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/rxutil",
            "ImportPath": "rxutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Utilities to make working with regular expressions easier.\n",
            "MainFunction": false,
            "CommentWordCount": 186,
            "LineCount": 256,
            "SourceLineCount": 187,
            "FunctionCount": 9,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 12,
            "Statistics": {
                "Mean": 0.3545,
                "StdDev": 0.4707,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "sliceutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/sliceutil",
            "ImportPath": "sliceutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Utilities for converting, manipulating, and iterating over slices\n",
            "MainFunction": false,
            "CommentWordCount": 764,
            "LineCount": 1063,
            "SourceLineCount": 794,
            "FunctionCount": 34,
            "TypeCount": 4,
            "ConstantCount": 0,
            "VariableCount": 3,
            "Statistics": {
                "Mean": 0.9,
                "StdDev": 0.2751,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 1,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "stockutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil",
            "ImportPath": "stockutil",
            "ParentPackage": "",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "",
            "MainFunction": false,
            "CommentWordCount": 0,
            "LineCount": 4,
            "SourceLineCount": 2,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 1,
            "VariableCount": 0,
            "Statistics": {
                "Mean": 0,
                "StdDev": 0,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 0
            }
        },
        {
            "Name": "stringutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/stringutil",
            "ImportPath": "stringutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Utilities for converting and manipulating data to and from strings\n",
            "MainFunction": false,
            "CommentWordCount": 838,
            "LineCount": 2608,
            "SourceLineCount": 1997,
            "FunctionCount": 86,
            "TypeCount": 6,
            "ConstantCount": 17,
            "VariableCount": 9,
            "Statistics": {
                "Mean": 0.3959,
                "StdDev": 0.4796,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "structutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/structutil",
            "ImportPath": "structutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Utilities for working with and manipulating structs.\n",
            "MainFunction": false,
            "CommentWordCount": 92,
            "LineCount": 536,
            "SourceLineCount": 428,
            "FunctionCount": 13,
            "TypeCount": 5,
            "ConstantCount": 0,
            "VariableCount": 2,
            "Statistics": {
                "Mean": 0.1739,
                "StdDev": 0.379,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "timeutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/timeutil",
            "ImportPath": "timeutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Utilities for messing with time.\n",
            "MainFunction": false,
            "CommentWordCount": 135,
            "LineCount": 191,
            "SourceLineCount": 130,
            "FunctionCount": 5,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0,
            "Statistics": {
                "Mean": 0.98,
                "StdDev": 0.04,
                "GeometricMean": 0.9791,
                "HarmonicMean": 0.9783,
                "Median": 1,
                "Minimum": 0.9,
                "Maximum": 1
            }
        },
        {
            "Name": "typeutil",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/typeutil",
            "ImportPath": "typeutil",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "Helpers for type inflection and simplifying working with Golang generic interface types\n",
            "MainFunction": false,
            "CommentWordCount": 1133,
            "LineCount": 2837,
            "SourceLineCount": 2306,
            "FunctionCount": 99,
            "TypeCount": 4,
            "ConstantCount": 3,
            "VariableCount": 0,
            "Statistics": {
                "Mean": 0.5481,
                "StdDev": 0.4498,
                "GeometricMean": 0.949,
                "HarmonicMean": 0,
                "Median": 0.7,
                "Minimum": 0,
                "Maximum": 1
            }
        },
        {
            "Name": "utils",
            "CanonicalImportPath": "github.com/ghetzel/go-stockutil/utils",
            "ImportPath": "utils",
            "ParentPackage": "stockutil",
            "URL": "https://github.com/ghetzel/go-stockutil",
            "Synopsis": "",
            "MainFunction": false,
            "CommentWordCount": 355,
            "LineCount": 1527,
            "SourceLineCount": 1239,
            "FunctionCount": 46,
            "TypeCount": 4,
            "ConstantCount": 12,
            "VariableCount": 10,
            "Statistics": {
                "Mean": 0.2632,
                "StdDev": 0.4403,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 1
            }
        }
    ],
    "Package": {
        "Name": "stockutil",
        "CanonicalImportPath": "github.com/ghetzel/go-stockutil",
        "ImportPath": "stockutil",
        "ParentPackage": "",
        "URL": "https://github.com/ghetzel/go-stockutil",
        "Synopsis": "",
        "MainFunction": false,
        "CommentWordCount": 0,
        "LineCount": 4,
        "SourceLineCount": 2,
        "FunctionCount": 0,
        "TypeCount": 0,
        "ConstantCount": 1,
        "VariableCount": 0,
        "Statistics": {
            "Mean": 0,
            "StdDev": 0,
            "GeometricMean": 0,
            "HarmonicMean": 0,
            "Median": 0,
            "Minimum": 0,
            "Maximum": 0
        },
        "Files": [
            {
                "Name": "version.go",
                "Size": 44,
                "LineCount": 4,
                "SourceLineCount": 2,
                "FunctionCount": 0,
                "TypeCount": 0,
                "ConstantCount": 1,
                "VariableCount": 0
            }
        ],
        "Constants": [
            {
                "Name": "Version",
                "Immutable": true,
                "Expression": "`1.13.0`",
                "Value": "1.13.0"
            }
        ],
        "Packages": [
            {
                "Name": "colorutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/colorutil",
                "ImportPath": "colorutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Utilities for parsing and manipulating colors.\n",
                "MainFunction": false,
                "CommentWordCount": 498,
                "LineCount": 1364,
                "SourceLineCount": 1059,
                "FunctionCount": 27,
                "TypeCount": 1,
                "ConstantCount": 4,
                "VariableCount": 1,
                "Statistics": {
                    "Mean": 0.7517,
                    "StdDev": 0.4256,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 1,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "colors.go",
                        "Size": 5060,
                        "LineCount": 144,
                        "SourceLineCount": 142,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 1
                    },
                    {
                        "Name": "colortemp.go",
                        "Imports": [
                            {
                                "PackageName": "math",
                                "Alias": "math"
                            }
                        ],
                        "Size": 3481,
                        "LineCount": 124,
                        "SourceLineCount": 88,
                        "FunctionCount": 1,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "colortemp_test.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 2496,
                        "LineCount": 89,
                        "SourceLineCount": 76,
                        "FunctionCount": 1,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "colorutil.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/hex",
                                "Alias": "hex"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "image/color",
                                "Alias": "color"
                            },
                            {
                                "PackageName": "math",
                                "Alias": "math"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/mathutil",
                                "Alias": "mathutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/rxutil",
                                "Alias": "rxutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "k8s.io/apimachinery/pkg/util/json",
                                "Alias": "json"
                            }
                        ],
                        "Size": 15045,
                        "LineCount": 630,
                        "SourceLineCount": 470,
                        "FunctionCount": 25,
                        "TypeCount": 1,
                        "ConstantCount": 4,
                        "VariableCount": 0
                    },
                    {
                        "Name": "colorutil_test.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/assert",
                                "Alias": "assert"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 12443,
                        "LineCount": 377,
                        "SourceLineCount": 283,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Constants": [
                    {
                        "Name": "HSI",
                        "Immutable": true
                    },
                    {
                        "Name": "HSL",
                        "Immutable": true
                    },
                    {
                        "Name": "HSV",
                        "Immutable": true
                    },
                    {
                        "Name": "Invalid",
                        "Type": "lmodel",
                        "Immutable": true,
                        "Expression": "iota"
                    }
                ],
                "Variables": [
                    {
                        "Name": "ColorNames"
                    }
                ],
                "Functions": [
                    {
                        "Name": "BenchmarkKelvinToColor",
                        "Comment": "This benchmark is here both to validate the speed, but also to ensure none of this\nwild floating point math accumulates any noticable errors.",
                        "Arguments": [
                            {
                                "Name": "b",
                                "Type": "*testing.B"
                            }
                        ],
                        "Signature": "BenchmarkKelvinToColor(b *testing.B)",
                        "Source": "ewoJZm9yIG4gOj0gMDsgbiA8IGIuTjsgbisrIHsKCQlmb3IgaywgcmdiYSA6PSByYW5nZSBtYXBbaW50XVszXXVpbnQ4ezE4NTA6IFszXXVpbnQ4ezI1NSwgMTMwLCAwfSwgMTk5OTogWzNddWludDh7MjU1LCAxMzksIDB9LCAyMDAwOiBbM111aW50OHsyNTUsIDEzOSwgMH0sIDI1MDA6IFszXXVpbnQ4ezI1NSwgMTYyLCA3MX0sIDMwMDA6IFszXXVpbnQ4ezI1NSwgMTgwLCAxMDh9LCAzNTAwOiBbM111aW50OHsyNTUsIDE5NSwgMTM4fSwgNDAwMDogWzNddWludDh7MjU1LCAyMDgsIDE2NH0sIDQ1MDA6IFszXXVpbnQ4ezI1NSwgMjE5LCAxODV9LCA1MDAwOiBbM111aW50OHsyNTUsIDIyOCwgMjA1fSwgNTUwMDogWzNddWludDh7MjU1LCAyMzYsIDIyM30sIDYwMDA6IFszXXVpbnQ4ezI1NSwgMjQzLCAyMzl9LCA2NTAwOiBbM111aW50OHsyNTUsIDI1MCwgMjU0fSwgNjU5OTogWzNddWludDh7MjU1LCAyNTEsIDI1NX0sIDY2MDA6IFszXXVpbnQ4ezI1NSwgMjQ5LCAyNTV9LCA3MDAwOiBbM111aW50OHsyNDUsIDI0MywgMjU1fSwgNzUwMDogWzNddWludDh7MjM0LCAyMzcsIDI1NX0sIDgwMDA6IFszXXVpbnQ4ezIyNSwgMjMyLCAyNTV9LCA4NTAwOiBbM111aW50OHsyMTgsIDIyOCwgMjU1fSwgOTAwMDogWzNddWludDh7MjEzLCAyMjUsIDI1NX0sIDkwMDE6IFszXXVpbnQ4ezIxMywgMjI1LCAyNTV9fSB7CgkJCXZhciByLCBnLCBiIHVpbnQ4CgkJCXIsIGcsIGIsIF8gPSBLZWx2aW5Ub0NvbG9yKGspLlJHQkEyNTUoKQoJCQlpZiByICE9IHJnYmFbMF0gewoJCQkJcGFuaWMoZm10LlNwcmludGYoImJhZCB2YWx1ZSBmb3IgcjolZEs7IGV4cGVjdGVkICVkLCBnb3QgJWQiLCBrLCByLCByZ2JhWzBdKSkKCQkJfQoJCQlpZiBnICE9IHJnYmFbMV0gewoJCQkJcGFuaWMoZm10LlNwcmludGYoImJhZCB2YWx1ZSBmb3IgZzolZEs7IGV4cGVjdGVkICVkLCBnb3QgJWQiLCBrLCBnLCByZ2JhWzFdKSkKCQkJfQoJCQlpZiBiICE9IHJnYmFbMl0gewoJCQkJcGFuaWMoZm10LlNwcmludGYoImJhZCB2YWx1ZSBmb3IgYjolZEs7IGV4cGVjdGVkICVkLCBnb3QgJWQiLCBrLCBiLCByZ2JhWzJdKSkKCQkJfQoJCX0KCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Equals",
                        "Comment": "Return whether two colors are equivalent in the 24-bit RGB (RGB255) color space.",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "second",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "Equals(first any, second any) bool",
                        "Source": "ewoJaWYgZmlyc3QgIT0gbmlsICYmIHNlY29uZCAhPSBuaWwgewoJCWlmIGZpcnN0QywgZXJyIDo9IFBhcnNlKGZpcnN0KTsgZXJyID09IG5pbCB7CgkJCXJldHVybiBmaXJzdEMuRXF1YWxzKHNlY29uZCkKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "HslToRgb",
                        "Comment": "Given HSL values (where hue is given in degrees (out of 360°), saturation\nand lightness are [0, 1]), return the corresponding RGB values (where each value\nis [0, 255]).",
                        "Arguments": [
                            {
                                "Name": "hue",
                                "Type": "float64"
                            },
                            {
                                "Name": "saturation",
                                "Type": "float64"
                            },
                            {
                                "Name": "lightness",
                                "Type": "float64"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "uint8"
                            },
                            {
                                "Type": "uint8"
                            },
                            {
                                "Type": "uint8"
                            }
                        ],
                        "Signature": "HslToRgb(hue float64, saturation float64, lightness float64) (uint8, uint8, uint8)",
                        "Source": "ewoJciwgZywgYiA6PSBoc2wycmdiKGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzKQoJcmV0dXJuIHVpbnQ4KHIgKiAyNTUuMCksIHVpbnQ4KGcgKiAyNTUuMCksIHVpbnQ4KGIgKiAyNTUuMCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "HsvToRgb",
                        "Comment": "Given HSL values (where hue is given in degrees (out of 360°), saturation\nand value are [0, 1]), return the corresponding RGB values (where each value\nis [0, 255]).",
                        "Arguments": [
                            {
                                "Name": "hue",
                                "Type": "float64"
                            },
                            {
                                "Name": "saturation",
                                "Type": "float64"
                            },
                            {
                                "Name": "value",
                                "Type": "float64"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "uint8"
                            },
                            {
                                "Type": "uint8"
                            },
                            {
                                "Type": "uint8"
                            }
                        ],
                        "Signature": "HsvToRgb(hue float64, saturation float64, value float64) (uint8, uint8, uint8)",
                        "Source": "ewoJciwgZywgYiA6PSBoc3YycmdiKGh1ZSwgc2F0dXJhdGlvbiwgdmFsdWUpCglyZXR1cm4gdWludDgociAqIDI1NS4wKSwgdWludDgoZyAqIDI1NS4wKSwgdWludDgoYiAqIDI1NS4wKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "KelvinToColor",
                        "Comment": "Takes a color temperature in degrees Kelvin and returns a valid Color for that temperature.\nThis function works best between 1000K and 40000K.",
                        "Arguments": [
                            {
                                "Name": "kelvin",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Name": "color",
                                "Type": "Color"
                            }
                        ],
                        "Signature": "KelvinToColor(kelvin int) color Color",
                        "Source": "ewoJY29sb3IuYSA9IDEuMAoJdmFyIHJBLCByQiwgckMsIHJYIGZsb2F0NjQKCXZhciBnMUEsIGcxQiwgZzFDLCBnMVggZmxvYXQ2NAoJdmFyIGcyQSwgZzJCLCBnMkMsIGcyWCBmbG9hdDY0Cgl2YXIgYkEsIGJCLCBiQywgYlggZmxvYXQ2NAoJckEgPSBoZWxsYW5kQmFydGxldHRPdmVyRXE2NjAwS19SZWRBCglyQiA9IGhlbGxhbmRCYXJ0bGV0dE92ZXJFcTY2MDBLX1JlZEIKCXJDID0gaGVsbGFuZEJhcnRsZXR0T3ZlckVxNjYwMEtfUmVkQwoJclggPSBoZWxsYW5kQmFydGxldHRPdmVyRXE2NjAwS19SZWRYCglnMUEgPSBoZWxsYW5kQmFydGxldHRVbmRlcjY2MDBLX0dyZWVuQQoJZzFCID0gaGVsbGFuZEJhcnRsZXR0VW5kZXI2NjAwS19HcmVlbkIKCWcxQyA9IGhlbGxhbmRCYXJ0bGV0dFVuZGVyNjYwMEtfR3JlZW5DCglnMVggPSBoZWxsYW5kQmFydGxldHRVbmRlcjY2MDBLX0dyZWVuWAoJZzJBID0gaGVsbGFuZEJhcnRsZXR0T3ZlckVxNjYwMEtfR3JlZW5BCglnMkIgPSBoZWxsYW5kQmFydGxldHRPdmVyRXE2NjAwS19HcmVlbkIKCWcyQyA9IGhlbGxhbmRCYXJ0bGV0dE92ZXJFcTY2MDBLX0dyZWVuQwoJZzJYID0gaGVsbGFuZEJhcnRsZXR0T3ZlckVxNjYwMEtfR3JlZW5YCgliQSA9IGhlbGxhbmRCYXJ0bGV0dE92ZXIyMDAwS19VbmRlcjY2MDBLX0JsdWVBCgliQiA9IGhlbGxhbmRCYXJ0bGV0dE92ZXIyMDAwS19VbmRlcjY2MDBLX0JsdWVCCgliQyA9IGhlbGxhbmRCYXJ0bGV0dE92ZXIyMDAwS19VbmRlcjY2MDBLX0JsdWVDCgliWCA9IGhlbGxhbmRCYXJ0bGV0dE92ZXIyMDAwS19VbmRlcjY2MDBLX0JsdWVYCgl2YXIgdGVtcCA9IGZsb2F0NjQoa2VsdmluKSAvIDEwMC4wCglpZiB0ZW1wIDwgNjYgewoJCWNvbG9yLnIgPSAxLjAKCX0gZWxzZSB7CgkJdmFyIHggPSAodGVtcCArIHJYKQoJCXZhciByMjU1ID0gKHJBICsgKHJCICogeCkgKyAockMgKiBtYXRoLkxvZyh4KSkpCgkJaWYgcjI1NSA8IDAgewoJCQlyMjU1ID0gMAoJCX0gZWxzZSBpZiByMjU1ID4gMjU1IHsKCQkJcjI1NSA9IDI1NQoJCX0KCQljb2xvci5yID0gcjI1NSAvIDI1NQoJfQoJaWYgdGVtcCA8IDY2IHsKCQl2YXIgeCA9ICh0ZW1wICsgZzFYKQoJCXZhciBnMjU1ID0gKGcxQSArIChnMUIgKiB4KSArIChnMUMgKiBtYXRoLkxvZyh4KSkpCgkJaWYgZzI1NSA8IDAgewoJCQlnMjU1ID0gMAoJCX0gZWxzZSBpZiBnMjU1ID4gMjU1IHsKCQkJZzI1NSA9IDI1NQoJCX0KCQljb2xvci5nID0gZzI1NSAvIDI1NQoJfSBlbHNlIHsKCQl2YXIgeCA9ICh0ZW1wICsgZzJYKQoJCXZhciBnMjU1ID0gKGcyQSArIChnMkIgKiB4KSArIChnMkMgKiBtYXRoLkxvZyh4KSkpCgkJaWYgZzI1NSA8IDAgewoJCQlnMjU1ID0gMAoJCX0gZWxzZSBpZiBnMjU1ID4gMjU1IHsKCQkJZzI1NSA9IDI1NQoJCX0KCQljb2xvci5nID0gZzI1NSAvIDI1NQoJfQoJaWYgdGVtcCA8PSAyMCB7CgkJY29sb3IuYiA9IDAKCX0gZWxzZSBpZiB0ZW1wID49IDY2IHsKCQljb2xvci5iID0gMS4wCgl9IGVsc2UgewoJCXZhciB4ID0gKHRlbXAgKyBiWCkKCQl2YXIgYjI1NSA9IChiQSArIChiQiAqIHgpICsgKGJDICogbWF0aC5Mb2coeCkpKQoJCWlmIGIyNTUgPCAwIHsKCQkJYjI1NSA9IDAKCQl9IGVsc2UgaWYgYjI1NSA+IDI1NSB7CgkJCWIyNTUgPSAyNTUKCQl9CgkJY29sb3IuYiA9IGIyNTUgLyAyNTUKCX0KCXJldHVybgp9Ly8gc2NhbGUgdGhlIHZhbHVlIHRvIG1ha2Ugd29ya2luZyB3aXRoIHNvbWUgb2YgdGhpcyBlYXNpZXIKLy8gYSArIGIqeCArIGMqbG4oeCkK",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RgbToHsl",
                        "Comment": "Given RGB values (where each value is [0, 255]), return the hue (in degrees), saturation,\nand lightness (where each is [0, 1]).",
                        "Arguments": [
                            {
                                "Name": "r",
                                "Type": "float64"
                            },
                            {
                                "Name": "g",
                                "Type": "float64"
                            },
                            {
                                "Name": "b",
                                "Type": "float64"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            },
                            {
                                "Type": "float64"
                            },
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "RgbToHsl(r float64, g float64, b float64) (float64, float64, float64)",
                        "Source": "ewoJcmV0dXJuIHJnYjJsaHMoSFNMLCByLzI1NSwgZy8yNTUsIGIvMjU1KQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestAdjustHue",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestAdjustHue(t *testing.T)",
                        "Source": "ewoJYWRqdXN0SHVlKHQsIGAjRkYwMDAwYCwgMTIwLCBgIzAwRkYwMGApCglhZGp1c3RIdWUodCwgYCNGRjAwMDBgLCAyNDAsIGAjMDAwMEZGYCkKCWFkanVzdEh1ZSh0LCBgI2FkNDAzOGAsIDIwLCBgI2FkNjYzOGApCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestColorNames",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestColorNames(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5UcnVlKHQsIE11c3RQYXJzZShgcmVkYCkuRXF1YWxzKGAjZmYwMDAwYCkpCglyZXF1aXJlLlRydWUodCwgTXVzdFBhcnNlKGBncmVlbmApLkVxdWFscyhgIzAwODAwMGApKQoJcmVxdWlyZS5UcnVlKHQsIE11c3RQYXJzZShgYmx1ZWApLkVxdWFscyhgIzAwMDBmZmApKQoJQ29sb3JOYW1lc1tgX3Rlc3RpbmdgXSA9IGAjMTIzNDU2YAoJcmVxdWlyZS5UcnVlKHQsIE11c3RQYXJzZShgX3Rlc3RpbmdgKS5FcXVhbHMoYCMxMjM0NTZgKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestColorStringers",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestColorStringers(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYCNGRjAwQ0NgLCBNdXN0UGFyc2UoYCNGRjAwQ0NgKS5TdHJpbmcoKSkKCWFzc2VydC5FcXVhbChgI0ZGMDBDQ2AsIE11c3RQYXJzZShgcmdiKDI1NSwwLDIwNClgKS5TdHJpbmcoKSkKCWFzc2VydC5FcXVhbChgI0ZGMDBDQ2AsIE11c3RQYXJzZShgaHNsKDMxMiwgMTAwJSwgNTAlKWApLlN0cmluZygpKQoJYXNzZXJ0LkVxdWFsKGByZ2IoMjU1LCAwLCAyMDQpYCwgTXVzdFBhcnNlKGAjRkYwMENDYCkuU3RyaW5nUkdCQSgpKQoJYXNzZXJ0LkVxdWFsKGByZ2IoMjU1LCAwLCAyMDQpYCwgTXVzdFBhcnNlKGByZ2IoMjU1LDAsMjA0KWApLlN0cmluZ1JHQkEoKSkKCWFzc2VydC5FcXVhbChgcmdiKDI1NSwgMCwgMjA0KWAsIE11c3RQYXJzZShgaHNsKDMxMiwgMTAwJSwgNTAlKWApLlN0cmluZ1JHQkEoKSkKCWFzc2VydC5FcXVhbChgcmdiKDI1NSwgMCwgMjA0KWAsIE11c3RQYXJzZShgI0ZGMDBDQ0ZGYCkuU3RyaW5nUkdCQSgpKQoJYXNzZXJ0LkVxdWFsKGByZ2JhKDI1NSwgMCwgMjA0LCAxMjgpYCwgTXVzdFBhcnNlKGAjRkYwMENDODBgKS5TdHJpbmdSR0JBKCkpCglhc3NlcnQuRXF1YWwoYHJnYmEoMjU1LCAwLCAyMDQsIDY0KWAsIE11c3RQYXJzZShgI0ZGMDBDQzQwYCkuU3RyaW5nUkdCQSgpKQoJYXNzZXJ0LkVxdWFsKGByZ2JhKDI1NSwgMCwgMjA0LCAxKWAsIE11c3RQYXJzZShgI0ZGMDBDQzAxYCkuU3RyaW5nUkdCQSgpKQoJYXNzZXJ0LlRydWUoYGhzbCgzMTIsIDEwMCUsIDUwJSlgID09IE11c3RQYXJzZShgI0ZGMDBDQ0ZGYCkuU3RyaW5nSFNMQSgpKQoJYXNzZXJ0LlRydWUoYGhzbGEoMzEyLCAxMDAlLCA1MCUsIDAuNSlgID09IE11c3RQYXJzZShgI0ZGMDBDQzgwYCkuU3RyaW5nSFNMQSgpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestEquals",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestEquals(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuVHJ1ZShFcXVhbHMoYCMyYkYxYzlgLCBgIzJCRjFDOWApKQoJYXNzZXJ0LlRydWUoRXF1YWxzKGAjRkZGRkZGYCwgYCNGRkZGRkZgKSkKCWFzc2VydC5UcnVlKEVxdWFscyhgI0ZGRkZGRmAsIGByZ2IoMjU1LDI1NSwyNTUpYCkpCglhc3NlcnQuVHJ1ZShFcXVhbHMoYCNGRkZGRkY4MGAsIGByZ2JhKDI1NSwyNTUsMjU1LDAuNSlgKSkKCWFzc2VydC5UcnVlKEVxdWFscyhgIzAwQUEwMGAsIGByZ2IoMCwxNzAsMClgKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestHslToRgb",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestHslToRgb(t *testing.T)",
                        "Source": "ewoJYXNzZXJ0SHNsVG9SZ2IodCwgMCwgMCwgMCwgMCwgMCwgMCkKCWFzc2VydEhzbFRvUmdiKHQsIDAsIDAsIDAuMSwgMC4xLCAwLjEsIDAuMSkKCWFzc2VydEhzbFRvUmdiKHQsIDAsIDAsIDAuNSwgMC41LCAwLjUsIDAuNSkKCWFzc2VydEhzbFRvUmdiKHQsIDAsIDAsIDAuNzUsIDAuNzUsIDAuNzUsIDAuNzUpCglhc3NlcnRIc2xUb1JnYih0LCAwLCAwLCAxLCAxLCAxLCAxKQoJYXNzZXJ0SHNsVG9SZ2IodCwgMCwgMSwgMC4wMSwgMC4wMiwgMCwgMCkKCWFzc2VydEhzbFRvUmdiKHQsIDAsIDEsIDAuMDIsIDAuMDQsIDAsIDApCglhc3NlcnRIc2xUb1JnYih0LCAwLCAxLCAwLjA0LCAwLjA4LCAwLCAwKQoJYXNzZXJ0SHNsVG9SZ2IodCwgMCwgMSwgMC4wOCwgMC4xNiwgMCwgMCkKCWFzc2VydEhzbFRvUmdiKHQsIDAsIDEsIDAuMTYsIDAuMzIsIDAsIDApCglhc3NlcnRIc2xUb1JnYih0LCAwLCAxLCAwLjE3LCAwLjM0LCAwLCAwKQoJYXNzZXJ0SHNsVG9SZ2IodCwgMCwgMSwgMC4zMSwgMC42MiwgMCwgMCkKCWFzc2VydEhzbFRvUmdiKHQsIDAsIDEsIDAuNSwgMSwgMCwgMCkKCWFzc2VydEhzbFRvUmdiKHQsIDEyMCwgMSwgMC4wMSwgMCwgMC4wMiwgMCkKCWFzc2VydEhzbFRvUmdiKHQsIDEyMCwgMSwgMC4wMiwgMCwgMC4wNCwgMCkKCWFzc2VydEhzbFRvUmdiKHQsIDEyMCwgMSwgMC4wNCwgMCwgMC4wOCwgMCkKCWFzc2VydEhzbFRvUmdiKHQsIDEyMCwgMSwgMC4wOCwgMCwgMC4xNiwgMCkKCWFzc2VydEhzbFRvUmdiKHQsIDEyMCwgMSwgMC4xNiwgMCwgMC4zMiwgMCkKCWFzc2VydEhzbFRvUmdiKHQsIDEyMCwgMSwgMC4xNywgMCwgMC4zNCwgMCkKCWFzc2VydEhzbFRvUmdiKHQsIDEyMCwgMSwgMC4zMSwgMCwgMC42MiwgMCkKCWFzc2VydEhzbFRvUmdiKHQsIDEyMCwgMSwgMC41LCAwLCAxLCAwKQoJYXNzZXJ0SHNsVG9SZ2IodCwgMjQwLCAxLCAwLjAxLCAwLCAwLCAwLjAyKQoJYXNzZXJ0SHNsVG9SZ2IodCwgMjQwLCAxLCAwLjAyLCAwLCAwLCAwLjA0KQoJYXNzZXJ0SHNsVG9SZ2IodCwgMjQwLCAxLCAwLjA0LCAwLCAwLCAwLjA4KQoJYXNzZXJ0SHNsVG9SZ2IodCwgMjQwLCAxLCAwLjA4LCAwLCAwLCAwLjE2KQoJYXNzZXJ0SHNsVG9SZ2IodCwgMjQwLCAxLCAwLjE2LCAwLCAwLCAwLjMyKQoJYXNzZXJ0SHNsVG9SZ2IodCwgMjQwLCAxLCAwLjE3LCAwLCAwLCAwLjM0KQoJYXNzZXJ0SHNsVG9SZ2IodCwgMjQwLCAxLCAwLjMxLCAwLCAwLCAwLjYyKQoJYXNzZXJ0SHNsVG9SZ2IodCwgMjQwLCAxLCAwLjUsIDAsIDAsIDEpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestHsvToRgbFloat",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestHsvToRgbFloat(t *testing.T)",
                        "Source": "ewoJYXNzZXJ0SHN2VG9SZ2IodCwgMCwgMCwgMCwgMCwgMCwgMCkKCWFzc2VydEhzdlRvUmdiKHQsIDAsIDAsIDAuMSwgMC4xLCAwLjEsIDAuMSkKCWFzc2VydEhzdlRvUmdiKHQsIDAsIDAsIDAuNSwgMC41LCAwLjUsIDAuNSkKCWFzc2VydEhzdlRvUmdiKHQsIDAsIDAsIDAuNzUsIDAuNzUsIDAuNzUsIDAuNzUpCglhc3NlcnRIc3ZUb1JnYih0LCAwLCAwLCAxLCAxLCAxLCAxKQoJYXNzZXJ0SHN2VG9SZ2IodCwgMCwgMSwgMSwgMSwgMCwgMCkKCWFzc2VydEhzdlRvUmdiKHQsIDAsIDEsIDAuNzUsIDAuNzUsIDAsIDApCglhc3NlcnRIc3ZUb1JnYih0LCAwLCAxLCAwLjUsIDAuNSwgMCwgMCkKCWFzc2VydEhzdlRvUmdiKHQsIDAsIDEsIDAuMDEsIDAuMDEsIDAsIDApCglhc3NlcnRIc3ZUb1JnYih0LCAxMjAsIDEsIDEsIDAsIDEsIDApCglhc3NlcnRIc3ZUb1JnYih0LCAxMjAsIDEsIDAuNzUsIDAsIDAuNzUsIDApCglhc3NlcnRIc3ZUb1JnYih0LCAxMjAsIDEsIDAuNSwgMCwgMC41LCAwKQoJYXNzZXJ0SHN2VG9SZ2IodCwgMTIwLCAxLCAwLjAxLCAwLCAwLjAxLCAwKQoJYXNzZXJ0SHN2VG9SZ2IodCwgMjQwLCAxLCAxLCAwLCAwLCAxKQoJYXNzZXJ0SHN2VG9SZ2IodCwgMjQwLCAxLCAwLjc1LCAwLCAwLCAwLjc1KQoJYXNzZXJ0SHN2VG9SZ2IodCwgMjQwLCAxLCAwLjUsIDAsIDAsIDAuNSkKCWFzc2VydEhzdlRvUmdiKHQsIDI0MCwgMSwgMC4wMSwgMCwgMCwgMC4wMSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsZero",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsZero(t *testing.T)",
                        "Source": "ewoJdmFyIGMgQ29sb3IKCXJlcXVpcmUuVHJ1ZSh0LCBjLklzWmVybygpKQoJYyA9IE11c3RQYXJzZShgZmYwMGNjYCkKCXJlcXVpcmUuRmFsc2UodCwgYy5Jc1plcm8oKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestKelvinToColor",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestKelvinToColor(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglmb3IgaywgcmdiYSA6PSByYW5nZSBtYXBbaW50XVszXXVpbnQ4ezE4NTA6IFszXXVpbnQ4ezI1NSwgMTMwLCAwfSwgMTk5OTogWzNddWludDh7MjU1LCAxMzksIDB9LCAyMDAwOiBbM111aW50OHsyNTUsIDEzOSwgMH0sIDI1MDA6IFszXXVpbnQ4ezI1NSwgMTYyLCA3MX0sIDMwMDA6IFszXXVpbnQ4ezI1NSwgMTgwLCAxMDh9LCAzNTAwOiBbM111aW50OHsyNTUsIDE5NSwgMTM4fSwgNDAwMDogWzNddWludDh7MjU1LCAyMDgsIDE2NH0sIDQ1MDA6IFszXXVpbnQ4ezI1NSwgMjE5LCAxODV9LCA1MDAwOiBbM111aW50OHsyNTUsIDIyOCwgMjA1fSwgNTUwMDogWzNddWludDh7MjU1LCAyMzYsIDIyM30sIDYwMDA6IFszXXVpbnQ4ezI1NSwgMjQzLCAyMzl9LCA2NTAwOiBbM111aW50OHsyNTUsIDI1MCwgMjU0fSwgNjU5OTogWzNddWludDh7MjU1LCAyNTEsIDI1NX0sIDY2MDA6IFszXXVpbnQ4ezI1NSwgMjQ5LCAyNTV9LCA3MDAwOiBbM111aW50OHsyNDUsIDI0MywgMjU1fSwgNzUwMDogWzNddWludDh7MjM0LCAyMzcsIDI1NX0sIDgwMDA6IFszXXVpbnQ4ezIyNSwgMjMyLCAyNTV9LCA4NTAwOiBbM111aW50OHsyMTgsIDIyOCwgMjU1fSwgOTAwMDogWzNddWludDh7MjEzLCAyMjUsIDI1NX0sIDkwMDE6IFszXXVpbnQ4ezIxMywgMjI1LCAyNTV9fSB7CgkJdmFyIHIsIGcsIGIsIGEgdWludDgKCQlyLCBnLCBiLCBhID0gS2VsdmluVG9Db2xvcihrKS5SR0JBMjU1KCkKCQlhc3NlcnQuRXF1YWxWYWx1ZXMociwgcmdiYVswXSwgZm10LlNwcmludGYoInI6JWRLIiwgaykpCgkJYXNzZXJ0LkVxdWFsVmFsdWVzKGcsIHJnYmFbMV0sIGZtdC5TcHJpbnRmKCJnOiVkSyIsIGspKQoJCWFzc2VydC5FcXVhbFZhbHVlcyhiLCByZ2JhWzJdLCBmbXQuU3ByaW50ZigiYjolZEsiLCBrKSkKCQlhc3NlcnQuRXF1YWxWYWx1ZXMoYSwgMjU1LCBmbXQuU3ByaW50ZigiYTolZEsiLCBrKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestLightenDarken",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestLightenDarken(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IGFzc2VydC5OZXcodCkKCXZhciBjb2xvciBDb2xvcgoJdmFyIGVyciBlcnJvcgoJY29sb3IsIGVyciA9IERhcmtlbihgIzgwMDAwMGAsIDEwMCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKGNvbG9yLkVxdWFscyhgIzAwMDAwMGApLCBmbXQuU3ByaW50ZigiJXYiLCBjb2xvcikpCgljb2xvciwgZXJyID0gRGFya2VuKGAjODAwMDAwYCwgMjApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZShjb2xvci5FcXVhbHMoYCMxQTAwMDBgKSwgZm10LlNwcmludGYoIiV2IiwgY29sb3IpKQoJY29sb3IsIGVyciA9IExpZ2h0ZW4oYCM4MDAwMDBgLCAyMCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKGNvbG9yLkVxdWFscyhgI0U2MDAwMGApLCBmbXQuU3ByaW50ZigiJXYiLCBjb2xvcikpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMix",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMix(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IGFzc2VydC5OZXcodCkKCXZhciBtaXhlZCBDb2xvcgoJdmFyIGVyciBlcnJvcgoJbWl4ZWQsIGVyciA9IE1peE4oYCNhZDQwMzhgLCBgIzAwMDBmZmAsIDAuOCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKG1peGVkLkVxdWFscyhgIzhhMzM2MGApLCBmbXQuU3ByaW50ZigiJXYiLCBtaXhlZCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestParse",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestParse(t *testing.T)",
                        "Source": "ewoJYXNzZXJ0Q29sb3IodCwgYCNGRkZGRkZgLCAyNTUsIDI1NSwgMjU1LCAyNTUpCglhc3NlcnRDb2xvcih0LCBgI0ZGRkYwMGAsIDI1NSwgMjU1LCAwLCAyNTUpCglhc3NlcnRDb2xvcih0LCBgI0ZGMDBDQ2AsIDI1NSwgMCwgMjA0LCAyNTUpCglhc3NlcnRDb2xvcih0LCBgI0ZGRkZGRjAwYCwgMjU1LCAyNTUsIDI1NSwgMCkKCWFzc2VydENvbG9yKHQsIGAjRkZGRjAwRkZgLCAyNTUsIDI1NSwgMCwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYCNGRjAwRkZGRmAsIDI1NSwgMCwgMjU1LCAyNTUpCglhc3NlcnRDb2xvcih0LCBgIzAwRkZGRkZGYCwgMCwgMjU1LCAyNTUsIDI1NSkKCWFzc2VydENvbG9yKHQsIGAjRkYwMDAwMDBgLCAyNTUsIDAsIDAsIDApCglhc3NlcnRDb2xvcih0LCBgI0ZGMDBGRjAwYCwgMjU1LCAwLCAyNTUsIDApCglhc3NlcnRDb2xvcih0LCBgIzAwMDAwMDAwYCwgMCwgMCwgMCwgMCkKCWFzc2VydENvbG9yKHQsIGByZ2IoMjU1LCAyNTUsIDI1NSlgLCAyNTUsIDI1NSwgMjU1LCAyNTUpCglhc3NlcnRDb2xvcih0LCBgcmdiKDI1NSwgMjU1LCA0MilgLCAyNTUsIDI1NSwgNDIsIDI1NSkKCWFzc2VydENvbG9yKHQsIGByZ2IoMjU1LCA0MiwgMjU1KWAsIDI1NSwgNDIsIDI1NSwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYHJnYig0MiwgMjU1LCAyNTUpYCwgNDIsIDI1NSwgMjU1LCAyNTUpCglhc3NlcnRDb2xvcih0LCBgcmdiYSgyNTUsIDI1NSwgMjU1LCAyNTUpYCwgMjU1LCAyNTUsIDI1NSwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYHJnYmEoMjU1LCAyNTUsIDI1NSwgNDIpYCwgMjU1LCAyNTUsIDI1NSwgNDIpCglhc3NlcnRDb2xvcih0LCBgcmdiYSgyNTUsIDI1NSwgNDIsIDI1NSlgLCAyNTUsIDI1NSwgNDIsIDI1NSkKCWFzc2VydENvbG9yKHQsIGByZ2JhKDI1NSwgNDIsIDI1NSwgMjU1KWAsIDI1NSwgNDIsIDI1NSwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYHJnYmEoNDIsIDI1NSwgMjU1LCAyNTUpYCwgNDIsIDI1NSwgMjU1LCAyNTUpCglhc3NlcnRDb2xvcih0LCBgcmdiYSgyNTUsIDI1NSwgMjU1LCAxLjApYCwgMjU1LCAyNTUsIDI1NSwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KWAsIDI1NSwgMjU1LCAyNTUsIDEyOCkKCWFzc2VydENvbG9yKHQsIGByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpYCwgMjU1LCAyNTUsIDI1NSwgNjQpCglhc3NlcnRDb2xvcih0LCBgcmdiYSgyNTUsIDI1NSwgMjU1LCAwKWAsIDI1NSwgMjU1LCAyNTUsIDApCglhc3NlcnRDb2xvcih0LCBgaHNsKDAsIDEwMCUsIDEwMCUpYCwgMjU1LCAyNTUsIDI1NSwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzbCgwLCAxLCAxKWAsIDI1NSwgMjU1LCAyNTUsIDI1NSkKCWFzc2VydENvbG9yKHQsIGBoc2woMCwgMjU1LCAyNTUpYCwgMjU1LCAyNTUsIDI1NSwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzbGEoMCwgMSwgMSwgMC41KWAsIDI1NSwgMjU1LCAyNTUsIDEyOCkKCWFzc2VydENvbG9yKHQsIGBoc2woMCwgMTAwJSwgNTAlKWAsIDI1NSwgMCwgMCwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzbCgwLCAxMDAlLCAyNSUpYCwgMTI4LCAwLCAwLCAyNTUpCglhc3NlcnRDb2xvcih0LCBgaHNsKDAsIDEwMCUsIDEyLjUlKWAsIDY0LCAwLCAwLCAyNTUpCglhc3NlcnRDb2xvcih0LCBgaHNsKDAsIDEwMCUsIDYuMjUlKWAsIDMzLCAwLCAwLCAyNTUpCglhc3NlcnRDb2xvcih0LCBgaHNsKDAsIDEwMCUsIDMuMTI1JSlgLCAxNSwgMCwgMCwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzbCgwLCAxMDAlLCAxLjU2MjUlKWAsIDgsIDAsIDAsIDI1NSkKCWFzc2VydENvbG9yKHQsIGBoc2woMGRlZywgMTAwJSwgMC41KWAsIDI1NSwgMCwgMCwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzbCgwZGVnLCAxMDAlLCAwLjI1KWAsIDEyOCwgMCwgMCwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzbCgwZGVnLCAxMDAlLCAwLjEyNSlgLCA2NCwgMCwgMCwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzbCgwZGVnLCAxMDAlLCAwLjA2MjUpYCwgMzMsIDAsIDAsIDI1NSkKCWFzc2VydENvbG9yKHQsIGBoc2woMGRlZywgMTAwJSwgMC4wMzEyNSlgLCAxNSwgMCwgMCwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzbCgwZGVnLCAxMDAlLCAwLjAxNTYyNSlgLCA4LCAwLCAwLCAyNTUpCglhc3NlcnRDb2xvcih0LCBgaHNsKDAsIDI1NSwgMC41KWAsIDI1NSwgMCwgMCwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzbCgwLCAyNTUsIDAuMjUpYCwgMTI4LCAwLCAwLCAyNTUpCglhc3NlcnRDb2xvcih0LCBgaHNsKDAsIDI1NSwgMC4xMjUpYCwgNjQsIDAsIDAsIDI1NSkKCWFzc2VydENvbG9yKHQsIGBoc2woMCwgMjU1LCAwLjA2MjUpYCwgMzMsIDAsIDAsIDI1NSkKCWFzc2VydENvbG9yKHQsIGBoc2woMCwgMjU1LCAwLjAzMTI1KWAsIDE1LCAwLCAwLCAyNTUpCglhc3NlcnRDb2xvcih0LCBgaHNsKDAsIDI1NSwgMC4wMTU2MjUpYCwgOCwgMCwgMCwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzbCgwLCAxLjAsIDAuNSlgLCAyNTUsIDAsIDAsIDI1NSkKCWFzc2VydENvbG9yKHQsIGBoc2woMCwgMS4wLCAwLjI1KWAsIDEyOCwgMCwgMCwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzbCgwLCAxLjAsIDAuMTI1KWAsIDY0LCAwLCAwLCAyNTUpCglhc3NlcnRDb2xvcih0LCBgaHNsKDAsIDEuMCwgMC4wNjI1KWAsIDMzLCAwLCAwLCAyNTUpCglhc3NlcnRDb2xvcih0LCBgaHNsKDAsIDEuMCwgMC4wMzEyNSlgLCAxNSwgMCwgMCwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzbCgwLCAxLjAsIDAuMDE1NjI1KWAsIDgsIDAsIDAsIDI1NSkKCWFzc2VydENvbG9yKHQsIGBoc3YoMCwgMTAwJSwgMTAwJSlgLCAyNTUsIDAsIDAsIDI1NSkKCWFzc2VydENvbG9yKHQsIGBoc3YoMCwgMTAwJSwgNTAlKWAsIDEyOCwgMCwgMCwgMjU1KQoJYXNzZXJ0Q29sb3IodCwgYGhzdigwLCAxMDAlLCAyNSUpYCwgNjQsIDAsIDAsIDI1NSkKCWFzc2VydENvbG9yKHQsIGBoc3YoMCwgMTAwJSwgMTIuNSUpYCwgMzMsIDAsIDAsIDI1NSkKCWFzc2VydENvbG9yKHQsIGBoc3YoMCwgMTAwJSwgNi4yNSUpYCwgMTUsIDAsIDAsIDI1NSkKCWFzc2VydENvbG9yKHQsIGBoc3YoMCwgMTAwJSwgMy4xMjUlKWAsIDgsIDAsIDAsIDI1NSkKCWFzc2VydENvbG9yKHQsIGBoc3YoMCwgMTAwJSwgMS41NjI1JSlgLCA1LCAwLCAwLCAyNTUpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestRgbToHsl",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestRgbToHsl(t *testing.T)",
                        "Source": "ewoJYXNzZXJ0UmdiVG9Ic2wodCwgMCwgMCwgMCwgMCwgMCwgMCkKCWFzc2VydFJnYlRvSHNsKHQsIDAuMSwgMC4xLCAwLjEsIDAsIDAsIDAuMSkKCWFzc2VydFJnYlRvSHNsKHQsIDAuNSwgMC41LCAwLjUsIDAsIDAsIDAuNSkKCWFzc2VydFJnYlRvSHNsKHQsIDAuNzUsIDAuNzUsIDAuNzUsIDAsIDAsIDAuNzUpCglhc3NlcnRSZ2JUb0hzbCh0LCAxLCAxLCAxLCAwLCAwLCAxKQoJYXNzZXJ0UmdiVG9Ic2wodCwgMC4wMiwgMCwgMCwgMCwgMSwgMC4wMSkKCWFzc2VydFJnYlRvSHNsKHQsIDAuMDQsIDAsIDAsIDAsIDEsIDAuMDIpCglhc3NlcnRSZ2JUb0hzbCh0LCAwLjA4LCAwLCAwLCAwLCAxLCAwLjA0KQoJYXNzZXJ0UmdiVG9Ic2wodCwgMC4xNiwgMCwgMCwgMCwgMSwgMC4wOCkKCWFzc2VydFJnYlRvSHNsKHQsIDAuMzIsIDAsIDAsIDAsIDEsIDAuMTYpCglhc3NlcnRSZ2JUb0hzbCh0LCAwLjM0LCAwLCAwLCAwLCAxLCAwLjE3KQoJYXNzZXJ0UmdiVG9Ic2wodCwgMC42MiwgMCwgMCwgMCwgMSwgMC4zMSkKCWFzc2VydFJnYlRvSHNsKHQsIDEsIDAsIDAsIDAsIDEsIDAuNSkKCWFzc2VydFJnYlRvSHNsKHQsIDAsIDAuMDIsIDAsIDEyMCwgMSwgMC4wMSkKCWFzc2VydFJnYlRvSHNsKHQsIDAsIDAuMDQsIDAsIDEyMCwgMSwgMC4wMikKCWFzc2VydFJnYlRvSHNsKHQsIDAsIDAuMDgsIDAsIDEyMCwgMSwgMC4wNCkKCWFzc2VydFJnYlRvSHNsKHQsIDAsIDAuMTYsIDAsIDEyMCwgMSwgMC4wOCkKCWFzc2VydFJnYlRvSHNsKHQsIDAsIDAuMzIsIDAsIDEyMCwgMSwgMC4xNikKCWFzc2VydFJnYlRvSHNsKHQsIDAsIDAuMzQsIDAsIDEyMCwgMSwgMC4xNykKCWFzc2VydFJnYlRvSHNsKHQsIDAsIDAuNjIsIDAsIDEyMCwgMSwgMC4zMSkKCWFzc2VydFJnYlRvSHNsKHQsIDAsIDEsIDAsIDEyMCwgMSwgMC41KQoJYXNzZXJ0UmdiVG9Ic2wodCwgMCwgMCwgMC4wMiwgMjQwLCAxLCAwLjAxKQoJYXNzZXJ0UmdiVG9Ic2wodCwgMCwgMCwgMC4wNCwgMjQwLCAxLCAwLjAyKQoJYXNzZXJ0UmdiVG9Ic2wodCwgMCwgMCwgMC4wOCwgMjQwLCAxLCAwLjA0KQoJYXNzZXJ0UmdiVG9Ic2wodCwgMCwgMCwgMC4xNiwgMjQwLCAxLCAwLjA4KQoJYXNzZXJ0UmdiVG9Ic2wodCwgMCwgMCwgMC4zMiwgMjQwLCAxLCAwLjE2KQoJYXNzZXJ0UmdiVG9Ic2wodCwgMCwgMCwgMC4zNCwgMjQwLCAxLCAwLjE3KQoJYXNzZXJ0UmdiVG9Ic2wodCwgMCwgMCwgMC42MiwgMjQwLCAxLCAwLjMxKQoJYXNzZXJ0UmdiVG9Ic2wodCwgMCwgMCwgMSwgMjQwLCAxLCAwLjUpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestRgbToHslSymmetry",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestRgbToHslSymmetry(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaCwgcywgbCBmbG9hdDY0Cgl2YXIgciwgZywgYiB1aW50OAoJaCwgcywgbCA9IFJnYlRvSHNsKDI1NSwgMCwgMjA0KQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMzEyKSwgaCkKCWFzc2VydC5FcXVhbChmbG9hdDY0KDEpLCBzKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMC41KSwgbCkKCXIsIGcsIGIgPSBIc2xUb1JnYihoLCBzLCBsKQoJYXNzZXJ0LkVxdWFsKHVpbnQ4KDI1NSksIHIpCglhc3NlcnQuRXF1YWwodWludDgoMCksIGcpCglhc3NlcnQuRXF1YWwodWludDgoMjA0KSwgYikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSaturateDesaturate",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSaturateDesaturate(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IGFzc2VydC5OZXcodCkKCXZhciBjb2xvciBDb2xvcgoJdmFyIGVyciBlcnJvcgoJY29sb3IsIGVyciA9IERlc2F0dXJhdGUoYCM4MDAwMDBgLCAxMDApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZShjb2xvci5FcXVhbHMoYCM0MDQwNDBgKSwgZm10LlNwcmludGYoIiV2IiwgY29sb3IpKQoJY29sb3IsIGVyciA9IERlc2F0dXJhdGUoYCNhZDQwMzhgLCAyMCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKGNvbG9yLkVxdWFscyhgIzk2NTQ0ZmApLCBmbXQuU3ByaW50ZigiJXYiLCBjb2xvcikpCgljb2xvciwgZXJyID0gU2F0dXJhdGUoYCNhZDQwMzhgLCAyMCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKGNvbG9yLkVxdWFscyhgI2M0MmIyMWApLCBmbXQuU3ByaW50ZigiJXYiLCBjb2xvcikpCn0=",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "Color": {
                        "Name": "Color",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Equals",
                                "Comment": "Return whether the given color is equal to this one in the 24-bit RGB (RGB255) color space",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "Equals(other any) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "HSI",
                                "Comment": "Return the current color as hue (out of 360°), saturation [0, 1], and intensity [0, 1].",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "float64"
                                    },
                                    {
                                        "Type": "float64"
                                    },
                                    {
                                        "Type": "float64"
                                    }
                                ],
                                "Signature": "HSI() (float64, float64, float64)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "HSL",
                                "Comment": "Return the current color as hue (out of 360°), saturation [0, 1], and lightness [0, 1].",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "float64"
                                    },
                                    {
                                        "Type": "float64"
                                    },
                                    {
                                        "Type": "float64"
                                    }
                                ],
                                "Signature": "HSL() (float64, float64, float64)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "HSV",
                                "Comment": "Return the current color as hue (out of 360°), saturation [0, 1], and value [0, 1].",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "float64"
                                    },
                                    {
                                        "Type": "float64"
                                    },
                                    {
                                        "Type": "float64"
                                    }
                                ],
                                "Signature": "HSV() (float64, float64, float64)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsZero",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsZero() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MarshalJSON",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "MarshalJSON() ([]byte, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NativeRGBA",
                                "Comment": "Return the color as a color.RGBA struct.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Name": "c",
                                        "Type": "color.RGBA"
                                    }
                                ],
                                "Signature": "NativeRGBA() c color.RGBA",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "RGBA",
                                "Comment": "Return the current color as a 32-bit uint quad, implementing the color.Color interface.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "uint32"
                                    },
                                    {
                                        "Type": "uint32"
                                    },
                                    {
                                        "Type": "uint32"
                                    },
                                    {
                                        "Type": "uint32"
                                    }
                                ],
                                "Signature": "RGBA() (uint32, uint32, uint32, uint32)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "RGBA255",
                                "Comment": "Return the current color as 4x 8-bit RGB values, each [0, 255].",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "uint8"
                                    },
                                    {
                                        "Type": "uint8"
                                    },
                                    {
                                        "Type": "uint8"
                                    },
                                    {
                                        "Type": "uint8"
                                    }
                                ],
                                "Signature": "RGBA255() (uint8, uint8, uint8, uint8)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "String",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "StringHSLA",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "StringHSLA() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "StringRGBA",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "StringRGBA() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MustParse",
                                "Comment": "Parse the given value into a Color or panic.",
                                "Arguments": [
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Color"
                                    }
                                ],
                                "Signature": "MustParse(value any) Color",
                                "Source": "ewoJaWYgY29sb3IsIGVyciA6PSBQYXJzZSh2YWx1ZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBjb2xvcgoJfSBlbHNlIHsKCQlwYW5pYyhlcnIpCgl9Cn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Parse",
                                "Comment": "Parse the given value into a Color or return an error.",
                                "Arguments": [
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Color"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Parse(value any) (Color, error)",
                                "Source": "ewoJdmFyIGNvbG9yQyBDb2xvcgoJY29sb3JDLmEgPSAxCglpZiBjLCBvayA6PSB2YWx1ZS4oQ29sb3IpOyBvayB7CgkJcmV0dXJuIGMsIG5pbAoJfSBlbHNlIHsKCQl2YXIgY29sb3JTID0gZm10LlNwcmludGYoIiV2IiwgdmFsdWUpCgkJY29sb3JTID0gc3RyaW5ncy5UcmltU3BhY2UoY29sb3JTKQoJCWNvbG9yUyA9IHN0cmluZ3MuVG9Mb3dlcihjb2xvclMpCgkJaWYgYywgb2sgOj0gQ29sb3JOYW1lc1tjb2xvclNdOyBvayAmJiBzdHJpbmdzLlRyaW1TcGFjZShjKSAhPSBgYCB7CgkJCWNvbG9yUyA9IGMKCQl9CgkJaWYgcmdiYSA6PSByeHV0aWwuTWF0Y2gocmdiYVBhdHRlcm4sIGNvbG9yUyk7IHJnYmEgIT0gbmlsIHsKCQkJZm9yIHYsIGZhY3RvclMgOj0gcmFuZ2UgcmdiYS5OYW1lZENhcHR1cmVzKCkgewoJCQkJdmFyIGRlbm9tIGZsb2F0NjQgPSAweEZGCgkJCQlpZiBzdHJpbmdzLkhhc1N1ZmZpeChmYWN0b3JTLCBgJWApIHsKCQkJCQlkZW5vbSA9IDEwMAoJCQkJCWZhY3RvclMgPSBmYWN0b3JTWzpsZW4oZmFjdG9yUyktMV0KCQkJCX0KCQkJCWlmIGZhY3RvckYsIGVyciA6PSBzdHJpbmd1dGlsLkNvbnZlcnRUb0Zsb2F0KGZhY3RvclMpOyBlcnIgPT0gbmlsIHsKCQkJCQlpZiB2ICE9IGBhYCAmJiBmYWN0b3JGID4gMSB7CgkJCQkJCWZhY3RvckYgPSAoZmFjdG9yRiAvIGRlbm9tKQoJCQkJCX0KCQkJCQlzd2l0Y2ggdiB7CgkJCQkJY2FzZSBgcmA6CgkJCQkJCWNvbG9yQy5yID0gZmFjdG9yRgoJCQkJCWNhc2UgYGdgOgoJCQkJCQljb2xvckMuZyA9IGZhY3RvckYKCQkJCQljYXNlIGBiYDoKCQkJCQkJY29sb3JDLmIgPSBmYWN0b3JGCgkJCQkJY2FzZSBgYWA6CgkJCQkJCWlmIGZhY3RvclMgIT0gYGAgewoJCQkJCQkJaWYgZmFjdG9yRiA+IDEgewoJCQkJCQkJCWZhY3RvckYgPSAoZmFjdG9yRiAvIGRlbm9tKQoJCQkJCQkJfQoJCQkJCQkJY29sb3JDLmEgPSBmYWN0b3JGCgkJCQkJCX0KCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCXJldHVybiBDb2xvcnt9LCBmbXQuRXJyb3JmKCJJbnZhbGlkIHJnYmEoKSB2YWx1ZSBpbiAnJXYnIHBvc2l0aW9uOiAldiIsIHYsIGVycikKCQkJCX0KCQkJfQoJCX0gZWxzZSBpZiBoc2xhIDo9IHJ4dXRpbC5NYXRjaChoc2xhUGF0dGVybiwgY29sb3JTKTsgaHNsYSAhPSBuaWwgewoJCQl2YXIgaCwgcywgbHYgZmxvYXQ2NAoJCQl2YXIgaXNIU1YgYm9vbAoJCQlpZiBoc2xhLkdyb3VwKGBMb3JWYCkgPT0gYHZgIHsKCQkJCWlzSFNWID0gdHJ1ZQoJCQl9CgkJCWZvciB2LCBmYWN0b3JTIDo9IC8vIGhhbmRsZXMgaHNsKCksIGhzbGEoKSwgaHN2KCksIGhzdmEoKSBwYXR0ZXJucwoJCQlyYW5nZSBoc2xhLk5hbWVkQ2FwdHVyZXMoKSB7CgkJCQlpZiB2ID09IGBMb3JWYCB7CgkJCQkJY29udGludWUKCQkJCX0KCQkJCXZhciBkZW5vbSBmbG9hdDY0ID0gMQoJCQkJaWYgc3RyaW5ncy5IYXNTdWZmaXgoZmFjdG9yUywgYCVgKSB7CgkJCQkJZGVub20gPSAxMDAKCQkJCQlmYWN0b3JTID0gc3RyaW5ncy5UcmltU3VmZml4KGZhY3RvclMsIGAlYCkKCQkJCX0KCQkJCWlmIGZhY3RvckYsIGVyciA6PSBzdHJpbmd1dGlsLkNvbnZlcnRUb0Zsb2F0KGZhY3RvclMpOyBlcnIgPT0gbmlsIHsKCQkJCQlpZiBmYWN0b3JGID4gMSAmJiBkZW5vbSA9PSAxIHsKCQkJCQkJZGVub20gPSAweEZGCgkJCQkJfQoJCQkJCXN3aXRjaCB2IHsKCQkJCQljYXNlIGBoYDoKCQkJCQkJaCA9IGZhY3RvckYKCQkJCQljYXNlIGBzYDoKCQkJCQkJcyA9IChmYWN0b3JGIC8gZGVub20pCgkJCQkJY2FzZSBgbHZgOgoJCQkJCQlsdiA9IChmYWN0b3JGIC8gZGVub20pCgkJCQkJY2FzZSBgYWA6CgkJCQkJCWlmIGZhY3RvclMgIT0gYGAgewoJCQkJCQkJaWYgZmFjdG9yRiA+IDEgewoJCQkJCQkJCWZhY3RvckYgPSAoZmFjdG9yRiAvIGRlbm9tKQoJCQkJCQkJfQoJCQkJCQkJY29sb3JDLmEgPSBmYWN0b3JGCgkJCQkJCX0KCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCXJldHVybiBDb2xvcnt9LCBmbXQuRXJyb3JmKCJJbnZhbGlkIHJnYmEoKSB2YWx1ZSBpbiAnJXYnIHBvc2l0aW9uOiAldiIsIHYsIGVycikKCQkJCX0KCQkJfQoJCQlpZiBpc0hTViB7CgkJCQljb2xvckMuciwgY29sb3JDLmcsIGNvbG9yQy5iID0gaHN2MnJnYihoLCBzLCBsdikKCQkJfSBlbHNlIHsKCQkJCWNvbG9yQy5yLCBjb2xvckMuZywgY29sb3JDLmIgPSBoc2wycmdiKGgsIHMsIGx2KQoJCQl9CgkJfSBlbHNlIGlmIGhleGEgOj0gcnh1dGlsLk1hdGNoKGhleFBhdHRlcm4sIGNvbG9yUyk7IGhleGEgIT0gbmlsIHsKCQkJZm9yIHYsIGhleGJ5dGUgOj0gcmFuZ2UgaGV4YS5OYW1lZENhcHR1cmVzKCkgewoJCQkJaWYgaGV4Ynl0ZSAhPSBgYCB7CgkJCQkJaWYgdkIsIGVyciA6PSBoZXguRGVjb2RlU3RyaW5nKGhleGJ5dGUpOyBlcnIgPT0gbmlsIHsKCQkJCQkJaWYgbGVuKHZCKSA9PSAxIHsKCQkJCQkJCXN3aXRjaCB2IHsKCQkJCQkJCWNhc2UgYHJgOgoJCQkJCQkJCWNvbG9yQy5yID0gKGZsb2F0NjQodkJbMF0pIC8gMHhGRikKCQkJCQkJCWNhc2UgYGdgOgoJCQkJCQkJCWNvbG9yQy5nID0gKGZsb2F0NjQodkJbMF0pIC8gMHhGRikKCQkJCQkJCWNhc2UgYGJgOgoJCQkJCQkJCWNvbG9yQy5iID0gKGZsb2F0NjQodkJbMF0pIC8gMHhGRikKCQkJCQkJCWNhc2UgYGFgOgoJCQkJCQkJCWNvbG9yQy5hID0gKGZsb2F0NjQodkJbMF0pIC8gMHhGRikKCQkJCQkJCX0KCQkJCQkJfSBlbHNlIHsKCQkJCQkJCXJldHVybiBDb2xvcnt9LCBmbXQuRXJyb3JmKCJJbnZhbGlkIGhleCBieXRlICcldiciLCB2QikKCQkJCQkJfQoJCQkJCX0gZWxzZSB7CgkJCQkJCXJldHVybiBDb2xvcnt9LCBmbXQuRXJyb3JmKCJJbnZhbGlkIGhleCB2YWx1ZSAnJXYnIiwgaGV4Ynl0ZSkKCQkJCQl9CgkJCQl9CgkJCX0KCQl9Cgl9CglyZXR1cm4gY29sb3JDLCBuaWwKfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Darken",
                                "Comment": "Darken the given color by a certain percent.  Consistent with the results of the\nSass darken() function.",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "percent",
                                        "Type": "int"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Color"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Darken(in any, percent int) (Color, error)",
                                "Source": "ewoJcmV0dXJuIGFkanVzdChsaWdodG5lc3MsIGluLCAtMSooZmxvYXQ2NChwZXJjZW50KS8xMDAuMCkpCn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Lighten",
                                "Comment": "Lighten the given color by a certain percent.  Consistent with the results of the\nSass lighten() function.",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "percent",
                                        "Type": "int"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Color"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Lighten(in any, percent int) (Color, error)",
                                "Source": "ewoJcmV0dXJuIGFkanVzdChsaWdodG5lc3MsIGluLCBmbG9hdDY0KHBlcmNlbnQpLzEwMC4wKQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Saturate",
                                "Comment": "Saturate the given color by a certain percent.  Consistent with the results of the\nSass saturate() function.",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "percent",
                                        "Type": "int"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Color"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Saturate(in any, percent int) (Color, error)",
                                "Source": "ewoJcmV0dXJuIGFkanVzdChzYXR1cmF0aW9uLCBpbiwgZmxvYXQ2NChwZXJjZW50KS8xMDAuMCkKfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Desaturate",
                                "Comment": "Desaturate the given color by a certain percent.  Consistent with the results of the\nSass desaturate() function.",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "percent",
                                        "Type": "int"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Color"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Desaturate(in any, percent int) (Color, error)",
                                "Source": "ewoJcmV0dXJuIGFkanVzdChzYXR1cmF0aW9uLCBpbiwgLTEqKGZsb2F0NjQocGVyY2VudCkvMTAwLjApKQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "AdjustHue",
                                "Comment": "Adjust the hue of the given color by the specified number of degrees.",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "degrees",
                                        "Type": "float64"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Color"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "AdjustHue(in any, degrees float64) (Color, error)",
                                "Source": "ewoJcmV0dXJuIGFkanVzdChodWUsIGluLCBkZWdyZWVzKQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "MixN",
                                "Comment": "Mix two colors, producing a third.  The weight value specifies how much of the first color\nshould be included.  Consistent with the results of the Sass mix() function.",
                                "Arguments": [
                                    {
                                        "Name": "first",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "second",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "weight",
                                        "Type": "float64"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Color"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "MixN(first any, second any, weight float64) (Color, error)",
                                "Source": "ewoJaWYgZmlyc3RDLCBlcnIgOj0gUGFyc2UoZmlyc3QpOyBlcnIgPT0gbmlsIHsKCQlpZiBzZWNvbmRDLCBlcnIgOj0gUGFyc2Uoc2Vjb25kKTsgZXJyID09IG5pbCB7CgkJCXZhciBmYWN0b3IgPSAyKndlaWdodCAtIDEKCQkJdmFyIGFscGhhID0gZmlyc3RDLmEgLSBzZWNvbmRDLmEKCQkJdmFyIHdlaWdodDEsIHdlaWdodDIgZmxvYXQ2NAoJCQlpZiBmYWN0b3IqYWxwaGEgPT0gLTEgewoJCQkJd2VpZ2h0MSA9IGZhY3RvcgoJCQl9IGVsc2UgewoJCQkJd2VpZ2h0MSA9ICgoZmFjdG9yICsgYWxwaGEpIC8gKDEgKyBmYWN0b3IqYWxwaGEpKSArIDEKCQkJfQoJCQl3ZWlnaHQxID0gd2VpZ2h0MSAvIDIKCQkJd2VpZ2h0MiA9IDEgLSB3ZWlnaHQxCgkJCXZhciBtaXhlZCA9IENvbG9ye3I6ICh3ZWlnaHQxICogZmlyc3RDLnIpICsgKHdlaWdodDIgKiBzZWNvbmRDLnIpLCBnOiAod2VpZ2h0MSAqIGZpcnN0Qy5nKSArICh3ZWlnaHQyICogc2Vjb25kQy5nKSwgYjogKHdlaWdodDEgKiBmaXJzdEMuYikgKyAod2VpZ2h0MiAqIHNlY29uZEMuYiksIGE6IChmaXJzdEMuYSAqIHdlaWdodCkgKyAoc2Vjb25kQy5hICogKDEgLSB3ZWlnaHQpKX0KCQkJcmV0dXJuIG1peGVkLCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gQ29sb3J7fSwgZm10LkVycm9yZigic2Vjb25kIGNvbG9yOiAldiIsIGVycikKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBDb2xvcnt9LCBmbXQuRXJyb3JmKCJmaXJzdCBjb2xvcjogJXYiLCBlcnIpCgl9Cn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Mix",
                                "Comment": "Mix two colors in equal parts, producing a third.",
                                "Arguments": [
                                    {
                                        "Name": "first",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "second",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Color"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Mix(first any, second any) (Color, error)",
                                "Source": "ewoJcmV0dXJuIE1peE4oZmlyc3QsIHNlY29uZCwgMC41KQp9",
                                "IsPackageLevel": true
                            }
                        ],
                        "Source": "dHlwZSBDb2xvciBzdHJ1Y3QgewoKfQo=",
                        "HasUnexportedFields": true
                    }
                }
            },
            {
                "Name": "convutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/convutil",
                "ImportPath": "convutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "",
                "MainFunction": false,
                "CommentWordCount": 0,
                "LineCount": 590,
                "SourceLineCount": 507,
                "FunctionCount": 15,
                "TypeCount": 4,
                "ConstantCount": 55,
                "VariableCount": 1,
                "Statistics": {
                    "Mean": 0,
                    "StdDev": 0,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 0,
                    "Minimum": 0,
                    "Maximum": 0
                },
                "Files": [
                    {
                        "Name": "convutil.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/mathutil",
                                "Alias": "mathutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/martinlindhe/unit",
                                "Alias": "unit"
                            }
                        ],
                        "Size": 3641,
                        "LineCount": 192,
                        "SourceLineCount": 161,
                        "FunctionCount": 4,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 1
                    },
                    {
                        "Name": "convutil_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/assert",
                                "Alias": "assert"
                            }
                        ],
                        "Size": 2576,
                        "LineCount": 66,
                        "SourceLineCount": 51,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "si.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/mathutil",
                                "Alias": "mathutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 3022,
                        "LineCount": 128,
                        "SourceLineCount": 110,
                        "FunctionCount": 5,
                        "TypeCount": 2,
                        "ConstantCount": 36,
                        "VariableCount": 0
                    },
                    {
                        "Name": "types.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "unicode",
                                "Alias": "unicode"
                            }
                        ],
                        "Size": 3813,
                        "LineCount": 204,
                        "SourceLineCount": 185,
                        "FunctionCount": 6,
                        "TypeCount": 2,
                        "ConstantCount": 19,
                        "VariableCount": 0
                    }
                ],
                "Constants": [
                    {
                        "Name": "AU",
                        "Immutable": true
                    },
                    {
                        "Name": "Atto",
                        "Immutable": true,
                        "Expression": "-18"
                    },
                    {
                        "Name": "Brontobyte",
                        "Type": "Bytes",
                        "Immutable": true,
                        "Expression": "1237940039285380274899124224"
                    },
                    {
                        "Name": "Byte",
                        "Type": "Bytes",
                        "Immutable": true,
                        "Expression": "1"
                    },
                    {
                        "Name": "Celsius",
                        "Immutable": true
                    },
                    {
                        "Name": "Centi",
                        "Immutable": true,
                        "Expression": "-2"
                    },
                    {
                        "Name": "Deca",
                        "Immutable": true,
                        "Expression": "1"
                    },
                    {
                        "Name": "Deci",
                        "Immutable": true,
                        "Expression": "-1"
                    },
                    {
                        "Name": "Exa",
                        "Immutable": true,
                        "Expression": "18"
                    },
                    {
                        "Name": "Exabyte",
                        "Type": "Bytes",
                        "Immutable": true,
                        "Expression": "1152921504606846976"
                    },
                    {
                        "Name": "Fahrenheit",
                        "Immutable": true
                    },
                    {
                        "Name": "Feet",
                        "Immutable": true
                    },
                    {
                        "Name": "Femto",
                        "Immutable": true,
                        "Expression": "-15"
                    },
                    {
                        "Name": "GeneralUnits",
                        "Type": "UnitFamily",
                        "Immutable": true,
                        "Expression": "iota"
                    },
                    {
                        "Name": "Giga",
                        "Immutable": true,
                        "Expression": "9"
                    },
                    {
                        "Name": "Gigabyte",
                        "Type": "Bytes",
                        "Immutable": true,
                        "Expression": "1073741824"
                    },
                    {
                        "Name": "Hecto",
                        "Immutable": true,
                        "Expression": "2"
                    },
                    {
                        "Name": "Invalid",
                        "Type": "Unit",
                        "Immutable": true,
                        "Expression": "iota"
                    },
                    {
                        "Name": "Kelvin",
                        "Immutable": true
                    },
                    {
                        "Name": "Kilo",
                        "Immutable": true,
                        "Expression": "3"
                    },
                    {
                        "Name": "Kilobyte",
                        "Type": "Bytes",
                        "Immutable": true,
                        "Expression": "1024"
                    },
                    {
                        "Name": "KilometersPerHour",
                        "Immutable": true
                    },
                    {
                        "Name": "LengthUnits",
                        "Immutable": true
                    },
                    {
                        "Name": "Lightminutes",
                        "Immutable": true
                    },
                    {
                        "Name": "Lightseconds",
                        "Immutable": true
                    },
                    {
                        "Name": "Lightyears",
                        "Immutable": true
                    },
                    {
                        "Name": "Mega",
                        "Immutable": true,
                        "Expression": "6"
                    },
                    {
                        "Name": "Megabyte",
                        "Type": "Bytes",
                        "Immutable": true,
                        "Expression": "1048576"
                    },
                    {
                        "Name": "Meters",
                        "Immutable": true
                    },
                    {
                        "Name": "MetersPerSecond",
                        "Immutable": true
                    },
                    {
                        "Name": "Micro",
                        "Immutable": true,
                        "Expression": "-6"
                    },
                    {
                        "Name": "Miles",
                        "Immutable": true
                    },
                    {
                        "Name": "MilesPerHour",
                        "Immutable": true
                    },
                    {
                        "Name": "Milli",
                        "Immutable": true,
                        "Expression": "-3"
                    },
                    {
                        "Name": "Nano",
                        "Immutable": true,
                        "Expression": "-9"
                    },
                    {
                        "Name": "NauticalMiles",
                        "Immutable": true
                    },
                    {
                        "Name": "Peta",
                        "Immutable": true,
                        "Expression": "15"
                    },
                    {
                        "Name": "Petabyte",
                        "Type": "Bytes",
                        "Immutable": true,
                        "Expression": "1125899906842624"
                    },
                    {
                        "Name": "Pico",
                        "Immutable": true,
                        "Expression": "-12"
                    },
                    {
                        "Name": "Quecto",
                        "Immutable": true,
                        "Expression": "-30"
                    },
                    {
                        "Name": "Quetta",
                        "Type": "SIExponents",
                        "Immutable": true,
                        "Expression": "30"
                    },
                    {
                        "Name": "Quettabyte",
                        "Type": "Bytes",
                        "Immutable": true,
                        "Expression": "1267650600228229401496703205376"
                    },
                    {
                        "Name": "Ronna",
                        "Immutable": true,
                        "Expression": "27"
                    },
                    {
                        "Name": "Ronnabyte",
                        "Type": "Bytes",
                        "Immutable": true,
                        "Expression": "1237940039285380274899124224"
                    },
                    {
                        "Name": "Ronto",
                        "Immutable": true,
                        "Expression": "-27"
                    },
                    {
                        "Name": "SpeedUnits",
                        "Immutable": true
                    },
                    {
                        "Name": "TemperatureUnits",
                        "Immutable": true
                    },
                    {
                        "Name": "Tera",
                        "Immutable": true,
                        "Expression": "12"
                    },
                    {
                        "Name": "Terabyte",
                        "Type": "Bytes",
                        "Immutable": true,
                        "Expression": "1099511627776"
                    },
                    {
                        "Name": "Yocto",
                        "Immutable": true,
                        "Expression": "-24"
                    },
                    {
                        "Name": "Yotta",
                        "Immutable": true,
                        "Expression": "24"
                    },
                    {
                        "Name": "Yottabyte",
                        "Type": "Bytes",
                        "Immutable": true,
                        "Expression": "1208925819614629174706176"
                    },
                    {
                        "Name": "Zepto",
                        "Immutable": true,
                        "Expression": "-21"
                    },
                    {
                        "Name": "Zetta",
                        "Immutable": true,
                        "Expression": "21"
                    },
                    {
                        "Name": "Zettabyte",
                        "Type": "Bytes",
                        "Immutable": true,
                        "Expression": "1180591620717411303424"
                    }
                ],
                "Variables": [
                    {
                        "Name": "ConvertRoundToPlaces",
                        "Expression": "6"
                    }
                ],
                "Functions": [
                    {
                        "Name": "Convert",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "from",
                                "Type": "any"
                            },
                            {
                                "Name": "to",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "Convert(in any, from any, to any) (float64, error)",
                        "Source": "ewoJaWYgdiwgZXJyIDo9IEV4YWN0Q29udmVydChpbiwgZnJvbSwgdG8pOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gbWF0aHV0aWwuUm91bmRQbGFjZXModiwgQ29udmVydFJvdW5kVG9QbGFjZXMpLCBuaWwKCX0gZWxzZSB7CgkJcmV0dXJuIDAsIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExactConvert",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "from",
                                "Type": "any"
                            },
                            {
                                "Name": "to",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ExactConvert(in any, from any, to any) (float64, error)",
                        "Source": "ewoJdmFyIGZyb21VID0gcGFyc2VVbml0KGZyb20pCgl2YXIgdG9VID0gcGFyc2VVbml0KHRvKQoJaWYgIWZyb21VLklzVmFsaWQoKSB7CgkJcmV0dXJuIDAsIGZtdC5FcnJvcmYoImludmFsaWQgJ2Zyb20nIHVuaXQiKQoJfQoJaWYgIXRvVS5Jc1ZhbGlkKCkgewoJCXJldHVybiAwLCBmbXQuRXJyb3JmKCJpbnZhbGlkICd0bycgdW5pdCIpCgl9CglpZiB2LCBlcnIgOj0gc3RyaW5ndXRpbC5Db252ZXJ0VG9GbG9hdChpbik7IGVyciA9PSBuaWwgewoJCWlmIGZyb20gPT0gdG8gewoJCQlyZXR1cm4gdiwgbmlsCgkJfQoJCWlmIGZyb21VLkZhbWlseSgpICE9IHRvVS5GYW1pbHkoKSB7CgkJCXJldHVybiAwLCBmbXQuRXJyb3JmKCJ1bml0cyAnJXYnIGFuZCAnJXYnIGFyZSBub3QgY29udmVydGlibGUgdG8gZWFjaCBvdGhlciIsIGZyb21VLCB0b1UpCgkJfQoJCXZhciBiYXNlQ29udmVydCA9IGZ1bmMoKSBhbnkgewoJCQlzd2l0Y2ggZnJvbVUuRmFtaWx5KCkgewoJCQljYXNlIFRlbXBlcmF0dXJlVW5pdHM6CgkJCQlyZXR1cm4gY29udmVydFRlbXBlcmF0dXJlKHYsIGZyb21VLCB0b1UpCgkJCWNhc2UgU3BlZWRVbml0czoKCQkJCXJldHVybiBjb252ZXJ0U3BlZWQodiwgZnJvbVUsIHRvVSkKCQkJY2FzZSBMZW5ndGhVbml0czoKCQkJCXJldHVybiBjb252ZXJ0RGlzdGFuY2UodiwgZnJvbVUsIHRvVSkKCQkJfQoJCQlyZXR1cm4gZm10LkVycm9yZigiY2Fubm90IGNvbnZlcnQgZnJvbSAldiB0byAldiIsIGZyb20sIHRvKQoJCX0KCQl2YXIgY29udmVydGVkID0gYmFzZUNvbnZlcnQoKQoJCWlmIHZGLCBvayA6PSBjb252ZXJ0ZWQuKGZsb2F0NjQpOyBvayB7CgkJCXJldHVybiB2RiwgbmlsCgkJfSBlbHNlIGlmIGVyciwgb2sgOj0gY29udmVydGVkLihlcnJvcik7IG9rIHsKCQkJcmV0dXJuIDAsIGVycgoJCX0gZWxzZSB7CgkJCXJldHVybiAwLCBmbXQuRXJyb3JmKCJ1bnNwZWNpZmllZCBlcnJvciIpCgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gMCwgZXJyCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustConvert",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "from",
                                "Type": "any"
                            },
                            {
                                "Name": "to",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "MustConvert(in any, from any, to any) float64",
                        "Source": "ewoJaWYgdmFsdWUsIGVyciA6PSBDb252ZXJ0KGluLCBmcm9tLCB0byk7IGVyciA9PSBuaWwgewoJCXJldHVybiB2YWx1ZQoJfSBlbHNlIHsKCQlwYW5pYyhlcnIuRXJyb3IoKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustExactConvert",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "from",
                                "Type": "any"
                            },
                            {
                                "Name": "to",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "MustExactConvert(in any, from any, to any) float64",
                        "Source": "ewoJaWYgdmFsdWUsIGVyciA6PSBDb252ZXJ0KGluLCBmcm9tLCB0byk7IGVyciA9PSBuaWwgewoJCXJldHVybiB2YWx1ZQoJfSBlbHNlIHsKCQlwYW5pYyhlcnIuRXJyb3IoKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestByteStringer",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestByteStringer(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IGFzc2VydC5OZXcodCkKCWFzc2VydC5FcXVhbChgMUJgLCBCeXRlLlN0cmluZygpKQoJYXNzZXJ0LkVxdWFsKGAxS0JgLCBLaWxvYnl0ZS5TdHJpbmcoKSkKCWFzc2VydC5FcXVhbChgMU1CYCwgTWVnYWJ5dGUuU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYDFHQmAsIEdpZ2FieXRlLlN0cmluZygpKQoJYXNzZXJ0LkVxdWFsKGAxVEJgLCBUZXJhYnl0ZS5TdHJpbmcoKSkKCWFzc2VydC5FcXVhbChgMVBCYCwgUGV0YWJ5dGUuU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYDFFQmAsIEV4YWJ5dGUuU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYDFaQmAsIFpldHRhYnl0ZS5TdHJpbmcoKSkKCWFzc2VydC5FcXVhbChgMVlCYCwgWW90dGFieXRlLlN0cmluZygpKQoJYXNzZXJ0LkVxdWFsKGAxUkJgLCBSb25uYWJ5dGUuU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYDFRQmAsIFF1ZXR0YWJ5dGUuU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYDUxMkJgLCAoNTEyICogQnl0ZSkuU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYDUxMktCYCwgKDUxMiAqIEtpbG9ieXRlKS5TdHJpbmcoKSkKCWFzc2VydC5FcXVhbChgNTEyTUJgLCAoNTEyICogTWVnYWJ5dGUpLlN0cmluZygpKQoJYXNzZXJ0LkVxdWFsKGA1MTJHQmAsICg1MTIgKiBHaWdhYnl0ZSkuU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYDUxMlRCYCwgKDUxMiAqIFRlcmFieXRlKS5TdHJpbmcoKSkKCWFzc2VydC5FcXVhbChgNTEyUEJgLCAoNTEyICogUGV0YWJ5dGUpLlN0cmluZygpKQoJYXNzZXJ0LkVxdWFsKGA1MTJFQmAsICg1MTIgKiBFeGFieXRlKS5TdHJpbmcoKSkKCWFzc2VydC5FcXVhbChgNTEyWkJgLCAoNTEyICogWmV0dGFieXRlKS5TdHJpbmcoKSkKCWFzc2VydC5FcXVhbChgNTEyWUJgLCAoNTEyICogWW90dGFieXRlKS5TdHJpbmcoKSkKCWFzc2VydC5FcXVhbChgNTEyUkJgLCAoNTEyICogUm9ubmFieXRlKS5TdHJpbmcoKSkKCWFzc2VydC5FcXVhbChgNTEyUUJgLCAoNTEyICogUXVldHRhYnl0ZSkuU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYDAuNUtCYCwgQnl0ZXMoNTEyKS5UbyhLaWxvYnl0ZSkpCglhc3NlcnQuRXF1YWwoYDAuMDAwNU1CYCwgQnl0ZXMoNTEyKS5UbyhNZWdhYnl0ZSkpCglhc3NlcnQuRXF1YWwoYDAuMDAwMDAwNUdCYCwgQnl0ZXMoNTEyKS5UbyhHaWdhYnl0ZSkpCglhc3NlcnQuRXF1YWwoYDAuMDAwMDAwMDAwNVRCYCwgQnl0ZXMoNTEyKS5UbyhUZXJhYnl0ZSkpCglhc3NlcnQuRXF1YWwoYDAuMDAwMDAwMDAwMDAwNVBCYCwgQnl0ZXMoNTEyKS5UbyhQZXRhYnl0ZSkpCglhc3NlcnQuRXF1YWwoYDAuMDAwMDAwMDAwMDAwMDAwNEVCYCwgQnl0ZXMoNTEyKS5UbyhFeGFieXRlKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestConvert",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestConvert(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IGFzc2VydC5OZXcodCkKCWFzc2VydC5FcXVhbFZhbHVlcygwLCBNdXN0Q29udmVydCgzMiwgRmFocmVuaGVpdCwgQ2Vsc2l1cykpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMCwgTXVzdENvbnZlcnQoLTQ1OS42NywgRmFocmVuaGVpdCwgS2VsdmluKSkKCWFzc2VydC5FcXVhbFZhbHVlcygzMiwgTXVzdENvbnZlcnQoMCwgQ2Vsc2l1cywgRmFocmVuaGVpdCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMjczLjE1LCBNdXN0Q29udmVydCgwLCBDZWxzaXVzLCBLZWx2aW4pKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKC0yNzMuMTUsIE11c3RDb252ZXJ0KDAsIEtlbHZpbiwgQ2Vsc2l1cykpCglhc3NlcnQuRXF1YWxWYWx1ZXMoLTQ1OS42NywgTXVzdENvbnZlcnQoMCwgS2VsdmluLCBGYWhyZW5oZWl0KSkKCWFzc2VydC5FcXVhbFZhbHVlcygxNjA5LjM0NCwgTXVzdENvbnZlcnQoMSwgTWlsZXMsIE1ldGVycykpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMSwgTXVzdENvbnZlcnQoMTYwOS4zNDQsIE1ldGVycywgTWlsZXMpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDQyMDAsIE11c3RDb252ZXJ0KDIuNjA5NzU5MDA3Mzk3LCBNaWxlcywgTWV0ZXJzKSkKCWFzc2VydC5FcXVhbFZhbHVlcygyLjYwOTc1OTAwMDAwMCwgTXVzdENvbnZlcnQoNDIwMCwgTWV0ZXJzLCBNaWxlcykpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMSwgTXVzdENvbnZlcnQoOS40NjA3MzA0NzI1ODA4ZSsxNSwgTWV0ZXJzLCBMaWdodHllYXJzKSkKCWFzc2VydC5FcXVhbFZhbHVlcyg5LjQ2MDczMDQ3MjU4MDhlKzE1LCBNdXN0Q29udmVydCgxLCBMaWdodHllYXJzLCBNZXRlcnMpKQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "Bytes": {
                        "Name": "Bytes",
                        "MetaType": "float64",
                        "Methods": [
                            {
                                "Name": "Auto",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "float64"
                                    },
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "Auto() (float64, string)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Convert",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "to",
                                        "Type": "Bytes"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "float64"
                                    },
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "Convert(to Bytes) (float64, string)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Format",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "format",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "as",
                                        "Type": "...Bytes"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "Format(format string, as ...Bytes) string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "String",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "To",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "unit",
                                        "Type": "Bytes"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "To(unit Bytes) string",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBCeXRlcyBmbG9hdDY0"
                    },
                    "SIExponents": {
                        "Name": "SIExponents",
                        "MetaType": "int",
                        "Source": "dHlwZSBTSUV4cG9uZW50cyBpbnQ="
                    },
                    "Unit": {
                        "Name": "Unit",
                        "MetaType": "int",
                        "Methods": [
                            {
                                "Name": "Family",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "UnitFamily"
                                    }
                                ],
                                "Signature": "Family() UnitFamily",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsValid",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsValid() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "LongString",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "LongString() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "String",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MustParseUnit",
                                "Arguments": [
                                    {
                                        "Name": "unit",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Unit"
                                    }
                                ],
                                "Signature": "MustParseUnit(unit string) Unit",
                                "Source": "ewoJaWYgdW5pdCwgZXJyIDo9IFBhcnNlVW5pdCh1bml0KTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIHVuaXQKCX0gZWxzZSB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9Cn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "ParseUnit",
                                "Arguments": [
                                    {
                                        "Name": "unit",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Unit"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "ParseUnit(unit string) (Unit, error)",
                                "Source": "ewoJdW5pdCA9IHN0cmluZ3MuVHJpbVNwYWNlKHVuaXQpCglzd2l0Y2ggdW5pdCB7CgljYXNlIGBDYDoKCQlyZXR1cm4gQ2Vsc2l1cywgbmlsCgljYXNlIGBGYDoKCQlyZXR1cm4gRmFocmVuaGVpdCwgbmlsCgljYXNlIGBLYDoKCQlyZXR1cm4gS2VsdmluLCBuaWwKCWNhc2UgYEtQSGA6CgkJcmV0dXJuIEtpbG9tZXRlcnNQZXJIb3VyLCBuaWwKCWNhc2UgYE1QSGA6CgkJcmV0dXJuIE1pbGVzUGVySG91ciwgbmlsCgljYXNlIGBMeWA6CgkJcmV0dXJuIExpZ2h0eWVhcnMsIG5pbAoJY2FzZSBgTG1gOgoJCXJldHVybiBMaWdodG1pbnV0ZXMsIG5pbAoJY2FzZSBgTHNgOgoJCXJldHVybiBMaWdodHNlY29uZHMsIG5pbAoJY2FzZSBgTWAsIGBOTWA6CgkJcmV0dXJuIE5hdXRpY2FsTWlsZXMsIG5pbAoJfQoJdW5pdCA9IHN0cmluZ3MuVG9Mb3dlcih1bml0KQoJdW5pdCA9IHN0cmluZ3MuTWFwKGZ1bmMociBydW5lKSBydW5lIHsKCQlzd2l0Y2ggciB7CgkJY2FzZSAnLScsICcvJywgJ8KwJzoKCQkJcmV0dXJuIHIKCQlkZWZhdWx0OgoJCQlpZiB1bmljb2RlLklzTGV0dGVyKHIpIHx8IHVuaWNvZGUuSXNOdW1iZXIocikgewoJCQkJcmV0dXJuIHIKCQkJfQoJCX0KCQlyZXR1cm4gLTEKCX0sIHVuaXQpCglzd2l0Y2ggdW5pdCB7CgljYXNlIGBhdWAsIGBhc3Ryb25vbWljYWwgdW5pdGAsIGBhc3Ryb25vbWljYWwgdW5pdHNgOgoJCXJldHVybiBBVSwgbmlsCgljYXNlIGBjZWxzaXVzYCwgYMKwY2AsIGBjwrBgOgoJCXJldHVybiBDZWxzaXVzLCBuaWwKCWNhc2UgYGZhaHJlbmhlaXRgLCBgwrBmYCwgYGbCsGA6CgkJcmV0dXJuIEZhaHJlbmhlaXQsIG5pbAoJY2FzZSBgZm9vdGAsIGBmZWV0YDoKCQlyZXR1cm4gRmVldCwgbmlsCgljYXNlIGBrZWx2aW5gLCBgwrBrYCwgYGvCsGA6CgkJcmV0dXJuIEtlbHZpbiwgbmlsCgljYXNlIGBraWxvbWV0ZXIvaG91cmAsIGBraWxvbWV0ZXIgcGVyIGhvdXJgLCBga2lsb21ldGVycy9ob3VyYCwgYGtpbG9tZXRlcnMgcGVyIGhvdXJgLCBga3BoYCwgYGttL2hgOgoJCXJldHVybiBLaWxvbWV0ZXJzUGVySG91ciwgbmlsCgljYXNlIGBsaWdodG1pbnV0ZWAsIGBsaWdodG1pbnV0ZXNgLCBgbG1gOgoJCXJldHVybiBMaWdodG1pbnV0ZXMsIG5pbAoJY2FzZSBgbGlnaHRzZWNvbmRgLCBgbGlnaHRzZWNvbmRzYCwgYGxzYDoKCQlyZXR1cm4gTGlnaHRzZWNvbmRzLCBuaWwKCWNhc2UgYGxpZ2h0eWVhcmAsIGBsaWdodHllYXJzYCwgYGx5YDoKCQlyZXR1cm4gTGlnaHR5ZWFycywgbmlsCgljYXNlIGBtZXRlcmAsIGBtZXRlcnNgLCBgbWA6CgkJcmV0dXJuIE1ldGVycywgbmlsCgljYXNlIGBtaWxlYCwgYG1pbGVzYCwgYG1pYDoKCQlyZXR1cm4gTWlsZXMsIG5pbAoJY2FzZSBgbWlsZS9ob3VyYCwgYG1pbGUgcGVyIGhvdXJgLCBgbWlsZXMvaG91cmAsIGBtaWxlcyBwZXIgaG91cmAsIGBtcGhgOgoJCXJldHVybiBNaWxlc1BlckhvdXIsIG5pbAoJY2FzZSBgbWV0ZXIgcGVyIHNlY29uZGAsIGBtZXRlci9zZWNvbmRgLCBgbWV0ZXJzIHBlciBzZWNvbmRgLCBgbWV0ZXJzL3NlY29uZGAsIGBtcHNgLCBgbS9zYDoKCQlyZXR1cm4gTWV0ZXJzUGVyU2Vjb25kLCBuaWwKCWNhc2UgYG5hdXRpY2FsIG1pbGVgLCBgbmF1dGljYWwgbWlsZXNgLCBgbm1gLCBgbm1pYDoKCQlyZXR1cm4gTmF1dGljYWxNaWxlcywgbmlsCgl9CglyZXR1cm4gSW52YWxpZCwgZm10LkVycm9yZigiQ2Fubm90IHBhcnNlIHVuaXQgJyVzJyIsIHVuaXQpCn0=",
                                "IsPackageLevel": true
                            }
                        ],
                        "Source": "dHlwZSBVbml0IGludA=="
                    },
                    "UnitFamily": {
                        "Name": "UnitFamily",
                        "MetaType": "int",
                        "Source": "dHlwZSBVbml0RmFtaWx5IGludA=="
                    }
                }
            },
            {
                "Name": "executil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/executil",
                "ImportPath": "executil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Utilities that make executing commands on the local system a little bit easier.\n",
                "MainFunction": false,
                "CommentWordCount": 710,
                "LineCount": 1083,
                "SourceLineCount": 818,
                "FunctionCount": 44,
                "TypeCount": 4,
                "ConstantCount": 0,
                "VariableCount": 3,
                "Statistics": {
                    "Mean": 0.5229,
                    "StdDev": 0.4864,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 0.8,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "cmd.go",
                        "Imports": [
                            {
                                "PackageName": "bufio",
                                "Alias": "bufio"
                            },
                            {
                                "PackageName": "context",
                                "Alias": "context"
                            },
                            {
                                "PackageName": "errors",
                                "Alias": "errors"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "os/exec",
                                "Alias": "exec"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "sync",
                                "Alias": "sync"
                            },
                            {
                                "PackageName": "syscall",
                                "Alias": "syscall"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/log",
                                "Alias": "log"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/mattn/go-shellwords",
                                "Alias": "go-shellwords"
                            }
                        ],
                        "Size": 13456,
                        "LineCount": 589,
                        "SourceLineCount": 447,
                        "FunctionCount": 22,
                        "TypeCount": 4,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "cmd_test.go",
                        "Imports": [
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/assert",
                                "Alias": "assert"
                            }
                        ],
                        "Size": 3433,
                        "LineCount": 135,
                        "SourceLineCount": 109,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "env.go",
                        "Imports": [
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 882,
                        "LineCount": 43,
                        "SourceLineCount": 33,
                        "FunctionCount": 6,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "executil.go",
                        "Imports": [
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "os/exec",
                                "Alias": "exec"
                            },
                            {
                                "PackageName": "os/signal",
                                "Alias": "signal"
                            },
                            {
                                "PackageName": "os/user",
                                "Alias": "user"
                            },
                            {
                                "PackageName": "path/filepath",
                                "Alias": "filepath"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                                "Alias": "fileutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/mattn/go-shellwords",
                                "Alias": "go-shellwords"
                            }
                        ],
                        "Size": 3917,
                        "LineCount": 159,
                        "SourceLineCount": 115,
                        "FunctionCount": 11,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "executil_test.go",
                        "Imports": [
                            {
                                "PackageName": "os/exec",
                                "Alias": "exec"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 1778,
                        "LineCount": 80,
                        "SourceLineCount": 57,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "log.go",
                        "Imports": [
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/log",
                                "Alias": "log"
                            }
                        ],
                        "Size": 365,
                        "LineCount": 22,
                        "SourceLineCount": 18,
                        "FunctionCount": 2,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "terminal.go",
                        "Imports": [
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "syscall",
                                "Alias": "syscall"
                            },
                            {
                                "PackageName": "golang.org/x/crypto/ssh/terminal",
                                "Alias": "terminal"
                            }
                        ],
                        "Size": 1279,
                        "LineCount": 55,
                        "SourceLineCount": 39,
                        "FunctionCount": 3,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 3
                    }
                ],
                "Variables": [
                    {
                        "Name": "PasswordPrompt",
                        "Expression": "`Enter password: `",
                        "Value": "Enter password: "
                    },
                    {
                        "Name": "PasswordVerifyPrompt",
                        "Expression": "`Verify password: `",
                        "Value": "Verify password: "
                    },
                    {
                        "Name": "PromptWriter",
                        "Type": "io.Writer",
                        "Expression": "os.Stdout"
                    }
                ],
                "Functions": [
                    {
                        "Name": "Env",
                        "Arguments": [
                            {
                                "Name": "name",
                                "Type": "string"
                            },
                            {
                                "Name": "fallback",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Env(name string, fallback ...any) string",
                        "Source": "ewoJcmV0dXJuIGVudihuYW1lLCBmYWxsYmFjay4uLikuU3RyaW5nKCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "EnvBool",
                        "Arguments": [
                            {
                                "Name": "name",
                                "Type": "string"
                            },
                            {
                                "Name": "fallback",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "EnvBool(name string, fallback ...any) bool",
                        "Source": "ewoJcmV0dXJuIGVudihuYW1lLCBmYWxsYmFjay4uLikuQm9vbCgpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "EnvDuration",
                        "Arguments": [
                            {
                                "Name": "name",
                                "Type": "string"
                            },
                            {
                                "Name": "fallback",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Duration"
                            }
                        ],
                        "Signature": "EnvDuration(name string, fallback ...any) time.Duration",
                        "Source": "ewoJcmV0dXJuIGVudihuYW1lLCBmYWxsYmFjay4uLikuRHVyYXRpb24oKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "EnvFloat",
                        "Arguments": [
                            {
                                "Name": "name",
                                "Type": "string"
                            },
                            {
                                "Name": "fallback",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "EnvFloat(name string, fallback ...any) float64",
                        "Source": "ewoJcmV0dXJuIGVudihuYW1lLCBmYWxsYmFjay4uLikuRmxvYXQoKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "EnvInt",
                        "Arguments": [
                            {
                                "Name": "name",
                                "Type": "string"
                            },
                            {
                                "Name": "fallback",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int64"
                            }
                        ],
                        "Signature": "EnvInt(name string, fallback ...any) int64",
                        "Source": "ewoJcmV0dXJuIGVudihuYW1lLCBmYWxsYmFjay4uLikuSW50KCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "EnvTime",
                        "Arguments": [
                            {
                                "Name": "name",
                                "Type": "string"
                            },
                            {
                                "Name": "fallback",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Time"
                            }
                        ],
                        "Signature": "EnvTime(name string, fallback ...any) time.Time",
                        "Source": "ewoJcmV0dXJuIGVudihuYW1lLCBmYWxsYmFjay4uLikuVGltZSgpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "FindShell",
                        "Comment": "Uses environment variables and other configurations to attempt to locate the\npath to the user's shell.",
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "FindShell() string",
                        "Source": "ewoJdmFyIHNoZWxscyA9IFtdc3RyaW5ne29zLkdldGVudihgU0hFTExgKX0KCXNoZWxscyA9IGFwcGVuZChzaGVsbHMsIFdoaWNoKGBzaGApKQoJZm9yIF8sIHNoZWxsIDo9IHJhbmdlIHNoZWxscyB7CgkJaWYgc2hlbGwgIT0gYGAgewoJCQlyZXR1cm4gc2hlbGwKCQl9Cgl9CglyZXR1cm4gYGAKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsRoot",
                        "Comment": "Returns whether the current user is root or not.",
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsRoot() bool",
                        "Source": "ewoJaWYgY3VycmVudCwgZXJyIDo9IHVzZXIuQ3VycmVudCgpOyBlcnIgPT0gbmlsIHsKCQlpZiBjdXJyZW50LlVpZCA9PSBgMGAgewoJCQlyZXR1cm4gdHJ1ZQoJCX0KCX0KCXJldHVybiBmYWxzZQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Join",
                        "Comment": "Take an *exec.Cmd or []string and return a shell-executable command line string.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Join(in any) string",
                        "Source": "ewoJdmFyIGFyZ3MgW11zdHJpbmcKCWlmIGNtZCwgb2sgOj0gaW4uKCpleGVjLkNtZCk7IG9rIHsKCQlhcmdzID0gY21kLkFyZ3MKCX0gZWxzZSBpZiB0eXBldXRpbC5Jc0FycmF5KGluKSB7CgkJYXJncyA9IHNsaWNldXRpbC5TdHJpbmdpZnkoaW4pCgl9IGVsc2UgewoJCXJldHVybiBgYAoJfQoJZm9yIGksIGFyZyA6PSByYW5nZSBhcmdzIHsKCQlpZiBzdHJpbmdzLkNvbnRhaW5zKGFyZywgYCBgKSB7CgkJCWFyZ3NbaV0gPSBzdHJpbmd1dGlsLldyYXAoYXJnLCBgJ2AsIGAnYCkKCQl9Cgl9CglyZXR1cm4gc3RyaW5ncy5Kb2luKGFyZ3MsIGAgYCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "LogOutput",
                        "Arguments": [
                            {
                                "Name": "outlevel",
                                "Type": "log.Level"
                            },
                            {
                                "Name": "errlevel",
                                "Type": "log.Level"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "OutputLineFunc"
                            }
                        ],
                        "Signature": "LogOutput(outlevel log.Level, errlevel log.Level) OutputLineFunc",
                        "Source": "ewoJcmV0dXJuIGZ1bmMobGluZSBzdHJpbmcsIGVyciBib29sKSB7CgkJaWYgZXJyIHsKCQkJbG9nLkxvZyhvdXRsZXZlbCwgbGluZSkKCQl9IGVsc2UgewoJCQlsb2cuTG9nKGVycmxldmVsLCBsaW5lKQoJCX0KCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "LogOutputFunc",
                        "Arguments": [
                            {
                                "Name": "line",
                                "Type": "string"
                            },
                            {
                                "Name": "err",
                                "Type": "bool"
                            }
                        ],
                        "Signature": "LogOutputFunc(line string, err bool)",
                        "Source": "ewoJaWYgZXJyIHsKCQlsb2cuRXJyb3IobGluZSkKCX0gZWxzZSB7CgkJbG9nLkRlYnVnKGxpbmUpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustShellOut",
                        "Comment": "A panicky version of ShellOut.",
                        "Arguments": [
                            {
                                "Name": "cmdOrLine",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            }
                        ],
                        "Signature": "MustShellOut(cmdOrLine string, args ...any) []byte",
                        "Source": "ewoJaWYgb3V0LCBlcnIgOj0gU2hlbGxPdXQoY21kT3JMaW5lLCBhcmdzLi4uKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIG91dAoJfSBlbHNlIHsKCQlwYW5pYyhlcnIuRXJyb3IoKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustSplit",
                        "Comment": "Same as Split, but panics if there is an error.",
                        "Arguments": [
                            {
                                "Name": "cmd",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "MustSplit(cmd string) []string",
                        "Source": "ewoJaWYgd29yZHMsIGVyciA6PSBTcGxpdChjbWQpOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gd29yZHMKCX0gZWxzZSB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "PromptPassword",
                        "Comment": "Generic password prompt that takes the input file descriptor and verify flag as options.",
                        "Arguments": [
                            {
                                "Name": "writer",
                                "Type": "io.Writer"
                            },
                            {
                                "Name": "fd",
                                "Type": "int"
                            },
                            {
                                "Name": "verify",
                                "Type": "bool"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "PromptPassword(writer io.Writer, fd int, verify bool) (string, bool)",
                        "Source": "ewoJZm10LkZwcmludCh3cml0ZXIsIFBhc3N3b3JkUHJvbXB0KQoJaWYgcHcxLCBlcnIgOj0gdGVybWluYWwuUmVhZFBhc3N3b3JkKGZkKTsgZXJyID09IG5pbCB7CgkJZm10LkZwcmludCh3cml0ZXIsICJcbiIpCgkJaWYgdmVyaWZ5IHsKCQkJZm10LkZwcmludCh3cml0ZXIsIFBhc3N3b3JkVmVyaWZ5UHJvbXB0KQoJCQlpZiBwdzIsIGVyciA6PSB0ZXJtaW5hbC5SZWFkUGFzc3dvcmQoZmQpOyBlcnIgPT0gbmlsIHsKCQkJCWZtdC5GcHJpbnQod3JpdGVyLCAiXG4iKQoJCQkJaWYgYnl0ZXMuRXF1YWwocHcxLCBwdzIpIHsKCQkJCQlyZXR1cm4gc3RyaW5nKHB3MSksIHRydWUKCQkJCX0gZWxzZSB7CgkJCQkJcmV0dXJuIHN0cmluZyhwdzEpLCBmYWxzZQoJCQkJfQoJCQl9CgkJfSBlbHNlIHsKCQkJcmV0dXJuIHN0cmluZyhwdzEpLCB0cnVlCgkJfQoJfQoJcmV0dXJuIGBgLCBmYWxzZQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ReadAndVerifyPassword",
                        "Comment": "Read a password from standard input, disabling echo and prompting twice.  The\nsecond return argument is falseif the two passwords do not match.",
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "ReadAndVerifyPassword() (string, bool)",
                        "Source": "ewoJcmV0dXJuIFByb21wdFBhc3N3b3JkKFByb21wdFdyaXRlciwgaW50KHN5c2NhbGwuU3RkaW4pLCB0cnVlKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ReadPassword",
                        "Comment": "Read a password from standard input, disabling echo.",
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "ReadPassword() string",
                        "Source": "ewoJcHcsIF8gOj0gUHJvbXB0UGFzc3dvcmQoUHJvbXB0V3JpdGVyLCBpbnQoc3lzY2FsbC5TdGRpbiksIGZhbHNlKQoJcmV0dXJuIHB3Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RootOr",
                        "Comment": "Returns the first argument if the current user is root, and the second if not.",
                        "Arguments": [
                            {
                                "Name": "ifRoot",
                                "Type": "any"
                            },
                            {
                                "Name": "notRoot",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "RootOr(ifRoot any, notRoot any) any",
                        "Source": "ewoJaWYgSXNSb290KCkgewoJCXJldHVybiBpZlJvb3QKCX0gZWxzZSB7CgkJcmV0dXJuIG5vdFJvb3QKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RootOrString",
                        "Comment": "The same as RootOr, but returns a string.",
                        "Arguments": [
                            {
                                "Name": "ifRoot",
                                "Type": "any"
                            },
                            {
                                "Name": "notRoot",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "RootOrString(ifRoot any, notRoot any) string",
                        "Source": "ewoJaWYgSXNSb290KCkgewoJCXJldHVybiB0eXBldXRpbC5TdHJpbmcoaWZSb290KQoJfSBlbHNlIHsKCQlyZXR1cm4gdHlwZXV0aWwuU3RyaW5nKG5vdFJvb3QpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ShellOut",
                        "Comment": "Run a command and return the standard output.  If the first argument contains\na command and its arguments, it will be executed in the user's shell using FindShell.\nOtherwise, the first argument will be treated as a command and the remaining arguments\nwill be passed in parameterized.",
                        "Arguments": [
                            {
                                "Name": "cmdOrLine",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ShellOut(cmdOrLine string, args ...any) ([]byte, error)",
                        "Source": "ewoJdmFyIGNtZCAqQ21kCglpZiB2YSwgZXJyIDo9IHNoZWxsd29yZHMuUGFyc2UoY21kT3JMaW5lKTsgZXJyID09IG5pbCB7CgkJaWYgbGVuKHZhKSA9PSAxIHsKCQkJY21kID0gQ29tbWFuZCh2YVswXSwgc2xpY2V1dGlsLlN0cmluZ2lmeShhcmdzKS4uLikKCQl9IGVsc2UgewoJCQljbWQgPSBTaGVsbENvbW1hbmQoc3RyaW5ncy5Kb2luKGFwcGVuZCh2YSwgc2xpY2V1dGlsLlN0cmluZ2lmeShhcmdzKS4uLiksIGAgYCkpCgkJfQoJCWlmIG91dCwgZXJyIDo9IGNtZC5PdXRwdXQoKTsgZXJyID09IG5pbCB7CgkJCXJldHVybiBvdXQsIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGVycgoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ShouldShellOut",
                        "Comment": "Attempts to call ShellOut, but will return nil if there is an error.  Does not panic.",
                        "Arguments": [
                            {
                                "Name": "cmdOrLine",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            }
                        ],
                        "Signature": "ShouldShellOut(cmdOrLine string, args ...any) []byte",
                        "Source": "ewoJaWYgb3V0LCBlcnIgOj0gU2hlbGxPdXQoY21kT3JMaW5lLCBhcmdzLi4uKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIG91dAoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ShouldSplit",
                        "Comment": "Same as Split, but silently discards any errors, returning an empty slice in this case.",
                        "Arguments": [
                            {
                                "Name": "cmd",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "ShouldSplit(cmd string) []string",
                        "Source": "ewoJaWYgd29yZHMsIGVyciA6PSBTcGxpdChjbWQpOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gd29yZHMKCX0gZWxzZSB7CgkJcmV0dXJuIG5pbAoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Split",
                        "Comment": "Splits the given string into words, honoring quoting and escaping conventions of common command line shells.",
                        "Arguments": [
                            {
                                "Name": "cmd",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "Split(cmd string) ([]string, error)",
                        "Source": "ewoJcmV0dXJuIHNoZWxsd29yZHMuUGFyc2UoY21kKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TrapSignals",
                        "Comment": "Registers a list of OS signals to intercept and provides an opportunity to run\na function before the program exits.",
                        "Arguments": [
                            {
                                "Name": "after",
                                "Type": ""
                            },
                            {
                                "Name": "signals",
                                "Type": "...os.Signal"
                            }
                        ],
                        "Signature": "TrapSignals(after , signals ...os.Signal)",
                        "Source": "ewoJdmFyIHNpZ25hbENoYW4gPSBtYWtlKGNoYW4gb3MuU2lnbmFsLCAxKQoJc2lnbmFsLk5vdGlmeShzaWduYWxDaGFuLCBzaWduYWxzLi4uKQoJZm9yIHRyYXAgOj0gcmFuZ2Ugc2lnbmFsQ2hhbiB7CgkJaWYgYWZ0ZXIgIT0gbmlsIHsKCQkJaWYgIWFmdGVyKHRyYXApIHsKCQkJCXJldHVybgoJCQl9CgkJfQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Which",
                        "Comment": "Locates the first path containing the given command. The directories listed\nin the environment variable \"PATH\" will be checked, in order.  If additional\ndirectories are specified in the path variadic argument, they will be checked\nfirst.  If the command is not in any path, an empty string will be returned.",
                        "Arguments": [
                            {
                                "Name": "cmdname",
                                "Type": "string"
                            },
                            {
                                "Name": "path",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Which(cmdname string, path ...string) string",
                        "Source": "ewoJaWYgZm91bmQgOj0gV2hpY2hBbGwoY21kbmFtZSwgcGF0aC4uLik7IGxlbihmb3VuZCkgPiAwIHsKCQlyZXR1cm4gZm91bmRbMF0KCX0gZWxzZSB7CgkJcmV0dXJuIGBgCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "WhichAll",
                        "Comment": "Locates the all paths containing the given command. The directories listed\nin the environment variable \"PATH\" will be checked, in order.  If additional\ndirectories are specified in the path variadic argument, they will be checked\nfirst.  If the command is not in any path, an empty slice will be returned.",
                        "Arguments": [
                            {
                                "Name": "cmdname",
                                "Type": "string"
                            },
                            {
                                "Name": "path",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "WhichAll(cmdname string, path ...string) []string",
                        "Source": "ewoJdmFyIGRpcnMgPSBhcHBlbmQocGF0aCwgc3RyaW5ncy5TcGxpdChvcy5HZXRlbnYoYFBBVEhgKSwgYDpgKS4uLikKCXZhciBmb3VuZCA9IG1ha2UoW11zdHJpbmcsIDApCglpZiBmaWxldXRpbC5Jc05vbmVtcHR5RXhlY3V0YWJsZUZpbGUoY21kbmFtZSkgewoJCWZvdW5kID0gYXBwZW5kKGZvdW5kLCBjbWRuYW1lKQoJfQoJZm9yIF8sIGRpciA6PSByYW5nZSBkaXJzIHsKCQl2YXIgY2FuZGlkYXRlID0gZmlsZXBhdGguSm9pbihkaXIsIGNtZG5hbWUpCgkJaWYgbGVuKHN0cmluZ3MuVHJpbVNwYWNlKGRpcikpID09IDAgewoJCQljb250aW51ZQoJCX0gZWxzZSBpZiAhZmlsZXV0aWwuRGlyRXhpc3RzKGRpcikgewoJCQljb250aW51ZQoJCX0gZWxzZSBpZiBmaWxldXRpbC5Jc05vbmVtcHR5RXhlY3V0YWJsZUZpbGUoY2FuZGlkYXRlKSB7CgkJCWZvdW5kID0gYXBwZW5kKGZvdW5kLCBjYW5kaWRhdGUpCgkJfQoJfQoJcmV0dXJuIGZvdW5kCn0=",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestEventedLineOutput",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestEventedLineOutput(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgc3Rkb3V0ID0gbWFrZShbXXN0cmluZywgMCkKCXZhciBzdGRlcnIgPSBtYWtlKFtdc3RyaW5nLCAwKQoJdmFyIGNtZCA9IENvbW1hbmQoYHByaW50ZmAsIGAxXG4yXG4zXG5gKQoJY21kLk9uU3Rkb3V0ID0gZnVuYyhsaW5lIHN0cmluZywgc2VyciBib29sKSB7CgkJc3Rkb3V0ID0gYXBwZW5kKHN0ZG91dCwgbGluZSkKCX0KCWFzc2VydC5Ob0Vycm9yKGNtZC5SdW4oKSkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgMWAsIGAyYCwgYDNgfSwgc3Rkb3V0KQoJYXNzZXJ0LkVtcHR5KHN0ZGVycikKCWNtZCA9IENvbW1hbmQoYGJhc2hgLCBgLWNgLCBgZWNobyBtb2NrOyBlY2hvIHllYWggMT4mMjsgZWNobyBpbmc7IGVjaG8geWVhaCAxPiYyOyBlY2hvIGJpcmQ7IGVjaG8geWVhaCAxPiYyOyBlY2hvIHllYWg7IGVjaG8geWVhaCAxPiYyYCkKCXN0ZG91dCA9IG5pbAoJc3RkZXJyID0gbmlsCgljbWQuT25TdGRvdXQgPSBmdW5jKGxpbmUgc3RyaW5nLCBzZXJyIGJvb2wpIHsKCQlzdGRvdXQgPSBhcHBlbmQoc3Rkb3V0LCBsaW5lKQoJfQoJY21kLk9uU3RkZXJyID0gZnVuYyhsaW5lIHN0cmluZywgc2VyciBib29sKSB7CgkJc3RkZXJyID0gYXBwZW5kKHN0ZGVyciwgbGluZSkKCX0KCWFzc2VydC5Ob0Vycm9yKGNtZC5SdW4oKSkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgbW9ja2AsIGBpbmdgLCBgYmlyZGAsIGB5ZWFoYH0sIHN0ZG91dCkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgeWVhaGAsIGB5ZWFoYCwgYHllYWhgLCBgeWVhaGB9LCBzdGRlcnIpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestExecFalse",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestExecFalse(t *testing.T)",
                        "Source": "ewoJdmFyIHN0YXJ0cyBpbnQKCXZhciBjb21wbGV0ZXMgaW50Cgl2YXIgc3VjY2Vzc2VzIGludAoJdmFyIGZhaWx1cmVzIGludAoJdmFyIGNtZCA9IENvbW1hbmQoYGZhbHNlYCkKCWNtZC5PblN0YXJ0ID0gaW5jcigmc3RhcnRzKQoJY21kLk9uQ29tcGxldGUgPSBpbmNyKCZjb21wbGV0ZXMpCgljbWQuT25TdWNjZXNzID0gaW5jcigmc3VjY2Vzc2VzKQoJY21kLk9uRXJyb3IgPSBpbmNyKCZmYWlsdXJlcykKCWFzc2VydC5GYWxzZSh0LCBjbWQuU3RhdHVzKCkuUnVubmluZykKCWFzc2VydC5GYWxzZSh0LCBjbWQuU3RhdHVzKCkuU3VjY2Vzc2Z1bCkKCWFzc2VydC5aZXJvKHQsIGNtZC5TdGF0dXMoKS5QSUQpCglhc3NlcnQuVHJ1ZSh0LCBjbWQuU3RhdHVzKCkuU3RhcnRlZEF0LklzWmVybygpKQoJYXNzZXJ0LlRydWUodCwgY21kLlN0YXR1cygpLlN0b3BwZWRBdC5Jc1plcm8oKSkKCWFzc2VydC5aZXJvKHQsIGNtZC5TdGF0dXMoKS5FeGl0Q29kZSkKCWFzc2VydC5OaWwodCwgY21kLlN0YXR1cygpLkVycm9yKQoJY21kLlJ1bigpCglhc3NlcnQuRmFsc2UodCwgY21kLlN0YXR1cygpLlJ1bm5pbmcpCglhc3NlcnQuRmFsc2UodCwgY21kLlN0YXR1cygpLlN1Y2Nlc3NmdWwpCglhc3NlcnQuRmFsc2UodCwgY21kLlN0YXR1cygpLlBJRCA9PSAwKQoJYXNzZXJ0LkZhbHNlKHQsIGNtZC5TdGF0dXMoKS5TdGFydGVkQXQuSXNaZXJvKCkpCglhc3NlcnQuRmFsc2UodCwgY21kLlN0YXR1cygpLlN0b3BwZWRBdC5Jc1plcm8oKSkKCWFzc2VydC5UcnVlKHQsIGNtZC5TdGF0dXMoKS5Ub29rKCkgPiAwKQoJYXNzZXJ0LlRydWUodCwgY21kLlN0YXR1cygpLkV4aXRDb2RlID09IDEpCglhc3NlcnQuRXF1YWxFcnJvcih0LCBjbWQuU3RhdHVzKCkuRXJyb3IsIGBQcm9jZXNzIGV4aXRlZCB3aXRoIHN0YXR1cyAxYCkKCWFzc2VydC5FcXVhbCh0LCAxLCBzdGFydHMpCglhc3NlcnQuRXF1YWwodCwgMSwgY29tcGxldGVzKQoJYXNzZXJ0LkVxdWFsKHQsIDAsIHN1Y2Nlc3NlcykKCWFzc2VydC5FcXVhbCh0LCAxLCBmYWlsdXJlcykKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestExecReadCloser",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestExecReadCloser(t *testing.T)",
                        "Source": "ewoJdmFyIGNtZCA9IENvbW1hbmQoYGVjaG9gLCBgaGVsbG9gKQoJdmFyIGRhdGEsIGVyciA9IGlvLlJlYWRBbGwoY21kKQoJYXNzZXJ0Lk5vRXJyb3IodCwgZXJyKQoJYXNzZXJ0LkVxdWFsKHQsICJoZWxsb1xuIiwgc3RyaW5nKGRhdGEpKQoJYXNzZXJ0Lk5vRXJyb3IodCwgY21kLkNsb3NlKCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestExecReadWriteCloser",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestExecReadWriteCloser(t *testing.T)",
                        "Source": "ewoJdmFyIGMgaW50ID0gMTI4Cgl2YXIgcGF5bG9hZCA9IHN0cmluZ3V0aWwuVVVJRCgpLkJ5dGVzKCkKCXZhciBjbWQgPSBDb21tYW5kKGBjYXRgKQoJZm9yIGkgOj0gMDsgaSA8IGM7IGkrKyB7CgkJdmFyIF8sIHdlcnIgPSBjbWQuV3JpdGUocGF5bG9hZCkKCQlhc3NlcnQuTm9FcnJvcih0LCB3ZXJyKQoJfQoJYXNzZXJ0Lk5vRXJyb3IodCwgY21kLkNsb3NlSW5wdXQoKSkKCXZhciBkYXRhLCByZXJyID0gaW8uUmVhZEFsbChjbWQpCglhc3NlcnQuTm9FcnJvcih0LCByZXJyKQoJYXNzZXJ0LkVxdWFsKHQsIGJ5dGVzLlJlcGVhdChwYXlsb2FkLCBjKSwgZGF0YSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestExecTrue",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestExecTrue(t *testing.T)",
                        "Source": "ewoJdmFyIHN0YXJ0cyBpbnQKCXZhciBjb21wbGV0ZXMgaW50Cgl2YXIgc3VjY2Vzc2VzIGludAoJdmFyIGZhaWx1cmVzIGludAoJdmFyIGNtZCA9IENvbW1hbmQoYHRydWVgKQoJY21kLk9uU3RhcnQgPSBpbmNyKCZzdGFydHMpCgljbWQuT25Db21wbGV0ZSA9IGluY3IoJmNvbXBsZXRlcykKCWNtZC5PblN1Y2Nlc3MgPSBpbmNyKCZzdWNjZXNzZXMpCgljbWQuT25FcnJvciA9IGluY3IoJmZhaWx1cmVzKQoJYXNzZXJ0LkZhbHNlKHQsIGNtZC5TdGF0dXMoKS5SdW5uaW5nKQoJYXNzZXJ0LkZhbHNlKHQsIGNtZC5TdGF0dXMoKS5TdWNjZXNzZnVsKQoJYXNzZXJ0Llplcm8odCwgY21kLlN0YXR1cygpLlBJRCkKCWFzc2VydC5UcnVlKHQsIGNtZC5TdGF0dXMoKS5TdGFydGVkQXQuSXNaZXJvKCkpCglhc3NlcnQuVHJ1ZSh0LCBjbWQuU3RhdHVzKCkuU3RvcHBlZEF0LklzWmVybygpKQoJYXNzZXJ0Llplcm8odCwgY21kLlN0YXR1cygpLkV4aXRDb2RlKQoJYXNzZXJ0Lk5pbCh0LCBjbWQuU3RhdHVzKCkuRXJyb3IpCgljbWQuUnVuKCkKCWFzc2VydC5GYWxzZSh0LCBjbWQuU3RhdHVzKCkuUnVubmluZykKCWFzc2VydC5UcnVlKHQsIGNtZC5TdGF0dXMoKS5TdWNjZXNzZnVsKQoJYXNzZXJ0LkZhbHNlKHQsIGNtZC5TdGF0dXMoKS5QSUQgPT0gMCkKCWFzc2VydC5GYWxzZSh0LCBjbWQuU3RhdHVzKCkuU3RhcnRlZEF0LklzWmVybygpKQoJYXNzZXJ0LkZhbHNlKHQsIGNtZC5TdGF0dXMoKS5TdG9wcGVkQXQuSXNaZXJvKCkpCglhc3NlcnQuVHJ1ZSh0LCBjbWQuU3RhdHVzKCkuVG9vaygpID4gMCkKCWFzc2VydC5aZXJvKHQsIGNtZC5TdGF0dXMoKS5FeGl0Q29kZSkKCWFzc2VydC5OaWwodCwgY21kLlN0YXR1cygpLkVycm9yKQoJYXNzZXJ0LkVxdWFsKHQsIDEsIHN0YXJ0cykKCWFzc2VydC5FcXVhbCh0LCAxLCBjb21wbGV0ZXMpCglhc3NlcnQuRXF1YWwodCwgMSwgc3VjY2Vzc2VzKQoJYXNzZXJ0LkVxdWFsKHQsIDAsIGZhaWx1cmVzKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestExecWriteCloser",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestExecWriteCloser(t *testing.T)",
                        "Source": "ewoJdmFyIGNtZCA9IENvbW1hbmQoYGNhdGApCgl2YXIgbiwgZXJyID0gY21kLldyaXRlKFtdYnl0ZSgiaGVsbG9cbiIpKQoJYXNzZXJ0Lk5vRXJyb3IodCwgZXJyKQoJYXNzZXJ0LkVxdWFsKHQsIDYsIG4pCglhc3NlcnQuTm9FcnJvcih0LCBjbWQuQ2xvc2UoKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestJoin",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestJoin(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGAsIEpvaW4obmlsKSkKCWFzc2VydC5FcXVhbChgYCwgSm9pbihgYCkpCglhc3NlcnQuRXF1YWwoYGAsIEpvaW4oW11zdHJpbmd7fSkpCglhc3NlcnQuRXF1YWwoYGxzIC1sYCwgSm9pbihbXXN0cmluZ3tgbHNgLCBgLWxgfSkpCglhc3NlcnQuRXF1YWwoYGxzIC1sICcvdGhpcyBpcyBhIGZvbGRlcidgLCBKb2luKFtdc3RyaW5ne2Bsc2AsIGAtbGAsIGAvdGhpcyBpcyBhIGZvbGRlcmB9KSkKCWFzc2VydC5FcXVhbChgbHMgLWwgJy90aGlzIGlzIGEgZm9sZGVyJ2AsIEpvaW4oZXhlYy5Db21tYW5kKGBsc2AsIGAtbGAsIGAvdGhpcyBpcyBhIGZvbGRlcmApKSkKCWFzc2VydC5FcXVhbChgd2hvYW1pYCwgSm9pbihleGVjLkNvbW1hbmQoYHdob2FtaWApKSkKCWFzc2VydC5FcXVhbChgYCwgSm9pbihleGVjLkNvbW1hbmQoYGApKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestShellOut",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestShellOut(t *testing.T)",
                        "Source": "ewoJYXNzZXJ0LkVxdWFsKHQsIGBoZWxsbyB0aGVyZWAsIHN0cmluZyhNdXN0U2hlbGxPdXQoYGVjaG9gLCBgLW5gLCBgaGVsbG9gLCBgdGhlcmVgKSkpCglhc3NlcnQuRXF1YWwodCwgYGhlbGxvIHRoZXJlYCwgc3RyaW5nKE11c3RTaGVsbE91dChgZWNobyAtbiBoZWxsbyB0aGVyZWApKSkKCWFzc2VydC5FcXVhbCh0LCBgaGVsbG8gdGhlcmVgLCBzdHJpbmcoTXVzdFNoZWxsT3V0KGBlY2hvIC1uYCwgYGhlbGxvIHRoZXJlYCkpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestWhich",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestWhich(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRW1wdHkoV2hpY2goYGFic29sdXRlbHktbm90LWEtY29tbWFuZC1AIyQlXiYqYCkpCn0=",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "Cmd": {
                        "Name": "Cmd",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Close",
                                "Comment": "Implements io.Closer, killing the underlying process, waiting for it to exit, then returning.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Close() error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "CloseInput",
                                "Comment": "Notify the command that no further standard input will be written.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "CloseInput() error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "CombinedOutput",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "CombinedOutput() ([]byte, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Command",
                                "Arguments": [
                                    {
                                        "Name": "name",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "arg",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Cmd"
                                    }
                                ],
                                "Signature": "Command(name string, arg ...string) *Cmd",
                                "Source": "ewoJcmV0dXJuIG5ldyhleGVjLkNvbW1hbmQobmFtZSwgYXJnLi4uKSkKfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Kill",
                                "Comment": "Kill the running command.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Kill() error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Output",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Output() ([]byte, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Read",
                                "Comment": "Implements io.Reader, sourcing data from the command's standard output.  If the command is not\nalready running, it will be started.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "p",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Read(p []byte) (int, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Run",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Run() error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetEnv",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "SetEnv(key string, value any)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "ShellCommand",
                                "Arguments": [
                                    {
                                        "Name": "cmdline",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Cmd"
                                    }
                                ],
                                "Signature": "ShellCommand(cmdline string) *Cmd",
                                "Source": "ewoJaWYgc2hlbGwgOj0gRmluZFNoZWxsKCk7IHNoZWxsICE9IGBgIHsKCQlyZXR1cm4gQ29tbWFuZChzaGVsbCwgYC1jYCwgY21kbGluZSkKCX0KCXJldHVybiBuaWwKfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Start",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Start() error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Status",
                                "Comment": "Return the current status of the process.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "Status"
                                    }
                                ],
                                "Signature": "Status() Status",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "String",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "WaitStatus",
                                "Comment": "Wait for the process to complete, then return the last status.\nProcess must have been started using the Start() function.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "Status"
                                    }
                                ],
                                "Signature": "WaitStatus() Status",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Wrap",
                                "Arguments": [
                                    {
                                        "Name": "cmd",
                                        "Type": "*exec.Cmd"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Cmd"
                                    }
                                ],
                                "Signature": "Wrap(cmd *exec.Cmd) *Cmd",
                                "Source": "ewoJcmV0dXJuIG5ldyhjbWQpCn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Write",
                                "Comment": "Implements io.Writer, writing data to the commands standard input.  If the command is not already\nrunning, it will be started.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "p",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Write(p []byte) (int, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "CommandContext",
                                "Arguments": [
                                    {
                                        "Name": "ctx",
                                        "Type": "context.Context"
                                    },
                                    {
                                        "Name": "name",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "arg",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Cmd"
                                    }
                                ],
                                "Signature": "CommandContext(ctx context.Context, name string, arg ...string) *Cmd",
                                "Source": "ewoJcmV0dXJuICZDbWR7Q21kOiBleGVjLkNvbW1hbmRDb250ZXh0KGN0eCwgbmFtZSwgYXJnLi4uKX0KfQ==",
                                "IsPackageLevel": true
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "MonitorInterval",
                                "Type": "time.Duration",
                                "Comment": "An interval of time on which the command should be actively checked for run and exit status."
                            },
                            {
                                "Name": "Timeout",
                                "Type": "time.Duration",
                                "Comment": "How long the command may run for before being killed."
                            },
                            {
                                "Name": "InheritEnv",
                                "Type": "bool",
                                "Comment": "Whether the command invocation should inherit the environment variables of the calling process."
                            },
                            {
                                "Name": "OnStart",
                                "Type": "CommandStatusFunc",
                                "Comment": "Called when immediately before the command is executed."
                            },
                            {
                                "Name": "OnMonitor",
                                "Type": "CommandStatusFunc",
                                "Comment": "Called whenever the monitor check is performed."
                            },
                            {
                                "Name": "OnComplete",
                                "Type": "CommandStatusFunc",
                                "Comment": "Called when the command exits, regardless of success or failure."
                            },
                            {
                                "Name": "OnSuccess",
                                "Type": "CommandStatusFunc",
                                "Comment": "Called when the command exits with a non-error status (code 0)"
                            },
                            {
                                "Name": "OnError",
                                "Type": "CommandStatusFunc",
                                "Comment": "Called when the command exits with an error status (non-zero exit code, security, invocation, or resource error)"
                            },
                            {
                                "Name": "OnStdout",
                                "Type": "OutputLineFunc",
                                "Comment": "Called when a line of standard output is written."
                            },
                            {
                                "Name": "OnStderr",
                                "Type": "OutputLineFunc",
                                "Comment": "Called when a line of standard error is written."
                            },
                            {
                                "Name": "StdoutSplitFunc",
                                "Type": "bufio.SplitFunc",
                                "Comment": "If specified, this function will determine how to tokenize the stdout stream and when to call OnStdout.  Defaults to bufio.ScanLines."
                            },
                            {
                                "Name": "StderrSplitFunc",
                                "Type": "bufio.SplitFunc",
                                "Comment": "If specified, this function will determine how to tokenize the stderr stream and when to call OnStderr.  Defaults to bufio.ScanLines."
                            },
                            {
                                "Name": "InheritParent",
                                "Type": "bool",
                                "Comment": "Specifies that the spawned process should inherit the same Process Group ID (PGID) as the parent."
                            }
                        ],
                        "Comment": "A wrapper for exec.Cmd that provides helpful callbacks and monitoring details that are challenging\nto implement.",
                        "Source": "dHlwZSBDbWQgc3RydWN0IHsKCSpleGVjLkNtZAoJTW9uaXRvckludGVydmFsIHRpbWUuRHVyYXRpb24KCVRpbWVvdXQgICAgICAgICB0aW1lLkR1cmF0aW9uCglJbmhlcml0RW52ICAgICAgYm9vbAoJT25TdGFydCAgICAgICAgIENvbW1hbmRTdGF0dXNGdW5jCglPbk1vbml0b3IgICAgICAgQ29tbWFuZFN0YXR1c0Z1bmMKCU9uQ29tcGxldGUgICAgICBDb21tYW5kU3RhdHVzRnVuYwoJT25TdWNjZXNzICAgICAgIENvbW1hbmRTdGF0dXNGdW5jCglPbkVycm9yICAgICAgICAgQ29tbWFuZFN0YXR1c0Z1bmMKCU9uU3Rkb3V0ICAgICAgICBPdXRwdXRMaW5lRnVuYwoJT25TdGRlcnIgICAgICAgIE91dHB1dExpbmVGdW5jCglTdGRvdXRTcGxpdEZ1bmMgYnVmaW8uU3BsaXRGdW5jCglTdGRlcnJTcGxpdEZ1bmMgYnVmaW8uU3BsaXRGdW5jCglJbmhlcml0UGFyZW50ICAgYm9vbAoKfS8vIEEgd3JhcHBlciBmb3IgZXhlYy5DbWQgdGhhdCBwcm92aWRlcyBoZWxwZnVsIGNhbGxiYWNrcyBhbmQgbW9uaXRvcmluZyBkZXRhaWxzIHRoYXQgYXJlIGNoYWxsZW5naW5nCi8vIHRvIGltcGxlbWVudC4KCg==",
                        "HasUnexportedFields": true
                    },
                    "CommandStatusFunc": {
                        "Name": "CommandStatusFunc",
                        "Source": "dHlwZSBDb21tYW5kU3RhdHVzRnVuYyBmdW5jKFN0YXR1cyk="
                    },
                    "OutputLineFunc": {
                        "Name": "OutputLineFunc",
                        "Source": "dHlwZSBPdXRwdXRMaW5lRnVuYyBmdW5jKHN0cmluZywgYm9vbCk="
                    },
                    "Status": {
                        "Name": "Status",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "String",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Took",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "time.Duration"
                                    }
                                ],
                                "Signature": "Took() time.Duration",
                                "IsPackageLevel": false
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "StartedAt",
                                "Type": "time.Time"
                            },
                            {
                                "Name": "StoppedAt",
                                "Type": "time.Time"
                            },
                            {
                                "Name": "Running",
                                "Type": "bool"
                            },
                            {
                                "Name": "Successful",
                                "Type": "bool"
                            },
                            {
                                "Name": "ExitCode",
                                "Type": "int"
                            },
                            {
                                "Name": "Error",
                                "Type": "error"
                            },
                            {
                                "Name": "PID",
                                "Type": "int"
                            },
                            {
                                "Name": "Cmd",
                                "Type": "*Cmd"
                            }
                        ],
                        "Source": "dHlwZSBTdGF0dXMgc3RydWN0IHsKCVN0YXJ0ZWRBdCAgdGltZS5UaW1lCglTdG9wcGVkQXQgIHRpbWUuVGltZQoJUnVubmluZyAgICBib29sCglTdWNjZXNzZnVsIGJvb2wKCUV4aXRDb2RlICAgaW50CglFcnJvciAgICAgIGVycm9yCglQSUQgICAgICAgIGludAoJQ21kICAgICAgICAqQ21kCn0="
                    }
                }
            },
            {
                "Name": "fileutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/fileutil",
                "ImportPath": "fileutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Helpers for working with files and filesystems\n",
                "MainFunction": false,
                "CommentWordCount": 1499,
                "LineCount": 3153,
                "SourceLineCount": 2509,
                "FunctionCount": 81,
                "TypeCount": 18,
                "ConstantCount": 4,
                "VariableCount": 30,
                "Statistics": {
                    "Mean": 0.3478,
                    "StdDev": 0.4615,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 0,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "anyget.go",
                        "Imports": [
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            },
                            {
                                "PackageName": "context",
                                "Alias": "context"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 2484,
                        "LineCount": 93,
                        "SourceLineCount": 65,
                        "FunctionCount": 3,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 2
                    },
                    {
                        "Name": "anyget_file.go",
                        "Imports": [
                            {
                                "PackageName": "context",
                                "Alias": "context"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "path/filepath",
                                "Alias": "filepath"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            }
                        ],
                        "Size": 791,
                        "LineCount": 36,
                        "SourceLineCount": 26,
                        "FunctionCount": 1,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "anyget_file_test.go",
                        "Imports": [
                            {
                                "PackageName": "context",
                                "Alias": "context"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/assert",
                                "Alias": "assert"
                            }
                        ],
                        "Size": 424,
                        "LineCount": 26,
                        "SourceLineCount": 19,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "anyget_http.go",
                        "Imports": [
                            {
                                "PackageName": "context",
                                "Alias": "context"
                            },
                            {
                                "PackageName": "crypto/tls",
                                "Alias": "tls"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                                "Alias": "maputil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 1939,
                        "LineCount": 89,
                        "SourceLineCount": 63,
                        "FunctionCount": 1,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 1
                    },
                    {
                        "Name": "anyget_http_test.go",
                        "Imports": [
                            {
                                "PackageName": "context",
                                "Alias": "context"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/assert",
                                "Alias": "assert"
                            }
                        ],
                        "Size": 817,
                        "LineCount": 45,
                        "SourceLineCount": 32,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "anyget_ssh.go",
                        "Imports": [
                            {
                                "PackageName": "context",
                                "Alias": "context"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "net",
                                "Alias": "net"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "os/user",
                                "Alias": "user"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/mattn/go-shellwords",
                                "Alias": "go-shellwords"
                            },
                            {
                                "PackageName": "github.com/melbahja/goph",
                                "Alias": "goph"
                            },
                            {
                                "PackageName": "github.com/pkg/sftp",
                                "Alias": "sftp"
                            },
                            {
                                "PackageName": "golang.org/x/crypto/ssh",
                                "Alias": "ssh"
                            }
                        ],
                        "Size": 5107,
                        "LineCount": 184,
                        "SourceLineCount": 126,
                        "FunctionCount": 1,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 3
                    },
                    {
                        "Name": "anyget_ssh_test.go",
                        "Imports": [
                            {
                                "PackageName": "context",
                                "Alias": "context"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "net",
                                "Alias": "net"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/assert",
                                "Alias": "assert"
                            },
                            {
                                "PackageName": "golang.org/x/crypto/ssh",
                                "Alias": "ssh"
                            }
                        ],
                        "Size": 1987,
                        "LineCount": 96,
                        "SourceLineCount": 68,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "anyget_test.go",
                        "Imports": [
                            {
                                "PackageName": "context",
                                "Alias": "context"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "net/http/httptest",
                                "Alias": "httptest"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                                "Alias": "maputil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/assert",
                                "Alias": "assert"
                            }
                        ],
                        "Size": 1378,
                        "LineCount": 58,
                        "SourceLineCount": 47,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "closer.go",
                        "Imports": [
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/log",
                                "Alias": "log"
                            }
                        ],
                        "Size": 1329,
                        "LineCount": 58,
                        "SourceLineCount": 42,
                        "FunctionCount": 5,
                        "TypeCount": 3,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "directory.go",
                        "Imports": [
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "path/filepath",
                                "Alias": "filepath"
                            },
                            {
                                "PackageName": "sort",
                                "Alias": "sort"
                            }
                        ],
                        "Size": 5502,
                        "LineCount": 225,
                        "SourceLineCount": 172,
                        "FunctionCount": 7,
                        "TypeCount": 5,
                        "ConstantCount": 3,
                        "VariableCount": 0
                    },
                    {
                        "Name": "directory_test.go",
                        "Imports": [
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "path/filepath",
                                "Alias": "filepath"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 1934,
                        "LineCount": 89,
                        "SourceLineCount": 69,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "extendable_reader.go",
                        "Imports": [
                            {
                                "PackageName": "container/list",
                                "Alias": "list"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "sync",
                                "Alias": "sync"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/log",
                                "Alias": "log"
                            }
                        ],
                        "Size": 1432,
                        "LineCount": 76,
                        "SourceLineCount": 60,
                        "FunctionCount": 3,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "extendable_reader_test.go",
                        "Imports": [
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 987,
                        "LineCount": 44,
                        "SourceLineCount": 31,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "file.go",
                        "Imports": [
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            },
                            {
                                "PackageName": "crypto",
                                "Alias": "crypto"
                            },
                            {
                                "PackageName": "crypto/sha256",
                                "Alias": "sha256"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "hash",
                                "Alias": "hash"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "path/filepath",
                                "Alias": "filepath"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/convutil",
                                "Alias": "convutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/pathutil",
                                "Alias": "pathutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/mattn/go-isatty",
                                "Alias": "isatty"
                            }
                        ],
                        "Size": 13505,
                        "LineCount": 536,
                        "SourceLineCount": 416,
                        "FunctionCount": 26,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 23
                    },
                    {
                        "Name": "file_handlers.go",
                        "Imports": [
                            {
                                "PackageName": "crypto/tls",
                                "Alias": "tls"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "net",
                                "Alias": "net"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/pathutil",
                                "Alias": "pathutil"
                            },
                            {
                                "PackageName": "github.com/jlaffaye/ftp",
                                "Alias": "ftp"
                            },
                            {
                                "PackageName": "github.com/pkg/sftp",
                                "Alias": "sftp"
                            },
                            {
                                "PackageName": "golang.org/x/crypto/ssh",
                                "Alias": "ssh"
                            }
                        ],
                        "Size": 5498,
                        "LineCount": 214,
                        "SourceLineCount": 177,
                        "FunctionCount": 5,
                        "TypeCount": 2,
                        "ConstantCount": 1,
                        "VariableCount": 0
                    },
                    {
                        "Name": "file_test.go",
                        "Imports": [
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 3025,
                        "LineCount": 100,
                        "SourceLineCount": 79,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "fileinfo.go",
                        "Imports": [
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            }
                        ],
                        "Size": 1887,
                        "LineCount": 112,
                        "SourceLineCount": 95,
                        "FunctionCount": 13,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "fs.go",
                        "Imports": [
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "regexp",
                                "Alias": "regexp"
                            }
                        ],
                        "Size": 522,
                        "LineCount": 28,
                        "SourceLineCount": 22,
                        "FunctionCount": 1,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "fs_test.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "regexp",
                                "Alias": "regexp"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 2067,
                        "LineCount": 98,
                        "SourceLineCount": 71,
                        "FunctionCount": 1,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "manipulator.go",
                        "Imports": [
                            {
                                "PackageName": "bufio",
                                "Alias": "bufio"
                            },
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            },
                            {
                                "PackageName": "errors",
                                "Alias": "errors"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            }
                        ],
                        "Size": 2896,
                        "LineCount": 119,
                        "SourceLineCount": 81,
                        "FunctionCount": 4,
                        "TypeCount": 2,
                        "ConstantCount": 0,
                        "VariableCount": 1
                    },
                    {
                        "Name": "manipulator_funcs.go",
                        "Imports": [
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            }
                        ],
                        "Size": 2464,
                        "LineCount": 104,
                        "SourceLineCount": 78,
                        "FunctionCount": 7,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "manipulator_test.go",
                        "Imports": [
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 3277,
                        "LineCount": 110,
                        "SourceLineCount": 85,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "mime.go",
                        "Imports": [
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "mime",
                                "Alias": "mime"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "path/filepath",
                                "Alias": "filepath"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "sync",
                                "Alias": "sync"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/h2non/filetype",
                                "Alias": "filetype"
                            }
                        ],
                        "Size": 28979,
                        "LineCount": 592,
                        "SourceLineCount": 569,
                        "FunctionCount": 3,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "mime_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 625,
                        "LineCount": 21,
                        "SourceLineCount": 16,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Constants": [
                    {
                        "Name": "DefaultOpenTimeout",
                        "Immutable": true,
                        "Expression": "time.Duration(10 * time.Second)"
                    },
                    {
                        "Name": "FailOnError",
                        "Immutable": true
                    },
                    {
                        "Name": "IncludeHidden",
                        "Immutable": true
                    },
                    {
                        "Name": "NoRecursive",
                        "Type": "DirReaderOption",
                        "Immutable": true,
                        "Expression": "iota"
                    }
                ],
                "Variables": [
                    {
                        "Name": "CompareHasher",
                        "Type": "hash.Hash",
                        "Expression": "sha256.New()"
                    },
                    {
                        "Name": "DirExists",
                        "Expression": "pathutil.DirExists",
                        "Comment": "Alias functions from pathutil as a convenience"
                    },
                    {
                        "Name": "ErrSkipToken",
                        "Expression": "errors.New(`skip token`)",
                        "Comment": "By default, the underlying bufio.Scanner that tokenizes the input data\nwill discard the tokens that it's splitting on.  however, in most cases, we\ndon't actually want this.  however, if the thing we're removing IS this token,\nthen we will have removed the token, then immediately put it back in the stream.\n\nReturning the ErrSkipToken error will tell the ReadManipulator to not put this token\nback into the stream, but otherwise not produce an actual error during read."
                    },
                    {
                        "Name": "Exists",
                        "Expression": "pathutil.Exists"
                    },
                    {
                        "Name": "ExpandUser",
                        "Expression": "pathutil.ExpandUser"
                    },
                    {
                        "Name": "FileExists",
                        "Expression": "pathutil.FileExists"
                    },
                    {
                        "Name": "GenericDefaultTimeout",
                        "Expression": "5 * time.Second"
                    },
                    {
                        "Name": "HttpDefaultTimeout",
                        "Expression": "10 * time.Second"
                    },
                    {
                        "Name": "IsAppend",
                        "Expression": "pathutil.IsAppend"
                    },
                    {
                        "Name": "IsAppendable",
                        "Expression": "pathutil.IsAppendable"
                    },
                    {
                        "Name": "IsCharDevice",
                        "Expression": "pathutil.IsCharDevice"
                    },
                    {
                        "Name": "IsDevice",
                        "Expression": "pathutil.IsDevice"
                    },
                    {
                        "Name": "IsExclusive",
                        "Expression": "pathutil.IsExclusive"
                    },
                    {
                        "Name": "IsNamedPipe",
                        "Expression": "pathutil.IsNamedPipe"
                    },
                    {
                        "Name": "IsNonemptyDir",
                        "Expression": "pathutil.IsNonemptyDir"
                    },
                    {
                        "Name": "IsNonemptyExecutableFile",
                        "Expression": "pathutil.IsNonemptyExecutableFile"
                    },
                    {
                        "Name": "IsNonemptyFile",
                        "Expression": "pathutil.IsNonemptyFile"
                    },
                    {
                        "Name": "IsReadable",
                        "Expression": "pathutil.IsReadable"
                    },
                    {
                        "Name": "IsSetgid",
                        "Expression": "pathutil.IsSetgid"
                    },
                    {
                        "Name": "IsSetuid",
                        "Expression": "pathutil.IsSetuid"
                    },
                    {
                        "Name": "IsSocket",
                        "Expression": "pathutil.IsSocket"
                    },
                    {
                        "Name": "IsSticky",
                        "Expression": "pathutil.IsSticky"
                    },
                    {
                        "Name": "IsSymlink",
                        "Expression": "pathutil.IsSymlink"
                    },
                    {
                        "Name": "IsTemporary",
                        "Expression": "pathutil.IsTemporary"
                    },
                    {
                        "Name": "IsWritable",
                        "Expression": "pathutil.IsWritable"
                    },
                    {
                        "Name": "LinkExists",
                        "Expression": "pathutil.LinkExists"
                    },
                    {
                        "Name": "NullReadCloser",
                        "Expression": "io.NopCloser(bytes.NewBuffer(nil))"
                    },
                    {
                        "Name": "SshDefaultTimeout",
                        "Expression": "10 * time.Second"
                    },
                    {
                        "Name": "SshPrivateKey",
                        "Expression": "ExpandUser(`~/.ssh/id_rsa`)"
                    },
                    {
                        "Name": "SshVerifyHostFunc",
                        "Type": "ssh.HostKeyCallback"
                    }
                ],
                "Functions": [
                    {
                        "Name": "AddMimeTypeFile",
                        "Arguments": [
                            {
                                "Name": "filename",
                                "Type": "string"
                            }
                        ],
                        "Signature": "AddMimeTypeFile(filename string)",
                        "Source": "ewoJaWYgSXNOb25lbXB0eUZpbGUoZmlsZW5hbWUpIHsKCQltaW1lRmlsZXMgPSBhcHBlbmQobWltZUZpbGVzLCBmaWxlbmFtZSkKCQlJbml0TWltZSgpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Cat",
                        "Comment": "Attempt to call ReadAllString, but will return an empty string if there is an error.  Does not panic.",
                        "Arguments": [
                            {
                                "Name": "file",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Cat(file any) string",
                        "Source": "ewoJaWYgZGF0YSwgZXJyIDo9IFJlYWRBbGxTdHJpbmcoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBkYXRhCgl9IGVsc2UgewoJCXJldHVybiBgYAoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ChecksumFile",
                        "Arguments": [
                            {
                                "Name": "filename",
                                "Type": "string"
                            },
                            {
                                "Name": "fn",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ChecksumFile(filename string, fn any) ([]byte, error)",
                        "Source": "ewoJdmFyIGhhc2ggY3J5cHRvLkhhc2gKCWlmIGgsIG9rIDo9IGZuLihjcnlwdG8uSGFzaCk7IG9rIHsKCQloYXNoID0gaAoJfSBlbHNlIHsKCQlzd2l0Y2ggc3RyaW5ncy5Ub0xvd2VyKHR5cGV1dGlsLlN0cmluZyhmbikpIHsKCQljYXNlIGBtZDRgOgoJCQloYXNoID0gY3J5cHRvLk1ENAoJCWNhc2UgYG1kNWA6CgkJCWhhc2ggPSBjcnlwdG8uTUQ1CgkJY2FzZSBgc2hhMWA6CgkJCWhhc2ggPSBjcnlwdG8uU0hBMQoJCWNhc2UgYHNoYTIyNGA6CgkJCWhhc2ggPSBjcnlwdG8uU0hBMjI0CgkJY2FzZSBgc2hhMjU2YDoKCQkJaGFzaCA9IGNyeXB0by5TSEEyNTYKCQljYXNlIGBzaGEzODRgOgoJCQloYXNoID0gY3J5cHRvLlNIQTM4NAoJCWNhc2UgYHNoYTUxMmA6CgkJCWhhc2ggPSBjcnlwdG8uU0hBNTEyCgkJY2FzZSBgbWQ1c2hhMWA6CgkJCWhhc2ggPSBjcnlwdG8uTUQ1U0hBMQoJCWNhc2UgYHJpcGVtZDE2MGA6CgkJCWhhc2ggPSBjcnlwdG8uUklQRU1EMTYwCgkJY2FzZSBgc2hhM18yMjRgOgoJCQloYXNoID0gY3J5cHRvLlNIQTNfMjI0CgkJY2FzZSBgc2hhM18yNTZgOgoJCQloYXNoID0gY3J5cHRvLlNIQTNfMjU2CgkJY2FzZSBgc2hhM18zODRgOgoJCQloYXNoID0gY3J5cHRvLlNIQTNfMzg0CgkJY2FzZSBgc2hhM181MTJgOgoJCQloYXNoID0gY3J5cHRvLlNIQTNfNTEyCgkJY2FzZSBgc2hhNTEyXzIyNGA6CgkJCWhhc2ggPSBjcnlwdG8uU0hBNTEyXzIyNAoJCWNhc2UgYHNoYTUxMl8yNTZgOgoJCQloYXNoID0gY3J5cHRvLlNIQTUxMl8yNTYKCQljYXNlIGBibGFrZTJzXzI1NmA6CgkJCWhhc2ggPSBjcnlwdG8uQkxBS0Uyc18yNTYKCQljYXNlIGBibGFrZTJiXzI1NmA6CgkJCWhhc2ggPSBjcnlwdG8uQkxBS0UyYl8yNTYKCQljYXNlIGBibGFrZTJiXzM4NGA6CgkJCWhhc2ggPSBjcnlwdG8uQkxBS0UyYl8zODQKCQljYXNlIGBibGFrZTJiXzUxMmA6CgkJCWhhc2ggPSBjcnlwdG8uQkxBS0UyYl81MTIKCQlkZWZhdWx0OgoJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJ1bmtub3duIGhhc2ggZnVuY3Rpb24gJXEiLCBmbikKCQl9Cgl9CglpZiBoYXNoLkF2YWlsYWJsZSgpIHsKCQl2YXIgaGFzaGVyID0gaGFzaC5OZXcoKQoJCWlmIGZpbGUsIGVyciA6PSBvcy5PcGVuKGZpbGVuYW1lKTsgZXJyID09IG5pbCB7CgkJCWRlZmVyIGZpbGUuQ2xvc2UoKQoJCQlpZiBfLCBlcnIgOj0gaW8uQ29weShoYXNoZXIsIGZpbGUpOyBlcnIgPT0gbmlsIHsKCQkJCXZhciBzdW0gPSBoYXNoZXIuU3VtKG5pbCkKCQkJCXJldHVybiBzdW0sIG5pbAoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCX0KCQl9IGVsc2UgewoJCQlyZXR1cm4gbmlsLCBlcnIKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoImhhc2ggZnVuY3Rpb24gJXYgaXMgbm90IGF2YWlsYWJsZSIsIGhhc2gpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "CompareReaders",
                        "Comment": "Compare the binary contents of two io.Reader instances.  The result will be 0 if a==b, -1 if a \u003c b, and +1 if a \u003e b.\nAn optional hash.Hash instance may be given, otherwise the default crypto/sha256 will be used.",
                        "Arguments": [
                            {
                                "Name": "a",
                                "Type": "io.Reader"
                            },
                            {
                                "Name": "b",
                                "Type": "io.Reader"
                            },
                            {
                                "Name": "hasher",
                                "Type": "...hash.Hash"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int"
                            }
                        ],
                        "Signature": "CompareReaders(a io.Reader, b io.Reader, hasher ...hash.Hash) int",
                        "Source": "ewoJdmFyIGggaGFzaC5IYXNoCglpZiBsZW4oaGFzaGVyKSA+IDAgJiYgaGFzaGVyWzBdICE9IG5pbCB7CgkJaCA9IGhhc2hlclswXQoJfSBlbHNlIHsKCQloID0gc2hhMjU2Lk5ldygpCgl9CglpZiBfLCBlcnIgOj0gaW8uQ29weShoLCBhKTsgZXJyID09IG5pbCB7CgkJdmFyIHMxID0gaC5TdW0obmlsKQoJCWguUmVzZXQoKQoJCWlmIF8sIGVyciA6PSBpby5Db3B5KGgsIGIpOyBlcnIgPT0gbmlsIHsKCQkJdmFyIHMyID0gaC5TdW0obmlsKQoJCQlyZXR1cm4gYnl0ZXMuQ29tcGFyZShzMSwgczIpCgkJfQoJfQoJcmV0dXJuIC0xCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "CopyDir",
                        "Comment": "Recursively walk the entries of a given directory, calling CopyEntryFunc for each entry.\nThe io.Writer returned from the function will have that file's contents written to it.  If\nthe io.Writer is nil, the file will not be written anywhere but no error will be returned.\nIf CopyEntryFunc returns an error, the behavior will be consistent with filepath.WalkFunc",
                        "Arguments": [
                            {
                                "Name": "root",
                                "Type": "string"
                            },
                            {
                                "Name": "fn",
                                "Type": "CopyEntryFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "CopyDir(root string, fn CopyEntryFunc) error",
                        "Source": "ewoJcmV0dXJuIGNvcHlEaXIocm9vdCwgZmFsc2UsIGZuKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "CopyDirWithHidden",
                        "Comment": "A version of CopyDir that includes hidden files",
                        "Arguments": [
                            {
                                "Name": "root",
                                "Type": "string"
                            },
                            {
                                "Name": "fn",
                                "Type": "CopyEntryFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "CopyDirWithHidden(root string, fn CopyEntryFunc) error",
                        "Source": "ewoJcmV0dXJuIGNvcHlEaXIocm9vdCwgdHJ1ZSwgZm4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "CopyFile",
                        "Comment": "Copy a file from one place to another.  Source can be an io.Reader or string.  If source is a\nstring, the string will be passed to the Open() function as a URL.  Destination can be an\nio.Writer or string.  If destination is a string, it will be treated as a local filesystem path\nto write the data read from source to.\n\nIf either source or destination implements io.Closer, thee files will be closed before this\nfunction returns.",
                        "Arguments": [
                            {
                                "Name": "source",
                                "Type": "any"
                            },
                            {
                                "Name": "destination",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "CopyFile(source any, destination any) error",
                        "Source": "ewoJdmFyIHNyZWFkZXIgaW8uUmVhZGVyCgl2YXIgZHdyaXRlciBpby5Xcml0ZXIKCWlmIHNmaWxlbmFtZSwgb2sgOj0gc291cmNlLihzdHJpbmcpOyBvayB7CgkJaWYgc3IsIGVyciA6PSBPcGVuKHNmaWxlbmFtZSk7IGVyciA9PSBuaWwgewoJCQlzcmVhZGVyID0gc3IKCQl9IGVsc2UgewoJCQlyZXR1cm4gZXJyCgkJfQoJfSBlbHNlIGlmIHNyLCBvayA6PSBzb3VyY2UuKGlvLlJlYWRlcik7IG9rIHsKCQlzcmVhZGVyID0gc3IKCX0gZWxzZSB7CgkJcmV0dXJuIGZtdC5FcnJvcmYoInVuc3VwcG9ydGVkIHNvdXJjZSAlVCIsIHNvdXJjZSkKCX0KCWlmIGRmaWxlbmFtZSwgb2sgOj0gc291cmNlLihzdHJpbmcpOyBvayB7CgkJaWYgZGZpbGUsIGVyciA6PSBvcy5DcmVhdGUoZGZpbGVuYW1lKTsgZXJyID09IG5pbCB7CgkJCWR3cml0ZXIgPSBkZmlsZQoJCX0gZWxzZSB7CgkJCXJldHVybiBlcnIKCQl9Cgl9IGVsc2UgaWYgZHcsIG9rIDo9IGRlc3RpbmF0aW9uLihpby5Xcml0ZXIpOyBvayB7CgkJZHdyaXRlciA9IGR3Cgl9IGVsc2UgewoJCXJldHVybiBmbXQuRXJyb3JmKCJ1bnN1cHBvcnRlZCBzb3VyY2UgJVQiLCBzb3VyY2UpCgl9CglkZWZlciBmdW5jKCkgewoJCWlmIHNjLCBvayA6PSBzcmVhZGVyLihpby5DbG9zZXIpOyBvayB7CgkJCXNjLkNsb3NlKCkKCQl9CgkJaWYgZGMsIG9rIDo9IGR3cml0ZXIuKGlvLkNsb3Nlcik7IG9rIHsKCQkJZGMuQ2xvc2UoKQoJCX0KCX0oKQoJXywgZXJyIDo9IGlvLkNvcHkoZHdyaXRlciwgc3JlYWRlcikKCXJldHVybiBlcnIKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "GetMimeType",
                        "Comment": "GetMimeType goes out of its way to really, really try to figure out the MIME type of a given\nfilename or io.Reader.  If the first argument satisfies the io.Seeker interface, the seeker\nwill Seek() back to the beginning.  If it satisfies the io.Closer interface, it will be closed.",
                        "Arguments": [
                            {
                                "Name": "filenameOrReader",
                                "Type": "any"
                            },
                            {
                                "Name": "fallback",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "GetMimeType(filenameOrReader any, fallback ...string) string",
                        "Source": "ewoJb25jZS5EbyhJbml0TWltZSkKCWlmIGZpbGVuYW1lLCBvayA6PSBmaWxlbmFtZU9yUmVhZGVyLihzdHJpbmcpOyBvayB7CgkJaWYgbXQgOj0gbWltZS5UeXBlQnlFeHRlbnNpb24oZmlsZXBhdGguRXh0KGZpbGVuYW1lKSk7IG10ICE9IGBgIHsKCQkJcmV0dXJuIG10CgkJfSBlbHNlIGlmIElzTm9uZW1wdHlGaWxlKGZpbGVuYW1lKSB7CgkJCWlmIGZpbGUsIGVyciA6PSBvcy5PcGVuKGZpbGVuYW1lKTsgZXJyID09IG5pbCB7CgkJCQlkZWZlciBmaWxlLkNsb3NlKCkKCQkJCWZpbGVuYW1lT3JSZWFkZXIgPSBmaWxlCgkJCX0KCQl9Cgl9CglpZiByZWFkZXIsIG9rIDo9IGZpbGVuYW1lT3JSZWFkZXIuKGlvLlJlYWRlcik7IG9rIHsKCQlkZWZlciBmdW5jKCkgewoJCQlpZiBzZWVrZXIsIG9rIDo9IGZpbGVuYW1lT3JSZWFkZXIuKGlvLlNlZWtlcik7IG9rIHsKCQkJCXNlZWtlci5TZWVrKDAsIGlvLlNlZWtTdGFydCkKCQkJfQoJCX0oKQoJCWlmIGRldGVjdGVkLCBlcnIgOj0gZmlsZXR5cGUuTWF0Y2hSZWFkZXIocmVhZGVyKTsgZXJyID09IG5pbCAmJiBkZXRlY3RlZC5NSU1FLlZhbHVlICE9IGBgIHsKCQkJcmV0dXJuIGRldGVjdGVkLk1JTUUuVmFsdWUKCQl9Cgl9CglpZiBsZW4oZmFsbGJhY2spID4gMCAmJiBmYWxsYmFja1swXSAhPSBgYCB7CgkJcmV0dXJuIGZhbGxiYWNrWzBdCgl9IGVsc2UgewoJCXJldHVybiBgYAoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "GetNthLine",
                        "Comment": "Attempt to return the nth line (starting from 1) in the given file or reader.",
                        "Arguments": [
                            {
                                "Name": "file",
                                "Type": "any"
                            },
                            {
                                "Name": "number",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "GetNthLine(file any, number int) (string, error)",
                        "Source": "ewoJaWYgbGluZXMsIGVyciA6PSBSZWFkQWxsTGluZXMoZmlsZSk7IGVyciA9PSBuaWwgewoJCWlmIG51bWJlciA8IDEgewoJCQlyZXR1cm4gYGAsIGZtdC5FcnJvcmYoImxpbmUgbnVtYmVyIG11c3QgYmUgPj0gMSIpCgkJfQoJCWlmIG51bWJlciA8PSBsZW4obGluZXMpIHsKCQkJcmV0dXJuIGxpbmVzW251bWJlci0xXSwgbmlsCgkJfSBlbHNlIHsKCQkJcmV0dXJuIGBgLCBmbXQuRXJyb3JmKCJsaW5lIGV4Y2VlZHMgZmlsZSBsaW5lIGNvdW50IikKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBgYCwgZXJyCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "InitMime",
                        "Signature": "InitMime()",
                        "Source": "",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsHiddenFile",
                        "Arguments": [
                            {
                                "Name": "filename",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsHiddenFile(filename string) bool",
                        "Source": "ewoJZmlsZW5hbWUgPSBmaWxlcGF0aC5CYXNlKGZpbGVuYW1lKQoJc3dpdGNoIGZpbGVuYW1lIHsKCWNhc2UgYGAsIGAuYCwgYC4uYDoKCQlyZXR1cm4gZmFsc2UKCWRlZmF1bHQ6CgkJcmV0dXJuIHN0cmluZ3MuSGFzUHJlZml4KGZpbGVuYW1lLCBgLmApCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsModifiedAfter",
                        "Comment": "Return true if the given FileInfo sports a ModTime later than the current file.",
                        "Arguments": [
                            {
                                "Name": "stat",
                                "Type": "os.FileInfo"
                            },
                            {
                                "Name": "current",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsModifiedAfter(stat os.FileInfo, current string) bool",
                        "Source": "ewoJaWYgRXhpc3RzKGN1cnJlbnQpIHsKCQljdXJyZW50ID0gTXVzdEV4cGFuZFVzZXIoY3VycmVudCkKCQlpZiBjdXJyZW50U3RhdCwgZXJyIDo9IG9zLlN0YXQoY3VycmVudCk7IGVyciA9PSBuaWwgewoJCQlyZXR1cm4gc3RhdC5Nb2RUaW1lKCkuQWZ0ZXIoY3VycmVudFN0YXQuTW9kVGltZSgpKQoJCX0gZWxzZSB7CgkJCXJldHVybiBmYWxzZQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIHRydWUKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsTerminal",
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsTerminal() bool",
                        "Source": "ewoJcmV0dXJuIGlzYXR0eS5Jc1Rlcm1pbmFsKG9zLlN0ZG91dC5GZCgpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustExpandUser",
                        "Arguments": [
                            {
                                "Name": "path",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "MustExpandUser(path string) string",
                        "Source": "ewoJaWYgZXhwYW5kZWQsIGVyciA6PSBFeHBhbmRVc2VyKHBhdGgpOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gZXhwYW5kZWQKCX0gZWxzZSB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustGetNthLine",
                        "Comment": "A panicky version of GetNthLine.",
                        "Arguments": [
                            {
                                "Name": "file",
                                "Type": "any"
                            },
                            {
                                "Name": "number",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "MustGetNthLine(file any, number int) string",
                        "Source": "ewoJaWYgbGluZSwgZXJyIDo9IEdldE50aExpbmUoZmlsZSwgbnVtYmVyKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIGxpbmUKCX0gZWxzZSB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustReadAll",
                        "Arguments": [
                            {
                                "Name": "file",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            }
                        ],
                        "Signature": "MustReadAll(file any) []byte",
                        "Source": "ewoJaWYgZGF0YSwgZXJyIDo9IFJlYWRBbGwoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBkYXRhCgl9IGVsc2UgewoJCXBhbmljKGVyci5FcnJvcigpKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustReadAllLines",
                        "Comment": "A panicky version of ReadAllLines.",
                        "Arguments": [
                            {
                                "Name": "file",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "MustReadAllLines(file any) []string",
                        "Source": "ewoJaWYgbGluZXMsIGVyciA6PSBSZWFkQWxsTGluZXMoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBsaW5lcwoJfSBlbHNlIHsKCQlwYW5pYyhlcnIuRXJyb3IoKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustReadAllString",
                        "Arguments": [
                            {
                                "Name": "file",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "MustReadAllString(file any) string",
                        "Source": "ewoJaWYgZGF0YSwgZXJyIDo9IFJlYWRBbGxTdHJpbmcoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBkYXRhCgl9IGVsc2UgewoJCXBhbmljKGVyci5FcnJvcigpKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustWriteFile",
                        "Comment": "Same as WriteFile, but will panic if the file cannot be written.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            },
                            {
                                "Name": "filename",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int64"
                            }
                        ],
                        "Signature": "MustWriteFile(input any, filename string) int64",
                        "Source": "ewoJaWYgbiwgZXJyIDo9IFdyaXRlRmlsZShpbnB1dCwgZmlsZW5hbWUpOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gbgoJfSBlbHNlIHsKCQlwYW5pYyhlcnIuRXJyb3IoKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustWriteTempFile",
                        "Comment": "Same as MustWriteFile, but writes the given input to a temporary file, returning\nthe filename.  The function will panic if the file cannot be written.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            },
                            {
                                "Name": "prefix",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "MustWriteTempFile(input any, prefix string) string",
                        "Source": "ewoJaWYgbiwgZXJyIDo9IFdyaXRlVGVtcEZpbGUoaW5wdXQsIHByZWZpeCk7IGVyciA9PSBuaWwgewoJCXJldHVybiBuCgl9IGVsc2UgewoJCXBhbmljKGVyci5FcnJvcigpKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Open",
                        "Comment": "Calls OpenWithOptions with no options set.",
                        "Arguments": [
                            {
                                "Name": "uri",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "io.Reader"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "Open(uri string) (io.Reader, error)",
                        "Source": "ewoJcmV0dXJuIE9wZW5XaXRoT3B0aW9ucyh1cmksIE9wZW5PcHRpb25ze30pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "OpenWithOptions",
                        "Comment": "A generic URL opener that supports various schemes and returns an io.Reader.\nSupported URL schemes include: file://, http://, https://, ftp://, sftp://. If no scheme is\nprovided, the URL is interpreted as a local filesystem path.",
                        "Arguments": [
                            {
                                "Name": "uri",
                                "Type": "string"
                            },
                            {
                                "Name": "options",
                                "Type": "OpenOptions"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "io.Reader"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "OpenWithOptions(uri string, options OpenOptions) (io.Reader, error)",
                        "Source": "ewoJaWYgdSwgZXJyIDo9IHVybC5QYXJzZSh1cmkpOyBlcnIgPT0gbmlsIHsKCQlpZiBoYW5kbGVyLCBvayA6PSBvcGVuSGFuZGxlcnNbdS5TY2hlbWVdOyBvayB7CgkJCXJldHVybiBoYW5kbGVyKHUsIG9wdGlvbnMpCgkJfSBlbHNlIHsKCQkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigidW5zdXBwb3J0ZWQgc2NoZW1lICVzIiwgdS5TY2hlbWUpCgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJpbnZhbGlkIHNvdXJjZSBVUkwgb3IgZmlsZW5hbWUiKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ReadAll",
                        "Comment": "Takes the given string filename, []byte, io.Reader, or io.ReadCloser and returns\nthe bytes therein.",
                        "Arguments": [
                            {
                                "Name": "file",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ReadAll(file any) ([]byte, error)",
                        "Source": "ewoJdmFyIHJjIGlvLlJlYWRDbG9zZXIKCWlmIGIsIG9rIDo9IGZpbGUuKFtdYnl0ZSk7IG9rIHsKCQlyZXR1cm4gYiwgbmlsCgl9IGVsc2UgaWYgciwgb2sgOj0gZmlsZS4oaW8uUmVhZENsb3Nlcik7IG9rIHsKCQlyYyA9IHIKCX0gZWxzZSBpZiByLCBvayA6PSBmaWxlLihpby5SZWFkZXIpOyBvayB7CgkJcmMgPSBpby5Ob3BDbG9zZXIocikKCX0gZWxzZSBpZiBmaWxlbmFtZSwgb2sgOj0gZmlsZS4oc3RyaW5nKTsgb2sgewoJCWlmIGYsIGVyciA6PSBvcy5PcGVuKGZpbGVuYW1lKTsgZXJyID09IG5pbCB7CgkJCXJjID0gZgoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGVycgoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigibXVzdCBwcm92aWRlIG9uZSBvZjogc3RyaW5nLCBbXWJ5dGUsIGlvLlJlYWRlciwgb3IgaW8uUmVhZENsb3NlciIpCgl9CglkZWZlciByYy5DbG9zZSgpCglyZXR1cm4gaW8uUmVhZEFsbChyYykKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ReadAllLines",
                        "Comment": "Read all lines of text from the given file and return them as a slice.",
                        "Arguments": [
                            {
                                "Name": "file",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ReadAllLines(file any) ([]string, error)",
                        "Source": "ewoJaWYgZGF0YSwgZXJyIDo9IFJlYWRBbGxTdHJpbmcoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBzdHJpbmdzLlNwbGl0KGRhdGEsICJcbiIpLCBuaWwKCX0gZWxzZSB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ReadAllString",
                        "Comment": "A string version of ReadAll.",
                        "Arguments": [
                            {
                                "Name": "file",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ReadAllString(file any) (string, error)",
                        "Source": "ewoJaWYgZGF0YSwgZXJyIDo9IFJlYWRBbGwoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBzdHJpbmcoZGF0YSksIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gYGAsIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ReadFirstLine",
                        "Arguments": [
                            {
                                "Name": "file",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ReadFirstLine(file any) (string, error)",
                        "Source": "ewoJaWYgbGluZXMsIGVyciA6PSBSZWFkQWxsTGluZXMoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBsaW5lc1swXSwgbmlsCgl9IGVsc2UgewoJCXJldHVybiBgYCwgZXJyCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RegisterOpenHandler",
                        "Comment": "Register a handler for a new or existing URL scheme, for use with Open() and OpenWithOptions()",
                        "Arguments": [
                            {
                                "Name": "scheme",
                                "Type": "string"
                            },
                            {
                                "Name": "handler",
                                "Type": "OpenHandler"
                            }
                        ],
                        "Signature": "RegisterOpenHandler(scheme string, handler OpenHandler)",
                        "Source": "ewoJb3BlbkhhbmRsZXJzW3NjaGVtZV0gPSBoYW5kbGVyCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RegisterRetrieveScheme",
                        "Comment": "Register a new Retrieve() function for the given URL scheme.",
                        "Arguments": [
                            {
                                "Name": "scheme",
                                "Type": "string"
                            },
                            {
                                "Name": "fn",
                                "Type": "RetrieveHandlerFunc"
                            }
                        ],
                        "Signature": "RegisterRetrieveScheme(scheme string, fn RetrieveHandlerFunc)",
                        "Source": "ewoJcmV0cmlldmVTY2hlbWVIYW5kbGVyc1tzY2hlbWVdID0gZm4KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RemoveBlankLines",
                        "Comment": "A ReadManipulatorFunc for removing lines that only contain whitespace.",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "[]byte"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "RemoveBlankLines(data []byte) ([]byte, error)",
                        "Source": "ewoJaWYgbGluZSA6PSBzdHJpbmdzLlRyaW1TcGFjZShzdHJpbmcoZGF0YSkpOyBsZW4obGluZSkgPT0gMCB7CgkJcmV0dXJuIG5pbCwgRXJyU2tpcFRva2VuCgl9IGVsc2UgewoJCXJldHVybiBkYXRhLCBuaWwKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RemoveOpenHandler",
                        "Comment": "Removes a registered URL scheme handler.",
                        "Arguments": [
                            {
                                "Name": "scheme",
                                "Type": "string"
                            }
                        ],
                        "Signature": "RemoveOpenHandler(scheme string)",
                        "Source": "ewoJZGVsZXRlKG9wZW5IYW5kbGVycywgc2NoZW1lKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Retrieve",
                        "Comment": "Perform a generic retrieval of data located at a specified resource given as a URL.\nThis function supports file://, http://, https://, ssh://, and sftp:// schemes, and can\nbe extended to support additional schemes using the RegisterRetrieveScheme package function.\n\nIf resourceUri is given as a *url.URL, the value of that URL will be copied.  Any other type\nwill be converted to a string (honoring types that implement fmt.Stringer), and the resulting\nURL will be used.",
                        "Arguments": [
                            {
                                "Name": "ctx",
                                "Type": "context.Context"
                            },
                            {
                                "Name": "resourceUri",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "io.ReadCloser"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "Retrieve(ctx context.Context, resourceUri any) (io.ReadCloser, error)",
                        "Source": "ewoJY3R4LCBfID0gY3R4VG9UaW1lb3V0KGN0eCwgMCkKCXZhciB1cmkgdXJsLlVSTAoJaWYgdSwgb2sgOj0gcmVzb3VyY2VVcmkuKCp1cmwuVVJMKTsgb2sgewoJCXVyaSA9ICp1Cgl9IGVsc2UgewoJCXZhciByID0gdHlwZXV0aWwuU3RyaW5nKHJlc291cmNlVXJpKQoJCWlmICFzdHJpbmdzLkNvbnRhaW5zKHIsIGA6Ly9gKSB7CgkJCXIgPSBgZmlsZTovLy9gICsgcgoJCX0KCQlpZiB1LCBlcnIgOj0gdXJsLlBhcnNlKHIpOyBlcnIgPT0gbmlsIHsKCQkJdXJpID0gKnUKCQl9IGVsc2UgewoJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJiYWQgdXJsOiAldiIsIGVycikKCQl9Cgl9Cgl1cmkuU2NoZW1lID0gc3RyaW5ncy5Ub0xvd2VyKHVyaS5TY2hlbWUpCglpZiBoYW5kbGVyLCBvayA6PSByZXRyaWV2ZVNjaGVtZUhhbmRsZXJzW3VyaS5TY2hlbWVdOyBvayAmJiBoYW5kbGVyICE9IG5pbCB7CgkJcmV0dXJuIGhhbmRsZXIoY3R4LCAmdXJpKQoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJ1bnN1cHBvcnRlZCBzY2hlbWUgJXEiLCB1cmkuU2NoZW1lKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RetrieveViaFilesystem",
                        "Comment": "Retrieve a file via a filesystem.  If the context value `filesystem` implements\nthe http.FileSystem interface, it will be used to perform the retrieval in lieu\nof the local filesystem.",
                        "Arguments": [
                            {
                                "Name": "ctx",
                                "Type": "context.Context"
                            },
                            {
                                "Name": "u",
                                "Type": "*url.URL"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "io.ReadCloser"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "RetrieveViaFilesystem(ctx context.Context, u *url.URL) (io.ReadCloser, error)",
                        "Source": "ewoJY3R4LCBfID0gY3R4VG9UaW1lb3V0KGN0eCwgMCkKCXZhciBmaWxlc3lzdGVtIGh0dHAuRmlsZVN5c3RlbSA9IGh0dHAuRGlyKGAvYCkKCXZhciBwYXRoID0gc3RyaW5ncy5UcmltUHJlZml4KHUuUGF0aCwgYC9gKQoJaWYgZnMsIG9rIDo9IGN0eC5WYWx1ZShgZmlsZXN5c3RlbWApLihodHRwLkZpbGVTeXN0ZW0pOyBvayB7CgkJZmlsZXN5c3RlbSA9IGZzCgl9CglpZiAhc3RyaW5ncy5IYXNQcmVmaXgocGF0aCwgYC9gKSB7CgkJaWYgYWJzLCBlcnIgOj0gZmlsZXBhdGguQWJzKHBhdGgpOyBlcnIgPT0gbmlsIHsKCQkJcGF0aCA9IGFicwoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoImJhZCBwYXRoOiAldiIsIGVycikKCQl9Cgl9CglyZXR1cm4gZmlsZXN5c3RlbS5PcGVuKHBhdGgpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RetrieveViaHTTP",
                        "Comment": "Retrieve a file via HTTP or HTTPS.\n\nSupported Context Values:\n\n\tinsecure:\n\t  (bool) specify that strict TLS validation should be optional.\n\n\tmethod:\n\t  (string) the HTTP method to use, defaults to GET.\n\n\tmetadata:\n\t  (map[string]any) a key-value set of HTTP request headers to include.\n\n\tsafeResponseCodes:\n\t  ([]int) a list of one or more HTTP status codes that are considered successful for this request.",
                        "Arguments": [
                            {
                                "Name": "ctx",
                                "Type": "context.Context"
                            },
                            {
                                "Name": "u",
                                "Type": "*url.URL"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "io.ReadCloser"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "RetrieveViaHTTP(ctx context.Context, u *url.URL) (io.ReadCloser, error)",
                        "Source": "ewoJY3R4LCB0aW1lb3V0IDo9IGN0eFRvVGltZW91dChjdHgsIEh0dHBEZWZhdWx0VGltZW91dCkKCXZhciBjbGllbnQgPSAmaHR0cC5DbGllbnR7VGltZW91dDogdGltZW91dH0KCWlmIHR5cGV1dGlsLkJvb2woY3R4LlZhbHVlKGBpbnNlY3VyZWApKSB7CgkJY2xpZW50LlRyYW5zcG9ydCA9ICZodHRwLlRyYW5zcG9ydHtUTFNDbGllbnRDb25maWc6ICZ0bHMuQ29uZmlne0luc2VjdXJlU2tpcFZlcmlmeTogdHJ1ZX19Cgl9CglpZiByZXEsIGVyciA6PSBodHRwLk5ld1JlcXVlc3QodHlwZXV0aWwuT3JTdHJpbmcoY3R4LlZhbHVlKGBtZXRob2RgKSwgaHR0cC5NZXRob2RHZXQpLCB1LlN0cmluZygpLCBuaWwpOyBlcnIgPT0gbmlsIHsKCQlmb3Iga3YgOj0gcmFuZ2UgbWFwdXRpbC5NKGN0eC5WYWx1ZShgbWV0YWRhdGFgKSkuSXRlcigpIHsKCQkJaWYgayA6PSBrdi5LOyBrICE9IGBgIHsKCQkJCWlmIHYgOj0ga3YuVi5TdHJpbmcoKTsgdiAhPSBgYCB7CgkJCQkJcmVxLkhlYWRlci5TZXQoaywgdikKCQkJCX0KCQkJfQoJCX0KCQl2YXIgc3RhdHVzT2sgPSBmdW5jKHJlcyAqaHR0cC5SZXNwb25zZSkgYm9vbCB7CgkJCXZhciBjb2RlcyA9IHNsaWNldXRpbC5TdHJpbmdpZnkoY3R4LlZhbHVlKGBzYWZlUmVzcG9uc2VDb2Rlc2ApKQoJCQlpZiBsZW4oY29kZXMpID4gMCB7CgkJCQlyZXR1cm4gc2xpY2V1dGlsLkNvbnRhaW5zU3RyaW5nKGNvZGVzLCB0eXBldXRpbC5TdHJpbmcocmVzLlN0YXR1c0NvZGUpKQoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIHJlcy5TdGF0dXNDb2RlIDwgNDAwCgkJCX0KCQl9CgkJaWYgcmVzLCBlcnIgOj0gY2xpZW50LkRvKHJlcSk7IGVyciA9PSBuaWwgewoJCQlpZiBzdGF0dXNPayhyZXMpIHsKCQkJCWlmIHJlcy5Cb2R5ICE9IG5pbCB7CgkJCQkJcmV0dXJuIHJlcy5Cb2R5LCBuaWwKCQkJCX0gZWxzZSB7CgkJCQkJcmV0dXJuIE51bGxSZWFkQ2xvc2VyLCBuaWwKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoInJlc3BvbmRlZCBIVFRQOiAldiIsIHJlcy5TdGF0dXMpCgkJCX0KCQl9IGVsc2UgewoJCQlyZXR1cm4gbmlsLCBlcnIKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBuaWwsIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RetrieveViaSSH",
                        "Comment": "Retrieve a file via SFTP (SSH file transfer).  The given URL should resemble the\nprototype: ssh://[user:password@]hostname[:22]/path/relative/to/homedir\n\nThis function will honor any authentication details from a running SSH agent,\nas well as utilize the private key located in the path indicated by SshPrivateKey\nor via the `privateKey` context value.\n\nSupported Context Values:\n\nusername:\n\n\t(string) the username to login with. can be overriden by a username specified in the URL.\n\npassword:\n\n\t(string) the password to login with. can be overriden by a password specified in the URL.\n\npassphrase:\n\n\t(string) context value specifies a plaintext passphrase used to unlock the local private keyfile.\n\ninsecure:\n\n\t(bool) whether to ignore remote hostkey checks.  Does not work if verifyHostFunc is set.\n\nverifyHostFunc:\n\n\t(SshHostKeyCallbackFunc) context value, if it is convertible to the ssh.HostKeyCallback type, will\n\tbe called to verify the remote SSH host key in a manner of the function's choosing.  The default\n\tbehavior is to accept all remote hostkeys as valid.",
                        "Arguments": [
                            {
                                "Name": "ctx",
                                "Type": "context.Context"
                            },
                            {
                                "Name": "u",
                                "Type": "*url.URL"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "io.ReadCloser"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "RetrieveViaSSH(ctx context.Context, u *url.URL) (io.ReadCloser, error)",
                        "Source": "ewoJY3R4LCB0aW1lb3V0IDo9IGN0eFRvVGltZW91dChjdHgsIFNzaERlZmF1bHRUaW1lb3V0KQoJdmFyIGF1dGhNZXRob2RzIGdvcGguQXV0aAoJdmFyIHVzZXJuYW1lIHN0cmluZyA9IHR5cGV1dGlsLlN0cmluZyhjdHguVmFsdWUoYHVzZXJuYW1lYCkpCgl2YXIgcGFzc3dvcmQgc3RyaW5nID0gdHlwZXV0aWwuU3RyaW5nKGN0eC5WYWx1ZShgcGFzc3dvcmRgKSkKCXZhciBwb3J0IGludCA9IHR5cGV1dGlsLk9yTkludCh1LlBvcnQoKSwgMjIpCgl2YXIgcmVtb3RlUGF0aCA9IHN0cmluZ3MuVHJpbVByZWZpeCh1LlBhdGgsIGAvYCkKCXZhciBrZXlQYXNzcGhyYXNlID0gdHlwZXV0aWwuU3RyaW5nKGN0eC5WYWx1ZShgcGFzc3BocmFzZWApKQoJdmFyIHZlcmlmeUhvc3RGdW5jID0gU3NoVmVyaWZ5SG9zdEZ1bmMKCWlmIHZoZm4sIG9rIDo9IGN0eC5WYWx1ZShgdmVyaWZ5SG9zdEZ1bmNgKS4oU3NoSG9zdEtleUNhbGxiYWNrRnVuYyk7IG9rIHsKCQl2ZXJpZnlIb3N0RnVuYyA9IHZoZm4KCX0gZWxzZSBpZiB0eXBldXRpbC5Cb29sKGN0eC5WYWx1ZShgaW5zZWN1cmVgKSkgewoJCXZlcmlmeUhvc3RGdW5jID0gc3NoLkluc2VjdXJlSWdub3JlSG9zdEtleSgpCgl9Cgl2YXIga2V5RmlsZSA9IHNsaWNldXRpbC5PclN0cmluZyh0eXBldXRpbC5TdHJpbmcoY3R4LlZhbHVlKGBwYXNzcGhyYXNlYCkpLCBTc2hQcml2YXRlS2V5KQoJaWYgYSwgZXJyIDo9IGdvcGguVXNlQWdlbnQoKTsgZXJyID09IG5pbCB7CgkJYXV0aE1ldGhvZHMgPSBhcHBlbmQoYXV0aE1ldGhvZHMsIGEuLi4pCgl9CglpZiB1aSA6PSB1LlVzZXI7IHVpICE9IG5pbCB7CgkJaWYgdSA6PSB1aS5Vc2VybmFtZSgpOyB1ICE9IGBgIHsKCQkJdXNlcm5hbWUgPSB1CgkJfQoJCWlmIHAsIG9rIDo9IHVpLlBhc3N3b3JkKCk7IG9rIHsKCQkJcGFzc3dvcmQgPSBwCgkJfQoJfQoJaWYgcGFzc3dvcmQgIT0gYGAgewoJCWF1dGhNZXRob2RzID0gYXBwZW5kKGF1dGhNZXRob2RzLCBnb3BoLlBhc3N3b3JkKHBhc3N3b3JkKS4uLikKCX0KCWlmIElzTm9uZW1wdHlGaWxlKGtleUZpbGUpIHsKCQlpZiBhLCBlcnIgOj0gZ29waC5LZXkoa2V5RmlsZSwga2V5UGFzc3BocmFzZSk7IGVyciA9PSBuaWwgewoJCQlhdXRoTWV0aG9kcyA9IGFwcGVuZChhdXRoTWV0aG9kcywgYS4uLikKCQl9Cgl9CglpZiBsZW4oYXV0aE1ldGhvZHMpID09IDAgewoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIm5vIGNsaWVudCBhdXRoZW50aWNhdGlvbiBtZXRob2RzIGF2YWlsYWJsZSIpCgl9CglpZiB1c2VybmFtZSA9PSBgYCB7CgkJaWYgY3VyLCBlcnIgOj0gdXNlci5DdXJyZW50KCk7IGVyciA9PSBuaWwgewoJCQl1c2VybmFtZSA9IGN1ci5Vc2VybmFtZQoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGVycgoJCX0KCX0KCWlmIGNsaWVudCwgZXJyIDo9IGdvcGguTmV3Q29ubigmZ29waC5Db25maWd7VXNlcjogdXNlcm5hbWUsIEFkZHI6IHUuSG9zdG5hbWUoKSwgUG9ydDogdWludChwb3J0KSwgQXV0aDogYXV0aE1ldGhvZHMsIFRpbWVvdXQ6IHRpbWVvdXQsIENhbGxiYWNrOiB2ZXJpZnlIb3N0RnVuY30pOyBlcnIgPT0gbmlsIHsKCQl2YXIgcmVhZENsb3NlciBpby5SZWFkQ2xvc2VyCgkJdmFyIHJlcnIgZXJyb3IKCQlzd2l0Y2ggdS5TY2hlbWUgewoJCWNhc2UgYHNmdHBgOgoJCQlpZiBzZnRwLCBlcnIgOj0gc2Z0cC5OZXdDbGllbnQoY2xpZW50LkNsaWVudCk7IGVyciA9PSBuaWwgewoJCQkJaWYgZmlsZSwgZXJyIDo9IHNmdHAuT3BlbihyZW1vdGVQYXRoKTsgZXJyID09IG5pbCB7CgkJCQkJcmVhZENsb3NlciA9IE5ld1Bvc3RSZWFkQ2xvc2VyKGZpbGUsIGZ1bmMocmMgaW8uUmVhZENsb3NlcikgZXJyb3IgewoJCQkJCQlkZWZlciBzZnRwLkNsb3NlKCkKCQkJCQkJZGVmZXIgY2xpZW50LkNsb3NlKCkKCQkJCQkJcmV0dXJuIGZpbGUuQ2xvc2UoKQoJCQkJCX0pCgkJCQl9IGVsc2UgewoJCQkJCWRlZmVyIHNmdHAuQ2xvc2UoKQoJCQkJCXJldHVybiBuaWwsIGVycgoJCQkJfQoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCX0KCQljYXNlIGBzc2hgOgoJCQlpZiBhcmd2LCBlcnIgOj0gc2hlbGx3b3Jkcy5QYXJzZShyZW1vdGVQYXRoKTsgZXJyID09IG5pbCB7CgkJCQlpZiBzY21kLCBlcnIgOj0gY2xpZW50LkNvbW1hbmQoYXJndlswXSwgYXJndlsxOl0uLi4pOyBlcnIgPT0gbmlsIHsKCQkJCQlpZiBvdXQsIGVyciA6PSBzY21kLlN0ZG91dFBpcGUoKTsgZXJyID09IG5pbCB7CgkJCQkJCWlmIGVyciA6PSBzY21kLlN0YXJ0KCk7IGVyciA9PSBuaWwgewoJCQkJCQkJcmVhZENsb3NlciA9IE5ld1Bvc3RSZWFkQ2xvc2VyKGlvLk5vcENsb3NlcihvdXQpLCBmdW5jKHJjIGlvLlJlYWRDbG9zZXIpIGVycm9yIHsKCQkJCQkJCQlkZWZlciBjbGllbnQuQ2xvc2UoKQoJCQkJCQkJCXJldHVybiBzY21kLldhaXQoKQoJCQkJCQkJfSkKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCXJlcnIgPSBmbXQuRXJyb3JmKCJSZXRyaWV2ZVZpYVNTSDogY29tbWFuZCBmYWlsZWQgdG8gc3RhcnQ6ICV2IiwgZXJyKQoJCQkJCQl9CgkJCQkJfSBlbHNlIHsKCQkJCQkJcmVyciA9IGZtdC5FcnJvcmYoIlJldHJpZXZlVmlhU1NIOiBiYWQgcGlwZTogJXYiLCBlcnIpCgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQlyZXJyID0gZm10LkVycm9yZigiUmV0cmlldmVWaWFTU0g6IGJhZCBzaGVsbCBjb21tYW5kOiAldiIsIGVycikKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCXJlcnIgPSBmbXQuRXJyb3JmKCJSZXRyaWV2ZVZpYVNTSDogYmFkIHNoZWxsIGNvbW1hbmQ6ICV2IiwgZXJyKQoJCQl9CgkJZGVmYXVsdDoKCQkJcmVyciA9IGZtdC5FcnJvcmYoIlJldHJpZXZlVmlhU1NIOiBiYWQgc2NoZW1lICVxIiwgdS5TY2hlbWUpCgkJfQoJCWlmIHJlYWRDbG9zZXIgPT0gbmlsIHsKCQkJZGVmZXIgY2xpZW50LkNsb3NlKCkKCQl9CgkJcmV0dXJuIHJlYWRDbG9zZXIsIHJlcnIKCX0gZWxzZSB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SameFile",
                        "Comment": "Returns whether two files represent the same file.  If a string is given for either file, os.Stat will be run on that\npath.  If os.FileInfo is given for either file, it will be passed to os.SameFile directly.  If either file is an\nio.Reader, the contents of both files will be read and hashed using CompareHasher.  If the hashes are identical, the\nfiles are considered the same.  Any error encountered and this function will return false.",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "second",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "SameFile(first any, second any) bool",
                        "Source": "ewoJaWYgZmlyc3QgPT0gc2Vjb25kIHsKCQlyZXR1cm4gdHJ1ZQoJfQoJdmFyIGkxLCBpMiBvcy5GaWxlSW5mbwoJdmFyIHIxLCByMiBpby5SZWFkZXIKCWlmIHIsIG9rIDo9IGZpcnN0Lihpby5SZWFkZXIpOyBvayB7CgkJcjEgPSByCgl9IGVsc2UgaWYgaSwgb2sgOj0gZmlyc3QuKG9zLkZpbGVJbmZvKTsgb2sgewoJCWkxID0gaQoJfSBlbHNlIGlmIHN0YXQsIGVyciA6PSBvcy5TdGF0KE11c3RFeHBhbmRVc2VyKHR5cGV1dGlsLlN0cmluZyhmaXJzdCkpKTsgZXJyID09IG5pbCB7CgkJaTEgPSBzdGF0Cgl9IGVsc2UgewoJCXJldHVybiBmYWxzZQoJfQoJaWYgciwgb2sgOj0gc2Vjb25kLihpby5SZWFkZXIpOyBvayB7CgkJcjIgPSByCgl9IGVsc2UgaWYgaSwgb2sgOj0gc2Vjb25kLihvcy5GaWxlSW5mbyk7IG9rIHsKCQlpMiA9IGkKCX0gZWxzZSBpZiBzdGF0LCBlcnIgOj0gb3MuU3RhdChNdXN0RXhwYW5kVXNlcih0eXBldXRpbC5TdHJpbmcoc2Vjb25kKSkpOyBlcnIgPT0gbmlsIHsKCQlpMiA9IHN0YXQKCX0gZWxzZSB7CgkJcmV0dXJuIGZhbHNlCgl9CglpZiByMSA9PSBuaWwgJiYgcjIgPT0gbmlsIHsKCQlyZXR1cm4gb3MuU2FtZUZpbGUoaTEsIGkyKQoJfQoJaWYgcjEgPT0gbmlsIHsKCQlpZiBmLCBlcnIgOj0gb3MuT3BlbihpMS5OYW1lKCkpOyBlcnIgPT0gbmlsIHsKCQkJZGVmZXIgZi5DbG9zZSgpCgkJCXIxID0gZgoJCX0gZWxzZSB7CgkJCXJldHVybiBmYWxzZQoJCX0KCX0KCWlmIHIyID09IG5pbCB7CgkJaWYgZiwgZXJyIDo9IG9zLk9wZW4oaTIuTmFtZSgpKTsgZXJyID09IG5pbCB7CgkJCWRlZmVyIGYuQ2xvc2UoKQoJCQlyMiA9IGYKCQl9IGVsc2UgewoJCQlyZXR1cm4gZmFsc2UKCQl9Cgl9CglyZXR1cm4gKENvbXBhcmVSZWFkZXJzKHIxLCByMiwgQ29tcGFyZUhhc2hlcikgPT0gMCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SetExt",
                        "Comment": "Detects the file extension of the given path and replaces it with the given extension.  The optional\nsecond argument allows you to explictly specify the extension (if known).",
                        "Arguments": [
                            {
                                "Name": "path",
                                "Type": "string"
                            },
                            {
                                "Name": "ext",
                                "Type": "string"
                            },
                            {
                                "Name": "oldexts",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SetExt(path string, ext string, oldexts ...string) string",
                        "Source": "ewoJaWYgZXh0ID09IGBgIHsKCQlyZXR1cm4gcGF0aAoJfQoJdmFyIG9sZGV4dCBzdHJpbmcKCWlmIGxlbihvbGRleHRzKSA+IDAgJiYgb2xkZXh0c1swXSAhPSBgYCB7CgkJb2xkZXh0ID0gb2xkZXh0c1swXQoJfSBlbHNlIHsKCQlvbGRleHQgPSBmaWxlcGF0aC5FeHQocGF0aCkKCX0KCW9sZGV4dCA9IHN0cmluZ3MuVHJpbVByZWZpeChvbGRleHQsIGAuYCkKCWV4dCA9IHN0cmluZ3MuVHJpbVByZWZpeChleHQsIGAuYCkKCWlmIHN0cmluZ3MuSGFzU3VmZml4KHBhdGgsIGAuYCtvbGRleHQpIHsKCQlwYXRoID0gc3RyaW5ncy5UcmltU3VmZml4KHBhdGgsIGAuYCtvbGRleHQpICsgYC5gICsgZXh0Cgl9CglyZXR1cm4gcGF0aAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ShouldGetNthLine",
                        "Comment": "Attempts to call GetNthLine, but will return an empty string if there is an error.  Does not panic.",
                        "Arguments": [
                            {
                                "Name": "file",
                                "Type": "any"
                            },
                            {
                                "Name": "number",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "ShouldGetNthLine(file any, number int) string",
                        "Source": "ewoJaWYgbGluZSwgZXJyIDo9IEdldE50aExpbmUoZmlsZSwgbnVtYmVyKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIGxpbmUKCX0gZWxzZSB7CgkJcmV0dXJuIGBgCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ShouldReadAllLines",
                        "Comment": "Attempts to call ReadAllLines, but will return an empty slice if there is an error.  Does not panic.",
                        "Arguments": [
                            {
                                "Name": "file",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "ShouldReadAllLines(file any) []string",
                        "Source": "ewoJaWYgbGluZXMsIGVyciA6PSBSZWFkQWxsTGluZXMoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBsaW5lcwoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SizeOf",
                        "Comment": "Returns the size of the given filename, or zero if any error is encountered (or if the file is zero length).",
                        "Arguments": [
                            {
                                "Name": "path",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "convutil.Bytes"
                            }
                        ],
                        "Signature": "SizeOf(path string) convutil.Bytes",
                        "Source": "ewoJcGF0aCA9IE11c3RFeHBhbmRVc2VyKHBhdGgpCglpZiBzdGF0LCBlcnIgOj0gb3MuU3RhdChwYXRoKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIGNvbnZ1dGlsLkJ5dGVzKHN0YXQuU2l6ZSgpKQoJfQoJcmV0dXJuIDAKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "UnregisterRetrieveScheme",
                        "Comment": "Unregister the given URL scheme from being handled by the Retrieve() function.",
                        "Arguments": [
                            {
                                "Name": "scheme",
                                "Type": "string"
                            }
                        ],
                        "Signature": "UnregisterRetrieveScheme(scheme string)",
                        "Source": "ewoJZGVsZXRlKHJldHJpZXZlU2NoZW1lSGFuZGxlcnMsIHNjaGVtZSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "WriteFile",
                        "Comment": "Write the contents of the given io.Reader, []byte, or string to the specified filename.\nFilename paths containing tilde (~) will automatically expand to the current\nuser's home directory, and all intermediate parent directories will be automatically\ncreated.  Will return the number of bytes written, or an error.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            },
                            {
                                "Name": "filename",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int64"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "WriteFile(input any, filename string) (int64, error)",
                        "Source": "ewoJdmFyIHJlYWRlciBpby5SZWFkZXIKCWlmIHIsIG9rIDo9IGlucHV0Lihpby5SZWFkZXIpOyBvayB7CgkJcmVhZGVyID0gcgoJfSBlbHNlIGlmIGIsIG9rIDo9IGlucHV0LihbXWJ5dGUpOyBvayB7CgkJcmVhZGVyID0gYnl0ZXMuTmV3QnVmZmVyKGIpCgl9IGVsc2UgaWYgcywgb2sgOj0gaW5wdXQuKHN0cmluZyk7IG9rIHsKCQlyZWFkZXIgPSBieXRlcy5OZXdCdWZmZXJTdHJpbmcocykKCX0gZWxzZSB7CgkJcmV0dXJuIDAsIGZtdC5FcnJvcmYoImNhbm5vdCB1c2UgJVQgYXMgaW5wdXQiLCBpbnB1dCkKCX0KCWlmIGV4cGFuZGVkLCBlcnIgOj0gRXhwYW5kVXNlcihmaWxlbmFtZSk7IGVyciA9PSBuaWwgewoJCXZhciBwYXJlbnQgPSBmaWxlcGF0aC5EaXIoZXhwYW5kZWQpCgkJaWYgIURpckV4aXN0cyhwYXJlbnQpIHsKCQkJaWYgZXJyIDo9IG9zLk1rZGlyQWxsKHBhcmVudCwgMDcwMCk7IGVyciAhPSBuaWwgewoJCQkJcmV0dXJuIDAsIGVycgoJCQl9CgkJfQoJCWlmIGRlc3QsIGVyciA6PSBvcy5DcmVhdGUoZXhwYW5kZWQpOyBlcnIgPT0gbmlsIHsKCQkJZGVmZXIgZGVzdC5DbG9zZSgpCgkJCXJldHVybiBpby5Db3B5KGRlc3QsIHJlYWRlcikKCQl9IGVsc2UgewoJCQlyZXR1cm4gMCwgZXJyCgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gMCwgZXJyCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "WriteTempFile",
                        "Comment": "Same as WriteFile, but writes the given input to a temporary file, returning\nthe filename.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            },
                            {
                                "Name": "pattern",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "WriteTempFile(input any, pattern string) (string, error)",
                        "Source": "ewoJaWYgdG1wLCBlcnIgOj0gb3MuQ3JlYXRlVGVtcChgYCwgcGF0dGVybik7IGVyciA9PSBuaWwgewoJCWRlZmVyIHRtcC5DbG9zZSgpCgkJaWYgXywgZXJyIDo9IFdyaXRlRmlsZShpbnB1dCwgdG1wLk5hbWUoKSk7IGVyciA9PSBuaWwgewoJCQlyZXR1cm4gdG1wLk5hbWUoKSwgbmlsCgkJfSBlbHNlIHsKCQkJZGVmZXIgb3MuUmVtb3ZlKHRtcC5OYW1lKCkpCgkJCXJldHVybiBgYCwgZXJyCgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gYGAsIGVycgoJfQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestCopyDir",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCopyDir(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgYnVmID0gYnl0ZXMuTmV3QnVmZmVyKG5pbCkKCXZhciBjb29sID0gJmFwcGVuZENvb2xXcml0ZXJ7d3JpdGVyOiBidWZ9Cglhc3NlcnQuTm9FcnJvcihDb3B5RGlyKGAuL3Rlc3RkaXJgLCBmdW5jKHBhdGggc3RyaW5nLCBpbmZvIG9zLkZpbGVJbmZvLCBlcnIgZXJyb3IpIChpby5Xcml0ZXIsIGVycm9yKSB7CgkJaWYgaW5mby5Jc0RpcigpIHsKCQkJcmV0dXJuIG5pbCwgbmlsCgkJfSBlbHNlIHsKCQkJcmV0dXJuIGNvb2wsIGVycgoJCX0KCX0pKQoJYXNzZXJ0LkVxdWFsKGJ1Zi5MZW4oKSwgNzApCglhc3NlcnQuRXF1YWxWYWx1ZXMoImFcbmNvb2wuXG5iXG5jb29sLlxuY1xuY29vbC5cbmQxXG5jb29sLlxuZDJcbmNvb2wuXG5kM1xuY29vbC5cbmUxMVxuY29vbC5cbmUyXG5jb29sLlxuIiwgYnVmLlN0cmluZygpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDirReader",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDirReader(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZHJlYWQgPSBOZXdEaXJSZWFkZXIoYC4vdGVzdGRpcmApCglkZWZlciBkcmVhZC5DbG9zZSgpCglkYXRhLCBlcnIgOj0gaW8uUmVhZEFsbChkcmVhZCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5MZW4oZGF0YSwgMjIpCglhc3NlcnQuRXF1YWwoImFcbmJcbmNcbmQxXG5kMlxuZDNcbmUxMVxuZTJcbiIsIHN0cmluZyhkYXRhKSkKCWFzc2VydC5Ob0Vycm9yKGRyZWFkLkNsb3NlKCkpCglkYXRhLCBlcnIgPSBpby5SZWFkQWxsKGRyZWFkKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkxlbihkYXRhLCAyMikKCWFzc2VydC5FcXVhbCgiYVxuYlxuY1xuZDFcbmQyXG5kM1xuZTExXG5lMlxuIiwgc3RyaW5nKGRhdGEpKQoJZHJlYWQgPSBOZXdEaXJSZWFkZXIoYC4vdGVzdGRpci9kYCkKCWRhdGEsIGVyciA9IGlvLlJlYWRBbGwoZHJlYWQpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuTGVuKGRhdGEsIDkpCglhc3NlcnQuRXF1YWwoImQxXG5kMlxuZDNcbiIsIHN0cmluZyhkYXRhKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDirReaderSkipFunc",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDirReaderSkipFunc(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZHJlYWQgPSBOZXdEaXJSZWFkZXIoYC4vdGVzdGRpcmApCglkZWZlciBkcmVhZC5DbG9zZSgpCglkcmVhZC5TZXRTa2lwRnVuYyhmdW5jKHAgc3RyaW5nKSBib29sIHsKCQl2YXIgZmlsZW5hbWUgPSBzdHJpbmdzLlRyaW1TdWZmaXgocCwgZmlsZXBhdGguRXh0KHApKQoJCXQuTG9nZigiJXM6ICV2IiwgZmlsZW5hbWUsIHN0cmluZ3MuSGFzU3VmZml4KGZpbGVuYW1lLCBgMWApKQoJCXJldHVybiBzdHJpbmdzLkhhc1N1ZmZpeChmaWxlbmFtZSwgYDFgKQoJfSkKCWRhdGEsIGVyciA6PSBpby5SZWFkQWxsKGRyZWFkKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkxlbihkYXRhLCAxNSkKCWFzc2VydC5FcXVhbCgiYVxuYlxuY1xuZDJcbmQzXG5lMlxuIiwgc3RyaW5nKGRhdGEpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestExtendableReader",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestExtendableReader(t *testing.T)",
                        "Source": "ewoJdmFyIHNlcXJjIEV4dGVuZGFibGVSZWFkZXIKCXZhciBiID0gbWFrZShbXWJ5dGUsIDY0KQoJdmFyIG4sIGVyciA9IHNlcXJjLlJlYWQoYikKCXJlcXVpcmUuWmVybyh0LCBuKQoJcmVxdWlyZS5FcXVhbCh0LCBpby5FT0YsIGVycikKCXNlcXJjLkFwcGVuZFNvdXJjZShpby5Ob3BDbG9zZXIoYnl0ZXMuTmV3QnVmZmVyU3RyaW5nKGBoZWxsb2ApKSkKCW4sIGVyciA9IHNlcXJjLlJlYWQoYikKCXJlcXVpcmUuTm9FcnJvcih0LCBlcnIpCglyZXF1aXJlLkVxdWFsKHQsIDUsIG4pCgluLCBlcnIgPSBzZXFyYy5SZWFkKGIpCglyZXF1aXJlLlplcm8odCwgbikKCXJlcXVpcmUuRXF1YWwodCwgaW8uRU9GLCBlcnIpCglzZXFyYy5BcHBlbmRTb3VyY2UoaW8uTm9wQ2xvc2VyKGJ5dGVzLk5ld0J1ZmZlclN0cmluZyhgdGhlcmVgKSkpCglzZXFyYy5BcHBlbmRTb3VyY2UoaW8uTm9wQ2xvc2VyKGJ5dGVzLk5ld0J1ZmZlclN0cmluZyhgIHRvZGF5YCkpKQoJc2VxcmMuQXBwZW5kU291cmNlKGlvLk5vcENsb3NlcihieXRlcy5OZXdCdWZmZXJTdHJpbmcoYCBpc2ApKSkKCXNlcXJjLkFwcGVuZFNvdXJjZShpby5Ob3BDbG9zZXIoYnl0ZXMuTmV3QnVmZmVyU3RyaW5nKGAgYSBkYXlgKSkpCgliLCBlcnIgPSBpby5SZWFkQWxsKCZzZXFyYykKCXJlcXVpcmUuTm9FcnJvcih0LCBlcnIpCglyZXF1aXJlLkVxdWFsKHQsIGB0aGVyZSB0b2RheSBpcyBhIGRheWAsIHN0cmluZyhiKSkKCWIsIGVyciA9IGlvLlJlYWRBbGwoJnNlcXJjKQoJcmVxdWlyZS5Ob0Vycm9yKHQsIGVycikKCXJlcXVpcmUuTGVuKHQsIGIsIDApCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestGetMimeType",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestGetMimeType(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYHRleHQvcGxhaW47IGNoYXJzZXQ9dXRmLThgLCBHZXRNaW1lVHlwZShgdGVzdC50eHRgKSkKCWFzc2VydC5FcXVhbChgaW1hZ2UvanBlZ2AsIEdldE1pbWVUeXBlKGB0ZXN0LmpwZ2ApKQoJYXNzZXJ0LkVxdWFsKGBpbWFnZS9naWZgLCBHZXRNaW1lVHlwZShgdGVzdC5naWZgKSkKCWFzc2VydC5FcXVhbChgaW1hZ2UvcG5nYCwgR2V0TWltZVR5cGUoYHRlc3QucG5nYCkpCglhc3NlcnQuRXF1YWwoYGltYWdlL3N2Zyt4bWxgLCBHZXRNaW1lVHlwZShgdGVzdC5zdmdgKSkKCWFzc2VydC5FcXVhbChgYXBwbGljYXRpb24vanNvbmAsIEdldE1pbWVUeXBlKGB0ZXN0Lmpzb25gKSkKCWFzc2VydC5FcXVhbChgdGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04YCwgR2V0TWltZVR5cGUoYHRlc3QuaHRtbGApKQoJYXNzZXJ0LkVxdWFsKGB0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThgLCBHZXRNaW1lVHlwZShgdGVzdC5odG1gKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsHiddenFile",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsHiddenFile(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuVHJ1ZShJc0hpZGRlbkZpbGUoYC5oaWRkZW5gKSkKCWFzc2VydC5UcnVlKElzSGlkZGVuRmlsZShgcGF0aC90by8uaGlkZGVuYCkpCglhc3NlcnQuRmFsc2UoSXNIaWRkZW5GaWxlKGBgKSkKCWFzc2VydC5GYWxzZShJc0hpZGRlbkZpbGUoYC5gKSkKCWFzc2VydC5GYWxzZShJc0hpZGRlbkZpbGUoYC4uYCkpCglhc3NlcnQuRmFsc2UoSXNIaWRkZW5GaWxlKGB2aXNpYmxlYCkpCglhc3NlcnQuRmFsc2UoSXNIaWRkZW5GaWxlKGBwYXRoL3RvL3Zpc2libGVgKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestReadManipulatorDoNothingFunction",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestReadManipulatorDoNothingFunction(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgcm0gPSBOZXdSZWFkTWFuaXB1bGF0b3IodHQoKSwgZnVuYyhpbiBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJcmV0dXJuIGluLCBuaWwKCX0pCglvdXQsIGVyciA6PSBpby5SZWFkQWxsKHJtKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKHRlc3RUZXh0LCBzdHJpbmcob3V0KSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestReadManipulatorDolorToBacon",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestReadManipulatorDolorToBacon(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgcm0gPSBOZXdSZWFkTWFuaXB1bGF0b3IodHQoKSwgZnVuYyhpbiBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJdmFyIGxpbmUgPSBzdHJpbmdzLlJlcGxhY2Uoc3RyaW5nKGluKSwgYGRvbG9yYCwgYGJhY29uYCwgLTEpCgkJcmV0dXJuIFtdYnl0ZShsaW5lKSwgbmlsCgl9KQoJb3V0LCBlcnIgOj0gaW8uUmVhZEFsbChybSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChzdHJpbmdzLlJlcGxhY2UodGVzdFRleHQsIGBkb2xvcmAsIGBiYWNvbmAsIC0xKSwgc3RyaW5nKG91dCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestReadManipulatorManipulateAll",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestReadManipulatorManipulateAll(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZm4xID0gUmVwbGFjZVdpdGgoYGRvbG9yYCwgYGJhY29uYCwgLTEpCgl2YXIgZm4yID0gUmVtb3ZlQmxhbmtMaW5lcwoJdmFyIGZuMyA9IGZ1bmMoaW4gW11ieXRlKSAoW11ieXRlLCBlcnJvcikgewoJCXZhciBsaW5lID0gc3RyaW5ncy5SZXBsYWNlKHN0cmluZyhpbiksIGBub3N0cnVkYCwgYHBvdGF0b2AsIC0xKQoJCXJldHVybiBbXWJ5dGUobGluZSksIG5pbAoJfQoJdmFyIHJtID0gTmV3UmVhZE1hbmlwdWxhdG9yKHR0KCksIE1hbmlwdWxhdGVBbGwoZm4xLCBmbjIsIGZuMykpCgl2YXIgd2FudGVkID0gdGVzdFRleHQKCXdhbnRlZCA9IHN0cmluZ3MuUmVwbGFjZSh3YW50ZWQsIGBkb2xvcmAsIGBiYWNvbmAsIC0xKQoJd2FudGVkID0gc3RyaW5ncy5SZXBsYWNlKHdhbnRlZCwgYG5vc3RydWRgLCBgcG90YXRvYCwgLTEpCgl3YW50ZWQgPSBzdHJpbmdzLlJlcGxhY2Uod2FudGVkLCAiXG5cbiIsICJcbiIsIC0xKQoJb3V0LCBlcnIgOj0gaW8uUmVhZEFsbChybSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbCh3YW50ZWQsIHN0cmluZyhvdXQpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestReadManipulatorNoOp",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestReadManipulatorNoOp(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgcm0gPSBOZXdSZWFkTWFuaXB1bGF0b3IodHQoKSkKCW91dCwgZXJyIDo9IGlvLlJlYWRBbGwocm0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwodGVzdFRleHQsIHN0cmluZyhvdXQpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestReadManipulatorRemoveBlankLines",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestReadManipulatorRemoveBlankLines(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgcm0gPSBOZXdSZWFkTWFuaXB1bGF0b3IodHQoKSwgUmVtb3ZlQmxhbmtMaW5lcykKCW91dCwgZXJyIDo9IGlvLlJlYWRBbGwocm0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoc3RyaW5ncy5UcmltU3BhY2UodGVzdFRleHRQcmUpK3Rlc3RUZXh0Qm9keSwgc3RyaW5nKG91dCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestReadManipulatorRemoveComments",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestReadManipulatorRemoveComments(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgcm0gPSBOZXdSZWFkTWFuaXB1bGF0b3IodHQoKSwgUmVtb3ZlTGluZXNXaXRoUHJlZml4KGAvL2AsIHRydWUpKQoJb3V0LCBlcnIgOj0gaW8uUmVhZEFsbChybSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbCgiXG4iK3Rlc3RUZXh0Qm9keSwgc3RyaW5nKG91dCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestRetrieve",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestRetrieve(t *testing.T)",
                        "Source": "ewoJdmFyIHNlcnZlciA9IHRlc3RIdHRwU2VydmVyKHQpCglkZWZlciBzZXJ2ZXIuQ2xvc2UoKQoJZm9yIHVyaSwgZXhwZWN0ZWQgOj0gcmFuZ2UgbWFwW3N0cmluZ11zdHJpbmd7InRlc3RkaXIvYS50eHQiOiAiYVxuIiwgIi4vdGVzdGRpci9hLnR4dCI6ICJhXG4iLCAiZmlsZTovLy90ZXN0ZGlyL2EudHh0IjogImFcbiIsIHNlcnZlci5VUkwgKyAiL2hlbGxvIjogIk9LIn0gewoJCXZhciByYywgZXJyID0gUmV0cmlldmUoY29udGV4dC5UT0RPKCksIHVyaSkKCQlhc3NlcnQuTm9FcnJvcih0LCBlcnIsIHVyaSkKCQl2YXIgYWN0dWFsLCByZXJyID0gaW8uUmVhZEFsbChyYykKCQlhc3NlcnQuTm9FcnJvcih0LCByYy5DbG9zZSgpLCB1cmkpCgkJYXNzZXJ0Lk5vRXJyb3IodCwgcmVyciwgdXJpKQoJCWFzc2VydC5FcXVhbCh0LCBleHBlY3RlZCwgc3RyaW5nKGFjdHVhbCksIHVyaSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestRetrieveViaFilesystem",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestRetrieveViaFilesystem(t *testing.T)",
                        "Source": "ewoJdmFyIHJjLCByZXJyID0gUmV0cmlldmVWaWFGaWxlc3lzdGVtKGNvbnRleHQuVE9ETygpLCAmdXJsLlVSTHtTY2hlbWU6IGBmaWxlYCwgUGF0aDogYHRlc3RkaXIvYS50eHRgfSkKCWFzc2VydC5Ob0Vycm9yKHQsIHJlcnIpCgl2YXIgZGF0YSwgZGVyciA9IGlvLlJlYWRBbGwocmMpCglhc3NlcnQuTm9FcnJvcih0LCByYy5DbG9zZSgpKQoJYXNzZXJ0Lk5vRXJyb3IodCwgZGVycikKCWFzc2VydC5FcXVhbCh0LCAiYVxuIiwgc3RyaW5nKGRhdGEpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestRetrieveViaHTTP",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestRetrieveViaHTTP(t *testing.T)",
                        "Source": "ewoJdmFyIHNlcnZlciA9IHRlc3RIdHRwU2VydmVyKHQsIG1hcFtzdHJpbmddYW55e2BYLVRlc3RgOiBgMWB9KQoJZGVmZXIgc2VydmVyLkNsb3NlKCkKCXZhciBjdHggPSBjb250ZXh0LkJhY2tncm91bmQoKQoJY3R4LCBjYW5jZWwgOj0gY29udGV4dC5XaXRoVGltZW91dChjdHgsIHRpbWUuU2Vjb25kKQoJZGVmZXIgY2FuY2VsKCkKCWN0eCA9IGNvbnRleHQuV2l0aFZhbHVlKGN0eCwgYG1ldGFkYXRhYCwgbWFwW3N0cmluZ11zdHJpbmd7YHgtdGVzdGA6IGAxYH0pCgl2YXIgdSwgZXJyID0gdXJsLlBhcnNlKHNlcnZlci5VUkwpCglhc3NlcnQuTm9FcnJvcih0LCBlcnIpCgl2YXIgcmMsIHJlcnIgPSBSZXRyaWV2ZVZpYUhUVFAoY3R4LCB1KQoJYXNzZXJ0Lk5vRXJyb3IodCwgcmVycikKCXZhciBkYXRhLCBkZXJyID0gaW8uUmVhZEFsbChyYykKCWFzc2VydC5Ob0Vycm9yKHQsIHJjLkNsb3NlKCkpCglhc3NlcnQuTm9FcnJvcih0LCBkZXJyKQoJYXNzZXJ0LkVxdWFsKHQsICJPSyIsIHN0cmluZyhkYXRhKSkKCXUuUGF0aCA9IGAvc2xlZXAvMTEwMG1zYAoJXywgcmVyciA9IFJldHJpZXZlVmlhSFRUUChjdHgsIHUpCglhc3NlcnQuQ29udGFpbnModCwgcmVyci5FcnJvcigpLCBgY29udGV4dCBkZWFkbGluZSBleGNlZWRlZGApCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestRetrieveViaSSH_SFTP",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestRetrieveViaSSH_SFTP(t *testing.T)",
                        "Source": "ewoJdmFyIHNzaFVybEVudiA9IG9zLkdldGVudihgVEVTVF9HT1NUT0NLVVRJTF9SRVRSSUVWRV9WSUFfU0ZUUGApCglpZiBzc2hVcmxFbnYgIT0gYGAgewoJCWZvciBfLCB1cmkgOj0gLy8gZXhhbXBsZTogVEVTVF9HT1NUT0NLVVRJTF9SRVRSSUVWRV9WSUFfU0ZUUD0ic2Z0cDovL2xvY2FsaG9zdDoyMDIwL2ZpbGUtaW4taG9tZWRpcnxzZnRwOi8vdWJ1bnR1OnBhc3N3b3JkQHJlbW90ZS1ob3N0Ly9ldGMvZnN0YWIiCgkJcmFuZ2Ugc3RyaW5ncy5TcGxpdChzc2hVcmxFbnYsIGB8YCkgewoJCQl1cmkgPSBzdHJpbmdzLlRyaW1TcGFjZSh1cmkpCgkJCWlmIHVyaSA9PSBgYCB7CgkJCQljb250aW51ZQoJCQl9CgkJCXUsIGVyciA6PSB1cmwuUGFyc2UodXJpKQoJCQlhc3NlcnQuTm9FcnJvcih0LCBlcnIpCgkJCWFzc2VydC5Ob3ROaWwodCwgdSkKCQkJY3R4IDo9IGNvbnRleHQuV2l0aFZhbHVlKGNvbnRleHQuQmFja2dyb3VuZCgpLCBgdmVyaWZ5SG9zdEZ1bmNgLCBmdW5jKGhvc3RuYW1lIHN0cmluZywgcmVtb3RlIG5ldC5BZGRyLCBrZXkgc3NoLlB1YmxpY0tleSkgZXJyb3IgewoJCQkJdmFyIHAgPSB1LlBvcnQoKQoJCQkJaWYgcCA9PSBgYCB7CgkJCQkJcCA9IGAyMmAKCQkJCX0KCQkJCWFzc2VydC5FcXVhbCh0LCB1Lkhvc3QrYDpgK3AsIGhvc3RuYW1lKQoJCQkJcmV0dXJuIG5pbAoJCQl9KQoJCQlkLCBlcnIgOj0gUmV0cmlldmVWaWFTU0goY3R4LCB1KQoJCQlhc3NlcnQuTm9FcnJvcih0LCBlcnIpCgkJCWRhdGEsIGVyciA6PSBpby5SZWFkQWxsKGQpCgkJCWFzc2VydC5Ob0Vycm9yKHQsIGVycikKCQkJYXNzZXJ0Lk5vRXJyb3IodCwgZC5DbG9zZSgpKQoJCQlhc3NlcnQuRXF1YWwodCwgIkhFTExPIFRIRVJFXG4iLCBzdHJpbmcoZGF0YSkpCgkJfQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestRetrieveViaSSH_SSH",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestRetrieveViaSSH_SSH(t *testing.T)",
                        "Source": "ewoJdmFyIHNzaFVybEVudiA9IG9zLkdldGVudihgVEVTVF9HT1NUT0NLVVRJTF9SRVRSSUVWRV9WSUFfU1NIYCkKCWlmIHNzaFVybEVudiAhPSBgYCB7CgkJZm9yIF8sIHVyaSA6PSAvLyBleGFtcGxlOiBURVNUX0dPU1RPQ0tVVElMX1JFVFJJRVZFX1ZJQV9TU0g9InNzaDovL2xvY2FsaG9zdDoyMDIwL2hvc3RuYW1lIgoJCXJhbmdlIHN0cmluZ3MuU3BsaXQoc3NoVXJsRW52LCBgfGApIHsKCQkJdXJpID0gc3RyaW5ncy5UcmltU3BhY2UodXJpKQoJCQlpZiB1cmkgPT0gYGAgewoJCQkJY29udGludWUKCQkJfQoJCQl1LCBlcnIgOj0gdXJsLlBhcnNlKHVyaSkKCQkJYXNzZXJ0Lk5vRXJyb3IodCwgZXJyKQoJCQlhc3NlcnQuTm90TmlsKHQsIHUpCgkJCWN0eCA6PSBjb250ZXh0LldpdGhWYWx1ZShjb250ZXh0LkJhY2tncm91bmQoKSwgYHZlcmlmeUhvc3RGdW5jYCwgZnVuYyhob3N0bmFtZSBzdHJpbmcsIHJlbW90ZSBuZXQuQWRkciwga2V5IHNzaC5QdWJsaWNLZXkpIGVycm9yIHsKCQkJCXZhciBwID0gdS5Qb3J0KCkKCQkJCWlmIHAgPT0gYGAgewoJCQkJCXAgPSBgMjJgCgkJCQl9CgkJCQlhc3NlcnQuRXF1YWwodCwgdS5Ib3N0K2A6YCtwLCBob3N0bmFtZSkKCQkJCXJldHVybiBuaWwKCQkJfSkKCQkJZCwgZXJyIDo9IFJldHJpZXZlVmlhU1NIKGN0eCwgdSkKCQkJYXNzZXJ0Lk5vRXJyb3IodCwgZXJyKQoJCQlkYXRhLCBlcnIgOj0gaW8uUmVhZEFsbChkKQoJCQlhc3NlcnQuTm9FcnJvcih0LCBlcnIpCgkJCWFzc2VydC5Ob0Vycm9yKHQsIGQuQ2xvc2UoKSkKCQkJYXNzZXJ0LkVxdWFsKHQsIHUuSG9zdG5hbWUoKSsiXG4iLCBzdHJpbmcoZGF0YSkpCgkJfQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestRewriteFileSystem",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestRewriteFileSystem(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgcndmcyA9IFJld3JpdGVGaWxlU3lzdGVte0ZpbGVTeXN0ZW06IFRlc3RGaWxlU3lzdGVte2AvdGVzdGA6IG5pbH19CglfLCBlcnIgOj0gcndmcy5PcGVuKGAvdGVzdGApCglhc3NlcnQuTmlsKGVycikKCXJ3ZnMgPSBSZXdyaXRlRmlsZVN5c3RlbXtGaWxlU3lzdGVtOiBUZXN0RmlsZVN5c3RlbXtgL3Rlc3RgOiBuaWx9LCBGaW5kOiByZWdleHAuTXVzdENvbXBpbGUoYF4vc3RyaXBgKX0KCV8sIGVyciA9IHJ3ZnMuT3BlbihgL3Rlc3RgKQoJYXNzZXJ0Lk5pbChlcnIpCglfLCBlcnIgPSByd2ZzLk9wZW4oYC9zdHJpcC90ZXN0YCkKCWFzc2VydC5OaWwoZXJyKQoJcndmcyA9IFJld3JpdGVGaWxlU3lzdGVte0ZpbGVTeXN0ZW06IFRlc3RGaWxlU3lzdGVte2AvdGVzdGA6IG5pbH0sIEZpbmQ6IHJlZ2V4cC5NdXN0Q29tcGlsZShgXi9zdHJpcGApLCBNdXN0TWF0Y2g6IHRydWV9CglfLCBlcnIgPSByd2ZzLk9wZW4oYC90ZXN0YCkKCWFzc2VydC5FcXVhbChvcy5FcnJOb3RFeGlzdCwgZXJyKQoJXywgZXJyID0gcndmcy5PcGVuKGAvc3RyaXAvdGVzdGApCglhc3NlcnQuTmlsKGVycikKCXJ3ZnMgPSBSZXdyaXRlRmlsZVN5c3RlbXtGaWxlU3lzdGVtOiBUZXN0RmlsZVN5c3RlbXtgL290aGVyL3Rlc3RgOiBuaWx9LCBGaW5kOiByZWdleHAuTXVzdENvbXBpbGUoYF4vc3RyaXBgKSwgUmVwbGFjZTogYC9vdGhlcmAsIE11c3RNYXRjaDogdHJ1ZX0KCV8sIGVyciA9IHJ3ZnMuT3BlbihgL3N0cmlwL3Rlc3RgKQoJYXNzZXJ0Lk5pbChlcnIpCglfLCBlcnIgPSByd2ZzLk9wZW4oYC9vdGhlci90ZXN0YCkKCWFzc2VydC5FcXVhbChvcy5FcnJOb3RFeGlzdCwgZXJyKQoJcndmcyA9IFJld3JpdGVGaWxlU3lzdGVte0ZpbGVTeXN0ZW06IFRlc3RGaWxlU3lzdGVte2AvYmVmb3JlL2FmdGVyL3Rlc3RgOiBuaWx9LCBGaW5kOiByZWdleHAuTXVzdENvbXBpbGUoYF4vKD9QPGZpcnN0PlteL10rKS8oP1A8c2Vjb25kPlteL10rKWApLCBSZXBsYWNlOiBgLyR7c2Vjb25kfS8ke2ZpcnN0fWB9CglfLCBlcnIgPSByd2ZzLk9wZW4oYC9hZnRlci9iZWZvcmUvdGVzdGApCglhc3NlcnQuTmlsKGVycikKCV8sIGVyciA9IHJ3ZnMuT3BlbihgL2JlZm9yZS9hZnRlci90ZXN0YCkKCWFzc2VydC5FcXVhbChvcy5FcnJOb3RFeGlzdCwgZXJyKQp9Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCg==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSameFile",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSameFile(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuVHJ1ZShTYW1lRmlsZShgZmlsZV90ZXN0LmdvYCwgYGZpbGVfdGVzdC5nb2ApKQoJYXNzZXJ0LlRydWUoU2FtZUZpbGUoYGZpbGUuZ29gLCBgZmlsZS5nb2ApKQoJaSwgZXJyIDo9IG9zLlN0YXQoYGZpbGVfdGVzdC5nb2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglvLCBlcnIgOj0gb3MuU3RhdChgZmlsZS5nb2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZShTYW1lRmlsZShpLCBpKSkKCWFzc2VydC5UcnVlKFNhbWVGaWxlKG8sIG8pKQoJYXNzZXJ0LkZhbHNlKFNhbWVGaWxlKGksIG8pKQoJYXNzZXJ0LkZhbHNlKFNhbWVGaWxlKG8sIGkpKQoJYXNzZXJ0LkZhbHNlKFNhbWVGaWxlKGksIG5pbCkpCglhc3NlcnQuRmFsc2UoU2FtZUZpbGUobmlsLCBpKSkKCWFzc2VydC5GYWxzZShTYW1lRmlsZShvLCBuaWwpKQoJYXNzZXJ0LkZhbHNlKFNhbWVGaWxlKG5pbCwgbykpCglhc3NlcnQuVHJ1ZShTYW1lRmlsZShpLCBgZmlsZV90ZXN0LmdvYCkpCglhc3NlcnQuVHJ1ZShTYW1lRmlsZShgZmlsZV90ZXN0LmdvYCwgaSkpCglhc3NlcnQuVHJ1ZShTYW1lRmlsZShvLCBgZmlsZS5nb2ApKQoJYXNzZXJ0LlRydWUoU2FtZUZpbGUoYGZpbGUuZ29gLCBvKSkKCWYxLCBlcnIgOj0gb3MuT3BlbihgZmlsZV90ZXN0LmdvYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWRlZmVyIGYxLkNsb3NlKCkKCWYyLCBlcnIgOj0gb3MuT3BlbihgZmlsZS5nb2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglkZWZlciBmMi5DbG9zZSgpCglhc3NlcnQuVHJ1ZShTYW1lRmlsZShmMSwgZjEpKQoJYXNzZXJ0Lk5vRXJyb3IocmVzZXQoZjEpKQoJYXNzZXJ0LlRydWUoU2FtZUZpbGUoZjEsIGYxKSkKCWFzc2VydC5Ob0Vycm9yKHJlc2V0KGYxKSkKCWFzc2VydC5UcnVlKFNhbWVGaWxlKGksIGYxKSkKCWFzc2VydC5Ob0Vycm9yKHJlc2V0KGYxKSkKCWFzc2VydC5GYWxzZShTYW1lRmlsZShmMSwgZjIpKQoJYXNzZXJ0Lk5vRXJyb3IocmVzZXQoZjEpKQoJYXNzZXJ0Lk5vRXJyb3IocmVzZXQoZjIpKQoJYXNzZXJ0LkZhbHNlKFNhbWVGaWxlKGYyLCBmMSkpCglhc3NlcnQuTm9FcnJvcihyZXNldChmMSkpCglhc3NlcnQuTm9FcnJvcihyZXNldChmMikpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSetExt",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSetExt(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGAsIFNldEV4dChgYCwgYGApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci50eHRgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLnR4dGAsIGBgKSkKCWFzc2VydC5FcXVhbChgL25vdGhpbmdidXJnZXIuanBnYCwgU2V0RXh0KGAvbm90aGluZ2J1cmdlci50eHRgLCBgLmpwZ2ApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci5qcGdgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLnR4dGAsIGBqcGdgKSkKCWFzc2VydC5FcXVhbChgL25vdGhpbmdidXJnZXIudHh0YCwgU2V0RXh0KGAvbm90aGluZ2J1cmdlci50eHRgLCBgLmpwZ2AsIGAuYm1wYCkpCglhc3NlcnQuRXF1YWwoYC9ub3RoaW5nYnVyZ2VyLnR4dGAsIFNldEV4dChgL25vdGhpbmdidXJnZXIudHh0YCwgYGpwZ2AsIGAuYm1wYCkpCglhc3NlcnQuRXF1YWwoYC9ub3RoaW5nYnVyZ2VyLmpwZ2AsIFNldEV4dChgL25vdGhpbmdidXJnZXIudHh0YCwgYC5qcGdgLCBgLnR4dGApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci5qcGdgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLnR4dGAsIGBqcGdgLCBgLnR4dGApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci5qcGdgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLnR4dGAsIGAuanBnYCwgYHR4dGApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci5qcGdgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLnR4dGAsIGBqcGdgLCBgdHh0YCkpCglhc3NlcnQuRXF1YWwoYC9ub3RoaW5nYnVyZ2VyLmluZm8ueG1sYCwgU2V0RXh0KGAvbm90aGluZ2J1cmdlci5pbmZvLmpzb25gLCBgeG1sYCkpCglhc3NlcnQuRXF1YWwoYC9ub3RoaW5nYnVyZ2VyLmluZm8ueG1sYCwgU2V0RXh0KGAvbm90aGluZ2J1cmdlci5pbmZvLmpzb25gLCBgLnhtbGApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci54bWxgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLmluZm8uanNvbmAsIGAueG1sYCwgYGluZm8uanNvbmApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci54bWxgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLmluZm8uanNvbmAsIGAueG1sYCwgYC5pbmZvLmpzb25gKSkKCWFzc2VydC5FcXVhbChgL25vdGhpbmdidXJnZXIueG1sYCwgU2V0RXh0KGAvbm90aGluZ2J1cmdlci5pbmZvLmpzb25gLCBgeG1sYCwgYGluZm8uanNvbmApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci54bWxgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLmluZm8uanNvbmAsIGB4bWxgLCBgLmluZm8uanNvbmApKQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "CloserFunc": {
                        "Name": "CloserFunc",
                        "Source": "dHlwZSBDbG9zZXJGdW5jID0gZnVuYyhpby5SZWFkQ2xvc2VyKSBlcnJvcg=="
                    },
                    "CopyEntryFunc": {
                        "Name": "CopyEntryFunc",
                        "Source": "dHlwZSBDb3B5RW50cnlGdW5jIGZ1bmMocGF0aCBzdHJpbmcsIGluZm8gb3MuRmlsZUluZm8sIGVyciBlcnJvcikgKGlvLldyaXRlciwgZXJyb3Ip"
                    },
                    "DirReader": {
                        "Name": "DirReader",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Close",
                                "Comment": "close open files and reset the internal reader",
                                "PointerReceiver": true,
                                "ReceiverName": "dir",
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Close() error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NewDirReader",
                                "Arguments": [
                                    {
                                        "Name": "path",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "options",
                                        "Type": "...DirReaderOption"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*DirReader"
                                    }
                                ],
                                "Signature": "NewDirReader(path string, options ...DirReaderOption) *DirReader",
                                "Source": "ewoJcmV0dXJuICZEaXJSZWFkZXJ7cm9vdDogcGF0aCwgb3B0aW9uczogRGlyUmVhZGVyT3B0aW9ucyhvcHRpb25zKX0KfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Read",
                                "PointerReceiver": true,
                                "ReceiverName": "dir",
                                "Arguments": [
                                    {
                                        "Name": "b",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Read(b []byte) (int, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetSkipFunc",
                                "Comment": "Set a function that will be called for each path encountered while reading.\nIf this function returns true, that path (and its descedants) will not be read.",
                                "PointerReceiver": true,
                                "ReceiverName": "dir",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "SkipFunc"
                                    }
                                ],
                                "Signature": "SetSkipFunc(fn SkipFunc)",
                                "IsPackageLevel": false
                            }
                        ],
                        "Comment": "A DirReader provides a streaming io.Reader interface to all files in a given\ndirectory, with options for handling unreadable entries and recursion.",
                        "Source": "dHlwZSBEaXJSZWFkZXIgc3RydWN0IHsKCn0vLyBBIERpclJlYWRlciBwcm92aWRlcyBhIHN0cmVhbWluZyBpby5SZWFkZXIgaW50ZXJmYWNlIHRvIGFsbCBmaWxlcyBpbiBhIGdpdmVuCi8vIGRpcmVjdG9yeSwgd2l0aCBvcHRpb25zIGZvciBoYW5kbGluZyB1bnJlYWRhYmxlIGVudHJpZXMgYW5kIHJlY3Vyc2lvbi4KCg==",
                        "HasUnexportedFields": true
                    },
                    "DirReaderOption": {
                        "Name": "DirReaderOption",
                        "MetaType": "int",
                        "Source": "dHlwZSBEaXJSZWFkZXJPcHRpb24gaW50"
                    },
                    "DirReaderOptions": {
                        "Name": "DirReaderOptions",
                        "Methods": [
                            {
                                "Name": "Has",
                                "ReceiverName": "dir",
                                "Arguments": [
                                    {
                                        "Name": "option",
                                        "Type": "DirReaderOption"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "Has(option DirReaderOption) bool",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBEaXJSZWFkZXJPcHRpb25zIFtdRGlyUmVhZGVyT3B0aW9u"
                    },
                    "ExtendableReader": {
                        "Name": "ExtendableReader",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "AppendSource",
                                "PointerReceiver": true,
                                "ReceiverName": "xreader",
                                "Arguments": [
                                    {
                                        "Name": "rc",
                                        "Type": "io.ReadCloser"
                                    }
                                ],
                                "Signature": "AppendSource(rc io.ReadCloser)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Close",
                                "PointerReceiver": true,
                                "ReceiverName": "xreader",
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Close() error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Read",
                                "PointerReceiver": true,
                                "ReceiverName": "xreader",
                                "Arguments": [
                                    {
                                        "Name": "b",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Read(b []byte) (int, error)",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBFeHRlbmRhYmxlUmVhZGVyIHN0cnVjdCB7Cgp9Cg==",
                        "HasUnexportedFields": true
                    },
                    "FileInfo": {
                        "Name": "FileInfo",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "IsDir",
                                "PointerReceiver": true,
                                "ReceiverName": "info",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsDir() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "ModTime",
                                "PointerReceiver": true,
                                "ReceiverName": "info",
                                "Returns": [
                                    {
                                        "Type": "time.Time"
                                    }
                                ],
                                "Signature": "ModTime() time.Time",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Mode",
                                "PointerReceiver": true,
                                "ReceiverName": "info",
                                "Returns": [
                                    {
                                        "Type": "os.FileMode"
                                    }
                                ],
                                "Signature": "Mode() os.FileMode",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Name",
                                "PointerReceiver": true,
                                "ReceiverName": "info",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "Name() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NewFileInfo",
                                "Arguments": [
                                    {
                                        "Name": "wrap",
                                        "Type": "...os.FileInfo"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*FileInfo"
                                    }
                                ],
                                "Signature": "NewFileInfo(wrap ...os.FileInfo) *FileInfo",
                                "Source": "ewoJaWYgbGVuKHdyYXApID4gMCAmJiB3cmFwWzBdICE9IG5pbCB7CgkJcmV0dXJuICZGaWxlSW5mb3tGaWxlSW5mbzogd3JhcFswXX0KCX0gZWxzZSB7CgkJcmV0dXJuIG5ldyhGaWxlSW5mbykKCX0KfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "SetIsDir",
                                "PointerReceiver": true,
                                "ReceiverName": "info",
                                "Arguments": [
                                    {
                                        "Name": "isDir",
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "SetIsDir(isDir bool)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetModTime",
                                "PointerReceiver": true,
                                "ReceiverName": "info",
                                "Arguments": [
                                    {
                                        "Name": "mtime",
                                        "Type": "time.Time"
                                    }
                                ],
                                "Signature": "SetModTime(mtime time.Time)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetMode",
                                "PointerReceiver": true,
                                "ReceiverName": "info",
                                "Arguments": [
                                    {
                                        "Name": "mode",
                                        "Type": "os.FileMode"
                                    }
                                ],
                                "Signature": "SetMode(mode os.FileMode)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetName",
                                "PointerReceiver": true,
                                "ReceiverName": "info",
                                "Arguments": [
                                    {
                                        "Name": "name",
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "SetName(name string)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetSize",
                                "PointerReceiver": true,
                                "ReceiverName": "info",
                                "Arguments": [
                                    {
                                        "Name": "sz",
                                        "Type": "int64"
                                    }
                                ],
                                "Signature": "SetSize(sz int64)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetSys",
                                "PointerReceiver": true,
                                "ReceiverName": "info",
                                "Arguments": [
                                    {
                                        "Name": "iface",
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "SetSys(iface any)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Size",
                                "PointerReceiver": true,
                                "ReceiverName": "info",
                                "Returns": [
                                    {
                                        "Type": "int64"
                                    }
                                ],
                                "Signature": "Size() int64",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Sys",
                                "PointerReceiver": true,
                                "ReceiverName": "info",
                                "Returns": [
                                    {
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "Sys() any",
                                "IsPackageLevel": false
                            }
                        ],
                        "Comment": "An os.FileInfo-compatible wrapper that allows for individual values to be overridden.",
                        "Source": "dHlwZSBGaWxlSW5mbyBzdHJ1Y3QgewoJb3MuRmlsZUluZm8KCn0vLyBBbiBvcy5GaWxlSW5mby1jb21wYXRpYmxlIHdyYXBwZXIgdGhhdCBhbGxvd3MgZm9yIGluZGl2aWR1YWwgdmFsdWVzIHRvIGJlIG92ZXJyaWRkZW4uCgo=",
                        "HasUnexportedFields": true
                    },
                    "MultiCloser": {
                        "Name": "MultiCloser",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Close",
                                "PointerReceiver": true,
                                "ReceiverName": "multicloser",
                                "Returns": [
                                    {
                                        "Name": "merr",
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Close() merr error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NewMultiCloser",
                                "Arguments": [
                                    {
                                        "Name": "closers",
                                        "Type": "...io.Closer"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*MultiCloser"
                                    }
                                ],
                                "Signature": "NewMultiCloser(closers ...io.Closer) *MultiCloser",
                                "Source": "ewoJcmV0dXJuICZNdWx0aUNsb3NlcntjbG9zZXJzOiBjbG9zZXJzfQp9",
                                "IsPackageLevel": true
                            }
                        ],
                        "Source": "dHlwZSBNdWx0aUNsb3NlciBzdHJ1Y3QgewoKfQo=",
                        "HasUnexportedFields": true
                    },
                    "OpenHandler": {
                        "Name": "OpenHandler",
                        "Source": "dHlwZSBPcGVuSGFuZGxlciBmdW5jKCp1cmwuVVJMLCBPcGVuT3B0aW9ucykgKGlvLlJlYWRDbG9zZXIsIGVycm9yKQ=="
                    },
                    "OpenOptions": {
                        "Name": "OpenOptions",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "GetTimeout",
                                "ReceiverName": "opts",
                                "Returns": [
                                    {
                                        "Type": "time.Duration"
                                    }
                                ],
                                "Signature": "GetTimeout() time.Duration",
                                "IsPackageLevel": false
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "Timeout",
                                "Type": "time.Duration"
                            },
                            {
                                "Name": "Insecure",
                                "Type": "bool"
                            }
                        ],
                        "Source": "dHlwZSBPcGVuT3B0aW9ucyBzdHJ1Y3QgewoJVGltZW91dCAgdGltZS5EdXJhdGlvbgoJSW5zZWN1cmUgYm9vbAp9"
                    },
                    "PostReadCloser": {
                        "Name": "PostReadCloser",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Close",
                                "PointerReceiver": true,
                                "ReceiverName": "postcloser",
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Close() error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NewPostReadCloser",
                                "Comment": "Implements an io.ReadCloser that can be configured to perform cleanup options whenever the\nClose() function is called.  If CloserFunc is non-nil, it will be given the upstream ReadCloser\nas an argument and will be responsible for calling Close() on it.  If nil, upstream's Close()\nfunction will be called directly on Close.",
                                "Arguments": [
                                    {
                                        "Name": "upstream",
                                        "Type": "io.ReadCloser"
                                    },
                                    {
                                        "Name": "closer",
                                        "Type": "CloserFunc"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*PostReadCloser"
                                    }
                                ],
                                "Signature": "NewPostReadCloser(upstream io.ReadCloser, closer CloserFunc) *PostReadCloser",
                                "Source": "ewoJcmV0dXJuICZQb3N0UmVhZENsb3Nlcnt1cHN0cmVhbTogdXBzdHJlYW0sIGNsb3NlcjogY2xvc2VyfQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Read",
                                "PointerReceiver": true,
                                "ReceiverName": "postcloser",
                                "Arguments": [
                                    {
                                        "Name": "b",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Read(b []byte) (int, error)",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBQb3N0UmVhZENsb3NlciBzdHJ1Y3QgewoKfQo=",
                        "HasUnexportedFields": true
                    },
                    "ReadManipulator": {
                        "Name": "ReadManipulator",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Close",
                                "PointerReceiver": true,
                                "ReceiverName": "manip",
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Close() error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NewReadManipulator",
                                "Arguments": [
                                    {
                                        "Name": "reader",
                                        "Type": "io.Reader"
                                    },
                                    {
                                        "Name": "fns",
                                        "Type": "...ReadManipulatorFunc"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*ReadManipulator"
                                    }
                                ],
                                "Signature": "NewReadManipulator(reader io.Reader, fns ...ReadManipulatorFunc) *ReadManipulator",
                                "Source": "ewoJdmFyIHJtID0gJlJlYWRNYW5pcHVsYXRvcntyZWFkZXI6IHJlYWRlciwgc3BsaXR0ZXI6IGJ1ZmlvLlNjYW5MaW5lcywgYnVmZmVyOiBieXRlcy5OZXdCdWZmZXIobmlsKX0KCWlmIGxlbihmbnMpID4gMCAmJiBmbnNbMF0gIT0gbmlsIHsKCQlybS5mbiA9IGZuc1swXQoJfQoJcmV0dXJuIHJtCn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Read",
                                "PointerReceiver": true,
                                "ReceiverName": "manip",
                                "Arguments": [
                                    {
                                        "Name": "b",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Read(b []byte) (int, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Split",
                                "PointerReceiver": true,
                                "ReceiverName": "manip",
                                "Arguments": [
                                    {
                                        "Name": "split",
                                        "Type": "bufio.SplitFunc"
                                    }
                                ],
                                "Signature": "Split(split bufio.SplitFunc)",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBSZWFkTWFuaXB1bGF0b3Igc3RydWN0IHsKCn0K",
                        "HasUnexportedFields": true
                    },
                    "ReadManipulatorFunc": {
                        "Name": "ReadManipulatorFunc",
                        "Methods": [
                            {
                                "Name": "ManipulateAll",
                                "Comment": "Performs multiple sequential manipulations on an intercepted line of text from\nan io.Reader as its being read.",
                                "Arguments": [
                                    {
                                        "Name": "fns",
                                        "Type": "...ReadManipulatorFunc"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "ReadManipulatorFunc"
                                    }
                                ],
                                "Signature": "ManipulateAll(fns ...ReadManipulatorFunc) ReadManipulatorFunc",
                                "Source": "ewoJcmV0dXJuIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJdmFyIGVyciBlcnJvcgoJCWZvciBfLCBmbiA6PSByYW5nZSBmbnMgewoJCQlkYXRhLCBlcnIgPSBmbihkYXRhKQoJCQlpZiBlcnIgIT0gbmlsIHsKCQkJCWJyZWFrCgkJCX0KCQl9CgkJcmV0dXJuIGRhdGEsIGVycgoJfQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "ReplaceWith",
                                "Comment": "A ReadManipulatorFunc for replacing text in an io.Reader as its being read.",
                                "Arguments": [
                                    {
                                        "Name": "find",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "replace",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "occurrences",
                                        "Type": "int"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "ReadManipulatorFunc"
                                    }
                                ],
                                "Signature": "ReplaceWith(find string, replace string, occurrences int) ReadManipulatorFunc",
                                "Source": "ewoJcmV0dXJuIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJdmFyIGxpbmUgPSBzdHJpbmcoZGF0YSkKCQlsaW5lID0gc3RyaW5ncy5SZXBsYWNlKGxpbmUsIGZpbmQsIHJlcGxhY2UsIG9jY3VycmVuY2VzKQoJCXJldHVybiBbXWJ5dGUobGluZSksIG5pbAoJfQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "RemoveLinesContaining",
                                "Comment": "A ReadManipulatorFunc for removing lines that contain the given string.",
                                "Arguments": [
                                    {
                                        "Name": "needle",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "ReadManipulatorFunc"
                                    }
                                ],
                                "Signature": "RemoveLinesContaining(needle string) ReadManipulatorFunc",
                                "Source": "ewoJcmV0dXJuIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJaWYgc3RyaW5ncy5Db250YWlucyhzdHJpbmcoZGF0YSksIG5lZWRsZSkgewoJCQlyZXR1cm4gbmlsLCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gZGF0YSwgbmlsCgkJfQoJfQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "RemoveLinesWithPrefix",
                                "Comment": "A ReadManipulatorFunc for removing lines that have a given prefix.",
                                "Arguments": [
                                    {
                                        "Name": "prefix",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "trimSpace",
                                        "Type": "bool"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "ReadManipulatorFunc"
                                    }
                                ],
                                "Signature": "RemoveLinesWithPrefix(prefix string, trimSpace bool) ReadManipulatorFunc",
                                "Source": "ewoJcmV0dXJuIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJdmFyIGxpbmUgPSBzdHJpbmcoZGF0YSkKCQlpZiB0cmltU3BhY2UgewoJCQlsaW5lID0gc3RyaW5ncy5UcmltU3BhY2UobGluZSkKCQl9CgkJaWYgc3RyaW5ncy5IYXNQcmVmaXgobGluZSwgcHJlZml4KSB7CgkJCXJldHVybiBuaWwsIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBkYXRhLCBuaWwKCQl9Cgl9Cn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "RemoveLinesWithSuffix",
                                "Comment": "A ReadManipulatorFunc for removing lines that have a given suffix.",
                                "Arguments": [
                                    {
                                        "Name": "suffix",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "trimSpace",
                                        "Type": "bool"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "ReadManipulatorFunc"
                                    }
                                ],
                                "Signature": "RemoveLinesWithSuffix(suffix string, trimSpace bool) ReadManipulatorFunc",
                                "Source": "ewoJcmV0dXJuIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJdmFyIGxpbmUgPSBzdHJpbmcoZGF0YSkKCQlpZiB0cmltU3BhY2UgewoJCQlsaW5lID0gc3RyaW5ncy5UcmltU3BhY2UobGluZSkKCQl9CgkJaWYgc3RyaW5ncy5IYXNTdWZmaXgobGluZSwgc3VmZml4KSB7CgkJCXJldHVybiBuaWwsIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBkYXRhLCBuaWwKCQl9Cgl9Cn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "RemoveLinesSurroundedBy",
                                "Comment": "A ReadManipulatorFunc for removing lines surrounded by a given prefix and suffix.",
                                "Arguments": [
                                    {
                                        "Name": "prefix",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "suffix",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "trimSpace",
                                        "Type": "bool"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "ReadManipulatorFunc"
                                    }
                                ],
                                "Signature": "RemoveLinesSurroundedBy(prefix string, suffix string, trimSpace bool) ReadManipulatorFunc",
                                "Source": "ewoJcmV0dXJuIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJdmFyIGxpbmUgPSBzdHJpbmcoZGF0YSkKCQlpZiB0cmltU3BhY2UgewoJCQlsaW5lID0gc3RyaW5ncy5UcmltU3BhY2UobGluZSkKCQl9CgkJaWYgc3RyaW5ncy5IYXNQcmVmaXgobGluZSwgcHJlZml4KSAmJiBzdHJpbmdzLkhhc1N1ZmZpeChsaW5lLCBzdWZmaXgpIHsKCQkJcmV0dXJuIG5pbCwgbmlsCgkJfSBlbHNlIHsKCQkJcmV0dXJuIGRhdGEsIG5pbAoJCX0KCX0KfQ==",
                                "IsPackageLevel": true
                            }
                        ],
                        "Source": "dHlwZSBSZWFkTWFuaXB1bGF0b3JGdW5jIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKQ=="
                    },
                    "RetrieveHandlerFunc": {
                        "Name": "RetrieveHandlerFunc",
                        "Source": "dHlwZSBSZXRyaWV2ZUhhbmRsZXJGdW5jID0gZnVuYyhjb250ZXh0LkNvbnRleHQsICp1cmwuVVJMKSAoaW8uUmVhZENsb3NlciwgZXJyb3Ip"
                    },
                    "RewriteFileSystem": {
                        "Name": "RewriteFileSystem",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Open",
                                "ReceiverName": "rwfs",
                                "Arguments": [
                                    {
                                        "Name": "name",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "http.File"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Open(name string) (http.File, error)",
                                "IsPackageLevel": false
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "FileSystem",
                                "Type": "http.FileSystem"
                            },
                            {
                                "Name": "Find",
                                "Type": "*regexp.Regexp"
                            },
                            {
                                "Name": "Replace",
                                "Type": "string"
                            },
                            {
                                "Name": "MustMatch",
                                "Type": "bool"
                            }
                        ],
                        "Source": "dHlwZSBSZXdyaXRlRmlsZVN5c3RlbSBzdHJ1Y3QgewoJRmlsZVN5c3RlbSBodHRwLkZpbGVTeXN0ZW0KCUZpbmQgICAgICAgKnJlZ2V4cC5SZWdleHAKCVJlcGxhY2UgICAgc3RyaW5nCglNdXN0TWF0Y2ggIGJvb2wKfQ=="
                    },
                    "SkipFunc": {
                        "Name": "SkipFunc",
                        "Source": "dHlwZSBTa2lwRnVuYyBmdW5jKHN0cmluZykgYm9vbA=="
                    },
                    "SshHostKeyCallbackFunc": {
                        "Name": "SshHostKeyCallbackFunc",
                        "Source": "dHlwZSBTc2hIb3N0S2V5Q2FsbGJhY2tGdW5jID0gZnVuYyhob3N0bmFtZSBzdHJpbmcsIHJlbW90ZSBuZXQuQWRkciwga2V5IHNzaC5QdWJsaWNLZXkpIGVycm9y"
                    },
                    "TestFileSystem": {
                        "Name": "TestFileSystem",
                        "Methods": [
                            {
                                "Name": "Open",
                                "ReceiverName": "testfs",
                                "Arguments": [
                                    {
                                        "Name": "name",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "http.File"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Open(name string) (http.File, error)",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBUZXN0RmlsZVN5c3RlbSBtYXBbc3RyaW5nXWh0dHAuRmlsZQ=="
                    }
                }
            },
            {
                "Name": "geoutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/geoutil",
                "ImportPath": "geoutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Types and functions for working with Geospatial Data\n",
                "MainFunction": false,
                "CommentWordCount": 135,
                "LineCount": 2586,
                "SourceLineCount": 2453,
                "FunctionCount": 29,
                "TypeCount": 9,
                "ConstantCount": 286,
                "VariableCount": 3,
                "Statistics": {
                    "Mean": 0.0632,
                    "StdDev": 0.2328,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 0,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "coordinates.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/json",
                                "Alias": "json"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                                "Alias": "maputil"
                            },
                            {
                                "PackageName": "github.com/kellydunn/golang-geo",
                                "Alias": "geo"
                            }
                        ],
                        "Size": 4069,
                        "LineCount": 157,
                        "SourceLineCount": 119,
                        "FunctionCount": 10,
                        "TypeCount": 3,
                        "ConstantCount": 3,
                        "VariableCount": 0
                    },
                    {
                        "Name": "countries.go",
                        "Imports": [
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 46905,
                        "LineCount": 2027,
                        "SourceLineCount": 2014,
                        "FunctionCount": 2,
                        "TypeCount": 2,
                        "ConstantCount": 262,
                        "VariableCount": 1
                    },
                    {
                        "Name": "countries_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/assert",
                                "Alias": "assert"
                            }
                        ],
                        "Size": 530,
                        "LineCount": 18,
                        "SourceLineCount": 13,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "direction.go",
                        "Size": 948,
                        "LineCount": 38,
                        "SourceLineCount": 33,
                        "FunctionCount": 1,
                        "TypeCount": 1,
                        "ConstantCount": 8,
                        "VariableCount": 0
                    },
                    {
                        "Name": "distance.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/json",
                                "Alias": "json"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "regexp",
                                "Alias": "regexp"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/rxutil",
                                "Alias": "rxutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 3585,
                        "LineCount": 163,
                        "SourceLineCount": 133,
                        "FunctionCount": 10,
                        "TypeCount": 1,
                        "ConstantCount": 6,
                        "VariableCount": 1
                    },
                    {
                        "Name": "speed.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/json",
                                "Alias": "json"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 1606,
                        "LineCount": 89,
                        "SourceLineCount": 70,
                        "FunctionCount": 6,
                        "TypeCount": 1,
                        "ConstantCount": 5,
                        "VariableCount": 1
                    },
                    {
                        "Name": "types.go",
                        "Size": 194,
                        "LineCount": 10,
                        "SourceLineCount": 6,
                        "FunctionCount": 0,
                        "TypeCount": 1,
                        "ConstantCount": 2,
                        "VariableCount": 0
                    },
                    {
                        "Name": "types_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 3268,
                        "LineCount": 84,
                        "SourceLineCount": 65,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Constants": [
                    {
                        "Name": "Afghanistan",
                        "Immutable": true,
                        "Expression": "`af`",
                        "Value": "af"
                    },
                    {
                        "Name": "Albania",
                        "Immutable": true,
                        "Expression": "`al`",
                        "Value": "al"
                    },
                    {
                        "Name": "Algeria",
                        "Immutable": true,
                        "Expression": "`dz`",
                        "Value": "dz"
                    },
                    {
                        "Name": "AmericanSamoa",
                        "Immutable": true,
                        "Expression": "`as`",
                        "Value": "as"
                    },
                    {
                        "Name": "Andorra",
                        "Immutable": true,
                        "Expression": "`ad`",
                        "Value": "ad"
                    },
                    {
                        "Name": "Angola",
                        "Immutable": true,
                        "Expression": "`ao`",
                        "Value": "ao"
                    },
                    {
                        "Name": "Anguilla",
                        "Immutable": true,
                        "Expression": "`ai`",
                        "Value": "ai"
                    },
                    {
                        "Name": "Antarctica",
                        "Immutable": true,
                        "Expression": "`aq`",
                        "Value": "aq"
                    },
                    {
                        "Name": "AntiguaAndBarbuda",
                        "Immutable": true,
                        "Expression": "`ag`",
                        "Value": "ag"
                    },
                    {
                        "Name": "Argentina",
                        "Immutable": true,
                        "Expression": "`ar`",
                        "Value": "ar"
                    },
                    {
                        "Name": "Armenia",
                        "Immutable": true,
                        "Expression": "`am`",
                        "Value": "am"
                    },
                    {
                        "Name": "Aruba",
                        "Immutable": true,
                        "Expression": "`aw`",
                        "Value": "aw"
                    },
                    {
                        "Name": "Australia",
                        "Immutable": true,
                        "Expression": "`au`",
                        "Value": "au"
                    },
                    {
                        "Name": "Austria",
                        "Immutable": true,
                        "Expression": "`at`",
                        "Value": "at"
                    },
                    {
                        "Name": "Azerbaijan",
                        "Immutable": true,
                        "Expression": "`az`",
                        "Value": "az"
                    },
                    {
                        "Name": "Bahamas",
                        "Immutable": true,
                        "Expression": "`bs`",
                        "Value": "bs"
                    },
                    {
                        "Name": "Bahrain",
                        "Immutable": true,
                        "Expression": "`bh`",
                        "Value": "bh"
                    },
                    {
                        "Name": "Bangladesh",
                        "Immutable": true,
                        "Expression": "`bd`",
                        "Value": "bd"
                    },
                    {
                        "Name": "Barbados",
                        "Immutable": true,
                        "Expression": "`bb`",
                        "Value": "bb"
                    },
                    {
                        "Name": "Belarus",
                        "Immutable": true,
                        "Expression": "`by`",
                        "Value": "by"
                    },
                    {
                        "Name": "Belgium",
                        "Immutable": true,
                        "Expression": "`be`",
                        "Value": "be"
                    },
                    {
                        "Name": "Belize",
                        "Immutable": true,
                        "Expression": "`bz`",
                        "Value": "bz"
                    },
                    {
                        "Name": "Benin",
                        "Immutable": true,
                        "Expression": "`bj`",
                        "Value": "bj"
                    },
                    {
                        "Name": "Bermuda",
                        "Immutable": true,
                        "Expression": "`bm`",
                        "Value": "bm"
                    },
                    {
                        "Name": "Bhutan",
                        "Immutable": true,
                        "Expression": "`bt`",
                        "Value": "bt"
                    },
                    {
                        "Name": "Bolivia",
                        "Immutable": true,
                        "Expression": "`bo`",
                        "Value": "bo"
                    },
                    {
                        "Name": "BosniaAndHerzegovina",
                        "Immutable": true,
                        "Expression": "`ba`",
                        "Value": "ba"
                    },
                    {
                        "Name": "Botswana",
                        "Immutable": true,
                        "Expression": "`bw`",
                        "Value": "bw"
                    },
                    {
                        "Name": "BouvetIsland",
                        "Immutable": true,
                        "Expression": "`bv`",
                        "Value": "bv"
                    },
                    {
                        "Name": "Brazil",
                        "Immutable": true,
                        "Expression": "`br`",
                        "Value": "br"
                    },
                    {
                        "Name": "BritishIndianOceanTerritory",
                        "Immutable": true,
                        "Expression": "`io`",
                        "Value": "io"
                    },
                    {
                        "Name": "BritishVirginIslands",
                        "Immutable": true,
                        "Expression": "`vg`",
                        "Value": "vg"
                    },
                    {
                        "Name": "Brunei",
                        "Immutable": true,
                        "Expression": "`bn`",
                        "Value": "bn"
                    },
                    {
                        "Name": "Bulgaria",
                        "Immutable": true,
                        "Expression": "`bg`",
                        "Value": "bg"
                    },
                    {
                        "Name": "BurkinaFaso",
                        "Immutable": true,
                        "Expression": "`bf`",
                        "Value": "bf"
                    },
                    {
                        "Name": "Burma",
                        "Immutable": true,
                        "Expression": "`mm`",
                        "Value": "mm"
                    },
                    {
                        "Name": "Burundi",
                        "Immutable": true,
                        "Expression": "`bi`",
                        "Value": "bi"
                    },
                    {
                        "Name": "Cambodia",
                        "Immutable": true,
                        "Expression": "`kh`",
                        "Value": "kh"
                    },
                    {
                        "Name": "Cameroon",
                        "Immutable": true,
                        "Expression": "`cm`",
                        "Value": "cm"
                    },
                    {
                        "Name": "Canada",
                        "Immutable": true,
                        "Expression": "`ca`",
                        "Value": "ca"
                    },
                    {
                        "Name": "CapeVerde",
                        "Immutable": true,
                        "Expression": "`cv`",
                        "Value": "cv"
                    },
                    {
                        "Name": "CaymanIslands",
                        "Immutable": true,
                        "Expression": "`ky`",
                        "Value": "ky"
                    },
                    {
                        "Name": "CentralAfricanRepublic",
                        "Immutable": true,
                        "Expression": "`cf`",
                        "Value": "cf"
                    },
                    {
                        "Name": "Chad",
                        "Immutable": true,
                        "Expression": "`td`",
                        "Value": "td"
                    },
                    {
                        "Name": "Chile",
                        "Immutable": true,
                        "Expression": "`cl`",
                        "Value": "cl"
                    },
                    {
                        "Name": "China",
                        "Immutable": true,
                        "Expression": "`cn`",
                        "Value": "cn"
                    },
                    {
                        "Name": "ChristmasIsland",
                        "Immutable": true,
                        "Expression": "`cx`",
                        "Value": "cx"
                    },
                    {
                        "Name": "CocosIslands",
                        "Immutable": true,
                        "Expression": "`cc`",
                        "Value": "cc"
                    },
                    {
                        "Name": "Colombia",
                        "Immutable": true,
                        "Expression": "`co`",
                        "Value": "co"
                    },
                    {
                        "Name": "Comoros",
                        "Immutable": true,
                        "Expression": "`km`",
                        "Value": "km"
                    },
                    {
                        "Name": "CongoDRC",
                        "Immutable": true,
                        "Expression": "`cd`",
                        "Value": "cd"
                    },
                    {
                        "Name": "CongoRepublic",
                        "Immutable": true,
                        "Expression": "`cg`",
                        "Value": "cg"
                    },
                    {
                        "Name": "CookIslands",
                        "Immutable": true,
                        "Expression": "`ck`",
                        "Value": "ck"
                    },
                    {
                        "Name": "CostaRica",
                        "Immutable": true,
                        "Expression": "`cr`",
                        "Value": "cr"
                    },
                    {
                        "Name": "CoteDIvoire",
                        "Immutable": true,
                        "Expression": "`ci`",
                        "Value": "ci"
                    },
                    {
                        "Name": "Croatia",
                        "Immutable": true,
                        "Expression": "`hr`",
                        "Value": "hr"
                    },
                    {
                        "Name": "Cuba",
                        "Immutable": true,
                        "Expression": "`cu`",
                        "Value": "cu"
                    },
                    {
                        "Name": "Cyprus",
                        "Immutable": true,
                        "Expression": "`cy`",
                        "Value": "cy"
                    },
                    {
                        "Name": "CzechRepublic",
                        "Immutable": true,
                        "Expression": "`cz`",
                        "Value": "cz"
                    },
                    {
                        "Name": "CôtedIvoire",
                        "Immutable": true,
                        "Expression": "`ci`",
                        "Value": "ci"
                    },
                    {
                        "Name": "Denmark",
                        "Immutable": true,
                        "Expression": "`dk`",
                        "Value": "dk"
                    },
                    {
                        "Name": "Djibouti",
                        "Immutable": true,
                        "Expression": "`dj`",
                        "Value": "dj"
                    },
                    {
                        "Name": "Dominica",
                        "Immutable": true,
                        "Expression": "`dm`",
                        "Value": "dm"
                    },
                    {
                        "Name": "DominicanRepublic",
                        "Immutable": true,
                        "Expression": "`do`",
                        "Value": "do"
                    },
                    {
                        "Name": "EarthKarmanHeight",
                        "Type": "Distance",
                        "Immutable": true,
                        "Expression": "100 * Kilometer"
                    },
                    {
                        "Name": "EarthRadius",
                        "Type": "Distance",
                        "Immutable": true,
                        "Expression": "geo.EARTH_RADIUS * Kilometer"
                    },
                    {
                        "Name": "EarthStratosphereHeight",
                        "Type": "Distance",
                        "Immutable": true,
                        "Expression": "60 * Kilometer"
                    },
                    {
                        "Name": "East",
                        "Immutable": true,
                        "Expression": "`E`",
                        "Value": "E"
                    },
                    {
                        "Name": "Ecuador",
                        "Immutable": true,
                        "Expression": "`ec`",
                        "Value": "ec"
                    },
                    {
                        "Name": "Egypt",
                        "Immutable": true,
                        "Expression": "`eg`",
                        "Value": "eg"
                    },
                    {
                        "Name": "ElSalvador",
                        "Immutable": true,
                        "Expression": "`sv`",
                        "Value": "sv"
                    },
                    {
                        "Name": "EquatorialGuinea",
                        "Immutable": true,
                        "Expression": "`gq`",
                        "Value": "gq"
                    },
                    {
                        "Name": "Eritrea",
                        "Immutable": true,
                        "Expression": "`er`",
                        "Value": "er"
                    },
                    {
                        "Name": "Estonia",
                        "Immutable": true,
                        "Expression": "`ee`",
                        "Value": "ee"
                    },
                    {
                        "Name": "Ethiopia",
                        "Immutable": true,
                        "Expression": "`et`",
                        "Value": "et"
                    },
                    {
                        "Name": "FalklandIslands",
                        "Immutable": true,
                        "Expression": "`fk`",
                        "Value": "fk"
                    },
                    {
                        "Name": "FaroeIslands",
                        "Immutable": true,
                        "Expression": "`fo`",
                        "Value": "fo"
                    },
                    {
                        "Name": "FeetPerSecond",
                        "Immutable": true,
                        "Expression": "0.3048"
                    },
                    {
                        "Name": "Fiji",
                        "Immutable": true,
                        "Expression": "`fj`",
                        "Value": "fj"
                    },
                    {
                        "Name": "Finland",
                        "Immutable": true,
                        "Expression": "`fi`",
                        "Value": "fi"
                    },
                    {
                        "Name": "Foot",
                        "Immutable": true,
                        "Expression": "0.3048"
                    },
                    {
                        "Name": "France",
                        "Immutable": true,
                        "Expression": "`fr`",
                        "Value": "fr"
                    },
                    {
                        "Name": "FrenchGuiana",
                        "Immutable": true,
                        "Expression": "`gf`",
                        "Value": "gf"
                    },
                    {
                        "Name": "FrenchPolynesia",
                        "Immutable": true,
                        "Expression": "`pf`",
                        "Value": "pf"
                    },
                    {
                        "Name": "FrenchSouthernTerritories",
                        "Immutable": true,
                        "Expression": "`tf`",
                        "Value": "tf"
                    },
                    {
                        "Name": "Gabon",
                        "Immutable": true,
                        "Expression": "`ga`",
                        "Value": "ga"
                    },
                    {
                        "Name": "Gambia",
                        "Immutable": true,
                        "Expression": "`gm`",
                        "Value": "gm"
                    },
                    {
                        "Name": "GazaStrip",
                        "Immutable": true,
                        "Expression": "`gz`",
                        "Value": "gz"
                    },
                    {
                        "Name": "Georgia",
                        "Immutable": true,
                        "Expression": "`ge`",
                        "Value": "ge"
                    },
                    {
                        "Name": "Germany",
                        "Immutable": true,
                        "Expression": "`de`",
                        "Value": "de"
                    },
                    {
                        "Name": "Ghana",
                        "Immutable": true,
                        "Expression": "`gh`",
                        "Value": "gh"
                    },
                    {
                        "Name": "Gibraltar",
                        "Immutable": true,
                        "Expression": "`gi`",
                        "Value": "gi"
                    },
                    {
                        "Name": "GreatBritain",
                        "Immutable": true,
                        "Expression": "`gb`",
                        "Value": "gb"
                    },
                    {
                        "Name": "Greece",
                        "Immutable": true,
                        "Expression": "`gr`",
                        "Value": "gr"
                    },
                    {
                        "Name": "Greenland",
                        "Immutable": true,
                        "Expression": "`gl`",
                        "Value": "gl"
                    },
                    {
                        "Name": "Grenada",
                        "Immutable": true,
                        "Expression": "`gd`",
                        "Value": "gd"
                    },
                    {
                        "Name": "Guadeloupe",
                        "Immutable": true,
                        "Expression": "`gp`",
                        "Value": "gp"
                    },
                    {
                        "Name": "Guam",
                        "Immutable": true,
                        "Expression": "`gu`",
                        "Value": "gu"
                    },
                    {
                        "Name": "Guatemala",
                        "Immutable": true,
                        "Expression": "`gt`",
                        "Value": "gt"
                    },
                    {
                        "Name": "Guernsey",
                        "Immutable": true,
                        "Expression": "`gg`",
                        "Value": "gg"
                    },
                    {
                        "Name": "Guinea",
                        "Immutable": true,
                        "Expression": "`gn`",
                        "Value": "gn"
                    },
                    {
                        "Name": "GuineaBissau",
                        "Immutable": true,
                        "Expression": "`gw`",
                        "Value": "gw"
                    },
                    {
                        "Name": "Guyana",
                        "Immutable": true,
                        "Expression": "`gy`",
                        "Value": "gy"
                    },
                    {
                        "Name": "Haiti",
                        "Immutable": true,
                        "Expression": "`ht`",
                        "Value": "ht"
                    },
                    {
                        "Name": "HeardIslandAndMcDonaldIslands",
                        "Immutable": true,
                        "Expression": "`hm`",
                        "Value": "hm"
                    },
                    {
                        "Name": "Honduras",
                        "Immutable": true,
                        "Expression": "`hn`",
                        "Value": "hn"
                    },
                    {
                        "Name": "HongKong",
                        "Immutable": true,
                        "Expression": "`hk`",
                        "Value": "hk"
                    },
                    {
                        "Name": "Hungary",
                        "Immutable": true,
                        "Expression": "`hu`",
                        "Value": "hu"
                    },
                    {
                        "Name": "Iceland",
                        "Immutable": true,
                        "Expression": "`is`",
                        "Value": "is"
                    },
                    {
                        "Name": "Imperial",
                        "Immutable": true,
                        "Expression": "`imperial`",
                        "Value": "imperial"
                    },
                    {
                        "Name": "India",
                        "Immutable": true,
                        "Expression": "`in`",
                        "Value": "in"
                    },
                    {
                        "Name": "Indonesia",
                        "Immutable": true,
                        "Expression": "`id`",
                        "Value": "id"
                    },
                    {
                        "Name": "Iran",
                        "Immutable": true,
                        "Expression": "`ir`",
                        "Value": "ir"
                    },
                    {
                        "Name": "Iraq",
                        "Immutable": true,
                        "Expression": "`iq`",
                        "Value": "iq"
                    },
                    {
                        "Name": "Ireland",
                        "Immutable": true,
                        "Expression": "`ie`",
                        "Value": "ie"
                    },
                    {
                        "Name": "IslasMalvinas",
                        "Immutable": true,
                        "Expression": "`fk`",
                        "Value": "fk"
                    },
                    {
                        "Name": "IsleOfMan",
                        "Immutable": true,
                        "Expression": "`im`",
                        "Value": "im"
                    },
                    {
                        "Name": "Israel",
                        "Immutable": true,
                        "Expression": "`il`",
                        "Value": "il"
                    },
                    {
                        "Name": "Italy",
                        "Immutable": true,
                        "Expression": "`it`",
                        "Value": "it"
                    },
                    {
                        "Name": "Jamaica",
                        "Immutable": true,
                        "Expression": "`jm`",
                        "Value": "jm"
                    },
                    {
                        "Name": "JanMayen",
                        "Immutable": true,
                        "Expression": "`sj`",
                        "Value": "sj"
                    },
                    {
                        "Name": "Japan",
                        "Immutable": true,
                        "Expression": "`jp`",
                        "Value": "jp"
                    },
                    {
                        "Name": "Jersey",
                        "Immutable": true,
                        "Expression": "`je`",
                        "Value": "je"
                    },
                    {
                        "Name": "Jordan",
                        "Immutable": true,
                        "Expression": "`jo`",
                        "Value": "jo"
                    },
                    {
                        "Name": "KPH",
                        "Immutable": true,
                        "Expression": "0.277778"
                    },
                    {
                        "Name": "Kazakhstan",
                        "Immutable": true,
                        "Expression": "`kz`",
                        "Value": "kz"
                    },
                    {
                        "Name": "Kenya",
                        "Immutable": true,
                        "Expression": "`ke`",
                        "Value": "ke"
                    },
                    {
                        "Name": "Kilometer",
                        "Immutable": true,
                        "Expression": "1000"
                    },
                    {
                        "Name": "Kiribati",
                        "Immutable": true,
                        "Expression": "`ki`",
                        "Value": "ki"
                    },
                    {
                        "Name": "Kosovo",
                        "Immutable": true,
                        "Expression": "`xk`",
                        "Value": "xk"
                    },
                    {
                        "Name": "Kuwait",
                        "Immutable": true,
                        "Expression": "`kw`",
                        "Value": "kw"
                    },
                    {
                        "Name": "Kyrgyzstan",
                        "Immutable": true,
                        "Expression": "`kg`",
                        "Value": "kg"
                    },
                    {
                        "Name": "Laos",
                        "Immutable": true,
                        "Expression": "`la`",
                        "Value": "la"
                    },
                    {
                        "Name": "Latvia",
                        "Immutable": true,
                        "Expression": "`lv`",
                        "Value": "lv"
                    },
                    {
                        "Name": "Lebanon",
                        "Immutable": true,
                        "Expression": "`lb`",
                        "Value": "lb"
                    },
                    {
                        "Name": "Lesotho",
                        "Immutable": true,
                        "Expression": "`ls`",
                        "Value": "ls"
                    },
                    {
                        "Name": "Liberia",
                        "Immutable": true,
                        "Expression": "`lr`",
                        "Value": "lr"
                    },
                    {
                        "Name": "Libya",
                        "Immutable": true,
                        "Expression": "`ly`",
                        "Value": "ly"
                    },
                    {
                        "Name": "Liechtenstein",
                        "Immutable": true,
                        "Expression": "`li`",
                        "Value": "li"
                    },
                    {
                        "Name": "Lithuania",
                        "Immutable": true,
                        "Expression": "`lt`",
                        "Value": "lt"
                    },
                    {
                        "Name": "Luxembourg",
                        "Immutable": true,
                        "Expression": "`lu`",
                        "Value": "lu"
                    },
                    {
                        "Name": "MPH",
                        "Immutable": true,
                        "Expression": "0.44704"
                    },
                    {
                        "Name": "Macau",
                        "Immutable": true,
                        "Expression": "`mo`",
                        "Value": "mo"
                    },
                    {
                        "Name": "Macedonia",
                        "Immutable": true,
                        "Expression": "`mk`",
                        "Value": "mk"
                    },
                    {
                        "Name": "Mach",
                        "Immutable": true,
                        "Expression": "340.29"
                    },
                    {
                        "Name": "Madagascar",
                        "Immutable": true,
                        "Expression": "`mg`",
                        "Value": "mg"
                    },
                    {
                        "Name": "Malawi",
                        "Immutable": true,
                        "Expression": "`mw`",
                        "Value": "mw"
                    },
                    {
                        "Name": "Malaysia",
                        "Immutable": true,
                        "Expression": "`my`",
                        "Value": "my"
                    },
                    {
                        "Name": "Maldives",
                        "Immutable": true,
                        "Expression": "`mv`",
                        "Value": "mv"
                    },
                    {
                        "Name": "Mali",
                        "Immutable": true,
                        "Expression": "`ml`",
                        "Value": "ml"
                    },
                    {
                        "Name": "Malta",
                        "Immutable": true,
                        "Expression": "`mt`",
                        "Value": "mt"
                    },
                    {
                        "Name": "MarshallIslands",
                        "Immutable": true,
                        "Expression": "`mh`",
                        "Value": "mh"
                    },
                    {
                        "Name": "Martinique",
                        "Immutable": true,
                        "Expression": "`mq`",
                        "Value": "mq"
                    },
                    {
                        "Name": "Mauritania",
                        "Immutable": true,
                        "Expression": "`mr`",
                        "Value": "mr"
                    },
                    {
                        "Name": "Mauritius",
                        "Immutable": true,
                        "Expression": "`mu`",
                        "Value": "mu"
                    },
                    {
                        "Name": "Mayotte",
                        "Immutable": true,
                        "Expression": "`yt`",
                        "Value": "yt"
                    },
                    {
                        "Name": "Meter",
                        "Immutable": true,
                        "Expression": "1"
                    },
                    {
                        "Name": "MetersPerSecond",
                        "Immutable": true,
                        "Expression": "1"
                    },
                    {
                        "Name": "Metric",
                        "Type": "MeasurementSystem",
                        "Immutable": true,
                        "Expression": "`metric`",
                        "Value": "metric"
                    },
                    {
                        "Name": "Mexico",
                        "Immutable": true,
                        "Expression": "`mx`",
                        "Value": "mx"
                    },
                    {
                        "Name": "Micronesia",
                        "Immutable": true,
                        "Expression": "`fm`",
                        "Value": "fm"
                    },
                    {
                        "Name": "Mile",
                        "Immutable": true,
                        "Expression": "1609.344"
                    },
                    {
                        "Name": "Miquelon",
                        "Immutable": true,
                        "Expression": "`pm`",
                        "Value": "pm"
                    },
                    {
                        "Name": "Moldova",
                        "Immutable": true,
                        "Expression": "`md`",
                        "Value": "md"
                    },
                    {
                        "Name": "Monaco",
                        "Immutable": true,
                        "Expression": "`mc`",
                        "Value": "mc"
                    },
                    {
                        "Name": "Mongolia",
                        "Immutable": true,
                        "Expression": "`mn`",
                        "Value": "mn"
                    },
                    {
                        "Name": "Montenegro",
                        "Immutable": true,
                        "Expression": "`me`",
                        "Value": "me"
                    },
                    {
                        "Name": "Montserrat",
                        "Immutable": true,
                        "Expression": "`ms`",
                        "Value": "ms"
                    },
                    {
                        "Name": "Morocco",
                        "Immutable": true,
                        "Expression": "`ma`",
                        "Value": "ma"
                    },
                    {
                        "Name": "Mozambique",
                        "Immutable": true,
                        "Expression": "`mz`",
                        "Value": "mz"
                    },
                    {
                        "Name": "Myanmar",
                        "Immutable": true,
                        "Expression": "`mm`",
                        "Value": "mm"
                    },
                    {
                        "Name": "Namibia",
                        "Immutable": true,
                        "Expression": "`na`",
                        "Value": "na"
                    },
                    {
                        "Name": "Nauru",
                        "Immutable": true,
                        "Expression": "`nr`",
                        "Value": "nr"
                    },
                    {
                        "Name": "NauticalMile",
                        "Immutable": true,
                        "Expression": "1852"
                    },
                    {
                        "Name": "Nepal",
                        "Immutable": true,
                        "Expression": "`np`",
                        "Value": "np"
                    },
                    {
                        "Name": "Netherlands",
                        "Immutable": true,
                        "Expression": "`nl`",
                        "Value": "nl"
                    },
                    {
                        "Name": "NetherlandsAntilles",
                        "Immutable": true,
                        "Expression": "`an`",
                        "Value": "an"
                    },
                    {
                        "Name": "NewCaledonia",
                        "Immutable": true,
                        "Expression": "`nc`",
                        "Value": "nc"
                    },
                    {
                        "Name": "NewZealand",
                        "Immutable": true,
                        "Expression": "`nz`",
                        "Value": "nz"
                    },
                    {
                        "Name": "Nicaragua",
                        "Immutable": true,
                        "Expression": "`ni`",
                        "Value": "ni"
                    },
                    {
                        "Name": "Niger",
                        "Immutable": true,
                        "Expression": "`ne`",
                        "Value": "ne"
                    },
                    {
                        "Name": "Nigeria",
                        "Immutable": true,
                        "Expression": "`ng`",
                        "Value": "ng"
                    },
                    {
                        "Name": "Niue",
                        "Immutable": true,
                        "Expression": "`nu`",
                        "Value": "nu"
                    },
                    {
                        "Name": "NorfolkIsland",
                        "Immutable": true,
                        "Expression": "`nf`",
                        "Value": "nf"
                    },
                    {
                        "Name": "North",
                        "Type": "CardinalDirection",
                        "Immutable": true,
                        "Expression": "`N`",
                        "Value": "N"
                    },
                    {
                        "Name": "NorthEast",
                        "Immutable": true,
                        "Expression": "`NE`",
                        "Value": "NE"
                    },
                    {
                        "Name": "NorthKorea",
                        "Immutable": true,
                        "Expression": "`kp`",
                        "Value": "kp"
                    },
                    {
                        "Name": "NorthWest",
                        "Immutable": true,
                        "Expression": "`NW`",
                        "Value": "NW"
                    },
                    {
                        "Name": "NorthernMarianaIslands",
                        "Immutable": true,
                        "Expression": "`mp`",
                        "Value": "mp"
                    },
                    {
                        "Name": "Norway",
                        "Immutable": true,
                        "Expression": "`no`",
                        "Value": "no"
                    },
                    {
                        "Name": "Oman",
                        "Immutable": true,
                        "Expression": "`om`",
                        "Value": "om"
                    },
                    {
                        "Name": "Pakistan",
                        "Immutable": true,
                        "Expression": "`pk`",
                        "Value": "pk"
                    },
                    {
                        "Name": "Palau",
                        "Immutable": true,
                        "Expression": "`pw`",
                        "Value": "pw"
                    },
                    {
                        "Name": "Palestine",
                        "Immutable": true,
                        "Expression": "`ps`",
                        "Value": "ps"
                    },
                    {
                        "Name": "Panama",
                        "Immutable": true,
                        "Expression": "`pa`",
                        "Value": "pa"
                    },
                    {
                        "Name": "PapuaNewGuinea",
                        "Immutable": true,
                        "Expression": "`pg`",
                        "Value": "pg"
                    },
                    {
                        "Name": "Paraguay",
                        "Immutable": true,
                        "Expression": "`py`",
                        "Value": "py"
                    },
                    {
                        "Name": "Peru",
                        "Immutable": true,
                        "Expression": "`pe`",
                        "Value": "pe"
                    },
                    {
                        "Name": "Philippines",
                        "Immutable": true,
                        "Expression": "`ph`",
                        "Value": "ph"
                    },
                    {
                        "Name": "PitcairnIslands",
                        "Immutable": true,
                        "Expression": "`pn`",
                        "Value": "pn"
                    },
                    {
                        "Name": "Poland",
                        "Immutable": true,
                        "Expression": "`pl`",
                        "Value": "pl"
                    },
                    {
                        "Name": "Portugal",
                        "Immutable": true,
                        "Expression": "`pt`",
                        "Value": "pt"
                    },
                    {
                        "Name": "PuertoRico",
                        "Immutable": true,
                        "Expression": "`pr`",
                        "Value": "pr"
                    },
                    {
                        "Name": "Qatar",
                        "Immutable": true,
                        "Expression": "`qa`",
                        "Value": "qa"
                    },
                    {
                        "Name": "Reunion",
                        "Immutable": true,
                        "Expression": "`re`",
                        "Value": "re"
                    },
                    {
                        "Name": "Romania",
                        "Immutable": true,
                        "Expression": "`ro`",
                        "Value": "ro"
                    },
                    {
                        "Name": "Russia",
                        "Immutable": true,
                        "Expression": "`ru`",
                        "Value": "ru"
                    },
                    {
                        "Name": "Rwanda",
                        "Immutable": true,
                        "Expression": "`rw`",
                        "Value": "rw"
                    },
                    {
                        "Name": "Réunion",
                        "Immutable": true,
                        "Expression": "`re`",
                        "Value": "re"
                    },
                    {
                        "Name": "SaintHelena",
                        "Immutable": true,
                        "Expression": "`sh`",
                        "Value": "sh"
                    },
                    {
                        "Name": "SaintKittsAndNevis",
                        "Immutable": true,
                        "Expression": "`kn`",
                        "Value": "kn"
                    },
                    {
                        "Name": "SaintLucia",
                        "Immutable": true,
                        "Expression": "`lc`",
                        "Value": "lc"
                    },
                    {
                        "Name": "SaintPierre",
                        "Immutable": true,
                        "Expression": "`pm`",
                        "Value": "pm"
                    },
                    {
                        "Name": "SaintPierreAndMiquelon",
                        "Immutable": true,
                        "Expression": "`pm`",
                        "Value": "pm"
                    },
                    {
                        "Name": "SaintVincent",
                        "Immutable": true,
                        "Expression": "`vc`",
                        "Value": "vc"
                    },
                    {
                        "Name": "SaintVincentAndTheGrenadines",
                        "Immutable": true,
                        "Expression": "`vc`",
                        "Value": "vc"
                    },
                    {
                        "Name": "Samoa",
                        "Immutable": true,
                        "Expression": "`ws`",
                        "Value": "ws"
                    },
                    {
                        "Name": "SanMarino",
                        "Immutable": true,
                        "Expression": "`sm`",
                        "Value": "sm"
                    },
                    {
                        "Name": "SaoTomeAndPrincipe",
                        "Immutable": true,
                        "Expression": "`st`",
                        "Value": "st"
                    },
                    {
                        "Name": "SaudiArabia",
                        "Immutable": true,
                        "Expression": "`sa`",
                        "Value": "sa"
                    },
                    {
                        "Name": "Senegal",
                        "Immutable": true,
                        "Expression": "`sn`",
                        "Value": "sn"
                    },
                    {
                        "Name": "Serbia",
                        "Immutable": true,
                        "Expression": "`rs`",
                        "Value": "rs"
                    },
                    {
                        "Name": "Seychelles",
                        "Immutable": true,
                        "Expression": "`sc`",
                        "Value": "sc"
                    },
                    {
                        "Name": "SierraLeone",
                        "Immutable": true,
                        "Expression": "`sl`",
                        "Value": "sl"
                    },
                    {
                        "Name": "Singapore",
                        "Immutable": true,
                        "Expression": "`sg`",
                        "Value": "sg"
                    },
                    {
                        "Name": "Slovakia",
                        "Immutable": true,
                        "Expression": "`sk`",
                        "Value": "sk"
                    },
                    {
                        "Name": "Slovenia",
                        "Immutable": true,
                        "Expression": "`si`",
                        "Value": "si"
                    },
                    {
                        "Name": "SolomonIslands",
                        "Immutable": true,
                        "Expression": "`sb`",
                        "Value": "sb"
                    },
                    {
                        "Name": "Somalia",
                        "Immutable": true,
                        "Expression": "`so`",
                        "Value": "so"
                    },
                    {
                        "Name": "South",
                        "Immutable": true,
                        "Expression": "`S`",
                        "Value": "S"
                    },
                    {
                        "Name": "SouthAfrica",
                        "Immutable": true,
                        "Expression": "`za`",
                        "Value": "za"
                    },
                    {
                        "Name": "SouthEast",
                        "Immutable": true,
                        "Expression": "`SE`",
                        "Value": "SE"
                    },
                    {
                        "Name": "SouthGeorgia",
                        "Immutable": true,
                        "Expression": "`gs`",
                        "Value": "gs"
                    },
                    {
                        "Name": "SouthGeorgiaAndTheSouthSandwichIslands",
                        "Immutable": true,
                        "Expression": "`gs`",
                        "Value": "gs"
                    },
                    {
                        "Name": "SouthKorea",
                        "Immutable": true,
                        "Expression": "`kr`",
                        "Value": "kr"
                    },
                    {
                        "Name": "SouthSandwichIslands",
                        "Immutable": true,
                        "Expression": "`gs`",
                        "Value": "gs"
                    },
                    {
                        "Name": "SouthSudan",
                        "Immutable": true,
                        "Expression": "`ss`",
                        "Value": "ss"
                    },
                    {
                        "Name": "SouthWest",
                        "Immutable": true,
                        "Expression": "`SW`",
                        "Value": "SW"
                    },
                    {
                        "Name": "SovietUnion",
                        "Immutable": true,
                        "Expression": "`su`",
                        "Value": "su"
                    },
                    {
                        "Name": "Spain",
                        "Immutable": true,
                        "Expression": "`es`",
                        "Value": "es"
                    },
                    {
                        "Name": "SriLanka",
                        "Immutable": true,
                        "Expression": "`lk`",
                        "Value": "lk"
                    },
                    {
                        "Name": "Sudan",
                        "Immutable": true,
                        "Expression": "`sd`",
                        "Value": "sd"
                    },
                    {
                        "Name": "Suriname",
                        "Immutable": true,
                        "Expression": "`sr`",
                        "Value": "sr"
                    },
                    {
                        "Name": "Svalbard",
                        "Immutable": true,
                        "Expression": "`sj`",
                        "Value": "sj"
                    },
                    {
                        "Name": "SvalbardAndJanMayen",
                        "Immutable": true,
                        "Expression": "`sj`",
                        "Value": "sj"
                    },
                    {
                        "Name": "Swaziland",
                        "Immutable": true,
                        "Expression": "`sz`",
                        "Value": "sz"
                    },
                    {
                        "Name": "Sweden",
                        "Immutable": true,
                        "Expression": "`se`",
                        "Value": "se"
                    },
                    {
                        "Name": "Switzerland",
                        "Immutable": true,
                        "Expression": "`ch`",
                        "Value": "ch"
                    },
                    {
                        "Name": "Syria",
                        "Immutable": true,
                        "Expression": "`sy`",
                        "Value": "sy"
                    },
                    {
                        "Name": "SãoToméAndPríncipe",
                        "Immutable": true,
                        "Expression": "`st`",
                        "Value": "st"
                    },
                    {
                        "Name": "Taiwan",
                        "Immutable": true,
                        "Expression": "`tw`",
                        "Value": "tw"
                    },
                    {
                        "Name": "Tajikistan",
                        "Immutable": true,
                        "Expression": "`tj`",
                        "Value": "tj"
                    },
                    {
                        "Name": "Tanzania",
                        "Immutable": true,
                        "Expression": "`tz`",
                        "Value": "tz"
                    },
                    {
                        "Name": "Thailand",
                        "Immutable": true,
                        "Expression": "`th`",
                        "Value": "th"
                    },
                    {
                        "Name": "TheGrenadines",
                        "Immutable": true,
                        "Expression": "`vc`",
                        "Value": "vc"
                    },
                    {
                        "Name": "TimorLeste",
                        "Immutable": true,
                        "Expression": "`tl`",
                        "Value": "tl"
                    },
                    {
                        "Name": "Togo",
                        "Immutable": true,
                        "Expression": "`tg`",
                        "Value": "tg"
                    },
                    {
                        "Name": "Tokelau",
                        "Immutable": true,
                        "Expression": "`tk`",
                        "Value": "tk"
                    },
                    {
                        "Name": "Tonga",
                        "Immutable": true,
                        "Expression": "`to`",
                        "Value": "to"
                    },
                    {
                        "Name": "TrinidadAndTobago",
                        "Immutable": true,
                        "Expression": "`tt`",
                        "Value": "tt"
                    },
                    {
                        "Name": "Tunisia",
                        "Immutable": true,
                        "Expression": "`tn`",
                        "Value": "tn"
                    },
                    {
                        "Name": "Turkey",
                        "Immutable": true,
                        "Expression": "`tr`",
                        "Value": "tr"
                    },
                    {
                        "Name": "Turkmenistan",
                        "Immutable": true,
                        "Expression": "`tm`",
                        "Value": "tm"
                    },
                    {
                        "Name": "TurksAndCaicosIslands",
                        "Immutable": true,
                        "Expression": "`tc`",
                        "Value": "tc"
                    },
                    {
                        "Name": "Tuvalu",
                        "Immutable": true,
                        "Expression": "`tv`",
                        "Value": "tv"
                    },
                    {
                        "Name": "UK",
                        "Immutable": true,
                        "Expression": "`gb`",
                        "Value": "gb"
                    },
                    {
                        "Name": "Uganda",
                        "Immutable": true,
                        "Expression": "`ug`",
                        "Value": "ug"
                    },
                    {
                        "Name": "Ukraine",
                        "Immutable": true,
                        "Expression": "`ua`",
                        "Value": "ua"
                    },
                    {
                        "Name": "UnitedArabEmirates",
                        "Immutable": true,
                        "Expression": "`ae`",
                        "Value": "ae"
                    },
                    {
                        "Name": "UnitedKingdom",
                        "Immutable": true,
                        "Expression": "`gb`",
                        "Value": "gb"
                    },
                    {
                        "Name": "UnitedStates",
                        "Immutable": true,
                        "Expression": "`us`",
                        "Value": "us"
                    },
                    {
                        "Name": "UnitedStatesMinorOutlyingIslands",
                        "Immutable": true,
                        "Expression": "`um`",
                        "Value": "um"
                    },
                    {
                        "Name": "UnitedStatesVirginIslands",
                        "Immutable": true,
                        "Expression": "`vi`",
                        "Value": "vi"
                    },
                    {
                        "Name": "Uruguay",
                        "Immutable": true,
                        "Expression": "`uy`",
                        "Value": "uy"
                    },
                    {
                        "Name": "Uzbekistan",
                        "Immutable": true,
                        "Expression": "`uz`",
                        "Value": "uz"
                    },
                    {
                        "Name": "Vanuatu",
                        "Immutable": true,
                        "Expression": "`vu`",
                        "Value": "vu"
                    },
                    {
                        "Name": "VaticanCity",
                        "Immutable": true,
                        "Expression": "`va`",
                        "Value": "va"
                    },
                    {
                        "Name": "Venezuela",
                        "Immutable": true,
                        "Expression": "`ve`",
                        "Value": "ve"
                    },
                    {
                        "Name": "Vietnam",
                        "Immutable": true,
                        "Expression": "`vn`",
                        "Value": "vn"
                    },
                    {
                        "Name": "WallisAndFutuna",
                        "Immutable": true,
                        "Expression": "`wf`",
                        "Value": "wf"
                    },
                    {
                        "Name": "West",
                        "Immutable": true,
                        "Expression": "`W`",
                        "Value": "W"
                    },
                    {
                        "Name": "WesternSahara",
                        "Immutable": true,
                        "Expression": "`eh`",
                        "Value": "eh"
                    },
                    {
                        "Name": "Yard",
                        "Immutable": true,
                        "Expression": "0.9144"
                    },
                    {
                        "Name": "Yemen",
                        "Immutable": true,
                        "Expression": "`ye`",
                        "Value": "ye"
                    },
                    {
                        "Name": "Zambia",
                        "Immutable": true,
                        "Expression": "`zm`",
                        "Value": "zm"
                    },
                    {
                        "Name": "Zimbabwe",
                        "Immutable": true,
                        "Expression": "`zw`",
                        "Value": "zw"
                    }
                ],
                "Variables": [
                    {
                        "Name": "Countries",
                        "Comment": "A data structure that exposes standard information about countries of the world, keyed on their ISO3166-1 Alpha2 abbreviation (e.g.: \"us\", \"gb\", \"de\", etc.)"
                    },
                    {
                        "Name": "DistanceDisplayUnit",
                        "Expression": "MeasurementSystem(Imperial)"
                    },
                    {
                        "Name": "SpeedDisplayUnit",
                        "Expression": "MeasurementSystem(Imperial)"
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestCountriesGet",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCountriesGet(t *testing.T)",
                        "Source": "ewoJYXNzZXJ0LkVxdWFsKHQsIGBVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2FgLCBDb3VudHJpZXMuR2V0KFVuaXRlZFN0YXRlcykuTmFtZSkKCWFzc2VydC5FcXVhbCh0LCBgVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhYCwgQ291bnRyaWVzLkdldChgdXNgKS5OYW1lKQoJYXNzZXJ0LkVxdWFsKHQsIGBVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2FgLCBDb3VudHJpZXMuR2V0KGBVU2ApLk5hbWUpCglhc3NlcnQuRXF1YWwodCwgYFVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYWAsIENvdW50cmllcy5HZXQoYHVTYCkuTmFtZSkKCWFzc2VydC5FcXVhbCh0LCBgVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhYCwgQ291bnRyaWVzLkdldChgVXNgKS5OYW1lKQoJYXNzZXJ0LkZhbHNlKHQsIENvdW50cmllcy5HZXQoYHp6YCkuSXNWYWxpZCgpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestLocationSpeedFrom",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestLocationSpeedFrom(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuWmVybyhOdWxsSXNsYW5kKCkuU3BlZWRGcm9tKE51bGxJc2xhbmQoKSkpCgl2YXIgZnJvbSA9ICZMb2NhdGlvbntMYXRpdHVkZTogMCwgTG9uZ2l0dWRlOiAxLCBUaW1lc3RhbXA6IHRpbWUuRGF0ZSgyMDEwLCAxLCAxLCAwLCAwLCAwLCAwLCB0aW1lLlVUQyl9Cgl2YXIgdG8gPSAmTG9jYXRpb257TGF0aXR1ZGU6IDAsIExvbmdpdHVkZTogMiwgVGltZXN0YW1wOiB0aW1lLkRhdGUoMjAxMCwgMSwgMSwgMSwgMCwgMCwgMCwgdGltZS5VVEMpfQoJYXNzZXJ0LkVxdWFsKFNwZWVkKDExMS4xOTQ4Mzc2ODg2ODg1NypLUEgpLCB0by5TcGVlZEZyb20oZnJvbSkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestParseDistance",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestParseDistance(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuWmVybyhNdXN0UGFyc2VEaXN0YW5jZShgYCkpCglhc3NlcnQuWmVybyhNdXN0UGFyc2VEaXN0YW5jZShgMG1gKSkKCWFzc2VydC5aZXJvKE11c3RQYXJzZURpc3RhbmNlKGAwIG1ldGVyYCkpCglhc3NlcnQuWmVybyhNdXN0UGFyc2VEaXN0YW5jZShgMCBtZXRlcnNgKSkKCWFzc2VydC5aZXJvKE11c3RQYXJzZURpc3RhbmNlKGAwbWV0ZXJgKSkKCWFzc2VydC5aZXJvKE11c3RQYXJzZURpc3RhbmNlKGAwbWV0ZXJzYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMSwgTXVzdFBhcnNlRGlzdGFuY2UoYDFtYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMSwgTXVzdFBhcnNlRGlzdGFuY2UoYDEgbWV0ZXJgKSkKCWFzc2VydC5FcXVhbFZhbHVlcygxLCBNdXN0UGFyc2VEaXN0YW5jZShgMSBtZXRlcnNgKSkKCWFzc2VydC5FcXVhbFZhbHVlcygxLCBNdXN0UGFyc2VEaXN0YW5jZShgMW1ldGVyYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMSwgTXVzdFBhcnNlRGlzdGFuY2UoYDFtZXRlcnNgKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhEaXN0YW5jZSgzLjE0MTU5NzYyNSkqS2lsb21ldGVyLCBNdXN0UGFyc2VEaXN0YW5jZShgMy4xNDE1OTc2MjVrbWApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKERpc3RhbmNlKDMuMTQxNTk3NjI1KSpLaWxvbWV0ZXIsIE11c3RQYXJzZURpc3RhbmNlKGAzLjE0MTU5NzYyNSBrbWApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKERpc3RhbmNlKDMuMTQxNTk3NjI1KSpLaWxvbWV0ZXIsIE11c3RQYXJzZURpc3RhbmNlKGAzLjE0MTU5NzYyNSBrbS5gKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhEaXN0YW5jZSgzLjE0MTU5NzYyNSkqS2lsb21ldGVyLCBNdXN0UGFyc2VEaXN0YW5jZShgMy4xNDE1OTc2MjUga2lsb21ldGVyYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoRGlzdGFuY2UoMy4xNDE1OTc2MjUpKktpbG9tZXRlciwgTXVzdFBhcnNlRGlzdGFuY2UoYDMuMTQxNTk3NjI1IGtpbG9tZXRlcnNgKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhEaXN0YW5jZSgzLjE0MTU5NzYyNSkqS2lsb21ldGVyLCBNdXN0UGFyc2VEaXN0YW5jZShgMy4xNDE1OTc2MjVraWxvbWV0ZXJgKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhEaXN0YW5jZSgzLjE0MTU5NzYyNSkqS2lsb21ldGVyLCBNdXN0UGFyc2VEaXN0YW5jZShgMy4xNDE1OTc2MjVraWxvbWV0ZXJzYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoRGlzdGFuY2UoMjYuMikqTWlsZSwgTXVzdFBhcnNlRGlzdGFuY2UoYDI2LjJtaWApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKERpc3RhbmNlKDI2LjIpKk1pbGUsIE11c3RQYXJzZURpc3RhbmNlKGAyNi4yIG1pbGVzYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoRGlzdGFuY2UoNTI4MCkqRm9vdCwgTXVzdFBhcnNlRGlzdGFuY2UoYDUyODBmdGApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKERpc3RhbmNlKDUyODApKkZvb3QsIE11c3RQYXJzZURpc3RhbmNlKGA1MjgwIGZ0YCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoRGlzdGFuY2UoNTI4MCkqRm9vdCwgTXVzdFBhcnNlRGlzdGFuY2UoYDUyODAgZnQuYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoRGlzdGFuY2UoNTI4MCkqRm9vdCwgTXVzdFBhcnNlRGlzdGFuY2UoYDUyODAgZmVldGApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKERpc3RhbmNlKDUyODApKkZvb3QsIE11c3RQYXJzZURpc3RhbmNlKGA1MjgwZmVldGApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKERpc3RhbmNlKDEwMCkqWWFyZCwgTXVzdFBhcnNlRGlzdGFuY2UoYDEwMHlkLmApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKERpc3RhbmNlKDEwMCkqWWFyZCwgTXVzdFBhcnNlRGlzdGFuY2UoYDEwMCB5ZC5gKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhEaXN0YW5jZSgxMDApKllhcmQsIE11c3RQYXJzZURpc3RhbmNlKGAxMDAgeWRgKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhEaXN0YW5jZSgxMDApKllhcmQsIE11c3RQYXJzZURpc3RhbmNlKGAxMDB5ZGApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKERpc3RhbmNlKDEwMCkqWWFyZCwgTXVzdFBhcnNlRGlzdGFuY2UoYDEwMCB5YXJkc2ApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKERpc3RhbmNlKDMwMCkqTmF1dGljYWxNaWxlLCBNdXN0UGFyc2VEaXN0YW5jZShgMzAwbm1gKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhEaXN0YW5jZSgzMDApKk5hdXRpY2FsTWlsZSwgTXVzdFBhcnNlRGlzdGFuY2UoYDMwMCBubS5gKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhEaXN0YW5jZSgzMDApKk5hdXRpY2FsTWlsZSwgTXVzdFBhcnNlRGlzdGFuY2UoYDMwMCBubWApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKERpc3RhbmNlKDMwMCkqTmF1dGljYWxNaWxlLCBNdXN0UGFyc2VEaXN0YW5jZShgMzAwIG5hdXRpY2FsIG1pbGVzYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoRGlzdGFuY2UoMzAwKSpOYXV0aWNhbE1pbGUsIE11c3RQYXJzZURpc3RhbmNlKGAzMDAgbmF1dGljYWwgbWlsZWApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSpeedFuncs",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSpeedFuncs(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuVHJ1ZShTcGVlZChNUEgpLkZhc3RlclRoYW4oS1BIKSkKCWFzc2VydC5UcnVlKFNwZWVkKEtQSCkuU2xvd2VyVGhhbihNUEgpKQoJYXNzZXJ0LlRydWUoU3BlZWQoMzYwMCAqIE1QSCkuRXF1YWwoNTI4MCAqIEZlZXRQZXJTZWNvbmQpKQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "CardinalDirection": {
                        "Name": "CardinalDirection",
                        "MetaType": "string",
                        "Methods": [
                            {
                                "Name": "GetDirectionFromBearing",
                                "Arguments": [
                                    {
                                        "Name": "bearing",
                                        "Type": "float64"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "CardinalDirection"
                                    }
                                ],
                                "Signature": "GetDirectionFromBearing(bearing float64) CardinalDirection",
                                "Source": "ewoJc3dpdGNoIHsKCWNhc2UgKGJlYXJpbmcgPj0gMCAmJiBiZWFyaW5nIDw9IDIyLjUpIHx8IChiZWFyaW5nID4gMzM3LjUgJiYgYmVhcmluZyA8PSAzNjApOgoJCXJldHVybiBOb3J0aAoJY2FzZSBiZWFyaW5nID4gMjIuNSAmJiBiZWFyaW5nIDw9IDY3LjU6CgkJcmV0dXJuIE5vcnRoRWFzdAoJY2FzZSBiZWFyaW5nID4gNjcuNSAmJiBiZWFyaW5nIDw9IDExMi41OgoJCXJldHVybiBFYXN0CgljYXNlIGJlYXJpbmcgPiAxMTIuNSAmJiBiZWFyaW5nIDw9IDE1Ny41OgoJCXJldHVybiBTb3V0aEVhc3QKCWNhc2UgYmVhcmluZyA+IDE1Ny41ICYmIGJlYXJpbmcgPD0gMjAyLjU6CgkJcmV0dXJuIFNvdXRoCgljYXNlIGJlYXJpbmcgPiAyMDIuNSAmJiBiZWFyaW5nIDw9IDI0Ny41OgoJCXJldHVybiBTb3V0aFdlc3QKCWNhc2UgYmVhcmluZyA+IDI0Ny41ICYmIGJlYXJpbmcgPD0gMjkyLjU6CgkJcmV0dXJuIFdlc3QKCWNhc2UgYmVhcmluZyA+IDI5Mi41ICYmIGJlYXJpbmcgPD0gMzM3LjU6CgkJcmV0dXJuIE5vcnRoV2VzdAoJfQoJcmV0dXJuIGBgCn0=",
                                "IsPackageLevel": true
                            }
                        ],
                        "Source": "dHlwZSBDYXJkaW5hbERpcmVjdGlvbiBzdHJpbmc="
                    },
                    "Country": {
                        "Name": "Country",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "IsValid",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsValid() bool",
                                "IsPackageLevel": false
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "Name",
                                "Type": "string"
                            },
                            {
                                "Name": "Code",
                                "Type": "string"
                            },
                            {
                                "Name": "CCTLD",
                                "Type": "string"
                            },
                            {
                                "Name": "Latitude",
                                "Type": "float64"
                            },
                            {
                                "Name": "Longitude",
                                "Type": "float64"
                            }
                        ],
                        "Source": "dHlwZSBDb3VudHJ5IHN0cnVjdCB7CglOYW1lICAgICAgc3RyaW5nCglDb2RlICAgICAgc3RyaW5nCglDQ1RMRCAgICAgc3RyaW5nCglMYXRpdHVkZSAgZmxvYXQ2NAoJTG9uZ2l0dWRlIGZsb2F0NjQKfQ=="
                    },
                    "CountryData": {
                        "Name": "CountryData",
                        "Methods": [
                            {
                                "Name": "Get",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "nameOrCode",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Country"
                                    }
                                ],
                                "Signature": "Get(nameOrCode any) Country",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBDb3VudHJ5RGF0YSBtYXBbc3RyaW5nXUNvdW50cnk="
                    },
                    "Distance": {
                        "Name": "Distance",
                        "MetaType": "float64",
                        "Methods": [
                            {
                                "Name": "Beyond",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "Distance"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "Beyond(other Distance) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Equal",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "Distance"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "Equal(other Distance) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "ImperialString",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "ImperialString() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MarshalJSON",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "MarshalJSON() ([]byte, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MetricString",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "MetricString() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MustParseDistance",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Distance"
                                    }
                                ],
                                "Signature": "MustParseDistance(in any) Distance",
                                "Source": "ewoJaWYgZGlzdGFuY2UsIGVyciA6PSBQYXJzZURpc3RhbmNlKGluKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIGRpc3RhbmNlCgl9IGVsc2UgewoJCXBhbmljKGBpbnZhbGlkIGRpc3RhbmNlOiBgICsgZXJyLkVycm9yKCkpCgl9Cn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "ParseDistance",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Distance"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "ParseDistance(in any) (Distance, error)",
                                "Source": "ewoJaWYgdHlwZXV0aWwuSXNaZXJvKGluKSB7CgkJcmV0dXJuIDAsIG5pbAoJfQoJaWYgbWF0Y2ggOj0gcnh1dGlsLk1hdGNoKHJ4RGlzdGFuY2VFeHRyYWN0LCBzdHJpbmdzLlRyaW1TcGFjZShmbXQuU3ByaW50ZigiJXYiLCBpbikpKTsgbWF0Y2ggIT0gbmlsIHsKCQlpZiB2IDo9IHR5cGV1dGlsLlYobWF0Y2guR3JvdXAoYG51bWJlcmApKS5GbG9hdCgpOyB2ID49IDAgewoJCQl2YXIgdW5pdCA9IG1hdGNoLkdyb3VwKGB1bml0YCkKCQkJdW5pdCA9IHN0cmluZ3MuVHJpbVNwYWNlKHVuaXQpCgkJCXVuaXQgPSBzdHJpbmdzLlRvTG93ZXIodW5pdCkKCQkJdW5pdCA9IHN0cmluZ3MuVHJpbVN1ZmZpeCh1bml0LCBgc2ApCgkJCXN3aXRjaCB1bml0IHsKCQkJY2FzZSBgbWV0ZXJgLCBgbWA6CgkJCQlyZXR1cm4gRGlzdGFuY2UodiksIG5pbAoJCQljYXNlIGBraWxvbWV0ZXJgLCBga21gOgoJCQkJcmV0dXJuIERpc3RhbmNlKHYpICogS2lsb21ldGVyLCBuaWwKCQkJY2FzZSBgbWlsZWAsIGBtaWA6CgkJCQlyZXR1cm4gRGlzdGFuY2UodikgKiBNaWxlLCBuaWwKCQkJY2FzZSBgZmVldGAsIGBmb290YCwgYGZ0YDoKCQkJCXJldHVybiBEaXN0YW5jZSh2KSAqIEZvb3QsIG5pbAoJCQljYXNlIGB5YXJkYCwgYHlkYDoKCQkJCXJldHVybiBEaXN0YW5jZSh2KSAqIFlhcmQsIG5pbAoJCQljYXNlIGBubWAsIGBuYXV0aWNhbCBtaWxlYDoKCQkJCXJldHVybiBEaXN0YW5jZSh2KSAqIE5hdXRpY2FsTWlsZSwgbmlsCgkJCWRlZmF1bHQ6CgkJCQlyZXR1cm4gMCwgZm10LkVycm9yZigiVW5yZWNvZ25pemVkIGRpc3RhbmNlIHVuaXQgJXEiLCB1bml0KQoJCQl9CgkJfSBlbHNlIHsKCQkJcmV0dXJuIDAsIGZtdC5FcnJvcmYoIlVuYWJsZSB0byBleHRyYWN0IG51bWJlciBmcm9tIGRpc3RhbmNlIHZhbHVlIikKCQl9Cgl9IGVsc2UgaWYgdiA6PSB0eXBldXRpbC5WKGluKS5GbG9hdCgpOyB2ID49IDAgewoJCXJldHVybiBEaXN0YW5jZSh2KSwgbmlsCgl9IGVsc2UgewoJCXJldHVybiAwLCBmbXQuRXJyb3JmKCJ1bmFibGUgdG8gcGFyc2UgZGlzdGFuY2UgdmFsdWUiKQoJfQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "String",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "UnmarshalJSON",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "data",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "UnmarshalJSON(data []byte) error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Within",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "Distance"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "Within(other Distance) bool",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBEaXN0YW5jZSBmbG9hdDY0"
                    },
                    "Locatable": {
                        "Name": "Locatable",
                        "Source": "dHlwZSBMb2NhdGFibGUgaW50ZXJmYWNlIHsKCUdldENvb3JkaW5hdGVzKCkgKGZsb2F0NjQsIGZsb2F0NjQsIHRpbWUuVGltZSkKfQ=="
                    },
                    "Location": {
                        "Name": "Location",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "BearingTo",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "Locatable"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "float64"
                                    }
                                ],
                                "Signature": "BearingTo(other Locatable) float64",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "CardinalDirection",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "CardinalDirection"
                                    }
                                ],
                                "Signature": "CardinalDirection() CardinalDirection",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "GetCoordinates",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "float64"
                                    },
                                    {
                                        "Type": "float64"
                                    },
                                    {
                                        "Type": "time.Time"
                                    }
                                ],
                                "Signature": "GetCoordinates() (float64, float64, time.Time)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "HasCoordinates",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "HasCoordinates() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "HaversineDistance",
                                "Comment": "Return the distance (in meters) between this point and another.  This calulates the\ngreat-circle distance (shortest distance two points on the surface of a sphere) between\nthis Location and another.  Since this (incorrectly) assumes the Earth to be a true\nsphere, this is only reasonably accurate for short-ish distances (is only accurate to\nwithin ~0.5%).",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "Locatable"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Distance"
                                    }
                                ],
                                "Signature": "HaversineDistance(other Locatable) Distance",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MarshalJSON",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "MarshalJSON() ([]byte, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NewLocation",
                                "Arguments": [
                                    {
                                        "Name": "latitude",
                                        "Type": "float64"
                                    },
                                    {
                                        "Name": "longitude",
                                        "Type": "float64"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Location"
                                    }
                                ],
                                "Signature": "NewLocation(latitude float64, longitude float64) *Location",
                                "Source": "ewoJcmV0dXJuICZMb2NhdGlvbntMYXRpdHVkZTogbGF0aXR1ZGUsIExvbmdpdHVkZTogbG9uZ2l0dWRlLCBQcm9wZXJ0aWVzOiBtYWtlKG1hcFtzdHJpbmddYW55KX0KfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "SpeedFrom",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "Locatable"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Speed"
                                    }
                                ],
                                "Signature": "SpeedFrom(other Locatable) Speed",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "String",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NullIsland",
                                "Returns": [
                                    {
                                        "Type": "*Location"
                                    }
                                ],
                                "Signature": "NullIsland() *Location",
                                "Source": "ewoJcmV0dXJuICZMb2NhdGlvbntMYXRpdHVkZTogMCwgTG9uZ2l0dWRlOiAwLCBCZWFyaW5nOiAwLCBBbHRpdHVkZTogMCwgQWNjdXJhY3k6IDEsIFNvdXJjZTogYG51bGxgLCBUaW1lc3RhbXA6IHRpbWUuTm93KCl9Cn0=",
                                "IsPackageLevel": true
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "Latitude",
                                "Type": "float64"
                            },
                            {
                                "Name": "Longitude",
                                "Type": "float64"
                            },
                            {
                                "Name": "Bearing",
                                "Type": "float64"
                            },
                            {
                                "Name": "Timestamp",
                                "Type": "time.Time"
                            },
                            {
                                "Name": "Altitude",
                                "Type": "Distance"
                            },
                            {
                                "Name": "Speed",
                                "Type": "Speed"
                            },
                            {
                                "Name": "Accuracy",
                                "Type": "float64"
                            },
                            {
                                "Name": "Error",
                                "Type": "*LocationError"
                            },
                            {
                                "Name": "Direction",
                                "Type": "CardinalDirection"
                            },
                            {
                                "Name": "Source",
                                "Type": "string"
                            },
                            {
                                "Name": "Properties",
                                "Type": "map[string]any"
                            }
                        ],
                        "Comment": "Specifies a three-dimensional location within a coordinate reference system.",
                        "Source": "dHlwZSBMb2NhdGlvbiBzdHJ1Y3QgewoJTGF0aXR1ZGUgICAgZmxvYXQ2NCAgICAgICAgICAgYGpzb246ImxhdGl0dWRlLG9taXRlbXB0eSJgCglMb25naXR1ZGUgICBmbG9hdDY0ICAgICAgICAgICBganNvbjoibG9uZ2l0dWRlLG9taXRlbXB0eSJgCglCZWFyaW5nICAgICBmbG9hdDY0ICAgICAgICAgICBganNvbjoiYmVhcmluZyxvbWl0ZW1wdHkiYAoJVGltZXN0YW1wICAgdGltZS5UaW1lICAgICAgICAgYGpzb246InRpbWVzdGFtcCxvbWl0ZW1wdHkiYAoJQWx0aXR1ZGUgICAgRGlzdGFuY2UgICAgICAgICAgYGpzb246ImFsdGl0dWRlLG9taXRlbXB0eSJgCglTcGVlZCAgICAgICBTcGVlZCAgICAgICAgICAgICBganNvbjoic3BlZWQsb21pdGVtcHR5ImAKCUFjY3VyYWN5ICAgIGZsb2F0NjQgICAgICAgICAgIGBqc29uOiJhY2N1cmFjeSxvbWl0ZW1wdHkiYAoJRXJyb3IgICAgICAgKkxvY2F0aW9uRXJyb3IgICAgYGpzb246ImVycm9yLG9taXRlbXB0eSJgCglEaXJlY3Rpb24gICBDYXJkaW5hbERpcmVjdGlvbiBganNvbjoiZGlyZWN0aW9uLG9taXRlbXB0eSJgCglTb3VyY2UgICAgICBzdHJpbmcgICAgICAgICAgICBganNvbjoic291cmNlLG9taXRlbXB0eSJgCglQcm9wZXJ0aWVzICBtYXAgLy8gU3BlY2lmaWVzIGEgdGhyZWUtZGltZW5zaW9uYWwgbG9jYXRpb24gd2l0aGluIGEgY29vcmRpbmF0ZSByZWZlcmVuY2Ugc3lzdGVtLgoJW3N0cmluZ11hbnkgYGpzb246InByb3BlcnRpZXMsb21pdGVtcHR5ImAKfQ=="
                    },
                    "LocationError": {
                        "Name": "LocationError",
                        "MetaType": "struct",
                        "Fields": [
                            {
                                "Name": "Latitude",
                                "Type": "Distance"
                            },
                            {
                                "Name": "Longitude",
                                "Type": "Distance"
                            },
                            {
                                "Name": "Altitude",
                                "Type": "Distance"
                            },
                            {
                                "Name": "Bearing",
                                "Type": "float64"
                            },
                            {
                                "Name": "Speed",
                                "Type": "Speed"
                            },
                            {
                                "Name": "Timestamp",
                                "Type": "float64"
                            }
                        ],
                        "Comment": "Describes the error margin (+/-) for each of the named values.",
                        "Source": "dHlwZSBMb2NhdGlvbkVycm9yIHN0cnVjdCB7CglMYXRpdHVkZSAgRGlzdGFuY2UgYGpzb246ImxhdGl0dWRlImAKCUxvbmdpdHVkZSBEaXN0YW5jZSBganNvbjoibG9uZ2l0dWRlImAKCUFsdGl0dWRlICBEaXN0YW5jZSBganNvbjoiYWx0aXR1ZGUiYAoJQmVhcmluZyAgIGZsb2F0NjQgIGBqc29uOiJiZWFyaW5nImAKCVNwZWVkICAgICBTcGVlZCAgICBganNvbjoic3BlZWQiYAoJVGltZXN0YW1wIGZsb2F0NjQgIGBqc29uOiJ0aW1lc3RhbXAiYAp9Ly8gRGVzY3JpYmVzIHRoZSBlcnJvciBtYXJnaW4gKCsvLSkgZm9yIGVhY2ggb2YgdGhlIG5hbWVkIHZhbHVlcy4K"
                    },
                    "MeasurementSystem": {
                        "Name": "MeasurementSystem",
                        "MetaType": "string",
                        "Source": "dHlwZSBNZWFzdXJlbWVudFN5c3RlbSBzdHJpbmc="
                    },
                    "Speed": {
                        "Name": "Speed",
                        "MetaType": "float64",
                        "Methods": [
                            {
                                "Name": "Equal",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "Speed"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "Equal(other Speed) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "FasterThan",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "Speed"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "FasterThan(other Speed) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MarshalJSON",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "MarshalJSON() ([]byte, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SlowerThan",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "Speed"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "SlowerThan(other Speed) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "String",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "UnmarshalJSON",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "data",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "UnmarshalJSON(data []byte) error",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBTcGVlZCBmbG9hdDY0"
                    }
                }
            },
            {
                "Name": "httputil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/httputil",
                "ImportPath": "httputil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Utilities for extracting and formatting data encountered in HTTP requests\n",
                "MainFunction": false,
                "CommentWordCount": 1266,
                "LineCount": 2063,
                "SourceLineCount": 1469,
                "FunctionCount": 79,
                "TypeCount": 14,
                "ConstantCount": 13,
                "VariableCount": 7,
                "Statistics": {
                    "Mean": 0.6609,
                    "StdDev": 0.4482,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 1,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "client.go",
                        "Imports": [
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            },
                            {
                                "PackageName": "context",
                                "Alias": "context"
                            },
                            {
                                "PackageName": "crypto/tls",
                                "Alias": "tls"
                            },
                            {
                                "PackageName": "crypto/x509",
                                "Alias": "x509"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "net/http/httputil",
                                "Alias": "gohttputil"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                                "Alias": "fileutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/log",
                                "Alias": "log"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 16513,
                        "LineCount": 585,
                        "SourceLineCount": 420,
                        "FunctionCount": 35,
                        "TypeCount": 2,
                        "ConstantCount": 0,
                        "VariableCount": 3
                    },
                    {
                        "Name": "client_test.go",
                        "Imports": [
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            },
                            {
                                "PackageName": "errors",
                                "Alias": "errors"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "net/http/httptest",
                                "Alias": "httptest"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                                "Alias": "fileutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/assert",
                                "Alias": "assert"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 5632,
                        "LineCount": 226,
                        "SourceLineCount": 173,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "codecs.go",
                        "Imports": [
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            },
                            {
                                "PackageName": "encoding/json",
                                "Alias": "json"
                            },
                            {
                                "PackageName": "encoding/xml",
                                "Alias": "xml"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "mime/multipart",
                                "Alias": "multipart"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                                "Alias": "maputil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 3900,
                        "LineCount": 144,
                        "SourceLineCount": 114,
                        "FunctionCount": 4,
                        "TypeCount": 7,
                        "ConstantCount": 0,
                        "VariableCount": 1
                    },
                    {
                        "Name": "context.go",
                        "Imports": [
                            {
                                "PackageName": "context",
                                "Alias": "context"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 609,
                        "LineCount": 25,
                        "SourceLineCount": 18,
                        "FunctionCount": 2,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "context_test.go",
                        "Imports": [
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 624,
                        "LineCount": 24,
                        "SourceLineCount": 17,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "decoders.go",
                        "Imports": [
                            {
                                "PackageName": "compress/bzip2",
                                "Alias": "bzip2"
                            },
                            {
                                "PackageName": "compress/flate",
                                "Alias": "flate"
                            },
                            {
                                "PackageName": "compress/gzip",
                                "Alias": "gzip"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/dsnet/compress/brotli",
                                "Alias": "brotli"
                            }
                        ],
                        "Size": 1181,
                        "LineCount": 58,
                        "SourceLineCount": 41,
                        "FunctionCount": 1,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "decoders_test.go",
                        "Size": 1999,
                        "LineCount": 71,
                        "SourceLineCount": 1,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "logger.go",
                        "Imports": [
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/op/go-logging",
                                "Alias": "go-logging"
                            }
                        ],
                        "Size": 965,
                        "LineCount": 52,
                        "SourceLineCount": 41,
                        "FunctionCount": 2,
                        "TypeCount": 2,
                        "ConstantCount": 6,
                        "VariableCount": 1
                    },
                    {
                        "Name": "netrc.go",
                        "Imports": [
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                                "Alias": "fileutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/jdxcode/netrc",
                                "Alias": "netrc"
                            }
                        ],
                        "Size": 982,
                        "LineCount": 35,
                        "SourceLineCount": 25,
                        "FunctionCount": 1,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 1
                    },
                    {
                        "Name": "netrc_test.go",
                        "Imports": [
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                                "Alias": "fileutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 844,
                        "LineCount": 43,
                        "SourceLineCount": 30,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "querystrings.go",
                        "Imports": [
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/timeutil",
                                "Alias": "timeutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 3942,
                        "LineCount": 164,
                        "SourceLineCount": 118,
                        "FunctionCount": 13,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "querystrings_test.go",
                        "Imports": [
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 1461,
                        "LineCount": 72,
                        "SourceLineCount": 51,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "request_logger_middleware.go",
                        "Imports": [
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/urfave/negroni",
                                "Alias": "negroni"
                            }
                        ],
                        "Size": 690,
                        "LineCount": 33,
                        "SourceLineCount": 23,
                        "FunctionCount": 2,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "responses.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/json",
                                "Alias": "json"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "mime",
                                "Alias": "mime"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/log",
                                "Alias": "log"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                                "Alias": "maputil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            }
                        ],
                        "Size": 5014,
                        "LineCount": 176,
                        "SourceLineCount": 126,
                        "FunctionCount": 12,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 1
                    },
                    {
                        "Name": "responses_test.go",
                        "Imports": [
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 1713,
                        "LineCount": 62,
                        "SourceLineCount": 54,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "types.go",
                        "Imports": [
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            }
                        ],
                        "Size": 373,
                        "LineCount": 24,
                        "SourceLineCount": 18,
                        "FunctionCount": 1,
                        "TypeCount": 1,
                        "ConstantCount": 7,
                        "VariableCount": 0
                    },
                    {
                        "Name": "util.go",
                        "Imports": [
                            {
                                "PackageName": "crypto/tls",
                                "Alias": "tls"
                            },
                            {
                                "PackageName": "crypto/x509",
                                "Alias": "x509"
                            },
                            {
                                "PackageName": "encoding/base64",
                                "Alias": "base64"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "mime",
                                "Alias": "mime"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "path/filepath",
                                "Alias": "filepath"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                                "Alias": "fileutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 4493,
                        "LineCount": 158,
                        "SourceLineCount": 123,
                        "FunctionCount": 6,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "util_test.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "net/http/httptest",
                                "Alias": "httptest"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 3043,
                        "LineCount": 111,
                        "SourceLineCount": 76,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Constants": [
                    {
                        "Name": "Debug",
                        "Type": "LogLevel",
                        "Immutable": true,
                        "Expression": "iota"
                    },
                    {
                        "Name": "Delete",
                        "Immutable": true,
                        "Expression": "`DELETE`",
                        "Value": "DELETE"
                    },
                    {
                        "Name": "Error",
                        "Immutable": true
                    },
                    {
                        "Name": "Fatal",
                        "Immutable": true
                    },
                    {
                        "Name": "Get",
                        "Type": "Method",
                        "Immutable": true,
                        "Expression": "`GET`",
                        "Value": "GET"
                    },
                    {
                        "Name": "Head",
                        "Immutable": true,
                        "Expression": "`HEAD`",
                        "Value": "HEAD"
                    },
                    {
                        "Name": "Info",
                        "Immutable": true
                    },
                    {
                        "Name": "Notice",
                        "Immutable": true
                    },
                    {
                        "Name": "Options",
                        "Immutable": true,
                        "Expression": "`OPTIONS`",
                        "Value": "OPTIONS"
                    },
                    {
                        "Name": "Patch",
                        "Immutable": true,
                        "Expression": "`PATCH`",
                        "Value": "PATCH"
                    },
                    {
                        "Name": "Post",
                        "Immutable": true,
                        "Expression": "`POST`",
                        "Value": "POST"
                    },
                    {
                        "Name": "Put",
                        "Immutable": true,
                        "Expression": "`PUT`",
                        "Value": "PUT"
                    },
                    {
                        "Name": "Warning",
                        "Immutable": true
                    }
                ],
                "Variables": [
                    {
                        "Name": "DebugOutputBoxWidth",
                        "Expression": "60"
                    },
                    {
                        "Name": "DefaultClient",
                        "Expression": "MustClient(``)"
                    },
                    {
                        "Name": "DefaultMultipartFormFileField",
                        "Expression": "`filename`",
                        "Value": "filename"
                    },
                    {
                        "Name": "FormUnmarshalStructTag",
                        "Expression": "`json`",
                        "Value": "json"
                    },
                    {
                        "Name": "Logger",
                        "Expression": "logging.MustGetLogger(`httputil`)"
                    },
                    {
                        "Name": "NetrcFile",
                        "Expression": "`~/.netrc`",
                        "Value": "~/.netrc"
                    },
                    {
                        "Name": "WaitForPollInterval",
                        "Expression": "time.Second"
                    }
                ],
                "Functions": [
                    {
                        "Name": "AddQ",
                        "Comment": "Appends a query string from then given url.URL",
                        "Arguments": [
                            {
                                "Name": "u",
                                "Type": "*url.URL"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            },
                            {
                                "Name": "values",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "AddQ(u *url.URL, key string, values ...any)",
                        "Source": "ewoJdmFyIHFzID0gdS5RdWVyeSgpCglmb3IgXywgdmFsdWUgOj0gcmFuZ2UgdmFsdWVzIHsKCQlxcy5BZGQoa2V5LCBzdHJpbmd1dGlsLk11c3RTdHJpbmcodmFsdWUpKQoJfQoJdS5SYXdRdWVyeSA9IHFzLkVuY29kZSgpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "AddQString",
                        "Comment": "A version of AddQ that accepts a URL string and makes a best-effort to modify it.\nWill return the modified URL or the original URL if an error occurred.",
                        "Arguments": [
                            {
                                "Name": "u",
                                "Type": "string"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            },
                            {
                                "Name": "value",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "AddQString(u string, key string, value any) string",
                        "Source": "ewoJaWYgdXIsIGVyciA6PSB1cmwuUGFyc2UodSk7IGVyciA9PSBuaWwgewoJCUFkZFEodXIsIGtleSwgdmFsdWUpCgkJcmV0dXJuIHVyLlN0cmluZygpCgl9CglyZXR1cm4gdQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DecodeResponse",
                        "Comment": "Takes an http.Response and returns an io.Reader that will return the contents\nof the Response Body decoded according to the values (if any) of the Content-Encoding\nresponse header.",
                        "Arguments": [
                            {
                                "Name": "response",
                                "Type": "*http.Response"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "io.Reader"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "DecodeResponse(response *http.Response) (io.Reader, error)",
                        "Source": "ewoJdmFyIG91dHB1dCBpby5SZWFkZXIgPSByZXNwb25zZS5Cb2R5Cgl2YXIgY29udGVudEVuY29kaW5ncyA9IHN0cmluZ3MuU3BsaXQocmVzcG9uc2UuSGVhZGVyLkdldChgQ29udGVudC1FbmNvZGluZ2ApLCBgLGApCglmb3IgXywgZW5jIDo9IHJhbmdlIGNvbnRlbnRFbmNvZGluZ3MgewoJCWVuYyA9IHN0cmluZ3MuVHJpbVNwYWNlKGVuYykKCQllbmMgPSBzdHJpbmdzLlRyaW1QcmVmaXgoZW5jLCBgeC1gKQoJCWlmIGMsIGVyciA6PSBkZWNvZGUob3V0cHV0LCBlbmMpOyBlcnIgPT0gbmlsIHsKCQkJb3V0cHV0ID0gYwoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGVycgoJCX0KCX0KCXJldHVybiBvdXRwdXQsIG5pbAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DelQ",
                        "Comment": "Deletes a query string from then given url.URL",
                        "Arguments": [
                            {
                                "Name": "u",
                                "Type": "*url.URL"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            }
                        ],
                        "Signature": "DelQ(u *url.URL, key string)",
                        "Source": "ewoJdmFyIHFzID0gdS5RdWVyeSgpCglxcy5EZWwoa2V5KQoJdS5SYXdRdWVyeSA9IHFzLkVuY29kZSgpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DelQString",
                        "Comment": "A version of DelQ that accepts a URL string and makes a best-effort to modify it.\nWill return the modified URL or the original URL if an error occurred.",
                        "Arguments": [
                            {
                                "Name": "u",
                                "Type": "string"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "DelQString(u string, key string) string",
                        "Source": "ewoJaWYgdXIsIGVyciA6PSB1cmwuUGFyc2UodSk7IGVyciA9PSBuaWwgewoJCURlbFEodXIsIGtleSkKCQlyZXR1cm4gdXIuU3RyaW5nKCkKCX0KCXJldHVybiB1Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "EncodeBasicAuth",
                        "Comment": "Encode the username and password into a value than can be used in the Authorization HTTP header.",
                        "Arguments": [
                            {
                                "Name": "username",
                                "Type": "string"
                            },
                            {
                                "Name": "password",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "EncodeBasicAuth(username string, password string) string",
                        "Source": "ewoJcmV0dXJuIGZtdC5TcHJpbnRmKCJCYXNpYyAlcyIsIGJhc2U2NC5TdGRFbmNvZGluZy5FbmNvZGVUb1N0cmluZyhbXWJ5dGUoZm10LlNwcmludGYoIiVzOiVzIiwgdXNlcm5hbWUsIHBhc3N3b3JkKSkpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "GetBody",
                        "Comment": "A simplified GET function using the package-level default client.  Will return the\nresponse body as bytes.",
                        "Arguments": [
                            {
                                "Name": "url",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "GetBody(url string) ([]byte, error)",
                        "Source": "ewoJaWYgcmVzLCBlcnIgOj0gRGVmYXVsdENsaWVudC5HZXQodXJsLCBuaWwsIG5pbCk7IGVyciA9PSBuaWwgewoJCXZhciBkYXRhLCBlcnIgPSBpby5SZWFkQWxsKHJlcy5Cb2R5KQoJCXJlcy5Cb2R5LkNsb3NlKCkKCQlyZXR1cm4gZGF0YSwgZXJyCgl9IGVsc2UgewoJCXJldHVybiBuaWwsIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Is1xx",
                        "Comment": "Returns whether the given status code is 100 \u003c= s \u003c= 199",
                        "Arguments": [
                            {
                                "Name": "code",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "Is1xx(code int) bool",
                        "Source": "ewoJcmV0dXJuIChjb2RlID49IDEwMCkgJiYgKGNvZGUgPD0gMTk5KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Is2xx",
                        "Comment": "Returns whether the given status code is 200 \u003c= s \u003c= 299",
                        "Arguments": [
                            {
                                "Name": "code",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "Is2xx(code int) bool",
                        "Source": "ewoJcmV0dXJuIChjb2RlID49IDIwMCkgJiYgKGNvZGUgPD0gMjk5KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Is3xx",
                        "Comment": "Returns whether the given status code is 300 \u003c= s \u003c= 399",
                        "Arguments": [
                            {
                                "Name": "code",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "Is3xx(code int) bool",
                        "Source": "ewoJcmV0dXJuIChjb2RlID49IDMwMCkgJiYgKGNvZGUgPD0gMzk5KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Is4xx",
                        "Comment": "Returns whether the given status code is 400 \u003c= s \u003c= 499",
                        "Arguments": [
                            {
                                "Name": "code",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "Is4xx(code int) bool",
                        "Source": "ewoJcmV0dXJuIChjb2RlID49IDQwMCkgJiYgKGNvZGUgPD0gNDk5KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Is5xx",
                        "Comment": "Returns whether the given status code is 500 \u003c= s \u003c= 599",
                        "Arguments": [
                            {
                                "Name": "code",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "Is5xx(code int) bool",
                        "Source": "ewoJcmV0dXJuIChjb2RlID49IDUwMCkgJiYgKGNvZGUgPD0gNTk5KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsHttpErr",
                        "Arguments": [
                            {
                                "Name": "err",
                                "Type": "error"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsHttpErr(err error) bool",
                        "Source": "ewoJaWYgZXJyICE9IG5pbCAmJiBzdHJpbmdzLkhhc1ByZWZpeChlcnIuRXJyb3IoKSwgYEhUVFAgYCkgewoJCXJldHVybiB0cnVlCgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsMediaType",
                        "Comment": "Returns whether the Content-Type of the given request matches any of the supplied options.\nThe mediaTypes arguments may be either complete media types (e.g.: \"text/html\", \"application/javascript\")\nor major type classes (e.g.: \"text/\", \"video/\").  The trailing slash (/) indicates that any media type\nthat begins with that text will match.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "mediaTypes",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsMediaType(req *http.Request, mediaTypes ...string) bool",
                        "Source": "ewoJdmFyIG1lZGlhVHlwZSA9IE1lZGlhVHlwZShyZXEpCglmb3IgXywgbXQgOj0gcmFuZ2UgbWVkaWFUeXBlcyB7CgkJaWYgc3RyaW5ncy5IYXNTdWZmaXgobXQsIGAvYCkgewoJCQlpZiBzdHJpbmdzLkhhc1ByZWZpeChtZWRpYVR5cGUsIG10KSB7CgkJCQlyZXR1cm4gdHJ1ZQoJCQl9CgkJfSBlbHNlIGlmIG10ID09IG1lZGlhVHlwZSB7CgkJCXJldHVybiB0cnVlCgkJfQoJfQoJcmV0dXJuIGZhbHNlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "JSONDecoder",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "io.Reader"
                            },
                            {
                                "Name": "out",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "JSONDecoder(in io.Reader, out any) error",
                        "Source": "ewoJcmV0dXJuIGpzb24uTmV3RGVjb2RlcihpbikuRGVjb2RlKG91dCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "JSONEncoder",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "io.Reader"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "JSONEncoder(in any) (io.Reader, error)",
                        "Source": "ewoJaWYgcmVxLCBvayA6PSBpbi4oKmh0dHAuUmVxdWVzdCk7IG9rIHsKCQlyZXEuSGVhZGVyLlNldChgQ29udGVudC1UeXBlYCwgYGFwcGxpY2F0aW9uL2pzb25gKQoJCXJldHVybiBuaWwsIG5pbAoJfSBlbHNlIGlmIGRhdGEsIGVyciA6PSBqc29uLk1hcnNoYWwoaW4pOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gYnl0ZXMuTmV3QnVmZmVyKGRhdGEpLCBuaWwKCX0gZWxzZSB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "LoadCertPool",
                        "Comment": "Loads certificates from the given file and returns a usable x509.CertPool",
                        "Arguments": [
                            {
                                "Name": "filename",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "*x509.CertPool"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "LoadCertPool(filename string) (*x509.CertPool, error)",
                        "Source": "ewoJaWYgZGF0YSwgZXJyIDo9IGZpbGV1dGlsLlJlYWRBbGwoZmlsZW5hbWUpOyBlcnIgPT0gbmlsIHsKCQl2YXIgcG9vbCA9IHg1MDkuTmV3Q2VydFBvb2woKQoJCWlmIHBvb2wuQXBwZW5kQ2VydHNGcm9tUEVNKGRhdGEpIHsKCQkJcmV0dXJuIHBvb2wsIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkFuIGVycm9yIG9jY3VycmVkIGFkZGluZyB0aGUgcHJvdmlkZWQgY2VydGlmaWNhdGUocykiKQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiZmFpbGVkIHRvIHJlYWQgY2VydGlmaWNhdGUgZmlsZTogJXYiLCBlcnIpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MediaType",
                        "Comment": "Returns the media type from the request's Content-Type.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "MediaType(req *http.Request) string",
                        "Source": "ewoJdmFyIGNvbnRlbnRUeXBlID0gcmVxLkhlYWRlci5HZXQoYENvbnRlbnQtVHlwZWApCglpZiBtZWRpYVR5cGUsIF8sIGVyciA6PSBtaW1lLlBhcnNlTWVkaWFUeXBlKGNvbnRlbnRUeXBlKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIG1lZGlhVHlwZQoJfSBlbHNlIHsKCQlyZXR1cm4gY29udGVudFR5cGUKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MultipartFormEncoder",
                        "Comment": "Specifies that the given data should be encoded as a multipart/form-data request.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "io.Reader"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "MultipartFormEncoder(in any) (io.Reader, error)",
                        "Source": "ewoJaWYgcmVxLCBvayA6PSBpbi4oKmh0dHAuUmVxdWVzdCk7IG9rIHsKCQlyZXEuSGVhZGVyLlNldChgQ29udGVudC1UeXBlYCwgYG11bHRpcGFydC9mb3JtLWRhdGFgKQoJCXJldHVybiBuaWwsIG5pbAoJfSBlbHNlIHsKCQl2YXIgb3V0cHV0ID0gYnl0ZXMuTmV3QnVmZmVyKG5pbCkKCQl2YXIgbXAgPSBtdWx0aXBhcnQuTmV3V3JpdGVyKG91dHB1dCkKCQl2YXIgZmllbGRzID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCQlpZiB0eXBldXRpbC5Jc01hcChpbikgewoJCQlmaWVsZHMgPSBtYXB1dGlsLk0oaW4pLk1hcE5hdGl2ZSgpCgkJfSBlbHNlIGlmIGluUiwgb2sgOj0gaW4uKGlvLlJlYWRlcik7IG9rIHsKCQkJZmllbGRzW0RlZmF1bHRNdWx0aXBhcnRGb3JtRmlsZUZpZWxkXSA9IGluUgoJCX0KCQlmb3IgZmllbGQsIHZhbHVlIDo9IHJhbmdlIGZpZWxkcyB7CgkJCXZhciBmaWxlbmFtZSBzdHJpbmcKCQkJaWYgdkJ5dGVzLCBvayA6PSB2YWx1ZS4oW11ieXRlKTsgb2sgewoJCQkJdmFsdWUgPSBieXRlcy5OZXdCdWZmZXIodkJ5dGVzKQoJCQl9CgkJCWlmIHZGaWxlLCBvayA6PSB2YWx1ZS4oKm9zLkZpbGUpOyBvayB7CgkJCQlmaWxlbmFtZSA9IHZGaWxlLk5hbWUoKQoJCQl9IGVsc2UgewoJCQkJdmFyIHZNUEZGICpNdWx0aXBhcnRGb3JtRmlsZQoJCQkJaWYgdiwgb2sgOj0gdmFsdWUuKE11bHRpcGFydEZvcm1GaWxlKTsgb2sgewoJCQkJCXZNUEZGID0gJnYKCQkJCX0gZWxzZSBpZiB2LCBvayA6PSB2YWx1ZS4oKk11bHRpcGFydEZvcm1GaWxlKTsgb2sgewoJCQkJCXZNUEZGID0gdgoJCQkJfQoJCQkJaWYgdk1QRkYgIT0gbmlsIHsKCQkJCQlmaWxlbmFtZSA9IHZNUEZGLkZpbGVuYW1lCgkJCQkJaWYgdk1QRkYuRGF0YSAhPSBuaWwgewoJCQkJCQl2YWx1ZSA9IHZNUEZGLkRhdGEKCQkJCQl9IGVsc2UgaWYgZiwgZXJyIDo9IG9zLk9wZW4oZmlsZW5hbWUpOyBlcnIgPT0gbmlsIHsKCQkJCQkJZGVmZXIgZi5DbG9zZSgpCgkJCQkJCXZhbHVlID0gZgoJCQkJCX0gZWxzZSB7CgkJCQkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkNhbm5vdCBhZGQgbXVsdGlwYXJ0IGZpbGUgJXE6ICV2IiwgZmlsZW5hbWUsIGVycikKCQkJCQl9CgkJCQl9CgkJCX0KCQkJaWYgdmFsdWVSLCBvayA6PSB2YWx1ZS4oaW8uUmVhZGVyKTsgb2sgewoJCQkJaWYgZmlsZW5hbWUgIT0gYGAgewoJCQkJCWlmIG91dFcsIGVyciA6PSBtcC5DcmVhdGVGb3JtRmlsZShmaWVsZCwgZmlsZW5hbWUpOyBlcnIgPT0gbmlsIHsKCQkJCQkJaWYgXywgZXJyIDo9IGlvLkNvcHkob3V0VywgdmFsdWVSKTsgZXJyICE9IG5pbCB7CgkJCQkJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJDYW5ub3Qgd3JpdGUgbXVsdGlwYXJ0IGZvcm0gZmllbGQgJXE6ICV2IiwgZmllbGQsIGVycikKCQkJCQkJfQoJCQkJCX0gZWxzZSB7CgkJCQkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkNhbm5vdCBjcmVhdGUgbXVsdGlwYXJ0IGZvcm0gZmllbGQgJXE6ICV2IiwgZmllbGQsIGVycikKCQkJCQl9CgkJCQl9IGVsc2UgaWYgb3V0VywgZXJyIDo9IG1wLkNyZWF0ZUZvcm1GaWVsZChmaWVsZCk7IGVyciA9PSBuaWwgewoJCQkJCWlmIF8sIGVyciA6PSBpby5Db3B5KG91dFcsIHZhbHVlUik7IGVyciAhPSBuaWwgewoJCQkJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJDYW5ub3Qgd3JpdGUgbXVsdGlwYXJ0IGZvcm0gZmllbGQgJXE6ICV2IiwgZmllbGQsIGVycikKCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkNhbm5vdCBjcmVhdGUgbXVsdGlwYXJ0IGZvcm0gZmllbGQgJXE6ICV2IiwgZmllbGQsIGVycikKCQkJCX0KCQkJfSBlbHNlIGlmIGVyciA6PSBtcC5Xcml0ZUZpZWxkKGZpZWxkLCB0eXBldXRpbC5TdHJpbmcodmFsdWUpKTsgZXJyICE9IG5pbCB7CgkJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJDYW5ub3QgZW5jb2RlIG11bHRpcGFydCBmb3JtIGZpZWxkICVxOiAldiIsIGZpZWxkLCBlcnIpCgkJCX0KCQl9CgkJcmV0dXJuICZtdWx0aXBhcnRGb3JtUmVxdWVzdHtkYXRhOiBvdXRwdXQsIGJvdW5kYXJ5OiBtcC5Cb3VuZGFyeSgpLCBjb250ZW50VHlwZTogbXAuRm9ybURhdGFDb250ZW50VHlwZSgpfSwgbXAuQ2xvc2UoKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "NetrcCredentials",
                        "Comment": "Retreive the plaintext username and password from the netrc-formatted file in the\nNetrcFile package variable.  The final return argument will be true if and only if\nthe .netrc file exists, is readable, and the username OR password matched to the given\ndomain is non-empty.",
                        "Arguments": [
                            {
                                "Name": "domain",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "NetrcCredentials(domain string) (string, string, bool)",
                        "Source": "ewoJaWYgZG9tYWluICE9IGBgIHsKCQlpZiBwYXRoLCBlcnIgOj0gZmlsZXV0aWwuRXhwYW5kVXNlcihOZXRyY0ZpbGUpOyBlcnIgPT0gbmlsIHsKCQkJaWYgbnJjLCBlcnIgOj0gbmV0cmMuUGFyc2UocGF0aCk7IGVyciA9PSBuaWwgewoJCQkJaWYgbSA6PSBucmMuTWFjaGluZShkb21haW4pOyBtICE9IG5pbCB7CgkJCQkJdmFyIHVzZXIgPSBzbGljZXV0aWwuT3JTdHJpbmcobS5HZXQoYGxvZ2luYCksIG0uR2V0KGB1c2VybmFtZWApKQoJCQkJCXZhciBwYXNzID0gbS5HZXQoYHBhc3N3b3JkYCkKCQkJCQlpZiB1c2VyICE9IGBgIHx8IHBhc3MgIT0gYGAgewoJCQkJCQlyZXR1cm4gdXNlciwgcGFzcywgdHJ1ZQoJCQkJCX0KCQkJCX0gZWxzZSBpZiBkb21haW4gIT0gYCpgIHsKCQkJCQlyZXR1cm4gTmV0cmNDcmVkZW50aWFscyhgKmApCgkJCQl9CgkJCX0KCQl9Cgl9CglyZXR1cm4gYGAsIGBgLCBmYWxzZQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ParseFormRequest",
                        "Comment": "Parses the form values for a Request and unmarshals into the given value.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "into",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ParseFormRequest(req *http.Request, into any) error",
                        "Source": "ewoJaWYgZXJyIDo9IHJlcS5QYXJzZUZvcm0oKTsgZXJyID09IG5pbCB7CgkJaWYgcmVxLk1ldGhvZCA9PSBgUE9TVGAgewoJCQlyZXR1cm4gUGFyc2VGb3JtVmFsdWVzKHJlcS5Qb3N0Rm9ybSwgaW50bykKCQl9IGVsc2UgewoJCQlyZXR1cm4gUGFyc2VGb3JtVmFsdWVzKHJlcS5Gb3JtLCBpbnRvKQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ParseFormValues",
                        "Comment": "Parses a set of values received from an HTML form (usually the value of the\nhttp.Request.Form property) and unmarshals into the given value.",
                        "Arguments": [
                            {
                                "Name": "formValues",
                                "Type": "url.Values"
                            },
                            {
                                "Name": "into",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ParseFormValues(formValues url.Values, into any) error",
                        "Source": "ewoJdmFyIGRhdGEgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJZm9yIGtleSwgdmFsdWVzIDo9IHJhbmdlIGZvcm1WYWx1ZXMgewoJCXZhbHVlcyA9IHNsaWNldXRpbC5Db21wYWN0U3RyaW5nKHZhbHVlcykKCQl2YXIgaXNBcnJheSBib29sCgkJaWYgc3RyaW5ncy5IYXNTdWZmaXgoa2V5LCBgW11gKSB7CgkJCWlzQXJyYXkgPSB0cnVlCgkJCWtleSA9IHN0cmluZ3MuVHJpbVN1ZmZpeChrZXksIGBbXWApCgkJfSBlbHNlIGlmIGxlbih2YWx1ZXMpID4gMSB7CgkJCWlzQXJyYXkgPSB0cnVlCgkJfSBlbHNlIGlmIHN0cmluZ3MuQ29udGFpbnMoa2V5LCBgW2ApICYmIHN0cmluZ3MuQ29udGFpbnMoa2V5LCBgXWApIHsKCQkJa2V5ID0gc3RyaW5ncy5SZXBsYWNlQWxsKGtleSwgYFtgLCBgLmApCgkJCWtleSA9IHN0cmluZ3MuUmVwbGFjZUFsbChrZXksIGBdYCwgYGApCgkJfQoJCXZhciBwYXJ0cyA9IHN0cmluZ3MuU3BsaXQoa2V5LCBgLmApCgkJaWYgaXNBcnJheSB7CgkJCW1hcHV0aWwuRGVlcFNldChkYXRhLCBwYXJ0cywgc2xpY2V1dGlsLkF1dG90eXBlKHZhbHVlcykpCgkJfSBlbHNlIGlmIGxlbih2YWx1ZXMpID4gMCB7CgkJCW1hcHV0aWwuRGVlcFNldChkYXRhLCBwYXJ0cywgc3RyaW5ndXRpbC5BdXRvdHlwZSh2YWx1ZXNbMF0pKQoJCX0gZWxzZSB7CgkJCW1hcHV0aWwuRGVlcFNldChkYXRhLCBwYXJ0cywgbmlsKQoJCX0KCX0KCXJldHVybiBtYXB1dGlsLlRhZ2dlZFN0cnVjdEZyb21NYXAoZGF0YSwgaW50bywgRm9ybVVubWFyc2hhbFN0cnVjdFRhZykKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ParseJSON",
                        "Comment": "Parses a given reader as a JSON document and unmarshals into the given value.",
                        "Arguments": [
                            {
                                "Name": "r",
                                "Type": "io.Reader"
                            },
                            {
                                "Name": "into",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ParseJSON(r io.Reader, into any) error",
                        "Source": "ewoJcmV0dXJuIGpzb24uTmV3RGVjb2RlcihyKS5EZWNvZGUoaW50bykKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ParseJSONRequest",
                        "Comment": "Parses the Request as JSON and unmarshals into the given value.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "into",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ParseJSONRequest(req *http.Request, into any) error",
                        "Source": "ewoJcmV0dXJuIFBhcnNlSlNPTihyZXEuQm9keSwgaW50bykKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ParseRequest",
                        "Comment": "Autodetect the Content-Type of the given request and unmarshals into the\ngiven value.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "into",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ParseRequest(req *http.Request, into any) error",
                        "Source": "ewoJdmFyIGNvbnRlbnRUeXBlID0gcmVxLkhlYWRlci5HZXQoYENvbnRlbnQtVHlwZWApCglpZiBwYXJzZXIsIG9rIDo9IHBhcnNlcnNbY29udGVudFR5cGVdOyBvayB7CgkJcmV0dXJuIHBhcnNlcihyZXEsIGludG8pCgl9IGVsc2UgaWYgbWVkaWFUeXBlLCBfLCBlcnIgOj0gbWltZS5QYXJzZU1lZGlhVHlwZShjb250ZW50VHlwZSk7IGVyciA9PSBuaWwgewoJCWlmIHBhcnNlciwgb2sgOj0gcGFyc2Vyc1ttZWRpYVR5cGVdOyBvayB7CgkJCXJldHVybiBwYXJzZXIocmVxLCBpbnRvKQoJCX0gZWxzZSBpZiBwYXJzZXIsIG9rIDo9IHBhcnNlcnNbYGBdOyBvayB7CgkJCXJldHVybiBwYXJzZXIocmVxLCBpbnRvKQoJCX0gZWxzZSB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJObyBwYXJzZXIgY291bGQgYmUgZm91bmQgZm9yIENvbnRlbnQtVHlwZSAlcSIsIGNvbnRlbnRUeXBlKQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Q",
                        "Comment": "Parses the named query string from a request as a string.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            },
                            {
                                "Name": "fallbacks",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Q(req *http.Request, key string, fallbacks ...string) string",
                        "Source": "ewoJaWYgdiA6PSByZXEuVVJMLlF1ZXJ5KCkuR2V0KGtleSk7IHYgIT0gYGAgewoJCWlmIHZTLCBlcnIgOj0gdXJsLlF1ZXJ5VW5lc2NhcGUodik7IGVyciA9PSBuaWwgewoJCQlyZXR1cm4gdlMKCQl9Cgl9CglpZiBsZW4oZmFsbGJhY2tzKSA+IDAgewoJCXJldHVybiBmYWxsYmFja3NbMF0KCX0gZWxzZSB7CgkJcmV0dXJuIGBgCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "QBool",
                        "Comment": "Parses the named query string from a request as a boolean value.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            },
                            {
                                "Name": "fallbacks",
                                "Type": "...bool"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "QBool(req *http.Request, key string, fallbacks ...bool) bool",
                        "Source": "ewoJaWYgdiA6PSBRKHJlcSwga2V5KTsgdiA9PSBgYCAmJiBsZW4oZmFsbGJhY2tzKSA+IDAgewoJCXJldHVybiBmYWxsYmFja3NbMF0KCX0gZWxzZSBpZiB0eXBldXRpbC5Cb29sKHYpIHsKCQlyZXR1cm4gdHJ1ZQoJfQoJcmV0dXJuIGZhbHNlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "QDuration",
                        "Comment": "Parses the named query string from a request as a duration string.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Duration"
                            }
                        ],
                        "Signature": "QDuration(req *http.Request, key string) time.Duration",
                        "Source": "ewoJaWYgdiA6PSBRKHJlcSwga2V5KTsgdiAhPSBgYCB7CgkJaWYgZCwgZXJyIDo9IHRpbWV1dGlsLlBhcnNlRHVyYXRpb24odik7IGVyciA9PSBuaWwgewoJCQlyZXR1cm4gZAoJCX0KCX0KCXJldHVybiAwCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "QFloat",
                        "Comment": "Parses the named query string from a request as a float.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            },
                            {
                                "Name": "fallbacks",
                                "Type": "...float64"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "QFloat(req *http.Request, key string, fallbacks ...float64) float64",
                        "Source": "ewoJaWYgdiA6PSBRKHJlcSwga2V5KTsgdiAhPSBgYCB7CgkJaWYgaSwgZXJyIDo9IHN0cmluZ3V0aWwuQ29udmVydFRvRmxvYXQodik7IGVyciA9PSBuaWwgewoJCQlyZXR1cm4gaQoJCX0KCX0KCWlmIGxlbihmYWxsYmFja3MpID4gMCB7CgkJcmV0dXJuIGZhbGxiYWNrc1swXQoJfSBlbHNlIHsKCQlyZXR1cm4gMAoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "QInt",
                        "Comment": "Parses the named query string from a request as an integer.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            },
                            {
                                "Name": "fallbacks",
                                "Type": "...int64"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int64"
                            }
                        ],
                        "Signature": "QInt(req *http.Request, key string, fallbacks ...int64) int64",
                        "Source": "ewoJaWYgdiA6PSBRKHJlcSwga2V5KTsgdiAhPSBgYCB7CgkJaWYgaSwgZXJyIDo9IHN0cmluZ3V0aWwuQ29udmVydFRvSW50ZWdlcih2KTsgZXJyID09IG5pbCB7CgkJCXJldHVybiBpCgkJfQoJfQoJaWYgbGVuKGZhbGxiYWNrcykgPiAwIHsKCQlyZXR1cm4gZmFsbGJhY2tzWzBdCgl9IGVsc2UgewoJCXJldHVybiAwCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "QStrings",
                        "Comment": "Parses the named query string from a request as a delimiter-separated string slice.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            },
                            {
                                "Name": "fallbacks",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "QStrings(req *http.Request, key string, delimiter string, fallbacks ...string) []string",
                        "Source": "ewoJaWYgc3RycyA6PSBzbGljZXV0aWwuQ29tcGFjdFN0cmluZyhzdHJpbmdzLlNwbGl0KFEocmVxLCBrZXkpLCBkZWxpbWl0ZXIpKTsgbGVuKHN0cnMpID4gMCB7CgkJcmV0dXJuIHN0cnMKCX0gZWxzZSBpZiBsZW4oZmFsbGJhY2tzKSA+IDAgewoJCXJldHVybiBzbGljZXV0aWwuU3RyaW5naWZ5KHNsaWNldXRpbC5GbGF0dGVuKGZhbGxiYWNrcykpCgl9IGVsc2UgewoJCXJldHVybiBtYWtlKFtdc3RyaW5nLCAwKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "QTime",
                        "Comment": "Parses the named query string from a request as a date/time value.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Time"
                            }
                        ],
                        "Signature": "QTime(req *http.Request, key string) time.Time",
                        "Source": "ewoJaWYgdiA6PSBRKHJlcSwga2V5KTsgdiAhPSBgYCB7CgkJaWYgaSwgZXJyIDo9IHN0cmluZ3V0aWwuQ29udmVydFRvVGltZSh2KTsgZXJyID09IG5pbCB7CgkJCXJldHVybiBpCgkJfQoJfQoJcmV0dXJuIHRpbWUuVGltZXt9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RequestGetValue",
                        "Comment": "Retrieve an arbitrary value from the context of a given request.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "typeutil.Variant"
                            }
                        ],
                        "Signature": "RequestGetValue(req *http.Request, key string) typeutil.Variant",
                        "Source": "ewoJaWYgdmFsdWUgOj0gcmVxLkNvbnRleHQoKS5WYWx1ZShrZXkpOyB2YWx1ZSAhPSBuaWwgewoJCXJldHVybiB0eXBldXRpbC5WKHZhbHVlKQoJfSBlbHNlIHsKCQlyZXR1cm4gdHlwZXV0aWwuVihuaWwpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RequestSetValue",
                        "Comment": "attach an arbitrary value to the context of a given request.",
                        "Arguments": [
                            {
                                "Name": "req",
                                "Type": "*http.Request"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            },
                            {
                                "Name": "value",
                                "Type": "any"
                            }
                        ],
                        "Signature": "RequestSetValue(req *http.Request, key string, value any)",
                        "Source": "ewoJdmFyIHBhcmVudCA9IHJlcS5Db250ZXh0KCkKCXZhciB3aXRoVmFsdWUgPSBjb250ZXh0LldpdGhWYWx1ZShwYXJlbnQsIGtleSwgdmFsdWUpCgkqcmVxID0gKnJlcS5XaXRoQ29udGV4dCh3aXRoVmFsdWUpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RespondJSON",
                        "Comment": "Marshal the given data as a JSON document and write the output to the given ResponseWriter. If\na status is given, that will be used as the HTTP response status.  If data is an error, and no\nstatus is given, the status will be \"500 Internal Server Error\"; if data is nil, the status will\nbe \"204 No Content\".  The Content-Type of the response is \"application/json\".",
                        "Arguments": [
                            {
                                "Name": "w",
                                "Type": "http.ResponseWriter"
                            },
                            {
                                "Name": "data",
                                "Type": "any"
                            },
                            {
                                "Name": "status",
                                "Type": "...int"
                            }
                        ],
                        "Signature": "RespondJSON(w http.ResponseWriter, data any, status ...int)",
                        "Source": "ewoJdy5IZWFkZXIoKS5TZXQoYENvbnRlbnQtVHlwZWAsIGBhcHBsaWNhdGlvbi9qc29uYCkKCXZhciBoZWFkZXJTZW50IGJvb2wKCXZhciBmaW5hbFN0YXR1cyBpbnQKCWlmIGVyciwgb2sgOj0gZGF0YS4oZXJyb3IpOyBvayAmJiBlcnIgIT0gbmlsIHsKCQlkYXRhID0gbWFwW3N0cmluZ11hbnl7YHN1Y2Nlc3NgOiBmYWxzZSwgYGVycm9yYDogZXJyLkVycm9yKCl9CgkJaWYgbGVuKHN0YXR1cykgPT0gMCB7CgkJCXN0YXR1cyA9IFtdaW50e2h0dHAuU3RhdHVzSW50ZXJuYWxTZXJ2ZXJFcnJvcn0KCQl9Cgl9CglpZiBsZW4oc3RhdHVzKSA+IDAgewoJCWZpbmFsU3RhdHVzID0gc3RhdHVzWzBdCgkJdy5Xcml0ZUhlYWRlcihmaW5hbFN0YXR1cykKCQloZWFkZXJTZW50ID0gdHJ1ZQoJfQoJaWYgZGF0YSAhPSBuaWwgewoJCWlmIGVyciA6PSBqc29uLk5ld0VuY29kZXIodykuRW5jb2RlKGRhdGEpOyBlcnIgIT0gbmlsIHsKCQkJaWYgIWxvZy5FcnJDb250YWlucyhlcnIsIGBzdGF0dXMgY29kZSBkb2VzIG5vdCBhbGxvdyBib2R5YCkgewoJCQkJTG9nZ2VyLldhcm5pbmdmKCJGYWlsZWQgdG8gZW5jb2RlIHJlc3BvbnNlIGJvZHk6ICV2IiwgZXJyKQoJCQl9CgkJfQoJfSBlbHNlIGlmICFoZWFkZXJTZW50IHsKCQl3LldyaXRlSGVhZGVyKGh0dHAuU3RhdHVzTm9Db250ZW50KQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SetContentTypeParser",
                        "Comment": "Sets a parser implementation for the given HTTP content type.",
                        "Arguments": [
                            {
                                "Name": "contentType",
                                "Type": "string"
                            },
                            {
                                "Name": "parser",
                                "Type": "RequestParseFunc"
                            }
                        ],
                        "Signature": "SetContentTypeParser(contentType string, parser RequestParseFunc)",
                        "Source": "ewoJaWYgcGFyc2VyICE9IG5pbCB7CgkJcGFyc2Vyc1tjb250ZW50VHlwZV0gPSBwYXJzZXIKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SetQ",
                        "Comment": "Sets a query string to the given value in the given url.URL",
                        "Arguments": [
                            {
                                "Name": "u",
                                "Type": "*url.URL"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            },
                            {
                                "Name": "value",
                                "Type": "any"
                            }
                        ],
                        "Signature": "SetQ(u *url.URL, key string, value any)",
                        "Source": "ewoJdmFyIHFzID0gdS5RdWVyeSgpCglxcy5TZXQoa2V5LCBzdHJpbmd1dGlsLk11c3RTdHJpbmcodmFsdWUpKQoJdS5SYXdRdWVyeSA9IHFzLkVuY29kZSgpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SetQString",
                        "Comment": "A version of SetQ that accepts a URL string and makes a best-effort to modify it.\nWill return the modified URL or the original URL if an error occurred.",
                        "Arguments": [
                            {
                                "Name": "u",
                                "Type": "string"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            },
                            {
                                "Name": "value",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SetQString(u string, key string, value any) string",
                        "Source": "ewoJaWYgdXIsIGVyciA6PSB1cmwuUGFyc2UodSk7IGVyciA9PSBuaWwgewoJCVNldFEodXIsIGtleSwgdmFsdWUpCgkJcmV0dXJuIHVyLlN0cmluZygpCgl9CglyZXR1cm4gdQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SetRootCABundle",
                        "Comment": "Configures the given http.Client to accept TLS certificates validated by the given PEM-encoded CA bundle file",
                        "Arguments": [
                            {
                                "Name": "client",
                                "Type": "*http.Client"
                            },
                            {
                                "Name": "caBundle",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "SetRootCABundle(client *http.Client, caBundle string) error",
                        "Source": "ewoJcmV0dXJuIHVwZGF0ZVJvb3RDQUJ1bmRsZShmYWxzZSwgY2xpZW50LCBjYUJ1bmRsZSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "UrlPathJoin",
                        "Comment": "UrlPathJoin takes a string or *url.URL and joins the existing URL path component with the given path.\nThe new path may also contain query string values, which will be added to the base URL.  Existing keys will\nbe replaced with new ones, except for repeated keys (e.g.: ?x=1\u0026x=2\u0026x=3).  In this case, the new values will\nbe added to the existing ones.  The *url.URL returned from this function is a copy, and the original URL (if\none is provided) will not be modified in any way.",
                        "Arguments": [
                            {
                                "Name": "baseurl",
                                "Type": "any"
                            },
                            {
                                "Name": "path",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "*url.URL"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "UrlPathJoin(baseurl any, path string) (*url.URL, error)",
                        "Source": "ewoJdmFyIGluICp1cmwuVVJMCgl2YXIgb3V0ICp1cmwuVVJMCglpZiB1LCBvayA6PSBiYXNldXJsLigqdXJsLlVSTCk7IG9rIHsKCQlpbiA9IHUKCX0gZWxzZSBpZiB1LCBlcnIgOj0gdXJsLlBhcnNlKHR5cGV1dGlsLlN0cmluZyhiYXNldXJsKSk7IGVyciA9PSBuaWwgewoJCWluID0gdQoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCW5ld3BhdGgsIHFzIDo9IHN0cmluZ3V0aWwuU3BsaXRQYWlyKHBhdGgsIGA/YCkKCXZhciB0cmFpbCBzdHJpbmcKCWlmIHN0cmluZ3MuSGFzU3VmZml4KG5ld3BhdGgsIGAvYCkgewoJCW5ld3BhdGggPSBzdHJpbmdzLlRyaW1TdWZmaXgobmV3cGF0aCwgYC9gKQoJCWluLlBhdGggPSBzdHJpbmdzLlRyaW1TdWZmaXgoaW4uUGF0aCwgYC9gKQoJCXRyYWlsID0gYC9gCgl9CglvdXQgPSBuZXcodXJsLlVSTCkKCW91dC5TY2hlbWUgPSBpbi5TY2hlbWUKCW91dC5PcGFxdWUgPSBpbi5PcGFxdWUKCW91dC5Vc2VyID0gaW4uVXNlcgoJb3V0Lkhvc3QgPSBpbi5Ib3N0CglvdXQuUGF0aCA9IGZpbGVwYXRoLkpvaW4oaW4uUGF0aCwgbmV3cGF0aCkgKyB0cmFpbAoJb3V0LlJhd1BhdGggPSBpbi5SYXdQYXRoCglvdXQuRm9yY2VRdWVyeSA9IGluLkZvcmNlUXVlcnkKCW91dC5SYXdRdWVyeSA9IGluLlJhd1F1ZXJ5CglvdXQuRnJhZ21lbnQgPSBpbi5GcmFnbWVudAoJaWYgcXMgIT0gYGAgewoJCWlmIHFzdiwgZXJyIDo9IHVybC5QYXJzZVF1ZXJ5KHFzKTsgZXJyID09IG5pbCB7CgkJCWZvciBrLCB2cyA6PSByYW5nZSBxc3YgewoJCQkJaWYgbGVuKHZzKSA9PSAxIHsKCQkJCQlTZXRRKG91dCwgaywgdnNbMF0pCgkJCQl9IGVsc2UgewoJCQkJCUFkZFEob3V0LCBrLCBzbGljZXV0aWwuU2xpY2VpZnkodnMpLi4uKQoJCQkJfQoJCQl9CgkJfSBlbHNlIHsKCQkJcmV0dXJuIG5pbCwgZXJyCgkJfQoJfQoJcmV0dXJuIG91dCwgbmlsCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "WaitForHTTP",
                        "Comment": "Periodically performs a GET request against the given URL, waiting up to timeout\nfor a 200-series HTTP response code.",
                        "Arguments": [
                            {
                                "Name": "url",
                                "Type": "string"
                            },
                            {
                                "Name": "timeout",
                                "Type": "time.Duration"
                            },
                            {
                                "Name": "c",
                                "Type": "...*http.Client"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "WaitForHTTP(url string, timeout time.Duration, c ...*http.Client) error",
                        "Source": "ewoJdmFyIGNsaWVudCAqaHR0cC5DbGllbnQKCWlmIGxlbihjKSA+IDAgJiYgY1swXSAhPSBuaWwgewoJCWNsaWVudCA9IGNbMF0KCX0gZWxzZSB7CgkJY2xpZW50ID0gaHR0cC5EZWZhdWx0Q2xpZW50Cgl9Cgl2YXIgc3RhcnQgPSB0aW1lLk5vdygpCglmb3IgdGltZS5TaW5jZShzdGFydCkgPCB0aW1lb3V0IHsKCQlpZiByZXMsIGVyciA6PSBjbGllbnQuR2V0KHVybCk7IGVyciA9PSBuaWwgewoJCQlpZiByZXMuU3RhdHVzQ29kZSA8IDQwMCB7CgkJCQlyZXR1cm4gbmlsCgkJCX0KCQl9CgkJdGltZS5TbGVlcChXYWl0Rm9yUG9sbEludGVydmFsKQoJfQoJcmV0dXJuIGZtdC5FcnJvcmYoIlJlcXVlc3QgdG8gJXMgZGlkIG5vdCBzdWNjZWVkIGluICV2IiwgdXJsLCB0aW1lb3V0KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "XMLDecoder",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "io.Reader"
                            },
                            {
                                "Name": "out",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "XMLDecoder(in io.Reader, out any) error",
                        "Source": "ewoJcmV0dXJuIHhtbC5OZXdEZWNvZGVyKGluKS5EZWNvZGUob3V0KQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Examples": [
                    {
                        "Name": "ExampleIsMediaType_mediaTypePrefix",
                        "Label": "MediaTypePrefix",
                        "For": "IsMediaType",
                        "Signature": "ExampleIsMediaType_mediaTypePrefix()",
                        "Source": "ewoJdmFyIHJlcSA9IGh0dHB0ZXN0Lk5ld1JlcXVlc3QoYEdFVGAsIGAvYCwgbmlsKQoJcmVxLkhlYWRlci5TZXQoYENvbnRlbnQtVHlwZWAsIGB0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThgKQoJZm10LlByaW50bG4oSXNNZWRpYVR5cGUocmVxLCBgdGV4dC9gKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleIsMediaType_multipleMediaTypes",
                        "Label": "MultipleMediaTypes",
                        "For": "IsMediaType",
                        "Signature": "ExampleIsMediaType_multipleMediaTypes()",
                        "Source": "ewoJdmFyIHJlcSA9IGh0dHB0ZXN0Lk5ld1JlcXVlc3QoYEdFVGAsIGAvYCwgbmlsKQoJcmVxLkhlYWRlci5TZXQoYENvbnRlbnQtVHlwZWAsIGB0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThgKQoJZm10LlByaW50bG4oSXNNZWRpYVR5cGUocmVxLCBgdGV4dC9odG1sYCwgYHRleHQvcGxhaW5gKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleIsMediaType_nonMatchingPrefix",
                        "Label": "NonMatchingPrefix",
                        "For": "IsMediaType",
                        "Signature": "ExampleIsMediaType_nonMatchingPrefix()",
                        "Source": "ewoJdmFyIHJlcSA9IGh0dHB0ZXN0Lk5ld1JlcXVlc3QoYEdFVGAsIGAvYCwgbmlsKQoJcmVxLkhlYWRlci5TZXQoYENvbnRlbnQtVHlwZWAsIGB0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThgKQoJZm10LlByaW50bG4oSXNNZWRpYVR5cGUocmVxLCBgdmlkZW8vYCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleIsMediaType_singleMediaType",
                        "Label": "SingleMediaType",
                        "For": "IsMediaType",
                        "Signature": "ExampleIsMediaType_singleMediaType()",
                        "Source": "ewoJdmFyIHJlcSA9IGh0dHB0ZXN0Lk5ld1JlcXVlc3QoYEdFVGAsIGAvYCwgbmlsKQoJcmVxLkhlYWRlci5TZXQoYENvbnRlbnQtVHlwZWAsIGB0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThgKQoJZm10LlByaW50bG4oSXNNZWRpYVR5cGUocmVxLCBgdGV4dC9odG1sYCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleUrlPathJoin_emptyJoin",
                        "Label": "EmptyJoin",
                        "For": "UrlPathJoin",
                        "Signature": "ExampleUrlPathJoin_emptyJoin()",
                        "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2dvb2dsZS5jb20vYCwgYGApCglmbXQuUHJpbnRsbih1cmwuU3RyaW5nKCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleUrlPathJoin_joinToExistingQueryStrings",
                        "Label": "JoinToExistingQueryStrings",
                        "For": "UrlPathJoin",
                        "Signature": "ExampleUrlPathJoin_joinToExistingQueryStrings()",
                        "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2dvb2dsZS5jb20vc2VhcmNoYCwgYD9xPWhlbGxvYCkKCWZtdC5QcmludGxuKHVybC5TdHJpbmcoKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleUrlPathJoin_joinWithQueryString",
                        "Label": "JoinWithQueryString",
                        "For": "UrlPathJoin",
                        "Signature": "ExampleUrlPathJoin_joinWithQueryString()",
                        "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2dvb2dsZS5jb20vYCwgYC9zZWFyY2g/cT1oZWxsb2ApCglmbXQuUHJpbnRsbih1cmwuU3RyaW5nKCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleUrlPathJoin_pathAndQuery",
                        "Label": "PathAndQuery",
                        "For": "UrlPathJoin",
                        "Signature": "ExampleUrlPathJoin_pathAndQuery()",
                        "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2V4YW1wbGUuY29tL2FwaS92MT9oZWxsbz10aGVyZWAsIGAvdGhpbmdzL25ldz9leGFtcGxlPXRydWVgKQoJZm10LlByaW50bG4odXJsLlN0cmluZygpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleUrlPathJoin_pathAndQueryTrailingSlash",
                        "Label": "PathAndQueryTrailingSlash",
                        "For": "UrlPathJoin",
                        "Signature": "ExampleUrlPathJoin_pathAndQueryTrailingSlash()",
                        "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2V4YW1wbGUuY29tL2FwaS92MT9oZWxsbz10aGVyZWAsIGAvdGhpbmdzL25ldy8/ZXhhbXBsZT10cnVlYCkKCWZtdC5QcmludGxuKHVybC5TdHJpbmcoKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleUrlPathJoin_simpleJoin",
                        "Label": "SimpleJoin",
                        "For": "UrlPathJoin",
                        "Signature": "ExampleUrlPathJoin_simpleJoin()",
                        "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2dvb2dsZS5jb21gLCBgL3NlYXJjaGApCglmbXQuUHJpbnRsbih1cmwuU3RyaW5nKCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleUrlPathJoin_slashJoin",
                        "Label": "SlashJoin",
                        "For": "UrlPathJoin",
                        "Signature": "ExampleUrlPathJoin_slashJoin()",
                        "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2dvb2dsZS5jb20vYCwgYC9gKQoJZm10LlByaW50bG4odXJsLlN0cmluZygpKQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestAttachAndRetrieveValue",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestAttachAndRetrieveValue(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglyZXEsIGVyciA6PSBodHRwLk5ld1JlcXVlc3QoYEdFVGAsIGBhYm91dDpibGFua2AsIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCVJlcXVlc3RTZXRWYWx1ZShyZXEsIGB0ZXN0LXZhbHVlYCwgYDEyMzQ1Njc4OWApCglhc3NlcnQuRmFsc2UoUmVxdWVzdEdldFZhbHVlKHJlcSwgYHRlc3QtdmFsdWVgKS5Jc05pbCgpKQoJYXNzZXJ0LkZhbHNlKFJlcXVlc3RHZXRWYWx1ZShyZXEsIGB0ZXN0LXZhbHVlYCkuSXNaZXJvKCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMTIzNDU2Nzg5LCBSZXF1ZXN0R2V0VmFsdWUocmVxLCBgdGVzdC12YWx1ZWApLkludCgpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGAxMjM0NTY3ODlgLCBSZXF1ZXN0R2V0VmFsdWUocmVxLCBgdGVzdC12YWx1ZWApLlN0cmluZygpKQoJYXNzZXJ0LlRydWUoUmVxdWVzdEdldFZhbHVlKHJlcSwgYHRlc3QtdmFsdWVgKS5Cb29sKCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestClient",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestClient(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0IG1hcFtzdHJpbmddYW55Cgl2YXIgb3V0UyBzdHJpbmcKCXZhciBzZXJ2ZXIgPSB0ZXN0SHR0cFNlcnZlcigpCglkZWZlciBzZXJ2ZXIuQ2xvc2UoKQoJY2xpZW50LCBlcnIgOj0gTmV3Q2xpZW50KHNlcnZlci5VUkwgKyBgL2Jhc2UvP2hlbGxvPXRydWVgKQoJY2xpZW50LlNldFBhcmFtKGB0b3B0aGluZ2AsIHRydWUpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuTm90TmlsKGNsaWVudCkKCXJlc3BvbnNlLCBlcnIgOj0gY2xpZW50LkdldChgL3Rlc3QvcGF0aGAsIG5pbCwgbmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0Lk5vdE5pbChyZXNwb25zZSkKCWFzc2VydC5Ob0Vycm9yKFBhcnNlSlNPTihyZXNwb25zZS5Cb2R5LCAmb3V0KSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgcGF0aGA6IGAvYmFzZS90ZXN0L3BhdGhgLCBgcXNgOiBtYXBbc3RyaW5nXWFueXtgaGVsbG9gOiBbXWFueXtgdHJ1ZWB9LCBgdG9wdGhpbmdgOiBbXWFueXtgdHJ1ZWB9fX0sIG91dCkKCXJlc3BvbnNlLCBlcnIgPSBjbGllbnQuUG9zdChgL2Jhc2UvdGVzdC9wYXRoYCwgYHBvc3RhYmxlYCwgbWFwW3N0cmluZ11hbnl7YHRoaW5nYDogdHJ1ZX0sIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5Ob3ROaWwocmVzcG9uc2UpCglhc3NlcnQuTm9FcnJvcihjbGllbnQuRGVjb2RlKHJlc3BvbnNlLkJvZHksICZvdXRTKSkKCWFzc2VydC5FcXVhbChgcG9zdGFibGVgLCBvdXRTKQoJcmVzcG9uc2UsIGVyciA9IGNsaWVudC5QdXQoYC9iYXNlL3Rlc3QvcGF0aGAsIGBwdXR0YWJsZWAsIG1hcFtzdHJpbmddYW55e2B0aGluZ2A6IHRydWV9LCBuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuTm90TmlsKHJlc3BvbnNlKQoJYXNzZXJ0Lk5vRXJyb3IoY2xpZW50LkRlY29kZShyZXNwb25zZS5Cb2R5LCAmb3V0UykpCglhc3NlcnQuRXF1YWwoYHB1dHRhYmxlYCwgb3V0UykKCXJlc3BvbnNlLCBlcnIgPSBjbGllbnQuRGVsZXRlKGAvYmFzZS90ZXN0L3BhdGhgLCBuaWwsIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5Ob3ROaWwocmVzcG9uc2UpCglhc3NlcnQuRXF1YWwoaHR0cC5TdGF0dXNOb0NvbnRlbnQsIHJlc3BvbnNlLlN0YXR1c0NvZGUpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestClientMultipartFormEncoder",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestClientMultipartFormEncoder(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0IG1hcFtzdHJpbmddYW55Cgl2YXIgc2VydmVyID0gdGVzdEh0dHBTZXJ2ZXIoKQoJZGVmZXIgc2VydmVyLkNsb3NlKCkKCWNsaWVudCwgZXJyIDo9IE5ld0NsaWVudChzZXJ2ZXIuVVJMKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0Lk5vdE5pbChjbGllbnQpCgljbGllbnQuU2V0RXJyb3JEZWNvZGVyKGZ1bmMocmVzICpodHRwLlJlc3BvbnNlKSBlcnJvciB7CgkJYXNzZXJ0Lk5vdE5pbChyZXMuQm9keSkKCQlyZXR1cm4gZXJyb3JzLk5ldyh0eXBldXRpbC5TdHJpbmcocmVzLkJvZHkpKQoJfSkKCXJlc3BvbnNlLCBlcnIgOj0gY2xpZW50LldpdGhFbmNvZGVyKE11bHRpcGFydEZvcm1FbmNvZGVyKS5Qb3N0KGAvd2F5L2Nvb2xgLCBtYXBbc3RyaW5nXWFueXtgZmlsZWA6IGJ5dGVzLk5ld0J1ZmZlcihbXWJ5dGUoInRlc3QgZmlsZSAxXG4iKSksIGBvdGhlcmA6IGJ5dGVzLk5ld0J1ZmZlcihbXWJ5dGUoInRlc3QgZmlsZSAyXG4iKSksIGBrZXlgOiBgdmFsdWVgLCBgZW5hYmxlYDogdHJ1ZX0sIG5pbCwgbmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0Lk5vdE5pbChyZXNwb25zZSkKCWFzc2VydC5FcXVhbChyZXNwb25zZS5TdGF0dXNDb2RlLCBodHRwLlN0YXR1c0FjY2VwdGVkKQoJYXNzZXJ0Lk5vRXJyb3IoUGFyc2VKU09OKHJlc3BvbnNlLkJvZHksICZvdXQpKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddYW55e2BmaWxlYDogW11hbnl7InRlc3QgZmlsZSAxXG4ifSwgYG90aGVyYDogW11hbnl7InRlc3QgZmlsZSAyXG4ifSwgYGtleWA6IFtdYW55eyJ2YWx1ZSJ9LCBgZW5hYmxlYDogW11hbnl7InRydWUifX0sIG91dCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestClientNetrcAuth",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestClientNetrcAuth(t *testing.T)",
                        "Source": "ewoJdmFyIHNlcnZlciA9IHRlc3RIdHRwU2VydmVyKCkKCWRlZmVyIHNlcnZlci5DbG9zZSgpCgljbGllbnQsIGVyciA6PSBOZXdDbGllbnQoc2VydmVyLlVSTCkKCWFzc2VydC5Ob0Vycm9yKHQsIGVycikKCWFzc2VydC5Ob3ROaWwodCwgY2xpZW50KQoJY2xpZW50LlNldEVycm9yRGVjb2RlcihmdW5jKHJlcyAqaHR0cC5SZXNwb25zZSkgZXJyb3IgewoJCWFzc2VydC5Ob3ROaWwodCwgcmVzLkJvZHkpCgkJcmV0dXJuIGVycm9ycy5OZXcodHlwZXV0aWwuU3RyaW5nKHJlcy5Cb2R5KSkKCX0pCglOZXRyY0ZpbGUgPSBmaWxldXRpbC5NdXN0V3JpdGVUZW1wRmlsZSgibWFjaGluZSAqIGxvZ2luIHRlc3QgcGFzc3dvcmQgdGVzdFxuIiwgInRlc3QtZ2hldHplbC1nby1zdG9ja3V0aWwtaHR0cHV0aWwiKQoJZGVmZXIgb3MuUmVtb3ZlKE5ldHJjRmlsZSkKCWNsaWVudC5TZXRBdXRvbWF0aWNMb2dpbih0cnVlKQoJcmVzcG9uc2UsIGVyciA6PSBjbGllbnQuUmVxdWVzdChQYXRjaCwgYC9gLCBuaWwsIG5pbCwgbmlsKQoJYXNzZXJ0Lk5vRXJyb3IodCwgZXJyKQoJYXNzZXJ0Lk5vdE5pbCh0LCByZXNwb25zZSkKCWFzc2VydC5FcXVhbCh0LCByZXNwb25zZS5TdGF0dXNDb2RlLCBodHRwLlN0YXR1c0FjY2VwdGVkKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDefaultClient",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDefaultClient(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgc2VydmVyID0gdGVzdEh0dHBTZXJ2ZXIoKQoJZGVmZXIgc2VydmVyLkNsb3NlKCkKCXZhciBkYXRhLCBlcnIgPSBHZXRCb2R5KHNlcnZlci5VUkwgKyBgL3Rlc3QvcGF0aGApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoWyAvLyBHRVQKCS8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgldYnl0ZSgie1wicGF0aFwiOlwiL3Rlc3QvcGF0aFwiLFwicXNcIjp7fX1cbiIpLCBkYXRhKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsMediaType",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsMediaType(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgcmVxID0gbXQoYHRleHQvcGxhaW47IGNoYXJzZXQ9dXRmLThgKQoJYXNzZXJ0LlRydWUoSXNNZWRpYVR5cGUocmVxLCBgdGV4dC9wbGFpbmApKQoJYXNzZXJ0LlRydWUoSXNNZWRpYVR5cGUocmVxLCBgdGV4dC9wbGFpbmAsIGB0ZXh0L2h0bWxgKSkKCWFzc2VydC5UcnVlKElzTWVkaWFUeXBlKHJlcSwgYHRleHQvYCkpCglhc3NlcnQuRmFsc2UoSXNNZWRpYVR5cGUocmVxKSkKCWFzc2VydC5GYWxzZShJc01lZGlhVHlwZShyZXEsIGB0ZXh0L2h0bWxgKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMediaType",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMediaType(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGAsIE1lZGlhVHlwZShtdChgYCkpKQoJYXNzZXJ0LkVxdWFsKGB0ZXh0L3BsYWluYCwgTWVkaWFUeXBlKG10KGB0ZXh0L3BsYWluYCkpKQoJYXNzZXJ0LkVxdWFsKGB0ZXh0L3BsYWluYCwgTWVkaWFUeXBlKG10KGB0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04YCkpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestNetrcPositive",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestNetrcPositive(t *testing.T)",
                        "Source": "ewoJTmV0cmNGaWxlID0gZmlsZXV0aWwuTXVzdFdyaXRlVGVtcEZpbGUoIm1hY2hpbmUgc3RvY2staHR0cHV0aWwtdGVzdCBsb2dpbiBoZWxsbyBwYXNzd29yZCB0aGVyZVxubWFjaGluZSBpbnRlbnRpb25hbGx5LWxlZnQtYmxhbmtcbiIsICJ0ZXN0LWdoZXR6ZWwtZ28tc3RvY2t1dGlsLWh0dHB1dGlsIikKCWRlZmVyIG9zLlJlbW92ZShOZXRyY0ZpbGUpCgl2YXIgdSwgcCwgb2sgPSBOZXRyY0NyZWRlbnRpYWxzKGBgKQoJcmVxdWlyZS5GYWxzZSh0LCBvaykKCXJlcXVpcmUuRW1wdHkodCwgdSkKCXJlcXVpcmUuRW1wdHkodCwgcCkKCXUsIHAsIG9rID0gTmV0cmNDcmVkZW50aWFscyhgbm9wZWApCglyZXF1aXJlLkZhbHNlKHQsIG9rKQoJcmVxdWlyZS5FbXB0eSh0LCB1KQoJcmVxdWlyZS5FbXB0eSh0LCBwKQoJdSwgcCwgb2sgPSBOZXRyY0NyZWRlbnRpYWxzKGBpbnRlbnRpb25hbGx5LWxlZnQtYmxhbmtgKQoJcmVxdWlyZS5GYWxzZSh0LCBvaykKCXJlcXVpcmUuRW1wdHkodCwgdSkKCXJlcXVpcmUuRW1wdHkodCwgcCkKCXUsIHAsIG9rID0gTmV0cmNDcmVkZW50aWFscyhgc3RvY2staHR0cHV0aWwtdGVzdGApCglyZXF1aXJlLlRydWUodCwgb2spCglyZXF1aXJlLkVxdWFsKHQsIGBoZWxsb2AsIHUpCglyZXF1aXJlLkVxdWFsKHQsIGB0aGVyZWAsIHApCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestParseFormValues",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestParseFormValues(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgdDEgPSB0ZXN0T3V0cHV0T25le1VSTDogYGh0dHA6Ly90ZXN0YH0KCWFzc2VydC5Ob0Vycm9yKFBhcnNlRm9ybVZhbHVlcyh1cmwuVmFsdWVze2BuYW1lYDogW11zdHJpbmd7YFRlc3RlcmB9LCBgQ291bnRgOiBbXXN0cmluZ3tgNDJgfSwgYG9rMWA6IFtdc3RyaW5ne2B0cnVlYH0sIGBPazJgOiBbXXN0cmluZ3tgb25gfSwgYE9LM2A6IFtdc3RyaW5ne2BvZmZgfSwgYGxvbC4wYDogW11zdHJpbmd7YHplcm9gfSwgYGxvbC4xYDogW11zdHJpbmd7YG9uZWB9LCBgbG9sLjJgOiBbXXN0cmluZ3tgdHdvYH0sIGBuaWxvbFtdYDogW11zdHJpbmd7YGZpcnN0YCwgYHNlY29uZGAsIGB0aGlyZGB9LCBgb25lc2llW11gOiBbXXN0cmluZ3tgdW5vYH0sIGB0d29zaWVbMF1baGVsbG9dYDogW11zdHJpbmd7YHRoZXJlYH0sIGBlbXB0eWA6IG5pbH0sICZ0MSkpCglhc3NlcnQuRXF1YWwoYGAsIHQxLkVtcHR5KQoJYXNzZXJ0LkVxdWFsKGBUZXN0ZXJgLCB0MS5OYW1lKQoJYXNzZXJ0LkVxdWFsKGBodHRwOi8vdGVzdGAsIHQxLlVSTCkKCWFzc2VydC5FcXVhbChpbnQ2NCg0MiksIHQxLkNvdW50KQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2B6ZXJvYCwgYG9uZWAsIGB0d29gfSwgdDEuTE9MKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BmaXJzdGAsIGBzZWNvbmRgLCBgdGhpcmRgfSwgdDEuTm9uSW5kZXhlZExPTCkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgdW5vYH0sIHQxLk9uZXNpZSkKCWFzc2VydC5FcXVhbChbXW1hcFtzdHJpbmddYW55e3tgaGVsbG9gOiBgdGhlcmVgfX0sIHQxLlR3b3NpZSkKCWFzc2VydC5UcnVlKHQxLk9rMSkKCWFzc2VydC5UcnVlKHQxLk9rMikKCWFzc2VydC5GYWxzZSh0MS5PazMpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestQueryStringModify",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestQueryStringModify(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl1LCBlcnIgOj0gdXJsLlBhcnNlKGBodHRwczovL2V4YW1wbGUuY29tYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5Ob3ROaWwodSkKCVNldFEodSwgYHRlc3RgLCBmYWxzZSkKCVNldFEodSwgYHRlc3RgLCB0cnVlKQoJQWRkUSh1LCBgdGVzdDJgLCAxKQoJQWRkUSh1LCBgdGVzdDJgLCAzKQoJU2V0USh1LCBgbm9wZWAsIHRydWUpCglEZWxRKHUsIGBub3BlYCkKCWFzc2VydC5FcXVhbCh1LlN0cmluZygpLCBgaHR0cHM6Ly9leGFtcGxlLmNvbT90ZXN0PXRydWUmdGVzdDI9MSZ0ZXN0Mj0zYCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestQueryStringStringModify",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestQueryStringStringModify(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGh0dHBzOi8vZXhhbXBsZS5jb20/dGVzdD1mYWxzZWAsIFNldFFTdHJpbmcoYGh0dHBzOi8vZXhhbXBsZS5jb21gLCBgdGVzdGAsIGZhbHNlKSkKCWFzc2VydC5FcXVhbChgaHR0cHM6Ly9leGFtcGxlLmNvbT90ZXN0PXRydWVgLCBTZXRRU3RyaW5nKGBodHRwczovL2V4YW1wbGUuY29tYCwgYHRlc3RgLCB0cnVlKSkKCXZhciB4ID0gYGh0dHBzOi8vZXhhbXBsZS5jb21gCgl4ID0gQWRkUVN0cmluZyh4LCBgdGVzdDJgLCAxKQoJeCA9IEFkZFFTdHJpbmcoeCwgYHRlc3QyYCwgMykKCWFzc2VydC5FcXVhbChgaHR0cHM6Ly9leGFtcGxlLmNvbT90ZXN0Mj0xJnRlc3QyPTNgLCB4KQoJYXNzZXJ0LkVxdWFsKGBodHRwczovL2V4YW1wbGUuY29tYCwgRGVsUVN0cmluZyhgaHR0cHM6Ly9leGFtcGxlLmNvbT9ub3BlPWxvbGAsIGBub3BlYCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestQueryStringStringModifyPathOnly",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestQueryStringStringModifyPathOnly(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYC9zb21lL3BhdGg/dGVzdD1mYWxzZWAsIFNldFFTdHJpbmcoYC9zb21lL3BhdGhgLCBgdGVzdGAsIGZhbHNlKSkKCWFzc2VydC5FcXVhbChgL3NvbWUvcGF0aD90ZXN0PXRydWVgLCBTZXRRU3RyaW5nKGAvc29tZS9wYXRoYCwgYHRlc3RgLCB0cnVlKSkKCXZhciB4ID0gYC9zb21lL3BhdGhgCgl4ID0gQWRkUVN0cmluZyh4LCBgdGVzdDJgLCAxKQoJeCA9IEFkZFFTdHJpbmcoeCwgYHRlc3QyYCwgMykKCWFzc2VydC5FcXVhbChgL3NvbWUvcGF0aD90ZXN0Mj0xJnRlc3QyPTNgLCB4KQoJYXNzZXJ0LkVxdWFsKGAvc29tZS9wYXRoYCwgRGVsUVN0cmluZyhgL3NvbWUvcGF0aD9ub3BlPWxvbGAsIGBub3BlYCkpCn0=",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "Client": {
                        "Name": "Client",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "AppendTrustedRootCA",
                                "Comment": "Append one or more trusted certificates to the RootCA bundle that is consulted when performing HTTPS requests.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "pemFilenamesOrData",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "AppendTrustedRootCA(pemFilenamesOrData ...any) error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "ClearHeaders",
                                "Comment": "Remove all implicit HTTP request headers.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Signature": "ClearHeaders()",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "ClearParams",
                                "Comment": "Remove all implicit querystring parameters.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Signature": "ClearParams()",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Client",
                                "Comment": "Returns the HTTP client used to perform requests",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "*http.Client"
                                    }
                                ],
                                "Signature": "Client() *http.Client",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Decode",
                                "Comment": "Decode a response and, if applicable, automatically close the reader.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "r",
                                        "Type": "io.Reader"
                                    },
                                    {
                                        "Name": "out",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Decode(r io.Reader, out any) error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Delete",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "path",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "params",
                                        "Type": "map[string]any"
                                    },
                                    {
                                        "Name": "headers",
                                        "Type": "map[string]any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*http.Response"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Delete(path string, params map[string]any, headers map[string]any) (*http.Response, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Encode",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Encode(in any) ([]byte, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Get",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "path",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "params",
                                        "Type": "map[string]any"
                                    },
                                    {
                                        "Name": "headers",
                                        "Type": "map[string]any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*http.Response"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Get(path string, params map[string]any, headers map[string]any) (*http.Response, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "GetWithBody",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "path",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "body",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "params",
                                        "Type": "map[string]any"
                                    },
                                    {
                                        "Name": "headers",
                                        "Type": "map[string]any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*http.Response"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "GetWithBody(path string, body any, params map[string]any, headers map[string]any) (*http.Response, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Headers",
                                "Comment": "Return the headers set on this client.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "http.Header"
                                    }
                                ],
                                "Signature": "Headers() http.Header",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MustClient",
                                "Arguments": [
                                    {
                                        "Name": "baseURI",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Client"
                                    }
                                ],
                                "Signature": "MustClient(baseURI string) *Client",
                                "Source": "ewoJaWYgYywgZXJyIDo9IE5ld0NsaWVudChiYXNlVVJJKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIGMKCX0gZWxzZSB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9Cn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "NewClient",
                                "Arguments": [
                                    {
                                        "Name": "baseURI",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Client"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "NewClient(baseURI string) (*Client, error)",
                                "Source": "ewoJdmFyIGNsaWVudCA9ICZDbGllbnR7ZW5jb2RlcjogSlNPTkVuY29kZXIsIGRlY29kZXI6IEpTT05EZWNvZGVyLCBoZWFkZXJzOiBtYWtlKG1hcFtzdHJpbmddYW55KSwgcGFyYW1zOiBtYWtlKG1hcFtzdHJpbmddYW55KSwgaHR0cENsaWVudDogaHR0cC5EZWZhdWx0Q2xpZW50fQoJaWYgYmFzZVVSSSAhPSBgYCB7CgkJaWYgdXJpLCBlcnIgOj0gdXJsLlBhcnNlKGJhc2VVUkkpOyBlcnIgPT0gbmlsIHsKCQkJY2xpZW50LnVyaSA9IHVyaQoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGVycgoJCX0KCX0gZWxzZSB7CgkJY2xpZW50LnVyaSA9IG5ldyh1cmwuVVJMKQoJfQoJaWYgbG9nLlZlcnlEZWJ1Z2dpbmcoYGdpdGh1Yi5jb20vZ2hldHplbC9nby1zdG9ja3V0aWwvaHR0cHV0aWxgKSB7CgkJY2xpZW50LlNldFByZVJlcXVlc3RIb29rKGZ1bmMocmVxICpodHRwLlJlcXVlc3QpIChhbnksIGVycm9yKSB7CgkJCWlmIGRhdGEsIGVyciA6PSBnb2h0dHB1dGlsLkR1bXBSZXF1ZXN0KHJlcSwgdHJ1ZSk7IGVyciA9PSBuaWwgewoJCQkJbG9nLkRlYnVnZigiaHR0cHV0aWwgJHtibHVlfVx1MjU2ZFx1MjUwMFsgSFRUUCBSZXF1ZXN0IF0lc1x1MjUwNFx1MjUwNFx1MjUwNCR7cmVzZXR9Iiwgc3RyaW5ncy5SZXBlYXQoIlx1MjUwMCIsIERlYnVnT3V0cHV0Qm94V2lkdGgtMTcpKQoJCQkJbG9nLkRlYnVnZigiaHR0cHV0aWwgJHtibHVlfVx1MjUwMiR7cmVzZXR9IFx1MjFjOSAldiIsIHJlcS5VUkwpCgkJCQlsb2cuRGVidWdmKCJodHRwdXRpbCAke2JsdWV9XHUyNTAyJHtyZXNldH0iKQoJCQkJZm9yIF8sIGxpbmUgOj0gcmFuZ2Ugc3RyaW5ncy5TcGxpdChzdHJpbmcoZGF0YSksICJcbiIpIHsKCQkJCQlsaW5lID0gc3RyaW5ncy5UcmltU3BhY2UobGluZSkKCQkJCQlsb2cuRGVidWdmKCJodHRwdXRpbCAke2JsdWV9XHUyNTAyJHtyZXNldH0gJXYiLCBsaW5lKQoJCQkJfQoJCQkJbG9nLkRlYnVnZigiaHR0cHV0aWwgJHtibHVlfVx1MjU3MCVzXHUyNTA0XHUyNTA0XHUyNTA0JHtyZXNldH0iLCBzdHJpbmdzLlJlcGVhdCgiXHUyNTAwIiwgRGVidWdPdXRwdXRCb3hXaWR0aCkpCgkJCX0KCQkJcmV0dXJuIG5pbCwgbmlsCgkJfSkKCQljbGllbnQuU2V0UG9zdFJlcXVlc3RIb29rKGZ1bmMocmVzICpodHRwLlJlc3BvbnNlLCBfIGFueSkgZXJyb3IgewoJCQlpZiBkYXRhLCBlcnIgOj0gZ29odHRwdXRpbC5EdW1wUmVzcG9uc2UocmVzLCB0cnVlKTsgZXJyID09IG5pbCB7CgkJCQlsb2cuRGVidWdmKCJodHRwdXRpbCBcdTI1NmRcdTI1MDBbIEhUVFAgUmVzcG9uc2UgXSVzXHUyNTA0XHUyNTA0XHUyNTA0Iiwgc3RyaW5ncy5SZXBlYXQoIlx1MjUwMCIsIERlYnVnT3V0cHV0Qm94V2lkdGgtMTgpKQoJCQkJaWYgcmVzLlJlcXVlc3QgIT0gbmlsIHsKCQkJCQlsb2cuRGVidWdmKCJodHRwdXRpbCAke3JlZH1cdTI1MDIke3Jlc2V0fSBcdTIxYzcgJXYiLCByZXMuUmVxdWVzdC5VUkwpCgkJCQkJbG9nLkRlYnVnZigiaHR0cHV0aWwgJHtyZWR9XHUyNTAyJHtyZXNldH0iKQoJCQkJfQoJCQkJZm9yIF8sIGxpbmUgOj0gcmFuZ2Ugc3RyaW5ncy5TcGxpdChzdHJpbmcoZGF0YSksICJcbiIpIHsKCQkJCQlsaW5lID0gc3RyaW5ncy5UcmltU3BhY2UobGluZSkKCQkJCQlsb2cuRGVidWdmKCJodHRwdXRpbCBcdTI1MDIgJXYiLCBsaW5lKQoJCQkJfQoJCQkJbG9nLkRlYnVnZigiaHR0cHV0aWwgXHUyNTcwJXNcdTI1MDRcdTI1MDRcdTI1MDQiLCBzdHJpbmdzLlJlcGVhdCgiXHUyNTAwIiwgRGVidWdPdXRwdXRCb3hXaWR0aCkpCgkJCX0KCQkJcmV0dXJuIG5pbAoJCX0pCgl9CglyZXR1cm4gY2xpZW50LCBuaWwKfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Params",
                                "Comment": "Return the params set on this client.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "map[string]any"
                                    }
                                ],
                                "Signature": "Params() map[string]any",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Post",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "path",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "body",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "params",
                                        "Type": "map[string]any"
                                    },
                                    {
                                        "Name": "headers",
                                        "Type": "map[string]any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*http.Response"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Post(path string, body any, params map[string]any, headers map[string]any) (*http.Response, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Put",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "path",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "body",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "params",
                                        "Type": "map[string]any"
                                    },
                                    {
                                        "Name": "headers",
                                        "Type": "map[string]any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*http.Response"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Put(path string, body any, params map[string]any, headers map[string]any) (*http.Response, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Request",
                                "Comment": "Perform an HTTP request",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "method",
                                        "Type": "Method"
                                    },
                                    {
                                        "Name": "path",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "body",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "params",
                                        "Type": "map[string]any"
                                    },
                                    {
                                        "Name": "headers",
                                        "Type": "map[string]any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*http.Response"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Request(method Method, path string, body any, params map[string]any, headers map[string]any) (*http.Response, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "RequestWithContext",
                                "Comment": "Perform an HTTP request using the given context",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "ctx",
                                        "Type": "context.Context"
                                    },
                                    {
                                        "Name": "method",
                                        "Type": "Method"
                                    },
                                    {
                                        "Name": "path",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "body",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "params",
                                        "Type": "map[string]any"
                                    },
                                    {
                                        "Name": "headers",
                                        "Type": "map[string]any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*http.Response"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "RequestWithContext(ctx context.Context, method Method, path string, body any, params map[string]any, headers map[string]any) (*http.Response, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetAutomaticLogin",
                                "Comment": "Specify that the NetrcFile (default: ~/.netrc) should be consulted before each\nrequest to supply basic authentication.  If a non-empty username or password is\nfound for the",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "on",
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "SetAutomaticLogin(on bool)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetBasicAuth",
                                "Comment": "Set the username and password to be included in the Authorization header.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "username",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "password",
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "SetBasicAuth(username string, password string)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetClient",
                                "Comment": "Replace the default HTTP client with a user-provided one",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "client",
                                        "Type": "*http.Client"
                                    }
                                ],
                                "Signature": "SetClient(client *http.Client)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetDecoder",
                                "Comment": "Specify a decoder that will be used to deserialize data in the response body.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "DecoderFunc"
                                    }
                                ],
                                "Signature": "SetDecoder(fn DecoderFunc)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetEncoder",
                                "Comment": "Specify an encoder that will be used to serialize data in the request body.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "EncoderFunc"
                                    }
                                ],
                                "Signature": "SetEncoder(fn EncoderFunc)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetErrorDecoder",
                                "Comment": "Specify a different decoder used to deserialize non 2xx/3xx HTTP responses.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "ErrorDecoderFunc"
                                    }
                                ],
                                "Signature": "SetErrorDecoder(fn ErrorDecoderFunc)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetHeader",
                                "Comment": "Add an HTTP request header by name that will be included in every request. If\nvalue is nil, the named header will be removed instead.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "name",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "SetHeader(name string, value any)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetInitHook",
                                "Comment": "Specify a function that will be called immediately before the first request is sent.\nThis function has an opportunity to read and modify the outgoing request, and\nif it returns a non-nil error, the request will not be sent.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "InitRequestFunc"
                                    }
                                ],
                                "Signature": "SetInitHook(fn InitRequestFunc)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetInsecureTLS",
                                "Comment": "Set or unset insecure TLS requests that will proceed even if the peer certificate cannot be verified.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "insecure",
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "SetInsecureTLS(insecure bool)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetParam",
                                "Comment": "Add a querystring parameter by name that will be included in every request. If\nvalue is nil, the parameter will be removed instead.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "name",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "SetParam(name string, value any)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetPostRequestHook",
                                "Comment": "Specify a function tht will be called immediately after a response is received.\nThis function is given the first opportunity to inspect the response, and if it\nreturns a non-nil error, no additional processing (including the Error Decoder function)\nwill be performed.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "InterceptResponseFunc"
                                    }
                                ],
                                "Signature": "SetPostRequestHook(fn InterceptResponseFunc)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetPreRequestHook",
                                "Comment": "Specify a function that will be called immediately before a request is sent.\nThis function has an opportunity to read and modify the outgoing request, and\nif it returns a non-nil error, the request will not be sent.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "InterceptRequestFunc"
                                    }
                                ],
                                "Signature": "SetPreRequestHook(fn InterceptRequestFunc)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetRootCA",
                                "Comment": "Replace the existing RootCA bundle with an explicit set of trusted certificates.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "pemFilenamesOrData",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "SetRootCA(pemFilenamesOrData ...any) error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "URI",
                                "Comment": "Return the base URI for this client.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "*url.URL"
                                    }
                                ],
                                "Signature": "URI() *url.URL",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "WithDecoder",
                                "Comment": "Return a copy of the current client that uses a different decoder.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "DecoderFunc"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Client"
                                    }
                                ],
                                "Signature": "WithDecoder(fn DecoderFunc) *Client",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "WithEncoder",
                                "Comment": "Return a copy of the current client that uses a different encoder.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "EncoderFunc"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Client"
                                    }
                                ],
                                "Signature": "WithEncoder(fn EncoderFunc) *Client",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBDbGllbnQgc3RydWN0IHsKCn0K",
                        "HasUnexportedFields": true
                    },
                    "DecoderFunc": {
                        "Name": "DecoderFunc",
                        "Source": "dHlwZSBEZWNvZGVyRnVuYyBmdW5jKGlvLlJlYWRlciwgYW55KSBlcnJvcg=="
                    },
                    "EncoderFunc": {
                        "Name": "EncoderFunc",
                        "Source": "dHlwZSBFbmNvZGVyRnVuYyBmdW5jKGFueSkgKGlvLlJlYWRlciwgZXJyb3Ip"
                    },
                    "ErrorDecoderFunc": {
                        "Name": "ErrorDecoderFunc",
                        "Source": "dHlwZSBFcnJvckRlY29kZXJGdW5jIGZ1bmMoKmh0dHAuUmVzcG9uc2UpIGVycm9y"
                    },
                    "InitRequestFunc": {
                        "Name": "InitRequestFunc",
                        "Source": "dHlwZSBJbml0UmVxdWVzdEZ1bmMgZnVuYygpIGVycm9y"
                    },
                    "InterceptRequestFunc": {
                        "Name": "InterceptRequestFunc",
                        "Source": "dHlwZSBJbnRlcmNlcHRSZXF1ZXN0RnVuYyBmdW5jKCpodHRwLlJlcXVlc3QpIChhbnksIGVycm9yKQ=="
                    },
                    "InterceptResponseFunc": {
                        "Name": "InterceptResponseFunc",
                        "Source": "dHlwZSBJbnRlcmNlcHRSZXNwb25zZUZ1bmMgZnVuYygqaHR0cC5SZXNwb25zZSwgYW55KSBlcnJvcg=="
                    },
                    "Literal": {
                        "Name": "Literal",
                        "Source": "dHlwZSBMaXRlcmFsIFtdYnl0ZQ=="
                    },
                    "LogLevel": {
                        "Name": "LogLevel",
                        "MetaType": "int",
                        "Source": "dHlwZSBMb2dMZXZlbCBpbnQ="
                    },
                    "Method": {
                        "Name": "Method",
                        "MetaType": "string",
                        "Source": "dHlwZSBNZXRob2Qgc3RyaW5n"
                    },
                    "MultipartFormFile": {
                        "Name": "MultipartFormFile",
                        "MetaType": "struct",
                        "Fields": [
                            {
                                "Name": "Filename",
                                "Type": "string"
                            },
                            {
                                "Name": "Data",
                                "Type": "io.Reader"
                            }
                        ],
                        "Source": "dHlwZSBNdWx0aXBhcnRGb3JtRmlsZSBzdHJ1Y3QgewoJRmlsZW5hbWUgc3RyaW5nICAgIGBqc29uOiJmaWxlbmFtZSJgCglEYXRhICAgICBpby5SZWFkZXIgYGpzb246ImRhdGEiYAp9"
                    },
                    "RequestLogger": {
                        "Name": "RequestLogger",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "NewRequestLogger",
                                "Returns": [
                                    {
                                        "Type": "*RequestLogger"
                                    }
                                ],
                                "Signature": "NewRequestLogger() *RequestLogger",
                                "Source": "ewoJcmV0dXJuICZSZXF1ZXN0TG9nZ2Vye30KfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "ServeHTTP",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "rw",
                                        "Type": "http.ResponseWriter"
                                    },
                                    {
                                        "Name": "req",
                                        "Type": "*http.Request"
                                    },
                                    {
                                        "Name": "next",
                                        "Type": "http.HandlerFunc"
                                    }
                                ],
                                "Signature": "ServeHTTP(rw http.ResponseWriter, req *http.Request, next http.HandlerFunc)",
                                "IsPackageLevel": false
                            }
                        ],
                        "Comment": "Deprecated: this type will go away in 1.9.x",
                        "Source": "dHlwZSBSZXF1ZXN0TG9nZ2VyIHN0cnVjdHt9IC8vIERlcHJlY2F0ZWQ6IHRoaXMgdHlwZSB3aWxsIGdvIGF3YXkgaW4gMS45LngK"
                    },
                    "RequestParseFunc": {
                        "Name": "RequestParseFunc",
                        "Source": "dHlwZSBSZXF1ZXN0UGFyc2VGdW5jIGZ1bmMoKmh0dHAuUmVxdWVzdCwgYW55KSBlcnJvcg=="
                    },
                    "WritableLogger": {
                        "Name": "WritableLogger",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "NewWritableLogger",
                                "Arguments": [
                                    {
                                        "Name": "level",
                                        "Type": "LogLevel"
                                    },
                                    {
                                        "Name": "prefix",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*WritableLogger"
                                    }
                                ],
                                "Signature": "NewWritableLogger(level LogLevel, prefix ...string) *WritableLogger",
                                "Source": "ewoJcmV0dXJuICZXcml0YWJsZUxvZ2dlcntwcmVmaXg6IHN0cmluZ3MuSm9pbihwcmVmaXgsIGBgKX0KfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Write",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "p",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Write(p []byte) (int, error)",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBXcml0YWJsZUxvZ2dlciBzdHJ1Y3QgewoKfQo=",
                        "HasUnexportedFields": true
                    }
                }
            },
            {
                "Name": "log",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/log",
                "ImportPath": "log",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Package log package provides convenient and flexible utilities for logging messages.\n\n# Overview\n\nLogging is done by calling functions in this package that correspond to the\nseverity of the log message being output.  At the package level, a minimum\nseverity can be set.  Messages less severe than this minimum logging level will\nnot be output.\n\n# Color Expressions\n\nIn addition to the standard printf-style formatting options (as defined in the\nstandard fmt package), this package supports inline expressions that control the\noutput of ANSI terminal escape sequences.  These expressions allow for a simple\nmechanism to colorize log output, as well as applying graphical effects like\nbold, underline, and blinking text (for terminals that support it).\n\nBy default, color expressions will only be honored if os.Stdin is attached to a\npseudoterminal.  This is the case when the program is run on the command line\nand is not piped or redirected to another file.  This default ensures that the\ncolors are visible only in a visual context, but do not corrupt files or\npipelines with ANSI escape sequences.  Color sequences can be explicitly enabled\nor disabled by setting the EnableColorExpressions package variable.\n\nUsing color expressions in format strings is done by wrapping the expression in\n${expr}.  The general format for color expressions is:\n\n\tforegroundColor[+attributes[:backgroundColor[+attributes]]]\n\nColors (foreground and background):\n\n\tblack\n\tred\n\tgreen\n\tyellow\n\tblue\n\tmagenta\n\tcyan\n\twhite\n\t[0-255]: numeric 8-bit color (for 256 color terminals)\n\treset: Reset all color and graphics attributes to their defaults\n\nForeground Attributes:\n\n\tb: bold text\n\tB: blinking text\n\th: high-intensity (bright text)\n\ti: inverted/reverse colors\n\ts: strikethrough\n\tu: underline\n\nBackground Attributes:\n\n\th: high-intensity (bright text)\n\n# Examples\n\nBelow are some examples showing various formatting options for logs.\n\n\tlog.Info(\"Hello, world!\")\n\t// [11:22:33 0001] INFO Hello, world!\n\n\tlog.Warningf(\"The %q operation could not be completed.\", \"add\")\n\t// [11:22:33 0002] WARN The \"add\" operation could not be completed.\n\n\tlog.Errorf(\"There was an ${red}error${reset} opening file ${blue+b:white}%s${reset}\", filename)\n\t// [11:22:33 0003] ERRO There was an error opening file /tmp/file.txt\n\t//                                   ^^^^^              ^^^^^^^^^^^^^\n\t//                                   red text           blue text on white background\n\n# Log Interception\n\nIt is sometimes useful to be able to act on logs as they are emitted, especially in cases where this\npackage is used in other projects that are imported.  Log Interceptors are called before each log\nline is emitted.  The LogInterceptFunc is called with the level the message was emitted with, the\nmessage itself as a string, and a stack trace struct that defines exactly where the log was emitted\nfrom.\n\n\t// print a complete stack trace before every debug-level message that is encountered\n\tlog.AddLogIntercept(func(level log.Level, line string, stack log.StackItems){\n\t\tif level == log.DEBUG {\n\t\t\tfor _, item := range stack {\n\t\t\t\tfmt.Println(item.String())\n\t\t\t}\n\t\t}\n\t})\n\n# Writable Logger\n\nThe WritableLogger implements the io.Writer interface, acting as a bridge between byte streams from\nvarious sources and the log package.  This is frequently useful in situations like parsing the\noutput of other programs.  A WritableLogger accepts a custom LogParseFunc that allows individual\nlines being written to the WritableLogger to be parsed, rewritten, and given a log severity level.\n\n\timport (\n\t\t\"os/exec\"\n\t\t\"github.com/ghetzel/go-stockutil/log\"\n\t)\n\n\tvar wr = log.NewWritableLogger(log.INFO, `ls: `)\n\n\twr.SetParserFunc(func(line string) (log.Level, string) {\n\t\tif strings.Contains(line, `root`) {\n\t\t\t// root-owned files show up as errors\n\t\t\treturn log.ERROR, line\n\t\t} else if strings.Contains(line, os.Getenv(`USER`)) {\n\t\t\t// current user files are notices\n\t\t\treturn log.NOTICE, line\n\t\t} else {\n\t\t\t// all other lines are not logged at all\n\t\t\treturn log.DEBUG, ``\n\t\t}\n\t})\n\n\tvar ls = exec.Command(`ls`, `-l`)\n\tls.Stdout = wr\n\tls.Run()\n",
                "MainFunction": false,
                "CommentWordCount": 1139,
                "LineCount": 1046,
                "SourceLineCount": 794,
                "FunctionCount": 59,
                "TypeCount": 10,
                "ConstantCount": 8,
                "VariableCount": 8,
                "Statistics": {
                    "Mean": 0.2519,
                    "StdDev": 0.4278,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 0,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "colors.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "regexp",
                                "Alias": "regexp"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/rxutil",
                                "Alias": "rxutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/mgutz/ansi",
                                "Alias": "ansi"
                            }
                        ],
                        "Size": 1568,
                        "LineCount": 61,
                        "SourceLineCount": 43,
                        "FunctionCount": 4,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 2
                    },
                    {
                        "Name": "colors_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 3232,
                        "LineCount": 49,
                        "SourceLineCount": 40,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "debugging.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "runtime",
                                "Alias": "runtime"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/gobwas/glob",
                                "Alias": "glob"
                            }
                        ],
                        "Size": 2723,
                        "LineCount": 127,
                        "SourceLineCount": 98,
                        "FunctionCount": 5,
                        "TypeCount": 2,
                        "ConstantCount": 0,
                        "VariableCount": 1
                    },
                    {
                        "Name": "doc.go",
                        "Size": 4114,
                        "LineCount": 121,
                        "SourceLineCount": 84,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "errors.go",
                        "Imports": [
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 1340,
                        "LineCount": 50,
                        "SourceLineCount": 36,
                        "FunctionCount": 3,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "errors_test.go",
                        "Imports": [
                            {
                                "PackageName": "errors",
                                "Alias": "errors"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 2247,
                        "LineCount": 78,
                        "SourceLineCount": 63,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "levels.go",
                        "Imports": [
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            }
                        ],
                        "Size": 803,
                        "LineCount": 61,
                        "SourceLineCount": 55,
                        "FunctionCount": 2,
                        "TypeCount": 1,
                        "ConstantCount": 8,
                        "VariableCount": 0
                    },
                    {
                        "Name": "log.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/json",
                                "Alias": "json"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "sync",
                                "Alias": "sync"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/hashicorp/go-multierror",
                                "Alias": "multierror"
                            },
                            {
                                "PackageName": "github.com/mattn/go-isatty",
                                "Alias": "isatty"
                            },
                            {
                                "PackageName": "github.com/op/go-logging",
                                "Alias": "go-logging"
                            }
                        ],
                        "Size": 9312,
                        "LineCount": 406,
                        "SourceLineCount": 301,
                        "FunctionCount": 37,
                        "TypeCount": 4,
                        "ConstantCount": 0,
                        "VariableCount": 5
                    },
                    {
                        "Name": "timing.go",
                        "Imports": [
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            }
                        ],
                        "Size": 741,
                        "LineCount": 48,
                        "SourceLineCount": 39,
                        "FunctionCount": 5,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "writable.go",
                        "Imports": [
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            }
                        ],
                        "Size": 793,
                        "LineCount": 45,
                        "SourceLineCount": 35,
                        "FunctionCount": 3,
                        "TypeCount": 2,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Constants": [
                    {
                        "Name": "CRITICAL",
                        "Immutable": true
                    },
                    {
                        "Name": "DEBUG",
                        "Immutable": true
                    },
                    {
                        "Name": "ERROR",
                        "Immutable": true
                    },
                    {
                        "Name": "FATAL",
                        "Immutable": true
                    },
                    {
                        "Name": "INFO",
                        "Immutable": true
                    },
                    {
                        "Name": "NOTICE",
                        "Immutable": true
                    },
                    {
                        "Name": "PANIC",
                        "Type": "Level",
                        "Immutable": true,
                        "Expression": "iota"
                    },
                    {
                        "Name": "WARNING",
                        "Immutable": true
                    }
                ],
                "Variables": [
                    {
                        "Name": "DefaultInterceptStackDepth",
                        "Type": "int",
                        "Expression": "5"
                    },
                    {
                        "Name": "EnableColorExpressions"
                    },
                    {
                        "Name": "LogLevel",
                        "Type": "Level",
                        "Comment": "The LOGLEVEL environment variable has final say over the effective log level\nfor all users of this package."
                    },
                    {
                        "Name": "MaxStackTraceDepth",
                        "Expression": "32"
                    },
                    {
                        "Name": "ModuleName",
                        "Expression": "``"
                    },
                    {
                        "Name": "SynchronousIntercepts",
                        "Expression": "false"
                    },
                    {
                        "Name": "TerminalEscapePrefix",
                        "Expression": "`\\[`",
                        "Value": "\\["
                    },
                    {
                        "Name": "TerminalEscapeSuffix",
                        "Expression": "`\\]`",
                        "Value": "\\]"
                    }
                ],
                "Functions": [
                    {
                        "Name": "AddLogFilter",
                        "Comment": "Append a function to be called for every line logged.  If the function\nreturns false, the line will be dropped (will not be logged or intercepted).",
                        "Arguments": [
                            {
                                "Name": "fn",
                                "Type": "LogFilterFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "AddLogFilter(fn LogFilterFunc) string",
                        "Source": "ewoJdmFyIGlkID0gc3RyaW5ndXRpbC5VVUlEKCkuU3RyaW5nKCkKCWZpbHRlcnMuU3RvcmUoaWQsIGZuKQoJcmV0dXJuIGlkCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "AddLogIntercept",
                        "Comment": "Append a function to be called (asynchronously in its own goroutine, or\nsynchronously if SynchronousIntercepts is true) for every line logged.\nReturns a UUID that can be later used to deregister the intercept function.",
                        "Arguments": [
                            {
                                "Name": "fn",
                                "Type": "LogInterceptFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "AddLogIntercept(fn LogInterceptFunc) string",
                        "Source": "ewoJdmFyIGlkID0gc3RyaW5ndXRpbC5VVUlEKCkuU3RyaW5nKCkKCWludGVyY2VwdHMuU3RvcmUoaWQsIGZuKQoJcmV0dXJuIGlkCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "AppendError",
                        "Comment": "Appends one error to another, allowing for operations that return multiple errors\nto remain compatible within a single-valued context.",
                        "Arguments": [
                            {
                                "Name": "base",
                                "Type": "error"
                            },
                            {
                                "Name": "err",
                                "Type": "error"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "AppendError(base error, err error) error",
                        "Source": "ewoJaWYgZXJyID09IG5pbCB7CgkJcmV0dXJuIGJhc2UKCX0gZWxzZSB7CgkJcmV0dXJuIG11bHRpZXJyb3IuQXBwZW5kKGJhc2UsIGVycikKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "CFPrintf",
                        "Arguments": [
                            {
                                "Name": "w",
                                "Type": "io.Writer"
                            },
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "CFPrintf(w io.Writer, format string, args ...any) (int, error)",
                        "Source": "ewoJcmV0dXJuIGZtdC5GcHJpbnQodywgQ1NwcmludGYoZm9ybWF0LCBhcmdzLi4uKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "CSprintf",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "CSprintf(format string, args ...any) string",
                        "Source": "ewoJcmV0dXJuIGNzcHJpbnRmKGZhbHNlLCB0cnVlLCBmb3JtYXQsIGFyZ3MuLi4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "CStripf",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "CStripf(format string, args ...any) string",
                        "Source": "ewoJcmV0dXJuIGNzcHJpbnRmKGZhbHNlLCBmYWxzZSwgZm9ybWF0LCBhcmdzLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Confirm",
                        "Arguments": [
                            {
                                "Name": "prompt",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "Confirm(prompt string) bool",
                        "Source": "ewoJcmV0dXJuIENvbmZpcm1mKCIldiIsIHByb21wdCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Confirmf",
                        "Comment": "Present a confirmation prompt. The function returns true if the user interactively responds\nwith \"yes\" or \"y\". Otherwise the function returns false.",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "Confirmf(format string, args ...any) bool",
                        "Source": "ewoJdmFyIHJlc3BvbnNlIHN0cmluZwoJZm10LlByaW50Zihmb3JtYXQsIGFyZ3MuLi4pCglpZiBfLCBlcnIgOj0gZm10LlNjYW5sbigmcmVzcG9uc2UpOyBlcnIgIT0gbmlsIHsKCQlwYW5pYyhlcnIuRXJyb3IoKSkKCX0KCWZvciBfLCBva2F5IDo9IHJhbmdlIFtdc3RyaW5ne2B5YCwgYHllc2B9IHsKCQlpZiBzdHJpbmdzLlRvTG93ZXIob2theSkgPT0gc3RyaW5ncy5Ub0xvd2VyKHJlc3BvbnNlKSB7CgkJCXJldHVybiB0cnVlCgkJfQoJfQoJcmV0dXJuIGZhbHNlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Critical",
                        "Arguments": [
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Critical(args ...any)",
                        "Source": "ewoJTG9nKENSSVRJQ0FMLCBhcmdzLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Criticalf",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Criticalf(format string, args ...any)",
                        "Source": "ewoJTG9nZihDUklUSUNBTCwgZm9ybWF0LCBhcmdzLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Debug",
                        "Arguments": [
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Debug(args ...any)",
                        "Source": "ewoJTG9nKERFQlVHLCBhcmdzLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DebugStack",
                        "Comment": "Logs the current stack trace as debug log output.",
                        "Signature": "DebugStack()",
                        "Source": "ewoJRGVidWcoIlN0YWNrIHRyYWNlOiIpCglmb3IgaSwgaXRlbSA6PSByYW5nZSBTdGFja1RyYWNlKDMpIHsKCQlmb3IgaiwgbGluZSA6PSByYW5nZSBzdHJpbmdzLlNwbGl0KGl0ZW0uU3RyaW5nKCksICJcbiIpIHsKCQkJaWYgaiA9PSAwIHsKCQkJCURlYnVnZigiICAlIDJkOiAldiIsIGksIGxpbmUpCgkJCX0gZWxzZSB7CgkJCQlEZWJ1Z2YoIiAgICAgICAgICAldiIsIGxpbmUpCgkJCX0KCQl9Cgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Debugf",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Debugf(format string, args ...any)",
                        "Source": "ewoJTG9nZihERUJVRywgZm9ybWF0LCBhcmdzLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Debugging",
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "Debugging() bool",
                        "Source": "ewoJcmV0dXJuIChMb2dMZXZlbCA9PSBERUJVRykKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Dump",
                        "Comment": "Pretty-print the given arguments to the log at debug-level.",
                        "Arguments": [
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Dump(args ...any)",
                        "Source": "ewoJZm9yIF8sIGFyZyA6PSByYW5nZSBhcmdzIHsKCQlMb2coTG9nTGV2ZWwsIHR5cGV1dGlsLkR1bXAoYXJnKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DumpJSON",
                        "Comment": "Marshal the arguments as indented JSON and log them at debug-level.",
                        "Arguments": [
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "DumpJSON(args ...any)",
                        "Source": "ewoJZm9yIF8sIGFyZyA6PSByYW5nZSBhcmdzIHsKCQlpZiBkYXRhLCBlcnIgOj0ganNvbi5NYXJzaGFsSW5kZW50KGFyZywgYGAsIGAgIGApOyBlcnIgPT0gbmlsIHsKCQkJTG9nKExvZ0xldmVsLCBzdHJpbmcoZGF0YSkpCgkJfSBlbHNlIHsKCQkJTG9nZihMb2dMZXZlbCwgIkR1bXBKU09OOiAldiIsIGVycikKCQl9Cgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Dumpf",
                        "Comment": "Same as Dump, but accepts a format string.",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Dumpf(format string, args ...any)",
                        "Source": "ewoJZm9yIF8sIGFyZyA6PSByYW5nZSBhcmdzIHsKCQlMb2dmKExvZ0xldmVsLCBmb3JtYXQsIHR5cGV1dGlsLkR1bXAoYXJnKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ErrContains",
                        "Comment": "Return whether the given error contains with the given message.  Message can\nbe a string or another error.  If either is nil, this function returns false.",
                        "Arguments": [
                            {
                                "Name": "err",
                                "Type": "error"
                            },
                            {
                                "Name": "message",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "ErrContains(err error, message any) bool",
                        "Source": "ewoJaWYgZW1zZywgbXNnLCBvayA6PSBwcmVjaGVjayhlcnIsIG1lc3NhZ2UpOyBvayB7CgkJcmV0dXJuIHN0cmluZ3MuQ29udGFpbnMoZW1zZywgbXNnKQoJfSBlbHNlIHsKCQlyZXR1cm4gZmFsc2UKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ErrHasPrefix",
                        "Comment": "Return whether the given error is prefixed with the given message.  Message can\nbe a string or another error.  If either is nil, this function returns false.",
                        "Arguments": [
                            {
                                "Name": "err",
                                "Type": "error"
                            },
                            {
                                "Name": "message",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "ErrHasPrefix(err error, message any) bool",
                        "Source": "ewoJaWYgZW1zZywgbXNnLCBvayA6PSBwcmVjaGVjayhlcnIsIG1lc3NhZ2UpOyBvayB7CgkJcmV0dXJuIHN0cmluZ3MuSGFzUHJlZml4KGVtc2csIG1zZykKCX0gZWxzZSB7CgkJcmV0dXJuIGZhbHNlCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ErrHasSuffix",
                        "Comment": "Return whether the given error is suffixed with the given message.  Message can\nbe a string or another error.  If either is nil, this function returns false.",
                        "Arguments": [
                            {
                                "Name": "err",
                                "Type": "error"
                            },
                            {
                                "Name": "message",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "ErrHasSuffix(err error, message any) bool",
                        "Source": "ewoJaWYgZW1zZywgbXNnLCBvayA6PSBwcmVjaGVjayhlcnIsIG1lc3NhZ2UpOyBvayB7CgkJcmV0dXJuIHN0cmluZ3MuSGFzU3VmZml4KGVtc2csIG1zZykKCX0gZWxzZSB7CgkJcmV0dXJuIGZhbHNlCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Error",
                        "Arguments": [
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Error(args ...any)",
                        "Source": "ewoJTG9nKEVSUk9SLCBhcmdzLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Errorf",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Errorf(format string, args ...any)",
                        "Source": "ewoJTG9nZihFUlJPUiwgZm9ybWF0LCBhcmdzLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Fatal",
                        "Arguments": [
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Fatal(args ...any)",
                        "Source": "ewoJTG9nKEZBVEFMLCBhcmdzLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "FatalIf",
                        "Comment": "Invoke Fatal() if the given error is not nil.",
                        "Arguments": [
                            {
                                "Name": "err",
                                "Type": "error"
                            }
                        ],
                        "Signature": "FatalIf(err error)",
                        "Source": "ewoJaWYgZXJyICE9IG5pbCB7CgkJRmF0YWwoZXJyKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Fatalf",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Fatalf(format string, args ...any)",
                        "Source": "ewoJTG9nZihGQVRBTCwgZm9ybWF0LCBhcmdzLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "FatalfIf",
                        "Comment": "Invoke Fatalf() if the given error is not nil.",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "err",
                                "Type": "error"
                            }
                        ],
                        "Signature": "FatalfIf(format string, err error)",
                        "Source": "ewoJaWYgZXJyICE9IG5pbCB7CgkJRmF0YWxmKGZvcm1hdCwgZXJyKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "FilterPackages",
                        "Comment": "Takes a list of package names (\"a/b/c\") or patterns (\"a/b/*\") whose log output\nwill be rejected.  If the package name or patterns matches any function in the\ncall stack, the associated message will be rejected.",
                        "Arguments": [
                            {
                                "Name": "patterns",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "FilterPackages(patterns ...string) string",
                        "Source": "ewoJcmV0dXJuIEFkZExvZ0ZpbHRlcihmdW5jKGxldmVsIExldmVsLCBsaW5lIHN0cmluZywgc3RhY2sgU3RhY2tJdGVtcykgYm9vbCB7CgkJZm9yIF8sIGl0ZW0gOj0gcmFuZ2Ugc3RhY2sgewoJCQlmb3IgXywgcGtnIDo9IHJhbmdlIHBhdHRlcm5zIHsKCQkJCWlmIGl0ZW0uSW5QYWNrYWdlKHBrZykgewoJCQkJCXJldHVybiBmYWxzZQoJCQkJfQoJCQl9CgkJfQoJCXJldHVybiB0cnVlCgl9KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Info",
                        "Arguments": [
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Info(args ...any)",
                        "Source": "ewoJTG9nKElORk8sIGFyZ3MuLi4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Infof",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Infof(format string, args ...any)",
                        "Source": "ewoJTG9nZihJTkZPLCBmb3JtYXQsIGFyZ3MuLi4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Log",
                        "Arguments": [
                            {
                                "Name": "level",
                                "Type": "Level"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Log(level Level, args ...any)",
                        "Source": "ewoJaWYgbGV2ZWwgPT0gRkFUQUwgJiYgbGVuKGFyZ3MpID09IDEgJiYgYXJnc1swXSA9PSBuaWwgewoJCXJldHVybgoJfQoJaW5pdExvZ2dpbmcoKQoJdmFyIGxpbmUgPSBzdHJpbmdzLkpvaW4oc2xpY2V1dGlsLlN0cmluZ2lmeShhcmdzKSwgYCBgKQoJdmFyIHN0YWNrID0gU3RhY2tUcmFjZShEZWZhdWx0SW50ZXJjZXB0U3RhY2tEZXB0aCkKCWlmIHNob3VsZFNraXAobGV2ZWwsIGxpbmUsIHN0YWNrKSB7CgkJcmV0dXJuCgl9CgljYWxsSW50ZXJjZXB0cyhsZXZlbCwgbGluZSwgc3RhY2spCglsb2cobGV2ZWwsIGFyZ3MuLi4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Logf",
                        "Arguments": [
                            {
                                "Name": "level",
                                "Type": "Level"
                            },
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Logf(level Level, format string, args ...any)",
                        "Source": "ewoJaW5pdExvZ2dpbmcoKQoJdmFyIGxpbmUgPSBmbXQuU3ByaW50Zihmb3JtYXQsIGFyZ3MuLi4pCgl2YXIgc3RhY2sgPSBTdGFja1RyYWNlKERlZmF1bHRJbnRlcmNlcHRTdGFja0RlcHRoKQoJaWYgc2hvdWxkU2tpcChsZXZlbCwgbGluZSwgc3RhY2spIHsKCQlyZXR1cm4KCX0KCWNhbGxJbnRlcmNlcHRzKGxldmVsLCBsaW5lLCBzdGFjaykKCWlmIEVuYWJsZUNvbG9yRXhwcmVzc2lvbnMgewoJCWxvZyhsZXZlbCwgQ1NwcmludGYoZm9ybWF0LCBhcmdzLi4uKSkKCX0gZWxzZSB7CgkJbG9nKGxldmVsLCBDU3RyaXBmKGZvcm1hdCwgYXJncy4uLikpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Logger",
                        "Returns": [
                            {
                                "Type": "*logging.Logger"
                            }
                        ],
                        "Signature": "Logger() *logging.Logger",
                        "Source": "ewoJaW5pdExvZ2dpbmcoKQoJcmV0dXJuIGRlZmF1bHRMb2dnZXIKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Notice",
                        "Arguments": [
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Notice(args ...any)",
                        "Source": "ewoJTG9nKE5PVElDRSwgYXJncy4uLikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Noticef",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Noticef(format string, args ...any)",
                        "Source": "ewoJTG9nZihOT1RJQ0UsIGZvcm1hdCwgYXJncy4uLikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Panic",
                        "Arguments": [
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Panic(args ...any)",
                        "Source": "ewoJTG9nKFBBTklDLCBhcmdzLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Panicf",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Panicf(format string, args ...any)",
                        "Source": "ewoJTG9nZihQQU5JQywgZm9ybWF0LCBhcmdzLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RemoveLogFilter",
                        "Comment": "Remove the previously-added log filter function.",
                        "Arguments": [
                            {
                                "Name": "id",
                                "Type": "string"
                            }
                        ],
                        "Signature": "RemoveLogFilter(id string)",
                        "Source": "ewoJZmlsdGVycy5EZWxldGUoaWQpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RemoveLogIntercept",
                        "Comment": "Remove the previously-added log intercept function.",
                        "Arguments": [
                            {
                                "Name": "id",
                                "Type": "string"
                            }
                        ],
                        "Signature": "RemoveLogIntercept(id string)",
                        "Source": "ewoJaW50ZXJjZXB0cy5EZWxldGUoaWQpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SetLevel",
                        "Arguments": [
                            {
                                "Name": "level",
                                "Type": "Level"
                            },
                            {
                                "Name": "modules",
                                "Type": "...string"
                            }
                        ],
                        "Signature": "SetLevel(level Level, modules ...string)",
                        "Source": "ewoJaW5pdExvZ2dpbmcoKQoJaWYgbHZsLCBlcnIgOj0gbG9nZ2luZy5Mb2dMZXZlbChsZXZlbC5TdHJpbmcoKSk7IGVyciA9PSBuaWwgewoJCWlmIGxlbihtb2R1bGVzKSA9PSAwIHsKCQkJbGV2ZWxlZC5TZXRMZXZlbChsdmwsIGBgKQoJCX0gZWxzZSB7CgkJCWZvciBfLCBtb2R1bGUgOj0gcmFuZ2UgbW9kdWxlcyB7CgkJCQlsZXZlbGVkLlNldExldmVsKGx2bCwgbW9kdWxlKQoJCQl9CgkJfQoJfSBlbHNlIHsKCQlmbXQuUHJpbnRmKCJbSU5WQUxJRCBMRVZFTCAldl0gIiwgbGV2ZWwpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SetLevelString",
                        "Arguments": [
                            {
                                "Name": "level",
                                "Type": "string"
                            },
                            {
                                "Name": "modules",
                                "Type": "...string"
                            }
                        ],
                        "Signature": "SetLevelString(level string, modules ...string)",
                        "Source": "ewoJU2V0TGV2ZWwoR2V0TGV2ZWwobGV2ZWwpLCBtb2R1bGVzLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SetOutput",
                        "Comment": "Set the destination Writer where logs will henceforth be written.",
                        "Arguments": [
                            {
                                "Name": "w",
                                "Type": "io.Writer"
                            }
                        ],
                        "Signature": "SetOutput(w io.Writer)",
                        "Source": "ewoJaW5pdExvZ2dpbmcoKQoJYmFja2VuZC5Mb2dnZXIuU2V0T3V0cHV0KHcpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TermSprintf",
                        "Comment": "Same as CSprintf, but wraps all replaced color sequences with terminal escape sequences\nas defined in TerminalEscapePrefix and TerminalEscapeSuffix",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "TermSprintf(format string, args ...any) string",
                        "Source": "ewoJcmV0dXJuIGNzcHJpbnRmKHRydWUsIHRydWUsIGZvcm1hdCwgYXJncy4uLikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "VeryDebugging",
                        "Arguments": [
                            {
                                "Name": "features",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "VeryDebugging(features ...string) bool",
                        "Source": "ewoJaWYgRGVidWdnaW5nKCkgewoJCXZhciBlbnZGZWF0dXJlcyA9IHN0cmluZ3MuU3BsaXQob3MuR2V0ZW52KGBERUJVR2ApLCBgLGApCgkJZm9yIF8sIGZlYXR1cmUgOj0gcmFuZ2UgZmVhdHVyZXMgewoJCQlmb3IgXywgZWYgOj0gcmFuZ2UgZW52RmVhdHVyZXMgewoJCQkJaWYgdHlwZXV0aWwuQm9vbChlZikgewoJCQkJCXJldHVybiB0cnVlCgkJCQl9IGVsc2UgaWYgc3RyaW5ncy5Ub0xvd2VyKGZlYXR1cmUpID09IHN0cmluZ3MuVG9Mb3dlcihlZikgewoJCQkJCXJldHVybiB0cnVlCgkJCQl9CgkJCX0KCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Warning",
                        "Arguments": [
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Warning(args ...any)",
                        "Source": "ewoJTG9nKFdBUk5JTkcsIGFyZ3MuLi4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Warningf",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Warningf(format string, args ...any)",
                        "Source": "ewoJTG9nZihXQVJOSU5HLCBmb3JtYXQsIGFyZ3MuLi4pCn0=",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestCSprintf",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCSprintf(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlswOzMwbWJsYWNrXHgxYlswbSB3b3JkIiwgQ1NwcmludGYoInRoaXMgJHtibGFja31ibGFjayR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBceDFiWzA7MzFtcmVkXHgxYlswbSB3b3JkIiwgQ1NwcmludGYoInRoaXMgJHtyZWR9cmVkJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFx4MWJbMDszMm1ncmVlblx4MWJbMG0gd29yZCIsIENTcHJpbnRmKCJ0aGlzICR7Z3JlZW59Z3JlZW4ke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlswOzMzbXllbGxvd1x4MWJbMG0gd29yZCIsIENTcHJpbnRmKCJ0aGlzICR7eWVsbG93fXllbGxvdyR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBceDFiWzA7MzRtYmx1ZVx4MWJbMG0gd29yZCIsIENTcHJpbnRmKCJ0aGlzICR7Ymx1ZX1ibHVlJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFx4MWJbMDszNW1tYWdlbnRhXHgxYlswbSB3b3JkIiwgQ1NwcmludGYoInRoaXMgJHttYWdlbnRhfW1hZ2VudGEke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlswOzM2bWN5YW5ceDFiWzBtIHdvcmQiLCBDU3ByaW50ZigidGhpcyAke2N5YW59Y3lhbiR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBceDFiWzA7Mzdtd2hpdGVceDFiWzBtIHdvcmQiLCBDU3ByaW50ZigidGhpcyAke3doaXRlfXdoaXRlJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFx4MWJbMDs5MG1ibGFja1x4MWJbMG0gd29yZCIsIENTcHJpbnRmKCJ0aGlzICR7YmxhY2sraH1ibGFjayR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBceDFiWzA7OTFtcmVkXHgxYlswbSB3b3JkIiwgQ1NwcmludGYoInRoaXMgJHtyZWQraH1yZWQke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlswOzkybWdyZWVuXHgxYlswbSB3b3JkIiwgQ1NwcmludGYoInRoaXMgJHtncmVlbitofWdyZWVuJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFx4MWJbMDs5M215ZWxsb3dceDFiWzBtIHdvcmQiLCBDU3ByaW50ZigidGhpcyAke3llbGxvdytofXllbGxvdyR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBceDFiWzA7OTRtYmx1ZVx4MWJbMG0gd29yZCIsIENTcHJpbnRmKCJ0aGlzICR7Ymx1ZStofWJsdWUke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlswOzk1bW1hZ2VudGFceDFiWzBtIHdvcmQiLCBDU3ByaW50ZigidGhpcyAke21hZ2VudGEraH1tYWdlbnRhJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFx4MWJbMDs5Nm1jeWFuXHgxYlswbSB3b3JkIiwgQ1NwcmludGYoInRoaXMgJHtjeWFuK2h9Y3lhbiR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBceDFiWzA7OTdtd2hpdGVceDFiWzBtIHdvcmQiLCBDU3ByaW50ZigidGhpcyAke3doaXRlK2h9d2hpdGUke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXFxbXHgxYlswOzkwbVxcXWJsYWNrXFxbXHgxYlswbVxcXSB3b3JkIiwgVGVybVNwcmludGYoInRoaXMgJHtibGFjaytofWJsYWNrJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFxcW1x4MWJbMDs5MW1cXF1yZWRcXFtceDFiWzBtXFxdIHdvcmQiLCBUZXJtU3ByaW50ZigidGhpcyAke3JlZCtofXJlZCR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBcXFtceDFiWzA7OTJtXFxdZ3JlZW5cXFtceDFiWzBtXFxdIHdvcmQiLCBUZXJtU3ByaW50ZigidGhpcyAke2dyZWVuK2h9Z3JlZW4ke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXFxbXHgxYlswOzkzbVxcXXllbGxvd1xcW1x4MWJbMG1cXF0gd29yZCIsIFRlcm1TcHJpbnRmKCJ0aGlzICR7eWVsbG93K2h9eWVsbG93JHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFxcW1x4MWJbMDs5NG1cXF1ibHVlXFxbXHgxYlswbVxcXSB3b3JkIiwgVGVybVNwcmludGYoInRoaXMgJHtibHVlK2h9Ymx1ZSR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBcXFtceDFiWzA7OTVtXFxdbWFnZW50YVxcW1x4MWJbMG1cXF0gd29yZCIsIFRlcm1TcHJpbnRmKCJ0aGlzICR7bWFnZW50YStofW1hZ2VudGEke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXFxbXHgxYlswOzk2bVxcXWN5YW5cXFtceDFiWzBtXFxdIHdvcmQiLCBUZXJtU3ByaW50ZigidGhpcyAke2N5YW4raH1jeWFuJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFxcW1x4MWJbMDs5N21cXF13aGl0ZVxcW1x4MWJbMG1cXF0gd29yZCIsIFRlcm1TcHJpbnRmKCJ0aGlzICR7d2hpdGUraH13aGl0ZSR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBibGFjayB3b3JkIiwgQ1N0cmlwZigidGhpcyAke2JsYWNrK2h9YmxhY2ske3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgcmVkIHdvcmQiLCBDU3RyaXBmKCJ0aGlzICR7cmVkK2h9cmVkJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIGdyZWVuIHdvcmQiLCBDU3RyaXBmKCJ0aGlzICR7Z3JlZW4raH1ncmVlbiR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyB5ZWxsb3cgd29yZCIsIENTdHJpcGYoInRoaXMgJHt5ZWxsb3craH15ZWxsb3cke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgYmx1ZSB3b3JkIiwgQ1N0cmlwZigidGhpcyAke2JsdWUraH1ibHVlJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIG1hZ2VudGEgd29yZCIsIENTdHJpcGYoInRoaXMgJHttYWdlbnRhK2h9bWFnZW50YSR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBjeWFuIHdvcmQiLCBDU3RyaXBmKCJ0aGlzICR7Y3lhbitofWN5YW4ke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgd2hpdGUgd29yZCIsIENTdHJpcGYoInRoaXMgJHt3aGl0ZStofXdoaXRlJHtyZXNldH0gd29yZCIpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestErrors",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestErrors(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZTFtID0gYGVycm9yIDFgCgl2YXIgZTEgPSBlcnJvcnMuTmV3KGUxbSkKCXZhciBlMm0gPSBgZXJyb3JgCgl2YXIgZTIgPSBlcnJvcnMuTmV3KGUybSkKCWFzc2VydC5GYWxzZShFcnJDb250YWlucyhuaWwsIG5pbCkpCglhc3NlcnQuRmFsc2UoRXJyQ29udGFpbnMoZTEsIG5pbCkpCglhc3NlcnQuRmFsc2UoRXJyQ29udGFpbnMobmlsLCBlMikpCglhc3NlcnQuRmFsc2UoRXJyQ29udGFpbnMobmlsLCBlMm0pKQoJYXNzZXJ0LlRydWUoRXJyQ29udGFpbnMoZTEsIGUxKSkKCWFzc2VydC5UcnVlKEVyckNvbnRhaW5zKGUxLCBlMW0pKQoJYXNzZXJ0LlRydWUoRXJyQ29udGFpbnMoZTIsIGUyKSkKCWFzc2VydC5UcnVlKEVyckNvbnRhaW5zKGUyLCBlMm0pKQoJYXNzZXJ0LlRydWUoRXJyQ29udGFpbnMoZTEsIGUyKSkKCWFzc2VydC5UcnVlKEVyckNvbnRhaW5zKGUxLCBlMm0pKQoJYXNzZXJ0LkZhbHNlKEVyckNvbnRhaW5zKGUyLCBlMSkpCglhc3NlcnQuRmFsc2UoRXJyQ29udGFpbnMoZTIsIGUxbSkpCglhc3NlcnQuVHJ1ZShFcnJIYXNQcmVmaXgoZTEsIGUxKSkKCWFzc2VydC5UcnVlKEVyckhhc1ByZWZpeChlMSwgZTFtKSkKCWFzc2VydC5UcnVlKEVyckhhc1ByZWZpeChlMiwgZTIpKQoJYXNzZXJ0LlRydWUoRXJySGFzUHJlZml4KGUyLCBlMm0pKQoJYXNzZXJ0LlRydWUoRXJySGFzUHJlZml4KGUxLCBlMikpCglhc3NlcnQuVHJ1ZShFcnJIYXNQcmVmaXgoZTEsIGUybSkpCglhc3NlcnQuRmFsc2UoRXJySGFzUHJlZml4KGUxLCBgbm9wZWApKQoJYXNzZXJ0LkZhbHNlKEVyckhhc1ByZWZpeChlMiwgZTEpKQoJYXNzZXJ0LkZhbHNlKEVyckhhc1ByZWZpeChlMiwgZTFtKSkKCWFzc2VydC5GYWxzZShFcnJIYXNTdWZmaXgoZTEsIGUyKSkKCWFzc2VydC5GYWxzZShFcnJIYXNTdWZmaXgoZTEsIGUybSkpCglhc3NlcnQuVHJ1ZShFcnJIYXNTdWZmaXgoZTEsIGAxYCkpCglhc3NlcnQuRmFsc2UoRXJySGFzU3VmZml4KGUyLCBlMSkpCglhc3NlcnQuRmFsc2UoRXJySGFzU3VmZml4KGUyLCBlMW0pKQoJYXNzZXJ0LlRydWUoRXJySGFzU3VmZml4KGUxLCBlMSkpCglhc3NlcnQuVHJ1ZShFcnJIYXNTdWZmaXgoZTEsIGUxbSkpCglhc3NlcnQuVHJ1ZShFcnJIYXNTdWZmaXgoZTIsIGUyKSkKCWFzc2VydC5UcnVlKEVyckhhc1N1ZmZpeChlMiwgZTJtKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestStackTrace",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestStackTrace(t *testing.T)",
                        "Source": "ewoJbmV3KHRyYWNlVGVzdCkuZG8odCkKfQ==",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "FormattedLogFunc": {
                        "Name": "FormattedLogFunc",
                        "Source": "dHlwZSBGb3JtYXR0ZWRMb2dGdW5jIGZ1bmMoZm9ybWF0IHN0cmluZywgYXJncyAuLi5hbnkp"
                    },
                    "Level": {
                        "Name": "Level",
                        "MetaType": "int",
                        "Methods": [
                            {
                                "Name": "String",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "GetLevel",
                                "Arguments": [
                                    {
                                        "Name": "level",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Level"
                                    }
                                ],
                                "Signature": "GetLevel(level string) Level",
                                "Source": "ewoJc3dpdGNoIHN0cmluZ3MuVG9Mb3dlcihsZXZlbCkgewoJY2FzZSBgcGFuaWNgOgoJCXJldHVybiBQQU5JQwoJY2FzZSBgZmF0YWxgOgoJCXJldHVybiBGQVRBTAoJY2FzZSBgY3JpdGljYWxgLCBgY3JpdGA6CgkJcmV0dXJuIENSSVRJQ0FMCgljYXNlIGBlcnJvcmAsIGBlcnJgOgoJCXJldHVybiBFUlJPUgoJY2FzZSBgd2FybmluZ2AsIGB3YXJuYDoKCQlyZXR1cm4gV0FSTklORwoJY2FzZSBgbm90aWNlYDoKCQlyZXR1cm4gTk9USUNFCgljYXNlIGBpbmZvYDoKCQlyZXR1cm4gSU5GTwoJY2FzZSBgZGVidWdgOgoJCXJldHVybiBERUJVRwoJZGVmYXVsdDoKCQlyZXR1cm4gREVCVUcKCX0KfQ==",
                                "IsPackageLevel": true
                            }
                        ],
                        "Source": "dHlwZSBMZXZlbCBpbnQ="
                    },
                    "LogFilterFunc": {
                        "Name": "LogFilterFunc",
                        "Source": "dHlwZSBMb2dGaWx0ZXJGdW5jIGZ1bmMobGV2ZWwgTGV2ZWwsIGxpbmUgc3RyaW5nLCBzdGFjayBTdGFja0l0ZW1zKSBib29s"
                    },
                    "LogFunc": {
                        "Name": "LogFunc",
                        "Source": "dHlwZSBMb2dGdW5jIGZ1bmMoYXJncyAuLi5hbnkp"
                    },
                    "LogInterceptFunc": {
                        "Name": "LogInterceptFunc",
                        "Source": "dHlwZSBMb2dJbnRlcmNlcHRGdW5jIGZ1bmMobGV2ZWwgTGV2ZWwsIGxpbmUgc3RyaW5nLCBzdGFjayBTdGFja0l0ZW1zKQ=="
                    },
                    "LogParseFunc": {
                        "Name": "LogParseFunc",
                        "Source": "dHlwZSBMb2dQYXJzZUZ1bmMgZnVuYyhsaW5lIHN0cmluZykgKExldmVsLCBzdHJpbmcp"
                    },
                    "StackItem": {
                        "Name": "StackItem",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "InPackage",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "pkgname",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "InPackage(pkgname string) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "String",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "ProgramCounter",
                                "Type": "uintptr"
                            },
                            {
                                "Name": "Filename",
                                "Type": "string"
                            },
                            {
                                "Name": "Line",
                                "Type": "int"
                            },
                            {
                                "Name": "Function",
                                "Type": "string"
                            },
                            {
                                "Name": "PackageName",
                                "Type": "string"
                            },
                            {
                                "Name": "Receiver",
                                "Type": "string"
                            },
                            {
                                "Name": "FunctionName",
                                "Type": "string"
                            }
                        ],
                        "Source": "dHlwZSBTdGFja0l0ZW0gc3RydWN0IHsKCVByb2dyYW1Db3VudGVyIHVpbnRwdHIKCUZpbGVuYW1lICAgICAgIHN0cmluZwoJTGluZSAgICAgICAgICAgaW50CglGdW5jdGlvbiAgICAgICBzdHJpbmcKCVBhY2thZ2VOYW1lICAgIHN0cmluZwoJUmVjZWl2ZXIgICAgICAgc3RyaW5nCglGdW5jdGlvbk5hbWUgICBzdHJpbmcKfQ=="
                    },
                    "StackItems": {
                        "Name": "StackItems",
                        "Methods": [
                            {
                                "Name": "String",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "StackTrace",
                                "Comment": "Retrieves details about the call stack that led to this function call.",
                                "Arguments": [
                                    {
                                        "Name": "skip",
                                        "Type": "int"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "StackItems"
                                    }
                                ],
                                "Signature": "StackTrace(skip int) StackItems",
                                "Source": "ewoJdmFyIHBjID0gbWFrZShbXXVpbnRwdHIsIE1heFN0YWNrVHJhY2VEZXB0aCkKCXZhciBpdGVtcyA9IG1ha2UoU3RhY2tJdGVtcywgMCkKCWlmIG4gOj0gcnVudGltZS5DYWxsZXJzKHNraXAsIHBjKTsgbiA8PSBsZW4ocGMpIHsKCQlwYyA9IHBjWzpuXQoJCWlmIGZyYW1lcyA6PSBydW50aW1lLkNhbGxlcnNGcmFtZXMocGMpOyBmcmFtZXMgIT0gbmlsIHsKCQkJZm9yIGkgOj0gMDsgbGVuKGl0ZW1zKSA8PSBsZW4ocGMpOyBpKysgewoJCQkJdmFyIGZyYW1lLCBtb3JlID0gZnJhbWVzLk5leHQoKQoJCQkJdmFyIHBrZ25hbWUgc3RyaW5nCgkJCQl2YXIgcmVjdiBzdHJpbmcKCQkJCXZhciBmbm5hbWUgc3RyaW5nCgkJCQl2YXIgbGFzdFNsYXNoID0gc3RyaW5ncy5MYXN0SW5kZXgoZnJhbWUuRnVuY3Rpb24sIGAvYCkKCQkJCWlmIGxhc3RTbGFzaCA+IDAgewoJCQkJCXZhciBwa2dSZWN2U2VwID0gbGFzdFNsYXNoICsgc3RyaW5ncy5JbmRleChmcmFtZS5GdW5jdGlvbltsYXN0U2xhc2g6XSwgYC5gKQoJCQkJCXZhciByZWN2Rm5uU2VwID0gc3RyaW5ncy5MYXN0SW5kZXgoZnJhbWUuRnVuY3Rpb24sIGAuYCkKCQkJCQlpZiByZWN2Rm5uU2VwID4gMCAmJiBwa2dSZWN2U2VwID4gMCB7CgkJCQkJCXBrZ25hbWUgPSBmcmFtZS5GdW5jdGlvblswOnBrZ1JlY3ZTZXBdCgkJCQkJCWlmIHJlY3ZGbm5TZXAgIT0gcGtnUmVjdlNlcCB7CgkJCQkJCQlyZWN2ID0gZnJhbWUuRnVuY3Rpb25bcGtnUmVjdlNlcCsxIDogcmVjdkZublNlcF0KCQkJCQkJfQoJCQkJCQlmbm5hbWUgPSBmcmFtZS5GdW5jdGlvbltyZWN2Rm5uU2VwKzE6XQoJCQkJCX0KCQkJCX0gZWxzZSBpZiBsYXN0U2xhc2ggPCAwIHsKCQkJCQlwa2duYW1lLCBmbm5hbWUgPSBzdHJpbmd1dGlsLlNwbGl0UGFpcihmcmFtZS5GdW5jdGlvbiwgYC5gKQoJCQkJfQoJCQkJaXRlbXMgPSBhcHBlbmQoaXRlbXMsIFN0YWNrSXRlbXtQcm9ncmFtQ291bnRlcjogZnJhbWUuUEMsIEZ1bmN0aW9uOiBmcmFtZS5GdW5jdGlvbiwgUGFja2FnZU5hbWU6IHBrZ25hbWUsIFJlY2VpdmVyOiByZWN2LCBGdW5jdGlvbk5hbWU6IGZubmFtZSwgRmlsZW5hbWU6IGZyYW1lLkZpbGUsIExpbmU6IGZyYW1lLkxpbmV9KQoJCQkJaWYgIW1vcmUgewoJCQkJCWJyZWFrCgkJCQl9CgkJCX0KCQl9Cgl9CglyZXR1cm4gaXRlbXMKfQ==",
                                "IsPackageLevel": true
                            }
                        ],
                        "Source": "dHlwZSBTdGFja0l0ZW1zIFtdU3RhY2tJdGVt"
                    },
                    "Timing": {
                        "Name": "Timing",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Done",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "time.Duration"
                                    }
                                ],
                                "Signature": "Done() time.Duration",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Reset",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Signature": "Reset()",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Then",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "name",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Timing"
                                    }
                                ],
                                "Signature": "Then(name string) *Timing",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Time",
                                "Arguments": [
                                    {
                                        "Name": "name",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Timing"
                                    }
                                ],
                                "Signature": "Time(name string) *Timing",
                                "Source": "ewoJcmV0dXJuICZUaW1pbmd7bmFtZTogbmFtZSwgc3RhcnRlZDogdGltZS5Ob3coKX0KfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "TimeFunc",
                                "Arguments": [
                                    {
                                        "Name": "name",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "fn",
                                        "Type": ""
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Timing"
                                    }
                                ],
                                "Signature": "TimeFunc(name string, fn ) *Timing",
                                "Source": "ewoJaWYgZm4gPT0gbmlsIHsKCQlwYW5pYygiQ2Fubm90IGNhbGwgbG9nLlRpbWVGdW5jIHdpdGggYSBuaWwgZnVuY3Rpb24iKQoJfQoJdmFyIHRtID0gVGltZShuYW1lKQoJZm4oKQoJdG0uRG9uZSgpCglyZXR1cm4gdG0KfQ==",
                                "IsPackageLevel": true
                            }
                        ],
                        "Source": "dHlwZSBUaW1pbmcgc3RydWN0IHsKCn0K",
                        "HasUnexportedFields": true
                    },
                    "WritableLogger": {
                        "Name": "WritableLogger",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "NewWritableLogger",
                                "Arguments": [
                                    {
                                        "Name": "level",
                                        "Type": "Level"
                                    },
                                    {
                                        "Name": "prefix",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*WritableLogger"
                                    }
                                ],
                                "Signature": "NewWritableLogger(level Level, prefix ...string) *WritableLogger",
                                "Source": "ewoJcmV0dXJuICZXcml0YWJsZUxvZ2dlcntsZXZlbDogbGV2ZWwsIHByZWZpeDogc3RyaW5ncy5Kb2luKHByZWZpeCwgYGApfQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "SetParserFunc",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "LogParseFunc"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*WritableLogger"
                                    }
                                ],
                                "Signature": "SetParserFunc(fn LogParseFunc) *WritableLogger",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Write",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "p",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Write(p []byte) (int, error)",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBXcml0YWJsZUxvZ2dlciBzdHJ1Y3QgewoKfQo=",
                        "HasUnexportedFields": true
                    }
                }
            },
            {
                "Name": "maputil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/maputil",
                "ImportPath": "maputil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Utilities for converting, manipulating, and iterating over maps\n",
                "MainFunction": false,
                "CommentWordCount": 1475,
                "LineCount": 4653,
                "SourceLineCount": 3562,
                "FunctionCount": 84,
                "TypeCount": 14,
                "ConstantCount": 1,
                "VariableCount": 4,
                "Statistics": {
                    "Mean": 0.5853,
                    "StdDev": 0.4778,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 0.95,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "001_maputil_setters_test.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/json",
                                "Alias": "_"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 5746,
                        "LineCount": 274,
                        "SourceLineCount": 217,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "002_maputil_getters_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 5150,
                        "LineCount": 191,
                        "SourceLineCount": 146,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "003_maputil_diffuse_test.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 3568,
                        "LineCount": 178,
                        "SourceLineCount": 124,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "004_maputil_diffuse_typed_test.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 5080,
                        "LineCount": 207,
                        "SourceLineCount": 158,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "005_maputil_coalesce_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            }
                        ],
                        "Size": 3611,
                        "LineCount": 149,
                        "SourceLineCount": 111,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "006_maputil_coalesce_typed_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 3430,
                        "LineCount": 145,
                        "SourceLineCount": 109,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "007_maputil_general_test.go",
                        "Imports": [
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "sync",
                                "Alias": "sync"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 8398,
                        "LineCount": 386,
                        "SourceLineCount": 304,
                        "FunctionCount": 0,
                        "TypeCount": 3,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "008_maputil_walk_test.go",
                        "Imports": [
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 5796,
                        "LineCount": 253,
                        "SourceLineCount": 194,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "009_maputil_pluck_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 2549,
                        "LineCount": 160,
                        "SourceLineCount": 147,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "010_maputil_merge_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 4038,
                        "LineCount": 181,
                        "SourceLineCount": 127,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "m.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/json",
                                "Alias": "json"
                            },
                            {
                                "PackageName": "encoding/xml",
                                "Alias": "xml"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "sort",
                                "Alias": "sort"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "sync",
                                "Alias": "sync"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/utils",
                                "Alias": "utilutil"
                            }
                        ],
                        "Size": 15931,
                        "LineCount": 683,
                        "SourceLineCount": 493,
                        "FunctionCount": 46,
                        "TypeCount": 6,
                        "ConstantCount": 0,
                        "VariableCount": 2
                    },
                    {
                        "Name": "m_test.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/json",
                                "Alias": "json"
                            },
                            {
                                "PackageName": "encoding/xml",
                                "Alias": "xml"
                            },
                            {
                                "PackageName": "net/http",
                                "Alias": "http"
                            },
                            {
                                "PackageName": "net/url",
                                "Alias": "url"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/alecthomas/assert",
                                "Alias": "assert"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 12159,
                        "LineCount": 455,
                        "SourceLineCount": 373,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "maputil.go",
                        "Imports": [
                            {
                                "PackageName": "errors",
                                "Alias": "errors"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "regexp",
                                "Alias": "regexp"
                            },
                            {
                                "PackageName": "sort",
                                "Alias": "sort"
                            },
                            {
                                "PackageName": "strconv",
                                "Alias": "strconv"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "sync",
                                "Alias": "sync"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/rxutil",
                                "Alias": "rxutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/utils",
                                "Alias": "utils"
                            },
                            {
                                "PackageName": "github.com/mitchellh/mapstructure",
                                "Alias": "mapstructure"
                            }
                        ],
                        "Size": 27441,
                        "LineCount": 1091,
                        "SourceLineCount": 801,
                        "FunctionCount": 38,
                        "TypeCount": 5,
                        "ConstantCount": 1,
                        "VariableCount": 2
                    },
                    {
                        "Name": "maputil_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/rxutil",
                                "Alias": "rxutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/timeutil",
                                "Alias": "timeutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/assert",
                                "Alias": "assert"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 7025,
                        "LineCount": 300,
                        "SourceLineCount": 258,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Constants": [
                    {
                        "Name": "AppendValues",
                        "Type": "MergeOption",
                        "Immutable": true,
                        "Expression": "iota"
                    }
                ],
                "Variables": [
                    {
                        "Name": "MapXmlRootTagName",
                        "Expression": "`data`",
                        "Value": "data"
                    },
                    {
                        "Name": "MapXmlStructTagName",
                        "Expression": "`xml`",
                        "Value": "xml"
                    },
                    {
                        "Name": "SkipDescendants",
                        "Expression": "errors.New(\"skip descendants\")"
                    },
                    {
                        "Name": "UnmarshalStructTag",
                        "Type": "string",
                        "Expression": "`maputil`",
                        "Value": "maputil"
                    }
                ],
                "Functions": [
                    {
                        "Name": "Append",
                        "Arguments": [
                            {
                                "Name": "maps",
                                "Type": "...map[string]any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            }
                        ],
                        "Signature": "Append(maps ...map[string]any) map[string]any",
                        "Source": "ewoJdmFyIG91dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglmb3IgXywgbWFwViA6PSByYW5nZSBtYXBzIHsKCQlmb3IgaywgdiA6PSByYW5nZSBtYXBWIHsKCQkJb3V0W2tdID0gdgoJCX0KCX0KCXJldHVybiBvdXQKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Apply",
                        "Comment": "Recursively walk the given map, calling the ApplyFunc for each leaf value.  If the second\nreturn value from the function is true, that value in the struct will be replaced with the first\nreturn value.  If false, the value will be left as-is.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            },
                            {
                                "Name": "fn",
                                "Type": "ApplyFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            }
                        ],
                        "Signature": "Apply(input any, fn ApplyFunc) map[string]any",
                        "Source": "ewoJcmV0dXJuIGFwcGx5KGZhbHNlLCBpbnB1dCwgZm4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ApplyStruct",
                        "Comment": "The same as Apply(), but will descend into structs.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            },
                            {
                                "Name": "fn",
                                "Type": "ApplyFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            }
                        ],
                        "Signature": "ApplyStruct(input any, fn ApplyFunc) map[string]any",
                        "Source": "ewoJcmV0dXJuIGFwcGx5KHRydWUsIGlucHV0LCBmbikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Autotype",
                        "Comment": "Recursively walk the given map, performing automatic type conversion on all leaf nodes.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            }
                        ],
                        "Signature": "Autotype(input any) map[string]any",
                        "Source": "ewoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpZiBlcnIgOj0gV2FsayhpbnB1dCwgZnVuYyh2YWx1ZSBhbnksIHBhdGggW11zdHJpbmcsIGlzTGVhZiBib29sKSBlcnJvciB7CgkJaWYgdmFsdWVWYXIsIG9rIDo9IHZhbHVlLih0eXBldXRpbC5WYXJpYW50KTsgb2sgewoJCQl2YWx1ZSA9IHZhbHVlVmFyLkF1dG8oKQoJCQlpZiAhdHlwZXV0aWwuSXNFbXB0eSh2YWx1ZSkgewoJCQkJRGVlcFNldChvdXRwdXQsIHBhdGgsIHZhbHVlKQoJCQl9CgkJCXJldHVybiBTa2lwRGVzY2VuZGFudHMKCQl9IGVsc2UgaWYgaXNMZWFmIHsKCQkJaWYgIXR5cGV1dGlsLklzRW1wdHkodmFsdWUpIHsKCQkJCURlZXBTZXQob3V0cHV0LCBwYXRoLCBzdHJpbmd1dGlsLkF1dG90eXBlKHZhbHVlKSkKCQkJfQoJCX0KCQlyZXR1cm4gbmlsCgl9KTsgZXJyICE9IG5pbCB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9CglyZXR1cm4gb3V0cHV0Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "CoalesceMap",
                        "Comment": "Take a deeply-nested map and return a flat (non-nested) map with keys whose intermediate tiers are joined with fieldJoiner",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "map[string]any"
                            },
                            {
                                "Name": "fieldJoiner",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "CoalesceMap(data map[string]any, fieldJoiner string) (map[string]any, error)",
                        "Source": "ewoJcmV0dXJuIGRlZXBHZXRWYWx1ZXMoW11zdHJpbmd7fSwgZmllbGRKb2luZXIsIGRhdGEpLCBuaWwKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "CoalesceMapTyped",
                        "Comment": "Take a deeply-nested map and return a flat (non-nested) map with keys whose intermediate tiers are joined with fieldJoiner\nAdditionally, values will be converted to strings and keys will be prefixed with the datatype of the value",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "map[string]any"
                            },
                            {
                                "Name": "fieldJoiner",
                                "Type": "string"
                            },
                            {
                                "Name": "typePrefixSeparator",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            },
                            {
                                "Type": "[]error"
                            }
                        ],
                        "Signature": "CoalesceMapTyped(data map[string]any, fieldJoiner string, typePrefixSeparator string) (map[string]any, []error)",
                        "Source": "ewoJdmFyIGVycnMgPSBtYWtlKFtdZXJyb3IsIDApCgl2YXIgcnYgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJZm9yIGssIHYgOj0gcmFuZ2UgZGVlcEdldFZhbHVlcyhbXXN0cmluZ3t9LCBmaWVsZEpvaW5lciwgZGF0YSkgewoJCWlmIHN0cmluZ1ZhbCwgZXJyIDo9IHN0cmluZ3V0aWwuVG9TdHJpbmcodik7IGVyciA9PSBuaWwgewoJCQlydltwcmVwYXJlQ29hbGVzY2VkS2V5KGssIHYsIHR5cGVQcmVmaXhTZXBhcmF0b3IpXSA9IHN0cmluZ1ZhbAoJCX0gZWxzZSB7CgkJCWVycnMgPSBhcHBlbmQoZXJycywgZXJyKQoJCX0KCX0KCXJldHVybiBydiwgZXJycwp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Compact",
                        "Comment": "Recursively remove all zero and empty values from the given map.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "map[string]any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "Compact(input map[string]any) (map[string]any, error)",
                        "Source": "ewoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpZiBlcnIgOj0gV2FsayhpbnB1dCwgZnVuYyh2YWx1ZSBhbnksIHBhdGggW11zdHJpbmcsIGlzTGVhZiBib29sKSBlcnJvciB7CgkJaWYgIXR5cGV1dGlsLklzRW1wdHkodmFsdWUpIHsKCQkJaWYgdHlwZXV0aWwuSXNBcnJheSh2YWx1ZSkgewoJCQkJRGVlcFNldChvdXRwdXQsIHBhdGgsIHZhbHVlKQoJCQkJcmV0dXJuIFNraXBEZXNjZW5kYW50cwoJCQl9IGVsc2UgaWYgaXNMZWFmIHsKCQkJCURlZXBTZXQob3V0cHV0LCBwYXRoLCB2YWx1ZSkKCQkJfQoJCX0KCQlyZXR1cm4gbmlsCgl9KTsgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9CglyZXR1cm4gb3V0cHV0LCBuaWwKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DeepCopy",
                        "Comment": "Perform a deep copy of the given map.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            }
                        ],
                        "Signature": "DeepCopy(input any) map[string]any",
                        "Source": "ewoJcmV0dXJuIGFwcGx5KGZhbHNlLCBpbnB1dCwgbmlsKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DeepCopyStruct",
                        "Comment": "Perform a deep copy of the given map or struct, returning a map.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            }
                        ],
                        "Signature": "DeepCopyStruct(input any) map[string]any",
                        "Source": "ewoJcmV0dXJuIGFwcGx5KHRydWUsIGlucHV0LCBuaWwpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DeepGet",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "any"
                            },
                            {
                                "Name": "path",
                                "Type": "[]string"
                            },
                            {
                                "Name": "fallbacks",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "DeepGet(data any, path []string, fallbacks ...any) any",
                        "Source": "ewoJdmFyIGN1cnJlbnQgPSB0eXBldXRpbC5SZXNvbHZlVmFsdWUoZGF0YSkKCWlmIGxlbihmYWxsYmFja3MpID09IDAgewoJCWZhbGxiYWNrcyA9IFtdYW55e25pbH0KCX0KCXZhciBmYWxsYmFjayA9IGZhbGxiYWNrc1swXQoJZm9yIGkgOj0gMDsgaSA8IGxlbihwYXRoKTsgaSsrIHsKCQl2YXIgcGFydCA9IHBhdGhbaV0KCQl2YXIgZFZhbHVlID0gcmVmbGVjdC5WYWx1ZU9mKGN1cnJlbnQpCgkJaWYgIWRWYWx1ZS5Jc1ZhbGlkKCkgewoJCQlyZXR1cm4gZmFsbGJhY2sKCQl9CgkJdmFyIGRUeXBlID0gZFZhbHVlLlR5cGUoKQoJCXN3aXRjaCBkVHlwZS5LaW5kKCkgewoJCWNhc2UgcmVmbGVjdC5JbnRlcmZhY2UsIHJlZmxlY3QuUHRyOgoJCQlkVHlwZSA9IGRUeXBlLkVsZW0oKQoJCX0KCQlzd2l0Y2ggZFR5cGUuS2luZCgpIHsKCQljYXNlIHJlZmxlY3QuU2xpY2UsIHJlZmxlY3QuQXJyYXk6CgkJCWlmIHN0cmluZ3V0aWwuSXNJbnRlZ2VyKHBhcnQpIHsKCQkJCWlmIHBhcnRJbmRleCwgZXJyIDo9IHN0cmNvbnYuQXRvaShwYXJ0KTsgZXJyID09IG5pbCB7CgkJCQkJaWYgcGFydEluZGV4IDwgZFZhbHVlLkxlbigpIHsKCQkJCQkJaWYgdmFsdWUgOj0gZFZhbHVlLkluZGV4KHBhcnRJbmRleCkuSW50ZXJmYWNlKCk7IHZhbHVlICE9IG5pbCB7CgkJCQkJCQljdXJyZW50ID0gdmFsdWUKCQkJCQkJCWNvbnRpbnVlCgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0gZWxzZSBpZiBwYXJ0ID09IGAqYCB7CgkJCQl2YXIgc3ViaXRlbXMgPSBtYWtlKFtdYW55LCBkVmFsdWUuTGVuKCkpCgkJCQlmb3IgaiA6PSAwOyBqIDwgZFZhbHVlLkxlbigpOyBqKysgewoJCQkJCWlmIHZhbHVlIDo9IGRWYWx1ZS5JbmRleChqKS5JbnRlcmZhY2UoKTsgdmFsdWUgIT0gbmlsIHsKCQkJCQkJaWYgaSsxIDwgbGVuKHBhdGgpIHsKCQkJCQkJCXN1Yml0ZW1zW2pdID0gRGVlcEdldCh2YWx1ZSwgcGF0aFsoaSsxKTpdLCBmYWxsYmFja3MuLi4pCgkJCQkJCX0gZWxzZSB7CgkJCQkJCQlzdWJpdGVtc1tqXSA9IHZhbHVlCgkJCQkJCX0KCQkJCQl9IGVsc2UgewoJCQkJCQlzdWJpdGVtc1tqXSA9IGZhbGxiYWNrCgkJCQkJfQoJCQkJfQoJCQkJcmV0dXJuIHN1Yml0ZW1zCgkJCX0KCQkJcmV0dXJuIGZhbGxiYWNrCgkJY2FzZSByZWZsZWN0Lk1hcDoKCQkJaWYgbWFwVmFsdWUgOj0gZFZhbHVlLk1hcEluZGV4KHJlZmxlY3QuVmFsdWVPZihwYXJ0KSk7IG1hcFZhbHVlLklzVmFsaWQoKSB7CgkJCQljdXJyZW50ID0gbWFwVmFsdWUuSW50ZXJmYWNlKCkKCQkJfSBlbHNlIHsKCQkJCXJldHVybiBmYWxsYmFjawoJCQl9CgkJY2FzZSByZWZsZWN0LlN0cnVjdDoKCQkJaWYgZFZhbHVlLlR5cGUoKS5LaW5kKCkgPT0gcmVmbGVjdC5QdHIgewoJCQkJZFZhbHVlID0gZFZhbHVlLkVsZW0oKQoJCQl9CgkJCWlmIHN0cnVjdEZpZWxkIDo9IGRWYWx1ZS5GaWVsZEJ5TmFtZShwYXJ0KTsgc3RydWN0RmllbGQuSXNWYWxpZCgpICYmIHN0cnVjdEZpZWxkLkNhbkludGVyZmFjZSgpIHsKCQkJCWN1cnJlbnQgPSBzdHJ1Y3RGaWVsZC5JbnRlcmZhY2UoKQoJCQkJY29udGludWUKCQkJfQoJCWRlZmF1bHQ6CgkJCXJldHVybiBmYWxsYmFjawoJCX0KCX0KCXJldHVybiBjdXJyZW50Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DeepGetBool",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "any"
                            },
                            {
                                "Name": "path",
                                "Type": "[]string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "DeepGetBool(data any, path []string) bool",
                        "Source": "ewoJdmFyIHZJID0gRGVlcEdldChkYXRhLCBwYXRoLCBmYWxzZSkKCWlmIHYsIG9rIDo9IHZJLihib29sKTsgb2sgJiYgdiB7CgkJcmV0dXJuIHRydWUKCX0KCXJldHVybiBmYWxzZQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DeepGetString",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "any"
                            },
                            {
                                "Name": "path",
                                "Type": "[]string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "DeepGetString(data any, path []string) string",
                        "Source": "ewoJaWYgdiwgZXJyIDo9IHN0cmluZ3V0aWwuVG9TdHJpbmcoRGVlcEdldChkYXRhLCBwYXRoKSk7IGVyciA9PSBuaWwgewoJCXJldHVybiB2Cgl9CglyZXR1cm4gYGAKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DeepJoin",
                        "Comment": "Join the given map, using innerJoiner to join keys and values, and outerJoiner to join the resulting key-value lines.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            },
                            {
                                "Name": "innerJoiner",
                                "Type": "string"
                            },
                            {
                                "Name": "outerJoiner",
                                "Type": "string"
                            },
                            {
                                "Name": "nestedSeparator",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "DeepJoin(input any, innerJoiner string, outerJoiner string, nestedSeparator string) string",
                        "Source": "ewoJdmFyIHBhcnRzID0gbWFrZShbXXN0cmluZywgMCkKCVdhbGsoaW5wdXQsIGZ1bmModmFsdWUgYW55LCBwYXRoIFtdc3RyaW5nLCBpc0xlYWYgYm9vbCkgZXJyb3IgewoJCWlmIGlzTGVhZiB7CgkJCXBhcnRzID0gYXBwZW5kKHBhcnRzLCBzdHJpbmdzLkpvaW4ocGF0aCwgbmVzdGVkU2VwYXJhdG9yKStpbm5lckpvaW5lcitzdHJpbmd1dGlsLk11c3RTdHJpbmcodmFsdWUpKQoJCX0KCQlyZXR1cm4gbmlsCgl9KQoJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0cywgb3V0ZXJKb2luZXIpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DeepSet",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "any"
                            },
                            {
                                "Name": "path",
                                "Type": "[]string"
                            },
                            {
                                "Name": "value",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "DeepSet(data any, path []string, value any) any",
                        "Source": "ewoJaWYgbGVuKHBhdGgpID09IDAgewoJCXJldHVybiBkYXRhCgl9Cgl2YXIgZmlyc3QgPSBwYXRoWzBdCgl2YXIgcmVzdCA9IG1ha2UoW11zdHJpbmcsIDApCglpZiBsZW4ocGF0aCkgPiAxIHsKCQlyZXN0ID0gcGF0aFsxOl0KCX0KCWlmIGxlbihyZXN0KSA9PSAwIHsKCQlpZiB0eXBldXRpbC5Jc0FycmF5KGRhdGEpIHsKCQkJdmFyIGRhdGFBcnJheSA9IHNsaWNldXRpbC5TbGljZWlmeShkYXRhKQoJCQlpZiBjdXJJbmRleCA6PSBpbnQodHlwZXV0aWwuSW50KGZpcnN0KSk7IHR5cGV1dGlsLklzSW50ZWdlcihmaXJzdCkgewoJCQkJaWYgY3VySW5kZXggPj0gbGVuKGRhdGFBcnJheSkgewoJCQkJCWZvciBhZGQgOj0gbGVuKGRhdGFBcnJheSk7IGFkZCA8PSBjdXJJbmRleDsgYWRkKysgewoJCQkJCQlkYXRhQXJyYXkgPSBhcHBlbmQoZGF0YUFycmF5LCBuaWwpCgkJCQkJfQoJCQkJfQoJCQkJaWYgY3VySW5kZXggPCBsZW4oZGF0YUFycmF5KSB7CgkJCQkJZGF0YUFycmF5W2N1ckluZGV4XSA9IHZhbHVlCgkJCQkJcmV0dXJuIGRhdGFBcnJheQoJCQkJfQoJCQl9CgkJfSBlbHNlIGlmIHR5cGV1dGlsLklzTWFwKGRhdGEpIHsKCQkJaWYgZXJyIDo9IFNldChkYXRhLCBmaXJzdCwgdmFsdWUpOyBlcnIgPT0gbmlsIHsKCQkJCXJldHVybiBkYXRhCgkJCX0KCQl9IGVsc2UgaWYgdHlwZXV0aWwuSXNTdHJ1Y3QoZGF0YSkgewoJCQlpZiBkViA6PSByZWZsZWN0LlZhbHVlT2YoZGF0YSk7IGRWLktpbmQoKSA9PSByZWZsZWN0LlB0ciB7CgkJCQlpZiBkRSA6PSBkVi5FbGVtKCk7IGRFLktpbmQoKSA9PSByZWZsZWN0LlN0cnVjdCB7CgkJCQkJZFYgPSBkRQoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm4gZGF0YQoJCQkJfQoJCQkJdmFyIGRUID0gZFYuVHlwZSgpCgkJCQlmb3IgaSA6PSAwOyBpIDwgZFQuTnVtRmllbGQoKTsgaSsrIHsKCQkJCQlpZiBmVCA6PSBkVC5GaWVsZChpKTsgZlQuTmFtZSA9PSBmaXJzdCB7CgkJCQkJCWlmIGZWIDo9IGRWLkZpZWxkKGkpOyBmVi5Jc1ZhbGlkKCkgJiYgZlYuQ2FuU2V0KCkgewoJCQkJCQkJdHlwZXV0aWwuU2V0VmFsdWUoZFYuRmllbGQoaSksIHZhbHVlKQoJCQkJCQl9CgkJCQkJCWJyZWFrCgkJCQkJfQoJCQkJfQoJCQl9CgkJCXJldHVybiBkYXRhCgkJfQoJfSBlbHNlIHsKCQlpZiB0eXBldXRpbC5Jc0ludGVnZXIocmVzdFswXSkgewoJCQlpZiB0eXBldXRpbC5Jc01hcChkYXRhKSB7CgkJCQl2YXIgY3VyVmFsID0gR2V0KGRhdGEsIGZpcnN0KQoJCQkJaWYgdHlwZXV0aWwuSXNBcnJheShjdXJWYWwpIHsKCQkJCQljdXJWYWwgPSBzbGljZXV0aWwuU2xpY2VpZnkoY3VyVmFsKQoJCQkJfSBlbHNlIHsKCQkJCQljdXJWYWwgPSBtYWtlKFsgLy8gIGlzIHRoZSB2YWx1ZSBhdCBgZmlyc3QnIGluIHRoZSBtYXAgaXNuJ3QgcHJlc2VudCBvciBpc24ndCBhbiBhcnJheSwgY3JlYXRlIGl0CgkJCQkJXWFueSwgMCkKCQkJCQlTZXQoZGF0YSwgZmlyc3QsIGN1clZhbCkKCQkJCX0KCQkJCWlmIGVyciA6PSBTZXQoZGF0YSwgZmlyc3QsIERlZXBTZXQoY3VyVmFsLCByZXN0LCB2YWx1ZSkpOyBlcnIgPT0gbmlsIHsKCQkJCQlyZXR1cm4gZGF0YQoJCQkJfQoJCQl9CgkJfSBlbHNlIHsKCQkJaWYgdHlwZXV0aWwuSXNBcnJheShkYXRhKSB7CgkJCQl2YXIgZGF0YUFycmF5ID0gc2xpY2V1dGlsLlNsaWNlaWZ5KGRhdGEpCgkJCQlpZiBjdXJJbmRleCA6PSBpbnQodHlwZXV0aWwuSW50KGZpcnN0KSk7IHR5cGV1dGlsLklzSW50ZWdlcihmaXJzdCkgewoJCQkJCWlmIGN1ckluZGV4ID49IGxlbihkYXRhQXJyYXkpIHsKCQkJCQkJZm9yIGFkZCA6PSBsZW4oZGF0YUFycmF5KTsgYWRkIDw9IGN1ckluZGV4OyBhZGQrKyB7CgkJCQkJCQlkYXRhQXJyYXkgPSBhcHBlbmQoZGF0YUFycmF5LCBtYWtlKG1hcFtzdHJpbmddYW55KSkKCQkJCQkJfQoJCQkJCX0KCQkJCQlpZiBjdXJJbmRleCA8IGxlbihkYXRhQXJyYXkpIHsKCQkJCQkJZGF0YUFycmF5W2N1ckluZGV4XSA9IERlZXBTZXQoZGF0YUFycmF5W2N1ckluZGV4XSwgcmVzdCwgdmFsdWUpCgkJCQkJCXJldHVybiBkYXRhQXJyYXkKCQkJCQl9CgkJCQl9CgkJCX0gZWxzZSBpZiBkYXRhTWFwLCBvayA6PSBkYXRhLihtYXBbc3RyaW5nXWFueSk7IG9rIHsKCQkJCXZhciBjdXJWYWwsIF8gPSBkYXRhTWFwW2ZpcnN0XQoJCQkJaWYgIXR5cGV1dGlsLklzTWFwKGN1clZhbCkgewoJCQkJCWRhdGFNYXBbZmlyc3RdID0gbWFrZShtYXAgLy8gIGhhbmRsZSBnb29kIG9sZCBmYXNoaW9uZWQgbWFwcy1vZi1tYXBzCgkJCQkJLy8gIGlzIHRoZSB2YWx1ZSBhdCAnZmlyc3QnIGluIHRoZSBtYXAgaXNuJ3QgcHJlc2VudCBvciBpc24ndCBhIG1hcCwgY3JlYXRlIGl0CgkJCQkJW3N0cmluZ11hbnkpCgkJCQkJY3VyVmFsLCBfID0gZGF0YU1hcFtmaXJzdF0KCQkJCX0KCQkJCWRhdGFNYXBbZmlyc3RdID0gRGVlcFNldChkYXRhTWFwW2ZpcnN0XSwgcmVzdCwgdmFsdWUpCgkJCQlyZXR1cm4gZGF0YU1hcAoJCQl9CgkJfQoJfQoJcmV0dXJuIGRhdGEKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Delete",
                        "Comment": "Delete a key to a given value in the given map.",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "any"
                            },
                            {
                                "Name": "key",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "Delete(data any, key any) error",
                        "Source": "ewoJcmV0dXJuIFNldChkYXRhLCBrZXksIGRlbGV0ZVZhbHVlKHRydWUpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DiffuseMap",
                        "Comment": "Take a flat (non-nested) map keyed with fields joined on fieldJoiner and return a\ndeeply-nested map",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "map[string]any"
                            },
                            {
                                "Name": "fieldJoiner",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "DiffuseMap(data map[string]any, fieldJoiner string) (map[string]any, error)",
                        "Source": "ewoJcnYsIF8gOj0gRGlmZnVzZU1hcFR5cGVkKGRhdGEsIGZpZWxkSm9pbmVyLCAiIikKCXJldHVybiBydiwgbmlsCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DiffuseMapTyped",
                        "Comment": "Take a flat (non-nested) map keyed with fields joined on fieldJoiner and return a\ndeeply-nested map",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "map[string]any"
                            },
                            {
                                "Name": "fieldJoiner",
                                "Type": "string"
                            },
                            {
                                "Name": "typePrefixSeparator",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            },
                            {
                                "Type": "[]error"
                            }
                        ],
                        "Signature": "DiffuseMapTyped(data map[string]any, fieldJoiner string, typePrefixSeparator string) (map[string]any, []error)",
                        "Source": "ewoJdmFyIGVycnMgPSBtYWtlKFtdZXJyb3IsIDApCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBkYXRhS2V5cyA9IFN0cmluZ0tleXMoZGF0YSkKCXNvcnQuU3RyaW5ncyhkYXRhS2V5cykKCWZvciBfLCBrZXkgOj0gLy8gIGdldCB0aGUgbGlzdCBvZiBrZXlzIGFuZCBzb3J0IHRoZW0gYmVjYXVzZSBvcmRlciBpbiBhIG1hcCBpcyB1bmRlZmluZWQKCXJhbmdlIGRhdGFLZXlzIHsKCQl2YXIga2V5UGFydHMgW11zdHJpbmcKCQl2YXIgdmFsdWUsIF8gPSBkYXRhW2tleV0KCQlpZiB0eXBlUHJlZml4U2VwYXJhdG9yICE9ICIiIHsKCQkJdmFyIHR5cGVOYW1lIHN0cmluZwoJCQl0eXBlTmFtZSwga2V5ID0gc3RyaW5ndXRpbC5TcGxpdFBhaXJUcmFpbGluZyhrZXksIHR5cGVQcmVmaXhTZXBhcmF0b3IpCgkJCWlmIHR5cGVOYW1lID09IGBgIHsKCQkJCXR5cGVOYW1lID0gYHN0cmAKCQkJfQoJCQlpZiB2LCBlcnIgOj0gY29lcmNlSW50b1R5cGUodmFsdWUsIHR5cGVOYW1lKTsgZXJyID09IG5pbCB7CgkJCQl2YWx1ZSA9IHYKCQkJfSBlbHNlIHsKCQkJCWVycnMgPSBhcHBlbmQoZXJycywgZXJyKQoJCQl9CgkJfQoJCWtleVBhcnRzID0gc3RyaW5ncy5TcGxpdChrZXksIGZpZWxkSm9pbmVyKQoJCW91dHB1dCA9IERlZXBTZXQob3V0cHV0LCBrZXlQYXJ0cywgdmFsdWUpLihtYXBbc3RyaW5nXWFueSkKCX0KCXJldHVybiBvdXRwdXQsIGVycnMKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Fprintf",
                        "Comment": "Same as Sprintf, but writes output to the given writer.",
                        "Arguments": [
                            {
                                "Name": "w",
                                "Type": "io.Writer"
                            },
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "data",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Fprintf(w io.Writer, format string, data ...any)",
                        "Source": "ewoJZm10LkZwcmludCh3LCBTcHJpbnRmKGZvcm1hdCwgZGF0YS4uLikpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Get",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "any"
                            },
                            {
                                "Name": "key",
                                "Type": "string"
                            },
                            {
                                "Name": "fallback",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "Get(data any, key string, fallback ...any) any",
                        "Source": "ewoJZGF0YSA9IHR5cGV1dGlsLlJlc29sdmVWYWx1ZShkYXRhKQoJaWYgdHlwZXV0aWwuSXNLaW5kKGRhdGEsIHJlZmxlY3QuTWFwKSB7CgkJdmFyIGRhdGFWID0gcmVmbGVjdC5WYWx1ZU9mKGRhdGEpCgkJaWYgdmFsdWVWIDo9IGRhdGFWLk1hcEluZGV4KHJlZmxlY3QuVmFsdWVPZihrZXkpKTsgdmFsdWVWLklzVmFsaWQoKSB7CgkJCWlmIHZhbHVlSSA6PSB2YWx1ZVYuSW50ZXJmYWNlKCk7ICF0eXBldXRpbC5Jc1plcm8odmFsdWVJKSB7CgkJCQlyZXR1cm4gdmFsdWVJCgkJCX0KCQl9Cgl9CglpZiBsZW4oZmFsbGJhY2spID4gMCB7CgkJcmV0dXJuIGZhbGxiYWNrWzBdCgl9IGVsc2UgewoJCXJldHVybiBuaWwKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "JSONPath",
                        "Comment": "Performs a JSONPath query against the given object and returns the results.\nJSONPath description, syntax, and examples are available at http://goessner.net/articles/JsonPath/.",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "any"
                            },
                            {
                                "Name": "query",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "JSONPath(data any, query string) (any, error)",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLkpTT05QYXRoKGRhdGEsIHF1ZXJ5LCB0cnVlKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Join",
                        "Comment": "Join the given map, using innerJoiner to join keys and values, and outerJoiner to join the resulting key-value lines.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            },
                            {
                                "Name": "innerJoiner",
                                "Type": "string"
                            },
                            {
                                "Name": "outerJoiner",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Join(input any, innerJoiner string, outerJoiner string) string",
                        "Source": "ewoJcmV0dXJuIERlZXBKb2luKGlucHV0LCBpbm5lckpvaW5lciwgb3V0ZXJKb2luZXIsIGAuYCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Keys",
                        "Comment": "Return an interface slice of the keys of the given map.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Keys(input any) []any",
                        "Source": "ewoJdmFyIGtleXMgPSBtYWtlKFtdYW55LCAwKQoJdmFyIHJpbnB1dCA9IHR5cGV1dGlsLlJlc29sdmVWYWx1ZShpbnB1dCkKCWlmIHJpbnB1dCA9PSBuaWwgewoJCXJldHVybiBrZXlzCgl9Cgl2YXIgaW5wdXRWID0gcmVmbGVjdC5WYWx1ZU9mKHJpbnB1dCkKCWlmIGlucHV0Vi5LaW5kKCkgPT0gcmVmbGVjdC5NYXAgewoJCXZhciBrZXlzViA9IGlucHV0Vi5NYXBLZXlzKCkKCQlmb3IgXywga2V5ViA6PSByYW5nZSBrZXlzViB7CgkJCWtleXMgPSBhcHBlbmQoa2V5cywga2V5VikKCQl9Cgl9IGVsc2UgaWYgc3luY01hcCwgb2sgOj0gaW5wdXQuKCpzeW5jLk1hcCk7IG9rIHsKCQlzeW5jTWFwLlJhbmdlKGZ1bmMoa2V5IGFueSwgXyBhbnkpIGJvb2wgewoJCQlrZXlzID0gYXBwZW5kKGtleXMsIGtleSkKCQkJcmV0dXJuIHRydWUKCQl9KQoJfQoJcmV0dXJuIGtleXMKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MapValues",
                        "Comment": "Return the values from the given map.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "MapValues(input any) []any",
                        "Source": "ewoJdmFyIHZhbHVlcyA9IG1ha2UoW11hbnksIDApCgl2YXIgaW5wdXRWID0gcmVmbGVjdC5WYWx1ZU9mKGlucHV0KQoJc3dpdGNoIGlucHV0Vi5LaW5kKCkgewoJY2FzZSByZWZsZWN0Lk1hcDoKCQlmb3IgXywgbWFwS2V5ViA6PSByYW5nZSBpbnB1dFYuTWFwS2V5cygpIHsKCQkJaWYgbWFwViA6PSBpbnB1dFYuTWFwSW5kZXgobWFwS2V5Vik7IG1hcFYuSXNWYWxpZCgpICYmIG1hcFYuQ2FuSW50ZXJmYWNlKCkgewoJCQkJdmFsdWVzID0gYXBwZW5kKHZhbHVlcywgbWFwVi5JbnRlcmZhY2UoKSkKCQkJfQoJCX0KCX0KCXJldHVybiB2YWx1ZXMKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Merge",
                        "Comment": "Recursively merge the contents of the second map into the first one and return the result.",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "second",
                                "Type": "any"
                            },
                            {
                                "Name": "options",
                                "Type": "...MergeOption"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "Merge(first any, second any, options ...MergeOption) (map[string]any, error)",
                        "Source": "ewoJaWYgZmlyc3QgIT0gbmlsICYmICF0eXBldXRpbC5Jc0tpbmQoZmlyc3QsIHJlZmxlY3QuTWFwKSB7CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIG1hcCwgZ290ICVUIiwgZmlyc3QpCgl9CglpZiBzZWNvbmQgIT0gbmlsICYmICF0eXBldXRpbC5Jc0tpbmQoc2Vjb25kLCByZWZsZWN0Lk1hcCkgewoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoInNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGEgbWFwLCBnb3QgJVQiLCBzZWNvbmQpCgl9Cgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCWlmIGVyciA6PSBXYWxrKGZpcnN0LCBmdW5jKHZhbHVlIGFueSwgcGF0aCBbXXN0cmluZywgaXNMZWFmIGJvb2wpIGVycm9yIHsKCQlpZiBpc0xlYWYgewoJCQlEZWVwU2V0KG91dHB1dCwgcGF0aCwgdmFsdWUpCgkJfQoJCXJldHVybiBuaWwKCX0pOyBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCWlmIGVyciA6PSBXYWxrKHNlY29uZCwgZnVuYyh2YWx1ZSBhbnksIHBhdGggW11zdHJpbmcsIGlzTGVhZiBib29sKSBlcnJvciB7CgkJaWYgaXNMZWFmIHsKCQkJaWYgdmFsdWUgIT0gbmlsIHsKCQkJCWlmIGN1cnJlbnRWYWx1ZSA6PSBEZWVwR2V0KG91dHB1dCwgcGF0aCwgbmlsKTsgY3VycmVudFZhbHVlID09IG5pbCB7CgkJCQkJRGVlcFNldChvdXRwdXQsIHBhdGgsIHZhbHVlKQoJCQkJfSBlbHNlIHsKCQkJCQl2YXIgY3VycmVudFYgPSByZWZsZWN0LlZhbHVlT2YoY3VycmVudFZhbHVlKQoJCQkJCXN3aXRjaCBjdXJyZW50Vi5UeXBlKCkuS2luZCgpIHsKCQkJCQljYXNlIHJlZmxlY3QuU2xpY2UsIHJlZmxlY3QuQXJyYXk6CgkJCQkJCXZhciBuZXdQYXRoID0gYXBwZW5kKHBhdGgsIGZtdC5TcHJpbnRmKCIlZCIsIGN1cnJlbnRWLkxlbigpKSkKCQkJCQkJRGVlcFNldChvdXRwdXQsIG5ld1BhdGgsIHZhbHVlKQoJCQkJCWRlZmF1bHQ6CgkJCQkJCWlmIE1lcmdlT3B0aW9ucyhvcHRpb25zKS5IYXMoQXBwZW5kVmFsdWVzKSB7CgkJCQkJCQlEZWVwU2V0KG91dHB1dCwgcGF0aCwgW11hbnl7Y3VycmVudFZhbHVlLCB2YWx1ZX0pCgkJCQkJCX0gZWxzZSB7CgkJCQkJCQlEZWVwU2V0KG91dHB1dCwgcGF0aCwgdmFsdWUpCgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgkJcmV0dXJuIG5pbAoJfSk7IGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoJcmV0dXJuIG91dHB1dCwgbmlsCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Pluck",
                        "Arguments": [
                            {
                                "Name": "sliceOfMaps",
                                "Type": "any"
                            },
                            {
                                "Name": "key",
                                "Type": "[]string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Pluck(sliceOfMaps any, key []string) []any",
                        "Source": "ewoJdmFyIHJ2ID0gbWFrZShbXWFueSwgMCkKCWlmIHNsaWNlT2ZNYXBzID09IG5pbCB7CgkJcmV0dXJuIHJ2Cgl9CglXYWxrU3RydWN0KHNsaWNlT2ZNYXBzLCBmdW5jKHZhbHVlIGFueSwgcGF0aCBbXXN0cmluZywgaXNMZWFmIGJvb2wpIGVycm9yIHsKCQlpZiBpc0xlYWYgJiYgbGVuKHBhdGgpID4gMSB7CgkJCXZhciBzaG91bGRJbmNsdWRlIGJvb2wKCQkJZm9yIGksIF8gOj0gcmFuZ2UgcGF0aCB7CgkJCQlpZiBpID09IDAgewoJCQkJCWNvbnRpbnVlCgkJCQl9IGVsc2UgaWYgKGkgLSAxKSA8IGxlbihrZXkpIHsKCQkJCQlpZiBrZXlbaS0xXSA9PSBgKmAgfHwgcGF0aFtpXSA9PSBrZXlbaS0xXSB7CgkJCQkJCXNob3VsZEluY2x1ZGUgPSB0cnVlCgkJCQkJCWNvbnRpbnVlCgkJCQkJfSBlbHNlIHsKCQkJCQkJc2hvdWxkSW5jbHVkZSA9IGZhbHNlCgkJCQkJCWJyZWFrCgkJCQkJfQoJCQkJfQoJCQl9CgkJCWlmIHNob3VsZEluY2x1ZGUgewoJCQkJcnYgPSBhcHBlbmQocnYsIHZhbHVlKQoJCQl9CgkJfQoJCXJldHVybiBuaWwKCX0pCglyZXR1cm4gcnYKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Printf",
                        "Comment": "Same as Sprintf, but prints its output to standard output.",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "data",
                                "Type": "...any"
                            }
                        ],
                        "Signature": "Printf(format string, data ...any)",
                        "Source": "ewoJZm10LlByaW50KFNwcmludGYoZm9ybWF0LCBkYXRhLi4uKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Set",
                        "Comment": "Set a key to a given value in the given map, reflect.Map Value, or slice/array.",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "any"
                            },
                            {
                                "Name": "key",
                                "Type": "any"
                            },
                            {
                                "Name": "value",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "Set(data any, key any, value any) error",
                        "Source": "ewoJdmFyIGRhdGFNIHJlZmxlY3QuVmFsdWUKCXZhciBpc0RlbGV0ZSBib29sCglpZiBfLCBvayA6PSB2YWx1ZS4oZGVsZXRlVmFsdWUpOyBvayB7CgkJaXNEZWxldGUgPSB0cnVlCgl9CglpZiB2LCBvayA6PSBkYXRhLihyZWZsZWN0LlZhbHVlKTsgb2sgewoJCWRhdGFNID0gdgoJfSBlbHNlIHsKCQlkYXRhTSA9IHJlZmxlY3QuVmFsdWVPZihkYXRhKQoJfQoJaWYgYXNNYXAsIG9rIDo9IGRhdGEuKG1hcFtzdHJpbmddYW55KTsgb2sgewoJCWlmIGlzRGVsZXRlIHsKCQkJZGVsZXRlKGFzTWFwLCB0eXBldXRpbC5TdHJpbmcoa2V5KSkKCQl9IGVsc2UgewoJCQlhc01hcFt0eXBldXRpbC5TdHJpbmcoa2V5KV0gPSB2YWx1ZQoJCX0KCQlyZXR1cm4gbmlsCgl9IGVsc2UgaWYgZGF0YU0uQ2FuSW50ZXJmYWNlKCkgewoJCWlmIGFzTWFwLCBvayA6PSBkYXRhTS5JbnRlcmZhY2UoKS4obWFwW3N0cmluZ11hbnkpOyBvayB7CgkJCWlmIGlzRGVsZXRlIHsKCQkJCWRlbGV0ZShhc01hcCwgdHlwZXV0aWwuU3RyaW5nKGtleSkpCgkJCX0gZWxzZSB7CgkJCQlhc01hcFt0eXBldXRpbC5TdHJpbmcoa2V5KV0gPSB2YWx1ZQoJCQl9CgkJCXJldHVybiBuaWwKCQl9Cgl9Cglzd2l0Y2ggZGF0YU0uS2luZCgpIHsKCWNhc2UgcmVmbGVjdC5NYXA6CgkJaWYgaXNEZWxldGUgewoJCQlkYXRhTS5TZXRNYXBJbmRleChyZWZsZWN0LlZhbHVlT2Yoa2V5KSwgcmVmbGVjdC5WYWx1ZXt9KQoJCX0gZWxzZSB7CgkJCWRhdGFNLlNldE1hcEluZGV4KHJlZmxlY3QuVmFsdWVPZihrZXkpLCByZWZsZWN0LlZhbHVlT2YodmFsdWUpKQoJCX0KCWNhc2UgcmVmbGVjdC5TbGljZSwgcmVmbGVjdC5BcnJheToKCQlpZiBpc0RlbGV0ZSB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJBcnJheSBpdGVtIGRlbGV0aW9uIG5vdCBpbXBsZW1lbnRlZCIpCgkJfSBlbHNlIGlmIHR5cGV1dGlsLklzSW50ZWdlcihrZXkpIHsKCQkJZGF0YU0uSW5kZXgoaW50KHR5cGV1dGlsLkludChrZXkpKSkKCQl9IGVsc2UgewoJCQlyZXR1cm4gZm10LkVycm9yZigiY2Fubm90IHNldCBub24taW50ZWdlciBhcnJheSBpbmRleCAlcSIsIGtleSkKCQl9Cgl9CglyZXR1cm4gbmlsCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SliceOfMaps",
                        "Comment": "Convert the given value to a slice using typeutil.Slice, then return each element as a Map.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Name": "maps",
                                "Type": "[]*Map"
                            }
                        ],
                        "Signature": "SliceOfMaps(input any) maps []*Map",
                        "Source": "ewoJZm9yIF8sIHYgOj0gcmFuZ2UgdHlwZXV0aWwuU2xpY2UoaW5wdXQpIHsKCQltYXBzID0gYXBwZW5kKG1hcHMsIE0odikpCgl9CglyZXR1cm4KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Split",
                        "Comment": "Split the given string, first on outerJoiner to form key-value lines, then each line on innerJoiner.\nPopulates a map and returns the result.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "string"
                            },
                            {
                                "Name": "innerJoiner",
                                "Type": "string"
                            },
                            {
                                "Name": "outerJoiner",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            }
                        ],
                        "Signature": "Split(input string, innerJoiner string, outerJoiner string) map[string]any",
                        "Source": "ewoJdmFyIHJ2ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBwYWlycyA9IHN0cmluZ3MuU3BsaXQoaW5wdXQsIG91dGVySm9pbmVyKQoJZm9yIF8sIHBhaXIgOj0gcmFuZ2UgcGFpcnMgewoJCXZhciBrdiA9IHN0cmluZ3MuU3BsaXROKHBhaXIsIGlubmVySm9pbmVyLCAyKQoJCWlmIGxlbihrdikgPT0gMiB7CgkJCXJ2W2t2WzBdXSA9IGt2WzFdCgkJfQoJfQoJcmV0dXJuIHJ2Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Sprintf",
                        "Comment": "Format the given string in the same manner as fmt.Sprintf, except data items that are\nmaps or Map objects will be expanded using special patterns in the format string. Deeply-nested\nmap values can be referenced using a format string \"${path.to.value}\".  Missing keys will return\nan empty string, or a fallback value may be provided like so: \"${path.to.value|fallback}\".\nThe value may also specify a standard fmt.Sprintf pattern with \"${path.to.value:%02d}\" (or\n\"${path.to.value|fallback:%02d}\" for fallback values.)  Finally, a special case for time.Time values\nallows for the format string to be passed to time.Format: \"${path.to.time:%January 2, 2006 (3:04pm)}\".",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "data",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Sprintf(format string, data ...any) string",
                        "Source": "ewoJdmFyIHBhcmFtcyBbXWFueQpNYXRjaExvb3A6Cglmb3IgewoJCXZhciBtID0gcnh1dGlsLk1hdGNoKHJ4TWFwRm10LCBmb3JtYXQpCgkJaWYgbSA9PSBuaWwgewoJCQlicmVhawoJCX0KCQl2YXIgY2FwcyA9IG0uTmFtZWRDYXB0dXJlcygpCgkJdmFyIHBsYWNlaG9sZGVyID0gY2Fwc1tgZm10YF0KCQlpZiBwbGFjZWhvbGRlciA9PSBgYCB7CgkJCXBsYWNlaG9sZGVyID0gYCV2YAoJCX0KCQlmb3IgXywgZCA6PSByYW5nZSBkYXRhIHsKCQkJdmFyIGRtID0gTShkKQoJCQlpZiB0bSwgb2sgOj0gZG0uR2V0KGNhcHNbYGtleWBdKS5WYWx1ZS4odGltZS5UaW1lKTsgb2sgewoJCQkJdmFyIHRtZm10ID0gc3RyaW5ncy5UcmltUHJlZml4KHBsYWNlaG9sZGVyLCBgJWApCgkJCQlpZiB0bWZtdCA9PSBgdmAgewoJCQkJCXRtZm10ID0gdGltZS5SRkMzMzM5CgkJCQl9CgkJCQlwYXJhbXMgPSBhcHBlbmQocGFyYW1zLCB0bS5Gb3JtYXQodG1mbXQpKQoJCQkJZm9ybWF0ID0gbS5SZXBsYWNlR3JvdXAoMSwgYCVzYCkKCQkJCWNvbnRpbnVlIE1hdGNoTG9vcAoJCQl9IGVsc2UgaWYgdiA6PSBkbS5TdHJpbmcoY2Fwc1tga2V5YF0pOyB2ICE9IGBgIHsKCQkJCXBhcmFtcyA9IGFwcGVuZChwYXJhbXMsIHYpCgkJCQlmb3JtYXQgPSBtLlJlcGxhY2VHcm91cCgxLCBwbGFjZWhvbGRlcikKCQkJCWNvbnRpbnVlIE1hdGNoTG9vcAoJCQl9CgkJfQoJCXBhcmFtcyA9IGFwcGVuZChwYXJhbXMsIGNhcHNbYGZhbGxiYWNrYF0pCgkJZm9ybWF0ID0gbS5SZXBsYWNlR3JvdXAoMSwgcGxhY2Vob2xkZXIpCgl9CglyZXR1cm4gZm10LlNwcmludGYoZm9ybWF0LCBwYXJhbXMuLi4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "StringKeys",
                        "Comment": "Return a slice of strings representing the keys of the given map.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "StringKeys(input any) []string",
                        "Source": "ewoJdmFyIGtleXMgPSBzbGljZXV0aWwuU3RyaW5naWZ5KEtleXMoaW5wdXQpKQoJc29ydC5TdHJpbmdzKGtleXMpCglyZXR1cm4ga2V5cwp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Stringify",
                        "Comment": "Take the input map and convert all values to strings.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "map[string]any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]string"
                            }
                        ],
                        "Signature": "Stringify(input map[string]any) map[string]string",
                        "Source": "ewoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11zdHJpbmcpCglmb3IgaywgdiA6PSByYW5nZSBpbnB1dCB7CgkJaWYgc3RyLCBlcnIgOj0gc3RyaW5ndXRpbC5Ub1N0cmluZyh2KTsgZXJyID09IG5pbCB7CgkJCW91dHB1dFtrXSA9IHN0cgoJCX0gZWxzZSB7CgkJCW91dHB1dFtrXSA9IGZtdC5TcHJpbnRmKCIhI0VSUjwldj4iLCBlcnIpCgkJfQoJfQoJcmV0dXJuIG91dHB1dAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "StructFromMap",
                        "Comment": "Same as TaggedStructFromMapFunc, but no value conversion and uses the \"maputil\" struct tag.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "map[string]any"
                            },
                            {
                                "Name": "populate",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "StructFromMap(input map[string]any, populate any) error",
                        "Source": "ewoJcmV0dXJuIFRhZ2dlZFN0cnVjdEZyb21NYXAoaW5wdXQsIHBvcHVsYXRlLCBgYCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TaggedStructFromMap",
                        "Comment": "Same as TaggedStructFromMapFunc, but does not perform any value conversion.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            },
                            {
                                "Name": "populate",
                                "Type": "any"
                            },
                            {
                                "Name": "tagname",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "TaggedStructFromMap(input any, populate any, tagname string) error",
                        "Source": "ewoJcmV0dXJuIFRhZ2dlZFN0cnVjdEZyb21NYXBGdW5jKGlucHV0LCBwb3B1bGF0ZSwgdGFnbmFtZSwgbmlsKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TaggedStructFromMapFunc",
                        "Comment": "Take an input map, and populate the struct instance pointed to by \"populate\".  Use the values of the tagname tag\nto inform which map keys should be used to fill struct fields, and if a Conversion function is given, that\nfunction will be used to allow values to be converted in preparation for becoming struct field values.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            },
                            {
                                "Name": "populate",
                                "Type": "any"
                            },
                            {
                                "Name": "tagname",
                                "Type": "string"
                            },
                            {
                                "Name": "converter",
                                "Type": "ConversionFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "TaggedStructFromMapFunc(input any, populate any, tagname string, converter ConversionFunc) error",
                        "Source": "ewoJaWYgdGFnbmFtZSA9PSBgYCB7CgkJdGFnbmFtZSA9IFVubWFyc2hhbFN0cnVjdFRhZwoJfQoJaWYgY29udmVydGVyID09IG5pbCB7CgkJY29udmVydGVyID0gZnVuYyhzb3VyY2UgcmVmbGVjdC5UeXBlLCB0YXJnZXQgcmVmbGVjdC5UeXBlLCBkYXRhIGFueSkgKGFueSwgZXJyb3IpIHsKCQkJaWYgdGFyZ2V0LktpbmQoKSA9PSByZWZsZWN0LlN0cmluZyB7CgkJCQlyZXR1cm4gc3RyaW5ndXRpbC5Db252ZXJ0VG9TdHJpbmcoZGF0YSkKCQkJfQoJCQlpZiB0YXJnZXQuU3RyaW5nKCkgPT0gYHRpbWUuVGltZWAgfHwgdXRpbHMuSXNUaW1lKGRhdGEpIHsKCQkJCXJldHVybiBzdHJpbmd1dGlsLkNvbnZlcnRUb1RpbWUoZGF0YSkKCQkJfQoJCQlyZXR1cm4gZGF0YSwgbmlsCgkJfQoJfQoJaWYgcG9wdWxhdGVWLCBvayA6PSBwb3B1bGF0ZS4ocmVmbGVjdC5WYWx1ZSk7IG9rIHsKCQlpZiBwb3B1bGF0ZVYuSXNWYWxpZCgpICYmIHBvcHVsYXRlVi5DYW5JbnRlcmZhY2UoKSB7CgkJCXBvcHVsYXRlID0gcG9wdWxhdGVWLkludGVyZmFjZSgpCgkJfSBlbHNlIHsKCQkJcmV0dXJuIGZtdC5FcnJvcmYoIkRlc3RpbmF0aW9uIHZhbHVlIGlzIGludmFsaWQgb3IgdW5zZXR0YWJsZSIpCgkJfQoJfQoJdmFyIG1ldGEgPSBuZXcobWFwc3RydWN0dXJlLk1ldGFkYXRhKQoJaWYgZGVjb2RlciwgZXJyIDo9IG1hcHN0cnVjdHVyZS5OZXdEZWNvZGVyKCZtYXBzdHJ1Y3R1cmUuRGVjb2RlckNvbmZpZ3tSZXN1bHQ6IHBvcHVsYXRlLCBUYWdOYW1lOiB0YWduYW1lLCBEZWNvZGVIb29rOiBjb252ZXJ0ZXIsIFdlYWtseVR5cGVkSW5wdXQ6IHRydWUsIE1ldGFkYXRhOiBtZXRhfSk7IGVyciA9PSBuaWwgewoJCWlmIGVyciA6PSBkZWNvZGVyLkRlY29kZShpbnB1dCk7IGVyciAhPSBuaWwgewoJCQlyZXR1cm4gZm10LkVycm9yZigibWFwdXRpbDogJXYiLCBlcnIpCgkJfQoJCWZvciBfLCBmaWVsZCA6PSByYW5nZSBzbGljZXV0aWwuVW5pcXVlU3RyaW5ncyhtZXRhLlVudXNlZCkgewoJCQl2YXIga2V5ID0gc3RyaW5ncy5TcGxpdChmaWVsZCwgYC5gKQoJCQl2YXIgc3JjID0gRGVlcEdldChpbnB1dCwga2V5KQoJCQlpZiB1dGlscy5Jc1RpbWUoc3JjKSB7CgkJCQlEZWVwU2V0KHBvcHVsYXRlLCBrZXksIHR5cGV1dGlsLlRpbWUoc3JjKSkKCQkJfSBlbHNlIGlmIHR5cGV1dGlsLklzTWFwKHNyYykgfHwgdHlwZXV0aWwuSXNTdHJ1Y3Qoc3JjKSB7CgkJCQlmb3Iga3YgOj0gcmFuZ2UgTShzcmMpLkl0ZXIoKSB7CgkJCQkJRGVlcFNldChwb3B1bGF0ZSwgYXBwZW5kKGtleSwga3YuSyksIGt2LlZhbHVlKQoJCQkJfQoJCQl9CgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gZXJyCgl9CglyZXR1cm4gbmlsCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Walk",
                        "Comment": "Recursively walk through the given map, calling walkFn for each intermediate and leaf value.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            },
                            {
                                "Name": "walkFn",
                                "Type": "WalkFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "Walk(input any, walkFn WalkFunc) error",
                        "Source": "ewoJcmV0dXJuIHdhbGtHZW5lcmljKGlucHV0LCBuaWwsIHdhbGtGbiwgZmFsc2UsIG5pbCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "WalkStruct",
                        "Comment": "Recursively walk through the given map, calling walkFn for each intermediate and leaf value.\nThis form behaves identically to Walk(), except that it will also recurse into structs, calling\nwalkFn for all intermediate structs and fields.",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "any"
                            },
                            {
                                "Name": "walkFn",
                                "Type": "WalkFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "WalkStruct(input any, walkFn WalkFunc) error",
                        "Source": "ewoJcmV0dXJuIHdhbGtHZW5lcmljKGlucHV0LCBuaWwsIHdhbGtGbiwgdHJ1ZSwgbmlsKQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Examples": [
                    {
                        "Name": "ExamplePrintf_deeplyNestedKeys",
                        "Label": "DeeplyNestedKeys",
                        "For": "Printf",
                        "Signature": "ExamplePrintf_deeplyNestedKeys()",
                        "Source": "ewoJUHJpbnRmKCJIZWxsbyAke2RldGFpbHMuMC52YWx1ZXxndWVzdH0hIFlvdXIgSVAgaXM6ICR7ZGV0YWlscy4xLnZhbHVlfCh1bmtub3duKX0iLCBtYXBbc3RyaW5nXWFueXtgZGV0YWlsc2A6IFtdbWFwW3N0cmluZ11hbnl7e2BrZXlgOiBgdXNlcm5hbWVgLCBgdmFsdWVgOiBgZnJpZW5kYH0sIHtga2V5YDogYGlwYWRkcmVzc2AsIGB2YWx1ZWA6IGAxMjcuMC4wLjFgfX19KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExamplePrintf_suppliedWithData",
                        "Label": "SuppliedWithData",
                        "For": "Printf",
                        "Signature": "ExamplePrintf_suppliedWithData()",
                        "Source": "ewoJUHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0fSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pfSIsIG1hcFtzdHJpbmddYW55e2B1c2VybmFtZWA6IGBmcmllbmRgLCBgaXBhZGRyZXNzYDogYDEyNy4wLjAuMWB9KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExamplePrintf_usingDefaultValues",
                        "Label": "UsingDefaultValues",
                        "For": "Printf",
                        "Signature": "ExamplePrintf_usingDefaultValues()",
                        "Source": "ewoJUHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0fSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pfSIpCn0=",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestApply",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestApply(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YGFgOiAxMCwgYGJgOiAyMCwgYGNgOiAzMH0sIEFwcGx5KG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGJgOiAyLCBgY2A6IDN9LCBmdW5jKF8gW11zdHJpbmcsIHZhbHVlIGFueSkgKGFueSwgYm9vbCkgewoJCXJldHVybiB2YWx1ZS4oaW50KSAqIDEwLCB0cnVlCgl9KSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestCoalesceArrayWithNestedMap",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCoalesceArrayWithNestedMap(t *testing.T)",
                        "Source": "ewoJdmFyIGVyciBlcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG51bWJlcnMgPSBtYWtlKFtdYW55LCAwKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCBtYXBbc3RyaW5nXWFueXsibmFtZSI6ICJ0ZXN0IiwgImNvdW50IjogMn0pCgludW1iZXJzID0gYXBwZW5kKG51bWJlcnMsIG1hcFtzdHJpbmddYW55eyJuYW1lIjogInRlc3QyIiwgImNvdW50IjogNH0pCgludW1iZXJzID0gYXBwZW5kKG51bWJlcnMsIG1hcFtzdHJpbmddYW55eyJuYW1lIjogInRlc3QzIiwgImNvdW50IjogOH0pCglpbnB1dFsibnVtYmVycyJdID0gbnVtYmVycwoJaWYgb3V0cHV0LCBlcnIgPSBDb2FsZXNjZU1hcChpbnB1dCwgIi4iKTsgZXJyICE9IG5pbCB7CgkJdC5FcnJvcmYoIiVzXG4iLCBlcnIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbIm51bWJlcnMuMC5uYW1lIl07ICFvayB8fCB2ICE9ICJ0ZXN0IiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4wLm5hbWUiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJudW1iZXJzLjAuY291bnQiXTsgIW9rIHx8IHYgIT0gMiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4wLmNvdW50IikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsibnVtYmVycy4xLm5hbWUiXTsgIW9rIHx8IHYgIT0gInRlc3QyIiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4xLm5hbWUiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJudW1iZXJzLjEuY291bnQiXTsgIW9rIHx8IHYgIT0gNCB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4xLmNvdW50IikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsibnVtYmVycy4yLm5hbWUiXTsgIW9rIHx8IHYgIT0gInRlc3QzIiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4yLm5hbWUiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJudW1iZXJzLjIuY291bnQiXTsgIW9rIHx8IHYgIT0gOCB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4yLmNvdW50IikKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestCoalesceMultiTierScalar",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCoalesceMultiTierScalar(t *testing.T)",
                        "Source": "ewoJdmFyIGVyciBlcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJaW5wdXRbImlkIl0gPSAidG9wIgoJaW5wdXRbIm5lc3RlZCJdID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCWlucHV0WyJuZXN0ZWQiXS4obWFwW3N0cmluZ11hbnkpWyJkYXRhIl0gPSB0cnVlCglpbnB1dFsibmVzdGVkIl0uKG1hcFtzdHJpbmddYW55KVsidmFsdWUiXSA9IDQuOQoJaW5wdXRbIm5lc3RlZCJdLihtYXBbc3RyaW5nXWFueSlbImF3ZXNvbWUiXSA9ICJ2ZXJ5IHllcyIKCWlmIG91dHB1dCwgZXJyID0gQ29hbGVzY2VNYXAoaW5wdXQsICIuIik7IGVyciAhPSBuaWwgewoJCXQuRXJyb3JmKCIlc1xuIiwgZXJyKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJpZCJdOyAhb2sgfHwgdiAhPSAidG9wIiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAiaWQiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJuZXN0ZWQuZGF0YSJdOyAhb2sgfHwgdiAhPSB0cnVlIHsKCQl0LkVycm9yZigiSW5jb3JyZWN0IHZhbHVlICclcycgZm9yIGtleSAlcyIsIHYsICJuZXN0ZWQuZGF0YSIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbIm5lc3RlZC52YWx1ZSJdOyAhb2sgfHwgdiAhPSA0LjkgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgIm5lc3RlZC52YWx1ZSIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbIm5lc3RlZC5hd2Vzb21lIl07ICFvayB8fCB2ICE9ICJ2ZXJ5IHllcyIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgIm5lc3RlZC5hd2Vzb21lIikKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestCoalesceOneTierScalar",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCoalesceOneTierScalar(t *testing.T)",
                        "Source": "ewoJdmFyIGVyciBlcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJaW5wdXRbImlkIl0gPSAidGVzdCIKCWlucHV0WyJlbmFibGVkIl0gPSB0cnVlCglpbnB1dFsiZmxvYXQiXSA9IDIuNwoJaWYgb3V0cHV0LCBlcnIgPSBDb2FsZXNjZU1hcChpbnB1dCwgIi4iKTsgZXJyICE9IG5pbCB7CgkJdC5FcnJvcmYoIiVzXG4iLCBlcnIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbImlkIl07ICFvayB8fCB2ICE9ICJ0ZXN0IiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAiaWQiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJlbmFibGVkIl07ICFvayB8fCB2ICE9IHRydWUgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImVuYWJsZWQiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJmbG9hdCJdOyAhb2sgfHwgdiAhPSAyLjcgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImZsb2F0IikKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestCoalesceTopLevelArray",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCoalesceTopLevelArray(t *testing.T)",
                        "Source": "ewoJdmFyIGVyciBlcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG51bWJlcnMgPSBtYWtlKFtdYW55LCAwKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCAxKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCAyKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCAzKQoJaW5wdXRbIm51bWJlcnMiXSA9IG51bWJlcnMKCWlmIG91dHB1dCwgZXJyID0gQ29hbGVzY2VNYXAoaW5wdXQsICIuIik7IGVyciAhPSBuaWwgewoJCXQuRXJyb3JmKCIlc1xuIiwgZXJyKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJudW1iZXJzLjAiXTsgIW9rIHx8IHYgIT0gMSB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4wIikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsibnVtYmVycy4xIl07ICFvayB8fCB2ICE9IDIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgIm51bWJlcnMuMSIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbIm51bWJlcnMuMiJdOyAhb2sgfHwgdiAhPSAzIHsKCQl0LkVycm9yZigiSW5jb3JyZWN0IHZhbHVlICclcycgZm9yIGtleSAlcyIsIHYsICJudW1iZXJzLjIiKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestCoalesceTypedArrayWithNestedMap",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCoalesceTypedArrayWithNestedMap(t *testing.T)",
                        "Source": "ewoJdmFyIGVycnMgW11lcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG51bWJlcnMgPSBtYWtlKFtdYW55LCAwKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCBtYXBbc3RyaW5nXWFueXsibmFtZSI6ICJ0ZXN0IiwgImNvdW50IjogMn0pCgludW1iZXJzID0gYXBwZW5kKG51bWJlcnMsIG1hcFtzdHJpbmddYW55eyJuYW1lIjogInRlc3QyIiwgImNvdW50IjogNH0pCgludW1iZXJzID0gYXBwZW5kKG51bWJlcnMsIG1hcFtzdHJpbmddYW55eyJuYW1lIjogInRlc3QzIiwgImNvdW50IjogOH0pCglpbnB1dFsibnVtYmVycyJdID0gbnVtYmVycwoJaWYgb3V0cHV0LCBlcnJzID0gQ29hbGVzY2VNYXBUeXBlZChpbnB1dCwgIi4iLCAiOiIpOyBsZW4oZXJycykgPiAwIHsKCQlmb3IgXywgZXJyIDo9IHJhbmdlIGVycnMgewoJCQl0LkVycm9yZigiJXNcbiIsIGVycikKCQl9Cgl9CglpZiB2LCBvayA6PSBvdXRwdXRbInN0cjpudW1iZXJzLjAubmFtZSJdOyAhb2sgfHwgdiAhPSAidGVzdCIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgIm51bWJlcnMuMC5uYW1lIikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsiaW50Om51bWJlcnMuMC5jb3VudCJdOyAhb2sgfHwgdiAhPSAiMiIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImludDpudW1iZXJzLjAuY291bnQiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJzdHI6bnVtYmVycy4xLm5hbWUiXTsgIW9rIHx8IHYgIT0gInRlc3QyIiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAic3RyOm51bWJlcnMuMS5uYW1lIikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsiaW50Om51bWJlcnMuMS5jb3VudCJdOyAhb2sgfHwgdiAhPSAiNCIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImludDpudW1iZXJzLjEuY291bnQiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJzdHI6bnVtYmVycy4yLm5hbWUiXTsgIW9rIHx8IHYgIT0gInRlc3QzIiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAic3RyOm51bWJlcnMuMi5uYW1lIikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsiaW50Om51bWJlcnMuMi5jb3VudCJdOyAhb2sgfHwgdiAhPSAiOCIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImludDpudW1iZXJzLjIuY291bnQiKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestCoalesceTypedMultiTierScalar",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCoalesceTypedMultiTierScalar(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJycyBbXWVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaWQiXSA9ICJ0b3AiCglpbnB1dFsibmVzdGVkIl0gPSBtYXBbc3RyaW5nXWFueXtgZGF0YWA6IHRydWUsIGB2YWx1ZWA6IDQuOSwgYGF3ZXNvbWVgOiAidmVyeSB5ZXMifQoJaWYgb3V0cHV0LCBlcnJzID0gQ29hbGVzY2VNYXBUeXBlZChpbnB1dCwgIl9fIiwgInwiKTsgbGVuKGVycnMpID4gMCB7CgkJZm9yIF8sIGVyciA6PSByYW5nZSBlcnJzIHsKCQkJdC5FcnJvcmYoIiVzXG4iLCBlcnIpCgkJfQoJfQoJYXNzZXJ0LkVxdWFsKGB0b3BgLCBvdXRwdXRbYHN0cnxpZGBdKQoJYXNzZXJ0LkVxdWFsKGB0cnVlYCwgb3V0cHV0W2Bib29sfG5lc3RlZF9fZGF0YWBdKQoJYXNzZXJ0LkVxdWFsKGA0LjlgLCBvdXRwdXRbYGZsb2F0fG5lc3RlZF9fdmFsdWVgXSkKCWFzc2VydC5FcXVhbChgdmVyeSB5ZXNgLCBvdXRwdXRbYHN0cnxuZXN0ZWRfX2F3ZXNvbWVgXSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestCoalesceTypedOneTierScalar",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCoalesceTypedOneTierScalar(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJycyBbXWVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaWQiXSA9ICJ0ZXN0IgoJaW5wdXRbImVuYWJsZWQiXSA9IHRydWUKCWlucHV0WyJmbG9hdCJdID0gMi43CglpZiBvdXRwdXQsIGVycnMgPSBDb2FsZXNjZU1hcFR5cGVkKGlucHV0LCAiLiIsICI6Iik7IGxlbihlcnJzKSA+IDAgewoJCWZvciBfLCBlcnIgOj0gcmFuZ2UgZXJycyB7CgkJCXQuRXJyb3JmKCIlc1xuIiwgZXJyKQoJCX0KCX0KCWFzc2VydC5FcXVhbChgdGVzdGAsIG91dHB1dFtgc3RyOmlkYF0pCglhc3NlcnQuRXF1YWwoYHRydWVgLCBvdXRwdXRbYGJvb2w6ZW5hYmxlZGBdKQoJYXNzZXJ0LkVxdWFsKGAyLjdgLCBvdXRwdXRbYGZsb2F0OmZsb2F0YF0pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestCoalesceTypedTopLevelArray",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCoalesceTypedTopLevelArray(t *testing.T)",
                        "Source": "ewoJdmFyIGVycnMgW11lcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG51bWJlcnMgPSBtYWtlKFtdYW55LCAwKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCAxKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCAyKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCAzKQoJaW5wdXRbIm51bWJlcnMiXSA9IG51bWJlcnMKCWlmIG91dHB1dCwgZXJycyA9IENvYWxlc2NlTWFwVHlwZWQoaW5wdXQsICIuIiwgIjoiKTsgbGVuKGVycnMpID4gMCB7CgkJZm9yIF8sIGVyciA6PSByYW5nZSBlcnJzIHsKCQkJdC5FcnJvcmYoIiVzXG4iLCBlcnIpCgkJfQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJpbnQ6bnVtYmVycy4wIl07ICFvayB8fCB2ICE9ICIxIiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAiaW50Om51bWJlcnMuMCIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbImludDpudW1iZXJzLjEiXTsgIW9rIHx8IHYgIT0gIjIiIHsKCQl0LkVycm9yZigiSW5jb3JyZWN0IHZhbHVlICclcycgZm9yIGtleSAlcyIsIHYsICJpbnQ6bnVtYmVycy4xIikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsiaW50Om51bWJlcnMuMiJdOyAhb2sgfHwgdiAhPSAiMyIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImludDpudW1iZXJzLjIiKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepGetArrayElement",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepGetArrayElement(t *testing.T)",
                        "Source": "ewoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCWlucHV0ID0gRGVlcFNldChpbnB1dCwgW11zdHJpbmd7InRhZ3MiLCAiMCJ9LCAiYmFzZSIpLihtYXBbc3RyaW5nXWFueSkKCWlucHV0ID0gRGVlcFNldChpbnB1dCwgW11zdHJpbmd7InRhZ3MiLCAiMSJ9LCAib3RoZXIiKS4obWFwW3N0cmluZ11hbnkpCglpZiB2IDo9IERlZXBHZXQoaW5wdXQsIFtdc3RyaW5neyJ0YWdzIiwgIjAifSwgbmlsKTsgdiAhPSAiYmFzZSIgewoJCXQuRXJyb3JmKCIlc1xuIiwgdikKCX0KCWlmIHYgOj0gRGVlcEdldChpbnB1dCwgW11zdHJpbmd7InRhZ3MiLCAiMSJ9LCBuaWwpOyB2ICE9ICJvdGhlciIgewoJCXQuRXJyb3JmKCIlc1xuIiwgdikKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepGetBool",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepGetBool(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55CglpbnB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dCA9IERlZXBTZXQoaW5wdXQsIFtdc3RyaW5neyJkZWVwbHkiLCAibmVzdGVkIiwgInZhbHVlIn0sIHRydWUpCglpbnB1dCA9IERlZXBTZXQoaW5wdXQsIFtdc3RyaW5neyJkZWVwbHkiLCAibmVzdGVkIiwgInRoaW5nIn0sICJub3BlIikKCWFzc2VydC5UcnVlKERlZXBHZXRCb29sKGlucHV0LCBbXXN0cmluZ3siZGVlcGx5IiwgIm5lc3RlZCIsICJ2YWx1ZSJ9KSkKCWFzc2VydC5GYWxzZShEZWVwR2V0Qm9vbChpbnB1dCwgW11zdHJpbmd7ImRlZXBseSIsICJuZXN0ZWQiLCAib3RoZXIifSkpCglhc3NlcnQuRmFsc2UoRGVlcEdldEJvb2woaW5wdXQsIFtdc3RyaW5neyJkZWVwbHkiLCAibmVzdGVkIiwgIm5vcGUifSkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepGetMapInMap",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepGetMapInMap(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW4gPSBtYXBbc3RyaW5nXWFueXtgb2tgOiB0cnVlLCBgYWx3YXlzYDogbWFwW3N0cmluZ11hbnl7YGZpbmlzaGluZ2A6IG1hcFtzdHJpbmddYW55e2BlYWNoX290aGVyc2A6IGBzZW50ZW5jZXNgfX19Cglhc3NlcnQuRXF1YWwoYHNlbnRlbmNlc2AsIERlZXBHZXQoaW4sIFtdc3RyaW5ne2BhbHdheXNgLCBgZmluaXNoaW5nYCwgYGVhY2hfb3RoZXJzYH0pKQoJYXNzZXJ0Lk5pbChEZWVwR2V0KGluLCBbXXN0cmluZ3tgYWx3YXlzYCwgYGZpbmlzaGluZ2AsIGBlYWNoX290aGVyc2AsIGBzYW5kd2ljaGVzYH0pKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepGetMapKeyInArray",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepGetMapKeyInArray(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJaW5wdXQgPSBEZWVwU2V0KGlucHV0LCBbXXN0cmluZ3siZGV2aWNlcyIsICIwIiwgIm5hbWUifSwgImxvIikuKG1hcFtzdHJpbmddYW55KQoJaW5wdXQgPSBEZWVwU2V0KGlucHV0LCBbXXN0cmluZ3siZGV2aWNlcyIsICIxIiwgIm5hbWUifSwgImV0aDAiKS4obWFwW3N0cmluZ11hbnkpCglhc3NlcnQuRXF1YWwoYGxvYCwgRGVlcEdldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMCIsICJuYW1lIn0sIG5pbCkpCglhc3NlcnQuRXF1YWwoYGV0aDBgLCBEZWVwR2V0KGlucHV0LCBbXXN0cmluZ3siZGV2aWNlcyIsICIxIiwgIm5hbWUifSwgbmlsKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepGetMapKeyInDeepArray",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepGetMapKeyInDeepArray(t *testing.T)",
                        "Source": "ewoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCWlucHV0ID0gRGVlcFNldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMCIsICJzd2l0Y2giLCAicGVlcnMiLCAiMCJ9LCAiMC4wLjAuMCIpLihtYXBbc3RyaW5nXWFueSkKCWlucHV0ID0gRGVlcFNldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMCIsICJzd2l0Y2giLCAicGVlcnMiLCAiMSJ9LCAiMC4wLjEuMSIpLihtYXBbc3RyaW5nXWFueSkKCWlucHV0ID0gRGVlcFNldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMSIsICJzd2l0Y2giLCAicGVlcnMiLCAiMCJ9LCAiMS4xLjAuMCIpLihtYXBbc3RyaW5nXWFueSkKCWlucHV0ID0gRGVlcFNldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMSIsICJzd2l0Y2giLCAicGVlcnMiLCAiMSJ9LCAiMS4xLjEuMSIpLihtYXBbc3RyaW5nXWFueSkKCWlmIHYgOj0gRGVlcEdldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMCIsICJzd2l0Y2giLCAicGVlcnMiLCAiMCJ9LCBuaWwpOyB2ICE9ICIwLjAuMC4wIiB7CgkJdC5FcnJvcmYoIiVzXG4iLCB2KQoJfQoJaWYgdiA6PSBEZWVwR2V0KGlucHV0LCBbXXN0cmluZ3siZGV2aWNlcyIsICIwIiwgInN3aXRjaCIsICJwZWVycyIsICIxIn0sIG5pbCk7IHYgIT0gIjAuMC4xLjEiIHsKCQl0LkVycm9yZigiJXNcbiIsIHYpCgl9CglpZiB2IDo9IERlZXBHZXQoaW5wdXQsIFtdc3RyaW5neyJkZXZpY2VzIiwgIjEiLCAic3dpdGNoIiwgInBlZXJzIiwgIjAifSwgbmlsKTsgdiAhPSAiMS4xLjAuMCIgewoJCXQuRXJyb3JmKCIlc1xuIiwgdikKCX0KCWlmIHYgOj0gRGVlcEdldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMSIsICJzd2l0Y2giLCAicGVlcnMiLCAiMSJ9LCBuaWwpOyB2ICE9ICIxLjEuMS4xIiB7CgkJdC5FcnJvcmYoIiVzXG4iLCB2KQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepGetNestedArrayElements",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepGetNestedArrayElements(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYXBbc3RyaW5nXWFueXtgaW50ZXJmYWNlc2A6IFtdc3RyaW5ne2BsbzBgLCBgZW4xYCwgYHdsYW4wYH19Cglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7YGxvMGAsIGBlbjFgLCBgd2xhbjBgfSwgRGVlcEdldChpbnB1dCwgW11zdHJpbmd7YGludGVyZmFjZXNgLCBgKmB9KSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepGetNestedArrayOfMaps",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepGetNestedArrayOfMaps(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYXBbc3RyaW5nXWFueXtgaW50ZXJmYWNlc2A6IFtdbWFwW3N0cmluZ11hbnl7e2BuYW1lYDogYGxvMGAsIGB0eXBlYDogYGxvb3BiYWNrYH0sIHtgbmFtZWA6IGBlbjFgLCBgdHlwZWA6IGBldGhlcm5ldGB9LCB7YG5hbWVgOiBgd2xhbjBgLCBgdHlwZWA6IGBldGhlcm5ldGAsIGB3aXJlbGVzc2A6IHRydWV9fX0KCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXtgbG9vcGJhY2tgLCBgZXRoZXJuZXRgLCBgZXRoZXJuZXRgfSwgRGVlcEdldChpbnB1dCwgW11zdHJpbmd7YGludGVyZmFjZXNgLCBgKmAsIGB0eXBlYH0pKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55e2ZhbHNlLCBmYWxzZSwgdHJ1ZX0sIERlZXBHZXQoaW5wdXQsIFtdc3RyaW5ne2BpbnRlcmZhY2VzYCwgYCpgLCBgd2lyZWxlc3NgfSwgZmFsc2UpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepGetScalar",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepGetScalar(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJaW5wdXQgPSBEZWVwU2V0KGlucHV0LCBbXXN0cmluZ3siZGVlcGx5IiwgIm5lc3RlZCIsICJ2YWx1ZSJ9LCAxLjQpLihtYXBbc3RyaW5nXWFueSkKCWFzc2VydC5Ob3ROaWwoRGVlcEdldChpbnB1dCwgW11zdHJpbmd7ImRlZXBseSIsICJuZXN0ZWQiLCAidmFsdWUifSwgbmlsKSkKCWFzc2VydC5FcXVhbCh0cnVlLCBEZWVwR2V0KGlucHV0LCBbXXN0cmluZ3siZGVlcGx5IiwgIm5lc3RlZCIsICJ2YWx1ZTIifSwgdHJ1ZSkpCglhc3NlcnQuRXF1YWwoYGZhbGxiYWNrYCwgRGVlcEdldChpbnB1dCwgW11zdHJpbmd7ImRlZXBseSIsICJuZXN0ZWQiLCAidmFsdWUyIn0sICJmYWxsYmFjayIpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepSetArray",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepSetArray(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciB0ZXN0VmFsdWVzID0gW11zdHJpbmd7ImZpcnN0IiwgInNlY29uZCJ9Cglmb3IgaSwgdHYgOj0gcmFuZ2UgdGVzdFZhbHVlcyB7CgkJb3V0cHV0ID0gRGVlcFNldChvdXRwdXQsIFtdc3RyaW5neyJ0b3AtYXJyYXkiLCBmbXQuU3ByaW50KGkpfSwgdHYpLihtYXBbc3RyaW5nXWFueSkKCX0KCXRvcEFycmF5LCBvayA6PSBvdXRwdXRbInRvcC1hcnJheSJdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FbGVtZW50c01hdGNoKHRlc3RWYWx1ZXMsIHRvcEFycmF5KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepSetArrayIndices",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepSetArrayIndices(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYXBbc3RyaW5nXWFueXtgdGhpbmdzYDogbWFwW3N0cmluZ11hbnl7YHR5cGUxYDogW11zdHJpbmd7YGZpcnN0YCwgYHNlY29uZGAsIGB0aGlyZGB9LCBgdHlwZTJgOiBbXXN0cmluZ3tgZmlyc3RgLCBgc2Vjb25kYCwgYHRoaXJkYH0sIGB0eXBlM2A6IFtdYW55e21hcFtzdHJpbmddYW55e2BuYW1lYDogYGZpcnN0YCwgYGluZGV4YDogMH0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYGZpcnN0YCwgYGluZGV4YDogMX0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYGZpcnN0YCwgYGluZGV4YDogMn19fX0KCXZhciBvdXRwdXQgPSBEZWVwU2V0KGlucHV0LCBbXXN0cmluZ3tgdGhpbmdzYCwgYHR5cGUxYCwgYDBgfSwgYEZpcnN0YCkKCURlZXBTZXQob3V0cHV0LCBbXXN0cmluZ3tgdGhpbmdzYCwgYHR5cGUxYCwgYDJgfSwgYFRoaXJkYCkKCURlZXBTZXQob3V0cHV0LCBbXXN0cmluZ3tgdGhpbmdzYCwgYHR5cGUyYCwgYDFgfSwgYFNlY29uZGApCglEZWVwU2V0KG91dHB1dCwgW11zdHJpbmd7YHRoaW5nc2AsIGB0eXBlMmAsIGAyYH0sIG5pbCkKCURlZXBTZXQob3V0cHV0LCBbXXN0cmluZ3tgdGhpbmdzYCwgYHR5cGUyYCwgYDNgfSwgYHRoaXJkYCkKCURlZXBTZXQob3V0cHV0LCBbXXN0cmluZ3tgdGhpbmdzYCwgYHR5cGUzYCwgYDBgLCBgaW5kZXhgfSwgbWFwW3N0cmluZ11hbnl7YG51bWA6IDB9KQoJRGVlcFNldChvdXRwdXQsIFtdc3RyaW5ne2B0aGluZ3NgLCBgdHlwZTNgLCBgMWAsIGBpbmRleGB9LCBtYXBbc3RyaW5nXWFueXtgbnVtYDogMX0pCglEZWVwU2V0KG91dHB1dCwgW11zdHJpbmd7YHRoaW5nc2AsIGB0eXBlM2AsIGAyYCwgYGluZGV4YH0sIG1hcFtzdHJpbmddYW55e2BudW1gOiAyfSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgdGhpbmdzYDogbWFwW3N0cmluZ11hbnl7YHR5cGUxYDogW11hbnl7YEZpcnN0YCwgYHNlY29uZGAsIGBUaGlyZGB9LCBgdHlwZTJgOiBbXWFueXtgZmlyc3RgLCBgU2Vjb25kYCwgbmlsLCBgdGhpcmRgfSwgYHR5cGUzYDogW11hbnl7bWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgZmlyc3RgLCBgaW5kZXhgOiBtYXBbc3RyaW5nXWFueXtgbnVtYDogMH19LCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBmaXJzdGAsIGBpbmRleGA6IG1hcFtzdHJpbmddYW55e2BudW1gOiAxfX0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYGZpcnN0YCwgYGluZGV4YDogbWFwW3N0cmluZ11hbnl7YG51bWA6IDJ9fX19fSwgb3V0cHV0KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepSetBool",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepSetBool(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciB0ZXN0VmFsdWUgPSB0cnVlCglvdXRwdXQgPSBEZWVwU2V0KG91dHB1dCwgW11zdHJpbmd7ImJvb2wifSwgdGVzdFZhbHVlKS4obWFwW3N0cmluZ11hbnkpCgl2YWx1ZSwgb2sgOj0gb3V0cHV0WyJib29sIl0KCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKHRlc3RWYWx1ZSwgdmFsdWUpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepSetNestedMapCreation",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepSetNestedMapCreation(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCW91dHB1dCA9IERlZXBTZXQob3V0cHV0LCBbXXN0cmluZ3siZGVlcGx5IiwgIm5lc3RlZCIsICJtYXAifSwgdHJ1ZSkuKG1hcFtzdHJpbmddYW55KQoJb3V0cHV0ID0gRGVlcFNldChvdXRwdXQsIFtdc3RyaW5neyJkZWVwbHkiLCAibmVzdGVkIiwgImNvdW50In0sIDIpLihtYXBbc3RyaW5nXWFueSkKCWRlZXBseSwgb2sgOj0gb3V0cHV0WyJkZWVwbHkiXQoJYXNzZXJ0LlRydWUob2spCgl2YXIgZGVlcGx5TWFwID0gZGVlcGx5LihtYXBbc3RyaW5nXWFueSkKCW5lc3RlZCwgb2sgOj0gZGVlcGx5TWFwWyJuZXN0ZWQiXQoJYXNzZXJ0LlRydWUob2spCgl2YXIgbmVzdGVkTWFwID0gbmVzdGVkLihtYXBbc3RyaW5nXWFueSkKCV8sIG9rID0gbmVzdGVkTWFwWyJtYXAiXQoJYXNzZXJ0LlRydWUob2spCglfLCBvayA9IG5lc3RlZE1hcFsiY291bnQiXQoJYXNzZXJ0LlRydWUob2spCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepSetNothing",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepSetNothing(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCW91dHB1dCA9IERlZXBTZXQob3V0cHV0LCBbXXN0cmluZ3t9LCAieWF5IikuKG1hcFtzdHJpbmddYW55KQoJYXNzZXJ0LkVtcHR5KG91dHB1dCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepSetReplace",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepSetReplace(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFwW3N0cmluZ11hbnl7YHRoaXNgOiBtYXBbc3RyaW5nXWFueXtgdGVzdGA6IGAxYH19CglEZWVwU2V0KG91dHB1dCwgW11zdHJpbmd7InRoaXMiLCAidGVzdCJ9LCBgMmApCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YHRoaXNgOiBtYXBbc3RyaW5nXWFueXtgdGVzdGA6IGAyYH19LCBvdXRwdXQpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepSetString",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepSetString(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciB0ZXN0VmFsdWUgPSAidGVzdC1zdHJpbmciCglvdXRwdXQgPSBEZWVwU2V0KG91dHB1dCwgW11zdHJpbmd7InN0ciJ9LCB0ZXN0VmFsdWUpLihtYXBbc3RyaW5nXWFueSkKCXZhbHVlLCBvayA6PSBvdXRwdXRbInN0ciJdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbCh0ZXN0VmFsdWUsIHZhbHVlKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepSetStructField",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepSetStructField(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIHRlc3RTdHJ1Y3REZWVwU2V0IHN0cnVjdCB7CgkJU3RyaW5nIHN0cmluZwoJCUludCAgICBpbnQKCQlGbG9hdCAgZmxvYXQ2NAoJCUJvb2wgICBib29sCgl9Cgl2YXIgaW5zdGFuY2UgdGVzdFN0cnVjdERlZXBTZXQKCURlZXBTZXQoJmluc3RhbmNlLCBbXXN0cmluZ3siU3RyaW5nIn0sIGBIZWxsb2ApCglEZWVwU2V0KCZpbnN0YW5jZSwgW11zdHJpbmd7IkludCJ9LCAxMjMpCglEZWVwU2V0KCZpbnN0YW5jZSwgW11zdHJpbmd7IkZsb2F0In0sIDMuMTQpCglEZWVwU2V0KCZpbnN0YW5jZSwgW11zdHJpbmd7IkJvb2wifSwgdHJ1ZSkKCWFzc2VydC5FcXVhbChgSGVsbG9gLCBpbnN0YW5jZS5TdHJpbmcpCglhc3NlcnQuRXF1YWwoMTIzLCBpbnN0YW5jZS5JbnQpCglhc3NlcnQuRXF1YWwoMy4xNCwgaW5zdGFuY2UuRmxvYXQpCglhc3NlcnQuVHJ1ZShpbnN0YW5jZS5Cb29sKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDeepStructs",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDeepStructs(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW4gPSAmbWFwVGVzdFN0cnVjdHtOYW1lOiBgdG9wbGV2ZWxgLCBOZXN0ZWRQOiAmbWFwVGVzdFN1YnN0cnVjdHtOYW1lOiBgb25lLXB0cmAsIFZhbHVlOiB0cnVlfSwgTmVzdGVkOiBtYXBUZXN0U3Vic3RydWN0e05hbWU6IGBvbmUtdmFsdWVgLCBWYWx1ZTogMy4xNH19Cglhc3NlcnQuRXF1YWwoYHRvcGxldmVsYCwgRGVlcEdldChpbiwgW11zdHJpbmd7YE5hbWVgfSkpCglhc3NlcnQuRXF1YWwoYG9uZS1wdHJgLCBEZWVwR2V0KGluLCBbXXN0cmluZ3tgTmVzdGVkUGAsIGBOYW1lYH0pKQoJYXNzZXJ0LkVxdWFsKHRydWUsIERlZXBHZXQoaW4sIFtdc3RyaW5ne2BOZXN0ZWRQYCwgYFZhbHVlYH0pKQoJYXNzZXJ0LkVxdWFsKGBvbmUtdmFsdWVgLCBEZWVwR2V0KGluLCBbXXN0cmluZ3tgTmVzdGVkYCwgYE5hbWVgfSkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgzLjE0KSwgRGVlcEdldChpbiwgW11zdHJpbmd7YE5lc3RlZGAsIGBWYWx1ZWB9KSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDelete",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDelete(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW4gPSBtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogMiwgYGNgOiAzfQoJYXNzZXJ0Lk5vRXJyb3IoRGVsZXRlKGluLCBgYmApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGNgOiAzfSwgaW4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDiffuseMap",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDiffuseMap(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCW91dHB1dFsibmFtZSJdID0gInRlc3QudGhpbmcubmFtZSIKCW91dHB1dFsiZW5hYmxlZCJdID0gdHJ1ZQoJb3V0cHV0WyJjb29sLmJlYW5zIl0gPSAieWVwIgoJb3V0cHV0WyJ0YWdzLjAiXSA9ICJiYXNlIgoJb3V0cHV0WyJ0YWdzLjEiXSA9ICJvdGhlciIKCW91dHB1dFsidGFncy4yIl0gPSAibW9yZSIKCW91dHB1dFsidGFncy4zIl0gPSAic3RpbGwtbW9yZSIKCW91dHB1dFsiZGV2aWNlcy4wLm5hbWUiXSA9ICJsbyIKCW91dHB1dFsiZGV2aWNlcy4xLm5hbWUiXSA9ICJldGgwIgoJb3V0cHV0WyJkZXZpY2VzLjEucGVlcnMuMCJdID0gIjAuMC4wLjAiCglvdXRwdXRbImRldmljZXMuMS5wZWVycy4xIl0gPSAiMS4xLjEuMSIKCW91dHB1dFsiZGV2aWNlcy4xLnBlZXJzLjIiXSA9ICIyLjIuMi4yIgoJb3V0cHV0WyJkZXZpY2VzLjEuc3dpdGNoLjAubmFtZSJdID0gImFhOmJiOmNjOmRkOmVlOmZmIgoJb3V0cHV0WyJkZXZpY2VzLjEuc3dpdGNoLjAuaXAiXSA9ICIxMTEuMjIyLjAuMSIKCW91dHB1dFsiZGV2aWNlcy4xLnN3aXRjaC4xLm5hbWUiXSA9ICJjYzpkZDplZTpmZjpiYjpkZCIKCW91dHB1dFsiZGV2aWNlcy4xLnN3aXRjaC4xLmlwIl0gPSAiMTExLjIyMi4wLjIiCglvdXRwdXQsIGVyciA6PSBEaWZmdXNlTWFwKG91dHB1dCwgIi4iKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJdiwgXyA6PSBvdXRwdXRbIm5hbWUiXQoJYXNzZXJ0LkVxdWFsKCJ0ZXN0LnRoaW5nLm5hbWUiLCB2KQoJdiwgXyA9IG91dHB1dFsiZW5hYmxlZCJdCglhc3NlcnQuRXF1YWwodHJ1ZSwgdikKCXYsIG9rIDo9IG91dHB1dFsidGFncyJdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5MZW4odiwgNCkKCXZhciB2QXJyYXkgPSB2LihbXWFueSkKCWFzc2VydC5FcXVhbCgiYmFzZSIsIHZBcnJheVswXSkKCWFzc2VydC5FcXVhbCgib3RoZXIiLCB2QXJyYXlbMV0pCglhc3NlcnQuRXF1YWwoIm1vcmUiLCB2QXJyYXlbMl0pCglhc3NlcnQuRXF1YWwoInN0aWxsLW1vcmUiLCB2QXJyYXlbM10pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDiffuseMultiTierComplex",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDiffuseMultiTierComplex(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyIGVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaXRlbXMuMC5uYW1lIl0gPSAiRmlyc3QiCglpbnB1dFsiaXRlbXMuMC5hZ2UiXSA9IDU0CglpbnB1dFsiaXRlbXMuMS5uYW1lIl0gPSAiU2Vjb25kIgoJaW5wdXRbIml0ZW1zLjEuYWdlIl0gPSA3NwoJaW5wdXRbIml0ZW1zLjIubmFtZSJdID0gIlRoaXJkIgoJaW5wdXRbIml0ZW1zLjIuYWdlIl0gPSA4MgoJb3V0cHV0LCBlcnIgPSBEaWZmdXNlTWFwKGlucHV0LCAiLiIpCglhc3NlcnQuTm9FcnJvcihlcnIpCglpX2l0ZW1zLCBvayA6PSBvdXRwdXRbIml0ZW1zIl0KCWFzc2VydC5UcnVlKG9rKQoJdmFyIGl0ZW1zID0gaV9pdGVtcy4oW11hbnkpCglhc3NlcnQuTGVuKGl0ZW1zLCAzKQoJZm9yIGl0ZW1faWQsIG9iaiA6PSByYW5nZSBpdGVtcyB7CgkJZm9yIGssIHYgOj0gcmFuZ2UgTShvYmopLk1hcE5hdGl2ZSgpIHsKCQkJaW5WYWx1ZSwgb2sgOj0gaW5wdXRbZm10LlNwcmludGYoIml0ZW1zLiVkLiVzIiwgaXRlbV9pZCwgayldCgkJCWFzc2VydC5UcnVlKG9rKQoJCQlhc3NlcnQuRXF1YWwodiwgaW5WYWx1ZSkKCQl9Cgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDiffuseMultiTierMixed",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDiffuseMultiTierMixed(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyIGVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaXRlbXMuMC50YWdzIl0gPSBbXXN0cmluZ3siYmFzZSIsICJvdGhlciJ9CglpbnB1dFsiaXRlbXMuMS50YWdzIl0gPSBbXXN0cmluZ3sidGhpbmciLCAic3RpbGwtb3RoZXIiLCAibW9yZS1vdGhlciJ9CglpbnB1dFsiaXRlbXMuMi50YWdzIl0gPSBbXXN0cmluZ3sibGFzdCJ9CglvdXRwdXQsIGVyciA9IERpZmZ1c2VNYXAoaW5wdXQsICIuIikKCWFzc2VydC5Ob0Vycm9yKGVycikKCWlfaXRlbXMsIG9rIDo9IG91dHB1dFsiaXRlbXMiXQoJYXNzZXJ0LlRydWUob2spCgl2YXIgaXRlbXMgPSBpX2l0ZW1zLihbXWFueSkKCWFzc2VydC5MZW4oaXRlbXMsIDMpCglmb3IgaXRlbV9pZCwgb2JqIDo9IHJhbmdlIGl0ZW1zIHsKCQlmb3IgaywgdiA6PSByYW5nZSBNKG9iaikuTWFwTmF0aXZlKCkgewoJCQl2YXIgdkFyeSA9IHNsaWNldXRpbC5TdHJpbmdpZnkodikKCQkJaW5WYWx1ZSwgb2sgOj0gaW5wdXRbZm10LlNwcmludGYoIml0ZW1zLiVkLiVzIiwgaXRlbV9pZCwgayldCgkJCWFzc2VydC5UcnVlKG9rKQoJCQl2YXIgaW5WYWx1ZUFyeSA9IGluVmFsdWUuKFtdc3RyaW5nKQoJCQlmb3IgaSwgdkFyeVYgOj0gcmFuZ2UgdkFyeSB7CgkJCQlhc3NlcnQuRXF1YWwoaW5WYWx1ZUFyeVtpXSwgdkFyeVYpCgkJCX0KCQl9Cgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDiffuseMultiTierScalar",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDiffuseMultiTierScalar(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyIGVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaXRlbXMuMCJdID0gNTQKCWlucHV0WyJpdGVtcy4xIl0gPSA3NwoJaW5wdXRbIml0ZW1zLjIiXSA9IDgyCglvdXRwdXQsIGVyciA9IERpZmZ1c2VNYXAoaW5wdXQsICIuIikKCWFzc2VydC5Ob0Vycm9yKGVycikKCWlfaXRlbXMsIG9rIDo9IG91dHB1dFsiaXRlbXMiXQoJYXNzZXJ0LlRydWUob2spCgl2YXIgaXRlbXMgPSBpX2l0ZW1zLihbXWFueSkKCWZvciBpLCB2IDo9IHJhbmdlIFtdaW50ezU0LCA3NywgODJ9IHsKCQlhc3NlcnQuVHJ1ZShpIDwgbGVuKGl0ZW1zKSkKCQlhc3NlcnQuRXF1YWwodiwgaXRlbXNbaV0uKGludCkpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDiffuseOneTierComplex",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDiffuseOneTierComplex(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyIGVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiYXJyYXkiXSA9IFtdc3RyaW5neyJmaXJzdCIsICJ0aGlyZCIsICJmaWZ0aCJ9CglpbnB1dFsibnVtYXJ5Il0gPSBbXWludHs5LCA3LCAzfQoJaW5wdXRbInRoaW5ncyJdID0gbWFwW3N0cmluZ11pbnR7Im9uZSI6IDEsICJ0d28iOiAyLCAidGhyZWUiOiAzfQoJb3V0cHV0LCBlcnIgPSBEaWZmdXNlTWFwKGlucHV0LCAiLiIpCglhc3NlcnQuTm9FcnJvcihlcnIpCglfLCBvayA6PSBvdXRwdXRbImFycmF5Il0KCWFzc2VydC5UcnVlKG9rKQoJZm9yIGksIHYgOj0gcmFuZ2Ugb3V0cHV0WyJhcnJheSJdLihbXXN0cmluZykgewoJCWFzc2VydC5FcXVhbCh2LCBpbnB1dFsiYXJyYXkiXS4oW11zdHJpbmcpW2ldKQoJfQoJXywgb2sgPSBvdXRwdXRbIm51bWFyeSJdCglhc3NlcnQuVHJ1ZShvaykKCWZvciBpLCB2IDo9IHJhbmdlIG91dHB1dFsibnVtYXJ5Il0uKFtdaW50KSB7CgkJYXNzZXJ0LkVxdWFsKHYsIGlucHV0WyJudW1hcnkiXS4oW11pbnQpW2ldKQoJfQoJXywgb2sgPSBvdXRwdXRbInRoaW5ncyJdCglhc3NlcnQuVHJ1ZShvaykKCWZvciBrLCB2IDo9IHJhbmdlIG91dHB1dFsidGhpbmdzIl0uKG1hcFtzdHJpbmddaW50KSB7CgkJaW5wdXRWYWx1ZSwgb2sgOj0gaW5wdXRbInRoaW5ncyJdLihtYXBbc3RyaW5nXWludClba10KCQlhc3NlcnQuVHJ1ZShvaykKCQlhc3NlcnQuRXF1YWwodiwgaW5wdXRWYWx1ZSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDiffuseOneTierScalar",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDiffuseOneTierScalar(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyIGVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaWQiXSA9ICJ0ZXN0IgoJaW5wdXRbImVuYWJsZWQiXSA9IHRydWUKCWlucHV0WyJmbG9hdCJdID0gMi43CglvdXRwdXQsIGVyciA9IERpZmZ1c2VNYXAoaW5wdXQsICIuIikKCWFzc2VydC5Ob0Vycm9yKGVycikKCXYsIG9rIDo9IG91dHB1dFsiaWQiXQoJYXNzZXJ0LlRydWUob2spCglhc3NlcnQuRXF1YWwoInRlc3QiLCB2KQoJdiwgb2sgPSBvdXRwdXRbImVuYWJsZWQiXQoJYXNzZXJ0LlRydWUob2spCglhc3NlcnQuRXF1YWwodHJ1ZSwgdikKCXYsIG9rID0gb3V0cHV0WyJmbG9hdCJdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbCgyLjcsIHYpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDiffuseTypedMultiTierComplex",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDiffuseTypedMultiTierComplex(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJycyBbXWVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsic3RyOml0ZW1zLjAubmFtZSJdID0gIkZpcnN0IgoJaW5wdXRbImludDppdGVtcy4wLmFnZSJdID0gNTQKCWlucHV0WyJzdHI6aXRlbXMuMS5uYW1lIl0gPSAiU2Vjb25kIgoJaW5wdXRbImludDppdGVtcy4xLmFnZSJdID0gNzcKCWlucHV0WyJzdHI6aXRlbXMuMi5uYW1lIl0gPSAiVGhpcmQiCglpbnB1dFsiaW50Oml0ZW1zLjIuYWdlIl0gPSA4MgoJb3V0cHV0LCBlcnJzID0gRGlmZnVzZU1hcFR5cGVkKGlucHV0LCAiLiIsICI6IikKCWFzc2VydC5MZW4oZXJycywgMCkKCWFzc2VydC5MZW4ob3V0cHV0WyJpdGVtcyJdLCAzKQoJaWYgaV9pdGVtcywgb2sgOj0gb3V0cHV0WyJpdGVtcyJdOyBvayB7CgkJdmFyIGl0ZW1zID0gaV9pdGVtcy4oW11hbnkpCgkJZm9yIGl0ZW1faWQsIG9iaiA6PSByYW5nZSBpdGVtcyB7CgkJCWZvciBrLCB2IDo9IHJhbmdlIE0ob2JqKS5NYXBOYXRpdmUoKSB7CgkJCQlzd2l0Y2ggayB7CgkJCQljYXNlIGBuYW1lYDoKCQkJCQlhc3NlcnQuRXF1YWwodiwgaW5wdXRbZm10LlNwcmludGYoInN0cjppdGVtcy4lZC4lcyIsIGl0ZW1faWQsIGspXSkKCQkJCWNhc2UgYGFnZWA6CgkJCQkJYXNzZXJ0LkVxdWFsVmFsdWVzKHYsIGlucHV0W2ZtdC5TcHJpbnRmKCJpbnQ6aXRlbXMuJWQuJXMiLCBpdGVtX2lkLCBrKV0pCgkJCQl9CgkJCX0KCQl9Cgl9IGVsc2UgewoJCXQuRXJyb3JmKCJLZXkgJ2l0ZW1zJyBpcyBtaXNzaW5nIGZyb20gb3V0cHV0OiAldiIsIG91dHB1dCkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDiffuseTypedMultiTierMixed",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDiffuseTypedMultiTierMixed(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJycyBbXWVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaXRlbXMuMC50YWdzIl0gPSBbXXN0cmluZ3siYmFzZSIsICJvdGhlciJ9CglpbnB1dFsiaXRlbXMuMS50YWdzIl0gPSBbXXN0cmluZ3sidGhpbmciLCAic3RpbGwtb3RoZXIiLCAibW9yZS1vdGhlciJ9CglpbnB1dFsiaXRlbXMuMi50YWdzIl0gPSBbXXN0cmluZ3sibGFzdCJ9CglvdXRwdXQsIGVycnMgPSBEaWZmdXNlTWFwVHlwZWQoaW5wdXQsICIuIiwgIjoiKQoJYXNzZXJ0LkxlbihlcnJzLCAwKQoJaWYgaV9pdGVtcywgb2sgOj0gb3V0cHV0WyJpdGVtcyJdOyBvayB7CgkJdmFyIGl0ZW1zID0gaV9pdGVtcy4oW11hbnkpCgkJaWYgbGVuKGl0ZW1zKSAhPSAzIHsKCQkJdC5FcnJvcmYoIktleSAnaXRlbXMnIHNob3VsZCBiZSBhbiBhcnJheSB3aXRoIDMgZWxlbWVudHMsIGdvdCAldiIsIGlfaXRlbXMpCgkJfQoJCWZvciBpdGVtX2lkLCBvYmogOj0gcmFuZ2UgaXRlbXMgewoJCQlmb3IgaywgdiA6PSByYW5nZSBNKG9iaikuTWFwTmF0aXZlKCkgewoJCQkJdmFyIHZBcnkgPSBzbGljZXV0aWwuU3RyaW5naWZ5KHYpCgkJCQlpZiBpblZhbHVlLCBvayA6PSBpbnB1dFtmbXQuU3ByaW50ZigiaXRlbXMuJWQuJXMiLCBpdGVtX2lkLCBrKV07ICFvayB7CgkJCQkJdC5FcnJvcmYoIktleSAlcyBJbmNvcnJlY3QsIGV4cGVjdGVkICVzLCBnb3QgJXMiLCBmbXQuU3ByaW50ZigiaXRlbXMuJWQuJXMiLCBpdGVtX2lkLCBrKSwgaW5WYWx1ZSwgdikKCQkJCX0gZWxzZSB7CgkJCQkJdmFyIGluVmFsdWVBcnkgPSBpblZhbHVlLihbXXN0cmluZykKCQkJCQlmb3IgaSwgdkFyeVYgOj0gcmFuZ2UgdkFyeSB7CgkJCQkJCWlmIHZBcnlWICE9IGluVmFsdWVBcnlbaV0gewoJCQkJCQkJdC5FcnJvcmYoIktleSAlc1slZF0gSW5jb3JyZWN0LCBleHBlY3RlZCAlcywgZ290ICVzIiwgZm10LlNwcmludGYoIml0ZW1zLiVkLiVzIiwgaXRlbV9pZCwgayksIGksIGluVmFsdWVBcnlbaV0sIHZBcnlWKQoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoJfSBlbHNlIHsKCQl0LkVycm9yZigiS2V5ICdpdGVtcycgaXMgbWlzc2luZyBmcm9tIG91dHB1dDogJXYiLCBvdXRwdXQpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDiffuseTypedMultiTierScalar",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDiffuseTypedMultiTierScalar(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJycyBbXWVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaW50Oml0ZW1zLjAiXSA9IDU0CglpbnB1dFsiaW50Oml0ZW1zLjEiXSA9IDc3CglpbnB1dFsiaW50Oml0ZW1zLjIiXSA9IDgyCglvdXRwdXQsIGVycnMgPSBEaWZmdXNlTWFwVHlwZWQoaW5wdXQsICIuIiwgIjoiKQoJYXNzZXJ0LkxlbihlcnJzLCAwKQoJYXNzZXJ0LkVsZW1lbnRzTWF0Y2gob3V0cHV0WyJpdGVtcyJdLCBbXWludDY0ezU0LCA3NywgODJ9KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDiffuseTypedOneTierComplex",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDiffuseTypedOneTierComplex(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJycyBbXWVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsic3RyOmFycmF5Il0gPSBbXXN0cmluZ3siZmlyc3QiLCAidGhpcmQiLCAiZmlmdGgifQoJaW5wdXRbImFycmF5MiJdID0gW11zdHJpbmd7ImZpcnN0IiwgInRoaXJkIiwgImZpZnRoIn0KCWlucHV0WyJpbnQ6bnVtYXJ5LjAiXSA9ICI5IgoJaW5wdXRbImludDpudW1hcnkuMSJdID0gIjciCglpbnB1dFsiaW50Om51bWFyeS4yIl0gPSAiMyIKCWlucHV0WyJpbnQ6dGhpbmdzLm9uZSJdID0gIjEiCglpbnB1dFsiaW50OnRoaW5ncy50d28iXSA9ICIyIgoJaW5wdXRbImludDp0aGluZ3MudGhyZWUiXSA9ICIzIgoJaWYgb3V0cHV0LCBlcnJzID0gRGlmZnVzZU1hcFR5cGVkKGlucHV0LCAiLiIsICI6Iik7IGxlbihlcnJzKSA+IDAgewoJCWZvciBfLCBlcnIgOj0gcmFuZ2UgZXJycyB7CgkJCWFzc2VydC5Ob0Vycm9yKGVycikKCQl9Cgl9Cglhc3NlcnQuQ29udGFpbnMob3V0cHV0LCBgYXJyYXlgKQoJYXNzZXJ0LkxlbihvdXRwdXRbYGFycmF5YF0sIDMpCglmb3IgaSwgdiA6PSByYW5nZSBvdXRwdXRbImFycmF5Il0uKFtdc3RyaW5nKSB7CgkJYXNzZXJ0LkVxdWFsKHYsIGlucHV0WyJzdHI6YXJyYXkiXS4oW11zdHJpbmcpW2ldKQoJfQoJYXNzZXJ0LkNvbnRhaW5zKG91dHB1dCwgYGFycmF5MmApCglhc3NlcnQuTGVuKG91dHB1dFtgYXJyYXkyYF0sIDMpCglmb3IgaSwgdiA6PSByYW5nZSBvdXRwdXRbImFycmF5MiJdLihbXXN0cmluZykgewoJCWFzc2VydC5FcXVhbCh2LCBpbnB1dFsiYXJyYXkyIl0uKFtdc3RyaW5nKVtpXSkKCX0KCWFzc2VydC5Db250YWlucyhvdXRwdXQsIGBudW1hcnlgKQoJYXNzZXJ0LkxlbihvdXRwdXRbYG51bWFyeWBdLCAzKQoJYXNzZXJ0LkVsZW1lbnRzTWF0Y2gob3V0cHV0WyJudW1hcnkiXSwgW11pbnQ2NHs5LCA3LCAzfSkKCWFzc2VydC5Db250YWlucyhvdXRwdXQsIGB0aGluZ3NgKQoJZm9yIGssIHYgOj0gcmFuZ2Ugb3V0cHV0WyJ0aGluZ3MiXS4obWFwW3N0cmluZ11hbnkpIHsKCQlzd2l0Y2ggayB7CgkJY2FzZSBgb25lYDoKCQkJaWYgdi4oaW50NjQpICE9IDEgewoJCQkJdC5FcnJvcmYoIkV4cGVjdGVkIHRoaW5nc1snb25lJ10gPSAxLCBnb3QgJXYiLCB2KQoJCQl9CgkJY2FzZSBgdHdvYDoKCQkJaWYgdi4oaW50NjQpICE9IDIgewoJCQkJdC5FcnJvcmYoIkV4cGVjdGVkIHRoaW5nc1sndHdvJ10gPSAyLCBnb3QgJXYiLCB2KQoJCQl9CgkJY2FzZSBgdGhyZWVgOgoJCQlpZiB2LihpbnQ2NCkgIT0gMyB7CgkJCQl0LkVycm9yZigiRXhwZWN0ZWQgdGhpbmdzWyd0aHJlZSddID0gMywgZ290ICV2IiwgdikKCQkJfQoJCX0KCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDiffuseTypedOneTierScalar",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDiffuseTypedOneTierScalar(t *testing.T)",
                        "Source": "ewoJdmFyIGVycnMgW11lcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJaW5wdXRbInN0cjppZCJdID0gInRlc3QiCglpbnB1dFsibmFtZSJdID0gImRlZmF1bHQtc3RyaW5nIgoJaW5wdXRbImJvb2w6ZW5hYmxlZCJdID0gInRydWUiCglpbnB1dFsiZmxvYXQ6ZmxvYXQiXSA9ICIyLjciCglpZiBvdXRwdXQsIGVycnMgPSBEaWZmdXNlTWFwVHlwZWQoaW5wdXQsICIuIiwgIjoiKTsgbGVuKGVycnMpID4gMCB7CgkJZm9yIF8sIGVyciA6PSByYW5nZSBlcnJzIHsKCQkJdC5FcnJvcmYoIiVzXG4iLCBlcnIpCgkJfQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJpZCJdOyAhb2sgfHwgdiAhPSAidGVzdCIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImlkIikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsibmFtZSJdOyAhb2sgfHwgdiAhPSAiZGVmYXVsdC1zdHJpbmciIHsKCQl0LkVycm9yZigiSW5jb3JyZWN0IHZhbHVlICclcycgZm9yIGtleSAlcyIsIHYsICJkZWZhdWx0LXN0cmluZyIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbImVuYWJsZWQiXTsgIW9rIHx8IHYgIT0gdHJ1ZSB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAiZW5hYmxlZCIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbImZsb2F0Il07ICFvayB8fCB2ICE9IDIuNyB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAiZmxvYXQiKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestGetNil",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestGetNil(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIGxldmVsMSA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglsZXZlbDFbIm5pbHZhbHVlIl0gPSBuaWwKCWlucHV0WyJ0ZXN0Il0gPSBsZXZlbDEKCWFzc2VydC5OaWwoRGVlcEdldChpbnB1dCwgW11zdHJpbmd7InRlc3QiLCAibmlsdmFsdWUifSwgIm5vcGUiKSkKCWFzc2VydC5OaWwoRGVlcEdldChpbnB1dCwgW11zdHJpbmd7InRlc3QiLCAibmlsdmFsdWUifSwgbmlsKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestJSONPath",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestJSONPath(t *testing.T)",
                        "Source": "ewoJdmFyIGZuID0gZnVuYyhxdWVyeSBzdHJpbmcpIGFueSB7CgkJdmFyIG91dCwgZXJyID0gSlNPTlBhdGgodGVzdEpzb25QYXRoRGF0YSwgcXVlcnkpCgkJYXNzZXJ0Lk5vRXJyb3IodCwgZXJyLCBxdWVyeSkKCQlyZXR1cm4gb3V0Cgl9Cglmb3IgcXVlcnksIHdhbnRlZCA6PSByYW5nZSBtYXBbc3RyaW5nXWFueXtgJC5zdG9yZS5ib29rWypdLmF1dGhvcmA6IFtdYW55eyJOaWdlbCBSZWVzIiwgIkV2ZWx5biBXYXVnaCIsICJIZXJtYW4gTWVsdmlsbGUiLCAiSi4gUi4gUi4gVG9sa2llbiJ9LCBgJC4uYXV0aG9yYDogW11hbnl7Ik5pZ2VsIFJlZXMiLCAiRXZlbHluIFdhdWdoIiwgIkhlcm1hbiBNZWx2aWxsZSIsICJKLiBSLiBSLiBUb2xraWVuIn0sIGAkLi5wcmljZWA6IFtdYW55ezguOTUsIDEyLjk5LCA4Ljk5LCAyMi45OSwgMTkuOTV9LCBgJC4uYm9va1s/KC5wcmljZSA8PSA4Ljk5KV0udGl0bGVgOiBbXWFueXsiTW9ieSBEaWNrIiwgIlNheWluZ3Mgb2YgdGhlIENlbnR1cnkifSwgYCQuLmJvb2tbPygucHJpY2UgPiAxMC4wKV0udGl0bGVgOiBbXWFueXsiU3dvcmQgb2YgSG9ub3VyIiwgIlRoZSBMb3JkIG9mIHRoZSBSaW5ncyJ9fSB7CgkJYXNzZXJ0LkVsZW1lbnRzTWF0Y2godCwgd2FudGVkLCBmbihxdWVyeSksIHF1ZXJ5KQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestM",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestM(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBNKG1hcFtzdHJpbmddYW55e2BmaXJzdGA6IHRydWUsIGBzZWNvbmRgOiBtYXBbc3RyaW5nXWFueXtgczFgOiBgdGVzdGAsIGB2YWx1ZXNgOiBbXWludHsxLCAyLCAzLCA0fSwgYHRydXRoeWA6IGBUcnVlYCwgYHN0cm51bWA6IGA0MmAsIGB0aGVuYDogYDIwMDYtMDEtMDJgfSwgYG5vd2A6IHRpbWUuTm93KCksIGB0aGlyZGA6IDMuMTQxNSwgYGZvdXJ0aGA6IDQyLCBgbWFwc2xpY2VgOiBbXWFueXttYXBbc3RyaW5nXWFueXtgaWRgOiAxfSwgbWFwW3N0cmluZ11hbnl7YGlkYDogMn0sIG1hcFtzdHJpbmddYW55e2BpZGA6IDN9fX0pCglhc3NlcnQuRXF1YWwoYGAsIE0obmlsKS5TdHJpbmcoYGxvbGApKQoJYXNzZXJ0LkZhbHNlKE0obmlsKS5Cb29sKGBsb2xgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgwKSwgTShuaWwpLkludChgbG9sYCkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgwKSwgTShuaWwpLkZsb2F0KGBsb2xgKSkKCWFzc2VydC5MZW4oTShuaWwpLlNsaWNlKGBsb2xgKSwgMCkKCWFzc2VydC5OaWwoTShuaWwpLkF1dG8oYHNlY29uZC5zdHJudW1gKSkKCWFzc2VydC5aZXJvKE0obmlsKS5UaW1lKGBub3dgKSkKCWFzc2VydC5FcXVhbChgdGVzdGAsIGlucHV0LlN0cmluZyhgc2Vjb25kLnMxYCkpCglhc3NlcnQuVHJ1ZShpbnB1dC5Cb29sKGBmaXJzdGApKQoJYXNzZXJ0LlRydWUoaW5wdXQuQm9vbChgc2Vjb25kLnRydXRoeWApKQoJYXNzZXJ0LlRydWUoaW5wdXQuQm9vbChgc2Vjb25kLnMxYCkpCglhc3NlcnQuRXF1YWwoMy4xNDE1LCBpbnB1dC5GbG9hdChgdGhpcmRgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgzKSwgaW5wdXQuSW50KGB0aGlyZGApKQoJYXNzZXJ0LkVxdWFsKGludDY0KDQyKSwgaW5wdXQuSW50KGBmb3VydGhgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgzKSwgaW5wdXQuSW50KGBzZWNvbmQudmFsdWVzLjJgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgwKSwgaW5wdXQuSW50KGBzZWNvbmQudmFsdWVzLjk5YCkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCg0MiksIGlucHV0LkZsb2F0KGBmb3VydGhgKSkKCWFzc2VydC5MZW4oaW5wdXQuU2xpY2UoYHNlY29uZC52YWx1ZXNgKSwgNCkKCWFzc2VydC5FcXVhbChpbnQ2NCg0MiksIGlucHV0LkF1dG8oYHNlY29uZC5zdHJudW1gKSkKCWFzc2VydC5FcXVhbCh0aW1lLkRhdGUoMjAwNiwgMSwgMiwgMCwgMCwgMCwgMCwgdGltZS5VVEMpLCBpbnB1dC5UaW1lKGBzZWNvbmQudGhlbmApKQoJdmFyIG1hcHZhbHMgW11pbnQ2NAoJZm9yIF8sIG1zIDo9IHJhbmdlIGlucHV0LlNsaWNlT2ZNYXBzKGBtYXBzbGljZWApIHsKCQltYXB2YWxzID0gYXBwZW5kKG1hcHZhbHMsIG1zLkludChgaWRgKSkKCX0KCWFzc2VydC5FcXVhbChbXWludDY0ezEsIDIsIDN9LCBtYXB2YWxzKQoJYXNzZXJ0LkVxdWFsKDIsIGlucHV0LkpTT05QYXRoKGAkLi52YWx1ZXNbMV1gLCA0MikpCglhc3NlcnQuRXF1YWwoNDIsIGlucHV0LkpTT05QYXRoKGAkLi52YWx1ZXNbOTldYCwgNDIpKQoJYXNzZXJ0LkVxdWFsKDYsIGlucHV0LkxlbigpKQoJdmFyIGsgPSBtYWtlKFtdc3RyaW5nLCA2KQoJdmFyIGkgPSAwCglhc3NlcnQuTm9FcnJvcihpbnB1dC5FYWNoKGZ1bmMoa2V5IHN0cmluZywgdmFsdWUgdHlwZXV0aWwuVmFyaWFudCkgZXJyb3IgewoJCWtbaV0gPSBrZXkKCQlpKysKCQlyZXR1cm4gbmlsCgl9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKGssIFtdc3RyaW5ne2BmaXJzdGAsIGBzZWNvbmRgLCBgdGhpcmRgLCBgZm91cnRoYCwgYG5vd2AsIGBtYXBzbGljZWB9KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMHttpHeader",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMHttpHeader(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBNKGh0dHAuSGVhZGVye2BhYDogW11zdHJpbmd7YDFgfSwgYGJgOiBbXXN0cmluZ3t9LCBgY2A6IFtdc3RyaW5ne2AyYCwgYDNgfX0pCglhc3NlcnQuRXF1YWwoYDFgLCBpbnB1dC5TdHJpbmcoYGFgKSkKCWFzc2VydC5FcXVhbFZhbHVlcygxLCBpbnB1dC5JbnQoYGFgKSkKCWFzc2VydC5FcXVhbChgYCwgaW5wdXQuU3RyaW5nKGBiYCkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgwKSwgaW5wdXQuRmxvYXQoYGJgKSkKCWFzc2VydC5OaWwoaW5wdXQuQXV0byhgYmApKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2AyYCwgYDNgfSwgaW5wdXQuU3RyaW5ncyhgY2ApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMIter",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMIter(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBNKG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGJgOiAyLCBgY2A6IDMsIGBkYDogNH0pCgl2YXIga2V5cyBbXXN0cmluZwoJdmFyIHZhbHMgW11pbnQKCWZvciBpdGVtIDo9IHJhbmdlIGlucHV0Lkl0ZXIoKSB7CgkJa2V5cyA9IGFwcGVuZChrZXlzLCBpdGVtLkspCgkJdmFscyA9IGFwcGVuZCh2YWxzLCBpbnQoaXRlbS5WLkludCgpKSkKCX0KCWFzc2VydC5FbGVtZW50c01hdGNoKFtdc3RyaW5ne2BjYCwgYGRgLCBgYWAsIGBiYH0sIGtleXMpCglhc3NlcnQuRWxlbWVudHNNYXRjaChbXWludHs0LCAyLCAzLCAxfSwgdmFscykKCWtleXMgPSBuaWwKCXZhbHMgPSBuaWwKCWZvciBpdGVtIDo9IHJhbmdlIGlucHV0Lkl0ZXIoSXRlck9wdGlvbnN7U29ydEtleXM6IHRydWV9KSB7CgkJa2V5cyA9IGFwcGVuZChrZXlzLCBpdGVtLkspCgkJdmFscyA9IGFwcGVuZCh2YWxzLCBpbnQoaXRlbS5WLkludCgpKSkKCX0KCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgYWAsIGBiYCwgYGNgLCBgZGB9LCBrZXlzKQoJYXNzZXJ0LkVxdWFsKFtdaW50ezEsIDIsIDMsIDR9LCB2YWxzKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMJson",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMJson(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbSA9IE0oYHsiaGVsbG8iOiAidGhlcmUiLCAiZ2VuZXJhbCI6ICJrZW5vYmkifWApCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YGhlbGxvYDogYHRoZXJlYCwgYGdlbmVyYWxgOiBga2Vub2JpYH0sIG0uTWFwTmF0aXZlKCkpCglhc3NlcnQuRXF1YWwoYHRoZXJlYCwgbS5TdHJpbmcoYGhlbGxvYCkpCglhc3NlcnQuRXF1YWwoYGtlbm9iaWAsIG0uU3RyaW5nKGBnZW5lcmFsYCkpCgltLkRlbGV0ZShgZ2VuZXJhbGApCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YGhlbGxvYDogYHRoZXJlYH0sIG0uTWFwTmF0aXZlKCkpCglhc3NlcnQuRXF1YWwoW11ieXRlKGB7ImhlbGxvIjoidGhlcmUifWApLCBtLkpTT04oKSkKCWFzc2VydC5FcXVhbChbXWJ5dGUoIntcbi4uXCJoZWxsb1wiOiBcInRoZXJlXCJcbn0iKSwgbS5KU09OKGAuLmApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMMarshalJSON",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMMarshalJSON(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbSA9IE0obWFwW3N0cmluZ11hbnl7YGhlbGxvYDogMSwgYHRoZXJlYDogdHJ1ZSwgYGdlbmVyYWxgOiBtYXBbc3RyaW5nXWFueXtga2Vub2JpYDogdHJ1ZX0sIGB4eXpgOiBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgYHp6emA6IFtdbWFwW3N0cmluZ11hbnl7bWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgYWAsIGB2YWx1ZWA6IDB9LCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBiYCwgYHZhbHVlYDogMX0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYGNgLCBgdmFsdWVgOiAyfX19KQoJb3V0LCBlcnIgOj0ganNvbi5NYXJzaGFsKG0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoW11ieXRlKGB7ImdlbmVyYWwiOnsia2Vub2JpIjp0cnVlfSwiaGVsbG8iOjEsInRoZXJlIjp0cnVlLCJ4eXoiOlsiYSIsImIiLCJjIl0sInp6eiI6W3sibmFtZSI6ImEiLCJ2YWx1ZSI6MH0seyJuYW1lIjoiYiIsInZhbHVlIjoxfSx7Im5hbWUiOiJjIiwidmFsdWUiOjJ9XX1gKSwgb3V0KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMMarshalXML",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMMarshalXML(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbSA9IE0obWFwW3N0cmluZ11hbnl7YGhlbGxvYDogMSwgYHRoZXJlYDogdHJ1ZSwgYGdlbmVyYWxgOiBtYXBbc3RyaW5nXWFueXtga2Vub2JpYDogdHJ1ZX0sIGB4eXpgOiBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgYHp6emA6IFtdbWFwW3N0cmluZ11hbnl7bWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgYWAsIGB2YWx1ZWA6IDB9LCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBiYCwgYHZhbHVlYDogMX0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYGNgLCBgdmFsdWVgOiAyfX19KQoJb3V0LCBlcnIgOj0geG1sLk1hcnNoYWwobSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChbXWJ5dGUoYDxkYXRhPjxnZW5lcmFsPjxrZW5vYmk+dHJ1ZTwva2Vub2JpPjwvZ2VuZXJhbD48aGVsbG8+MTwvaGVsbG8+PHRoZXJlPnRydWU8L3RoZXJlPjx4eXo+PGVsZW1lbnQ+YTwvZWxlbWVudD48ZWxlbWVudD5iPC9lbGVtZW50PjxlbGVtZW50PmM8L2VsZW1lbnQ+PC94eXo+PHp6ej48ZWxlbWVudD48bmFtZT5hPC9uYW1lPjx2YWx1ZT4wPC92YWx1ZT48L2VsZW1lbnQ+PGVsZW1lbnQ+PG5hbWU+YjwvbmFtZT48dmFsdWU+MTwvdmFsdWU+PC9lbGVtZW50PjxlbGVtZW50PjxuYW1lPmM8L25hbWU+PHZhbHVlPjI8L3ZhbHVlPjwvZWxlbWVudD48L3p6ej48L2RhdGE+YCksIG91dCkKCW0uU2V0Um9vdFRhZ05hbWUoYG51Yl9udWJgKQoJb3V0LCBlcnIgPSB4bWwuTWFyc2hhbChtKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKFtdYnl0ZShgPG51Yl9udWI+PGdlbmVyYWw+PGtlbm9iaT50cnVlPC9rZW5vYmk+PC9nZW5lcmFsPjxoZWxsbz4xPC9oZWxsbz48dGhlcmU+dHJ1ZTwvdGhlcmU+PHh5ej48ZWxlbWVudD5hPC9lbGVtZW50PjxlbGVtZW50PmI8L2VsZW1lbnQ+PGVsZW1lbnQ+YzwvZWxlbWVudD48L3h5ej48enp6PjxlbGVtZW50PjxuYW1lPmE8L25hbWU+PHZhbHVlPjA8L3ZhbHVlPjwvZWxlbWVudD48ZWxlbWVudD48bmFtZT5iPC9uYW1lPjx2YWx1ZT4xPC92YWx1ZT48L2VsZW1lbnQ+PGVsZW1lbnQ+PG5hbWU+YzwvbmFtZT48dmFsdWU+MjwvdmFsdWU+PC9lbGVtZW50Pjwvenp6PjwvbnViX251Yj5gKSwgb3V0KQoJbS5TZXRNYXJzaGFsWG1sR2VuZXJpYyh0cnVlKQoJb3V0LCBlcnIgPSB4bWwuTWFyc2hhbChtKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKFtdYnl0ZShgPG51Yl9udWI+PGl0ZW0gdHlwZT0ib2JqZWN0IiBrZXk9ImdlbmVyYWwiPjxpdGVtIGtleT0ia2Vub2JpIiB0eXBlPSJib29sIj50cnVlPC9pdGVtPjwvaXRlbT48aXRlbSBrZXk9ImhlbGxvIiB0eXBlPSJpbnQiPjE8L2l0ZW0+PGl0ZW0ga2V5PSJ0aGVyZSIgdHlwZT0iYm9vbCI+dHJ1ZTwvaXRlbT48aXRlbSB0eXBlPSJhcnJheSIga2V5PSJ4eXoiPjxpdGVtIGtleT0iZWxlbWVudCIgdHlwZT0ic3RyIj5hPC9pdGVtPjxpdGVtIGtleT0iZWxlbWVudCIgdHlwZT0ic3RyIj5iPC9pdGVtPjxpdGVtIGtleT0iZWxlbWVudCIgdHlwZT0ic3RyIj5jPC9pdGVtPjwvaXRlbT48aXRlbSB0eXBlPSJhcnJheSIga2V5PSJ6enoiPjxpdGVtIHR5cGU9Im9iamVjdCIga2V5PSJlbGVtZW50Ij48aXRlbSBrZXk9Im5hbWUiIHR5cGU9InN0ciI+YTwvaXRlbT48aXRlbSBrZXk9InZhbHVlIiB0eXBlPSJpbnQiPjA8L2l0ZW0+PC9pdGVtPjxpdGVtIHR5cGU9Im9iamVjdCIga2V5PSJlbGVtZW50Ij48aXRlbSBrZXk9Im5hbWUiIHR5cGU9InN0ciI+YjwvaXRlbT48aXRlbSBrZXk9InZhbHVlIiB0eXBlPSJpbnQiPjE8L2l0ZW0+PC9pdGVtPjxpdGVtIHR5cGU9Im9iamVjdCIga2V5PSJlbGVtZW50Ij48aXRlbSBrZXk9Im5hbWUiIHR5cGU9InN0ciI+YzwvaXRlbT48aXRlbSBrZXk9InZhbHVlIiB0eXBlPSJpbnQiPjI8L2l0ZW0+PC9pdGVtPjwvaXRlbT48L251Yl9udWI+YCksIG91dCkKCW0uU2V0TWFyc2hhbFhtbEdlbmVyaWMoZmFsc2UpCgltLlNldE1hcnNoYWxYbWxLZXlGdW5jKGZ1bmMoaW4gc3RyaW5nKSBzdHJpbmcgewoJCXJldHVybiBzdHJpbmd1dGlsLkNhbWVsaXplKGluKQoJfSkKCW91dCwgZXJyID0geG1sLk1hcnNoYWwobSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChbXWJ5dGUoYDxOdWJOdWI+PEdlbmVyYWw+PEtlbm9iaT50cnVlPC9LZW5vYmk+PC9HZW5lcmFsPjxIZWxsbz4xPC9IZWxsbz48VGhlcmU+dHJ1ZTwvVGhlcmU+PFh5ej48RWxlbWVudD5hPC9FbGVtZW50PjxFbGVtZW50PmI8L0VsZW1lbnQ+PEVsZW1lbnQ+YzwvRWxlbWVudD48L1h5ej48Wnp6PjxFbGVtZW50PjxOYW1lPmE8L05hbWU+PFZhbHVlPjA8L1ZhbHVlPjwvRWxlbWVudD48RWxlbWVudD48TmFtZT5iPC9OYW1lPjxWYWx1ZT4xPC9WYWx1ZT48L0VsZW1lbnQ+PEVsZW1lbnQ+PE5hbWU+YzwvTmFtZT48VmFsdWU+MjwvVmFsdWU+PC9FbGVtZW50PjwvWnp6PjwvTnViTnViPmApLCBvdXQpCgltLlNldE1hcnNoYWxYbWxHZW5lcmljKHRydWUpCglvdXQsIGVyciA9IHhtbC5NYXJzaGFsKG0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoW11ieXRlKGA8TnViTnViPjxpdGVtIHR5cGU9Im9iamVjdCIga2V5PSJHZW5lcmFsIj48aXRlbSBrZXk9Iktlbm9iaSIgdHlwZT0iYm9vbCI+dHJ1ZTwvaXRlbT48L2l0ZW0+PGl0ZW0ga2V5PSJIZWxsbyIgdHlwZT0iaW50Ij4xPC9pdGVtPjxpdGVtIGtleT0iVGhlcmUiIHR5cGU9ImJvb2wiPnRydWU8L2l0ZW0+PGl0ZW0gdHlwZT0iYXJyYXkiIGtleT0iWHl6Ij48aXRlbSBrZXk9IkVsZW1lbnQiIHR5cGU9InN0ciI+YTwvaXRlbT48aXRlbSBrZXk9IkVsZW1lbnQiIHR5cGU9InN0ciI+YjwvaXRlbT48aXRlbSBrZXk9IkVsZW1lbnQiIHR5cGU9InN0ciI+YzwvaXRlbT48L2l0ZW0+PGl0ZW0gdHlwZT0iYXJyYXkiIGtleT0iWnp6Ij48aXRlbSB0eXBlPSJvYmplY3QiIGtleT0iRWxlbWVudCI+PGl0ZW0ga2V5PSJOYW1lIiB0eXBlPSJzdHIiPmE8L2l0ZW0+PGl0ZW0ga2V5PSJWYWx1ZSIgdHlwZT0iaW50Ij4wPC9pdGVtPjwvaXRlbT48aXRlbSB0eXBlPSJvYmplY3QiIGtleT0iRWxlbWVudCI+PGl0ZW0ga2V5PSJOYW1lIiB0eXBlPSJzdHIiPmI8L2l0ZW0+PGl0ZW0ga2V5PSJWYWx1ZSIgdHlwZT0iaW50Ij4xPC9pdGVtPjwvaXRlbT48aXRlbSB0eXBlPSJvYmplY3QiIGtleT0iRWxlbWVudCI+PGl0ZW0ga2V5PSJOYW1lIiB0eXBlPSJzdHIiPmM8L2l0ZW0+PGl0ZW0ga2V5PSJWYWx1ZSIgdHlwZT0iaW50Ij4yPC9pdGVtPjwvaXRlbT48L2l0ZW0+PC9OdWJOdWI+YCksIG91dCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMMerge",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMMerge(t *testing.T)",
                        "Source": "ewoJdmFyIG0gPSBOZXdNYXAoKQoJYXNzZXJ0LkVxdWFsKHQsIG1hcFtzdHJpbmddYW55e30sIG0uTWFwTmF0aXZlKCkpCgltLk1lcmdlKG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGJgOiAyfSkKCWFzc2VydC5FcXVhbCh0LCBtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogMn0sIG0uTWFwTmF0aXZlKCkpCgltLk1lcmdlKG1hcFtzdHJpbmddYW55e2BiYDogMi4xLCBgY2A6IDN9KQoJYXNzZXJ0LkVxdWFsKHQsIG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGJgOiAyLjEsIGBjYDogM30sIG0uTWFwTmF0aXZlKCkpCgltLk1lcmdlKG1hcFtzdHJpbmddYW55e2BiYDogbmlsfSkKCWFzc2VydC5FcXVhbCh0LCBtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogbmlsLCBgY2A6IDN9LCBtLk1hcE5hdGl2ZSgpKQoJbS5Db21wYWN0KCkKCWFzc2VydC5FcXVhbCh0LCBtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBjYDogM30sIG0uTWFwTmF0aXZlKCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMSet",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMSet(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBNKG5pbCkKCWFzc2VydC5FcXVhbChgYCwgaW5wdXQuU3RyaW5nKGBsb2xgKSkKCWFzc2VydC5FcXVhbChgMmZ1bm55NG1lYCwgaW5wdXQuU2V0KGBsb2xgLCBgMmZ1bm55NG1lYCkuU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYDJmdW5ueTRtZWAsIGlucHV0LlN0cmluZyhgbG9sYCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMStruct",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMStruct(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBNKCZ0ZXN0TXN0cnVjdHtJRDogYDEyM2AsIE5hbWU6IGB0ZXN0ZXJgLCBGYWN0b3I6IDMuMTR9KQoJYXNzZXJ0LkVxdWFsKGAxMjNgLCBpbnB1dC5TdHJpbmcoYGlkYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMTIzLCBpbnB1dC5JbnQoYGlkYCkpCglhc3NlcnQuRXF1YWwoYHRlc3RlcmAsIGlucHV0LlN0cmluZyhgTmFtZWApKQoJYXNzZXJ0LkVxdWFsKDMuMTQsIGlucHV0LkZsb2F0KGBGYWN0b3JgKSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgaWRgOiBgMTIzYCwgYE5hbWVgOiBgdGVzdGVyYCwgYEZhY3RvcmA6IDMuMTR9LCBpbnB1dC5NYXBOYXRpdmUoKSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgX2lkYDogYDEyM2AsIGBOQU1FYDogYHRlc3RlcmAsIGBGYWN0b3JgOiAzLjE0fSwgaW5wdXQuTWFwTmF0aXZlKGBqc29uYCkpCgl2YXIga2V5cyBbXXN0cmluZwoJdmFyIHZhbHVlcyBbXWFueQoJZm9yIGl0ZW0gOj0gcmFuZ2UgaW5wdXQuSXRlcigpIHsKCQlrZXlzID0gYXBwZW5kKGtleXMsIGl0ZW0uSykKCQl2YWx1ZXMgPSBhcHBlbmQodmFsdWVzLCBpdGVtLlZhbHVlKQoJfQoJYXNzZXJ0LkVsZW1lbnRzTWF0Y2goW11zdHJpbmd7YGlkYCwgYE5hbWVgLCBgRmFjdG9yYH0sIGtleXMpCglhc3NlcnQuRWxlbWVudHNNYXRjaChbXWFueXtgMTIzYCwgYHRlc3RlcmAsIGZsb2F0NjQoMy4xNCl9LCB2YWx1ZXMpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMStructNested",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMStructNested(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIG1zZWNvbmQgc3RydWN0IHsKCQlTMSAgICAgc3RyaW5nCgkJVmFsdWVzIFtdaW50CgkJVHJ1dGh5IGFueQoJCVN0cm51bSBzdHJpbmcKCQlUaGVuICAgc3RyaW5nCgl9Cgl0eXBlIG10b3Agc3RydWN0IHsKCQlGaXJzdCAgYm9vbAoJCVNlY29uZCBtc2Vjb25kCgkJTm93ICAgIHRpbWUuVGltZQoJCVRoaXJkICBmbG9hdDY0CgkJRm91cnRoIGludAoJfQoJdmFyIGlucHV0ID0gTShtdG9we0ZpcnN0OiB0cnVlLCBTZWNvbmQ6IG1zZWNvbmR7UzE6IGB0ZXN0YCwgVmFsdWVzOiBbXWludHsxLCAyLCAzLCA0fSwgVHJ1dGh5OiBgVHJ1ZWAsIFN0cm51bTogYDQyYCwgVGhlbjogYDIwMDYtMDEtMDJgfSwgTm93OiB0aW1lLk5vdygpLCBUaGlyZDogMy4xNDE1LCBGb3VydGg6IDQyfSkKCWFzc2VydC5FcXVhbChgdGVzdGAsIGlucHV0LlN0cmluZyhgU2Vjb25kLlMxYCkpCglhc3NlcnQuVHJ1ZShpbnB1dC5Cb29sKGBGaXJzdGApKQoJYXNzZXJ0LlRydWUoaW5wdXQuQm9vbChgU2Vjb25kLlRydXRoeWApKQoJYXNzZXJ0LlRydWUoaW5wdXQuQm9vbChgU2Vjb25kLlMxYCkpCglhc3NlcnQuRXF1YWwoMy4xNDE1LCBpbnB1dC5GbG9hdChgVGhpcmRgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgzKSwgaW5wdXQuSW50KGBUaGlyZGApKQoJYXNzZXJ0LkVxdWFsKGludDY0KDQyKSwgaW5wdXQuSW50KGBGb3VydGhgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgzKSwgaW5wdXQuSW50KGBTZWNvbmQuVmFsdWVzLjJgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgwKSwgaW5wdXQuSW50KGBTZWNvbmQuVmFsdWVzLjk5YCkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCg0MiksIGlucHV0LkZsb2F0KGBGb3VydGhgKSkKCWFzc2VydC5MZW4oaW5wdXQuU2xpY2UoYFNlY29uZC5WYWx1ZXNgKSwgNCkKCWFzc2VydC5FcXVhbChpbnQ2NCg0MiksIGlucHV0LkF1dG8oYFNlY29uZC5TdHJudW1gKSkKCWFzc2VydC5FcXVhbCh0aW1lLkRhdGUoMjAwNiwgMSwgMiwgMCwgMCwgMCwgMCwgdGltZS5VVEMpLCBpbnB1dC5UaW1lKGBTZWNvbmQuVGhlbmApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMUnmarshalJSON",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMUnmarshalJSON(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIganMgPSBbXWJ5dGUoYHsiZ2VuZXJhbCI6eyJrZW5vYmkiOnRydWV9LCJoZWxsbyI6MSwidGhlcmUiOnRydWUsInh5eiI6WyJhIiwiYiIsImMiXSwienp6IjpbeyJuYW1lIjoiYSIsInZhbHVlIjowfSx7Im5hbWUiOiJiIiwidmFsdWUiOjF9LHsibmFtZSI6ImMiLCJ2YWx1ZSI6Mn1dfWApCgl2YXIgbSBNYXAKCWFzc2VydC5Ob0Vycm9yKGpzb24uVW5tYXJzaGFsKGpzLCAmbSkpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YGhlbGxvYDogZmxvYXQ2NCgxKSwgYHRoZXJlYDogdHJ1ZSwgYGdlbmVyYWxgOiBtYXBbc3RyaW5nXWFueXtga2Vub2JpYDogdHJ1ZX0sIGB4eXpgOiBbXWFueXtgYWAsIGBiYCwgYGNgfSwgYHp6emA6IFtdYW55e21hcFtzdHJpbmddYW55e2BuYW1lYDogYGFgLCBgdmFsdWVgOiBmbG9hdDY0KDApfSwgbWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgYmAsIGB2YWx1ZWA6IGZsb2F0NjQoMSl9LCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBjYCwgYHZhbHVlYDogZmxvYXQ2NCgyKX19fSwgbS5kYXRhKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEsIG0uSW50KGBoZWxsb2ApKQoJYXNzZXJ0LlRydWUobS5Cb29sKGB0aGVyZWApKQoJYXNzZXJ0LkVxdWFsKHRydWUsIG0uQm9vbChgZ2VuZXJhbC5rZW5vYmlgKSkKCWFzc2VydC5FcXVhbFZhbHVlcygyLCBtLkZsb2F0KGB6enouMi52YWx1ZWApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMUrlValues",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMUrlValues(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBNKHVybC5WYWx1ZXN7YGFgOiBbXXN0cmluZ3tgMWB9LCBgYmA6IFtdc3RyaW5ne30sIGBjYDogW11zdHJpbmd7YDJgLCBgM2B9fSkKCWFzc2VydC5FcXVhbChgMWAsIGlucHV0LlN0cmluZyhgYWApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEsIGlucHV0LkludChgYWApKQoJYXNzZXJ0LkVxdWFsKGBgLCBpbnB1dC5TdHJpbmcoYGJgKSkKCWFzc2VydC5FcXVhbChmbG9hdDY0KDApLCBpbnB1dC5GbG9hdChgYmApKQoJYXNzZXJ0Lk5pbChpbnB1dC5BdXRvKGBiYCkpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YDJgLCBgM2B9LCBpbnB1dC5TdHJpbmdzKGBjYCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMapAppend",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMapAppend(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7fSwgQXBwZW5kKCkpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YGFgOiAxLCBgYmA6IHRydWUsIGBjYDogYFRocmVlYH0sIEFwcGVuZChtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogdHJ1ZSwgYGNgOiBgVGhyZWVgfSkpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YGFgOiAxLCBgYmA6IHRydWUsIGBjYDogYFRocmVlYH0sIEFwcGVuZChuaWwsIG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGJgOiB0cnVlLCBgY2A6IGBUaHJlZWB9LCBuaWwpKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGJgOiB0cnVlLCBgY2A6IGBUaHJlZWAsIGBkYDogNCwgYGVgOiBmYWxzZSwgYGZgOiA2LjF9LCBBcHBlbmQobWFwW3N0cmluZ11hbnl7YGFgOiAxLCBgYmA6IHRydWUsIGBjYDogYFRocmVlYH0sIG1hcFtzdHJpbmddYW55e2BkYDogNCwgYGVgOiBmYWxzZSwgYGZgOiA2LjF9KSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogdHJ1ZSwgYGNgOiBgRml2ZWB9LCBBcHBlbmQobWFwW3N0cmluZ11hbnl7YGFgOiAxLCBgYmA6IHRydWUsIGBjYDogYFRocmVlYH0sIG1hcFtzdHJpbmddYW55e2BjYDogYEZpdmVgfSkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMapJoin",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMapJoin(t *testing.T)",
                        "Source": "ewoJdmFyIGlucHV0ID0gbWFwW3N0cmluZ11hbnl7YGtleTFgOiBgdmFsdWUxYCwgYGtleTJgOiB0cnVlLCBga2V5M2A6IDN9Cgl2YXIgb3V0cHV0ID0gSm9pbihpbnB1dCwgYD1gLCBgJmApCglpZiBvdXRwdXQgPT0gYGAgewoJCXQuRXJyb3IoIk91dHB1dCBzaG91bGQgbm90IGJlIGVtcHR5IikKCX0KCWlmICFzdHJpbmdzLkNvbnRhaW5zKG91dHB1dCwgYGtleTE9dmFsdWUxYCkgewoJCXQuRXJyb3JmKCJPdXRwdXQgc2hvdWxkIGNvbnRhaW4gJyVzJyIsIGBrZXkxPXZhbHVlMWApCgl9CglpZiAhc3RyaW5ncy5Db250YWlucyhvdXRwdXQsIGBrZXkyPXRydWVgKSB7CgkJdC5FcnJvcmYoIk91dHB1dCBzaG91bGQgY29udGFpbiAnJXMnIiwgYGtleTI9dHJ1ZWApCgl9CglpZiAhc3RyaW5ncy5Db250YWlucyhvdXRwdXQsIGBrZXkzPTNgKSB7CgkJdC5FcnJvcmYoIk91dHB1dCBzaG91bGQgY29udGFpbiAnJXMnIiwgYGtleTM9M2ApCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMapMerge",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMapMerge(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglvdXQsIGVyciA6PSBNZXJnZShuaWwsIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FbXB0eShvdXQpCglvdXQsIGVyciA9IE1lcmdlKG1hcFtzdHJpbmddYW55e2BuYW1lYDogYEZpcnN0YH0sIG1hcFtzdHJpbmddYW55e2BhZ2VgOiAyfSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBGaXJzdGAsIGBhZ2VgOiAyfSwgb3V0KQoJb3V0LCBlcnIgPSBNZXJnZShtYXBbc3RyaW5nXWFueXtgbmFtZWA6IFtdc3RyaW5ne2BGaXJzdGAsIGBTZWNvbmRgfX0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFRoaXJkYH0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YG5hbWVgOiBbXWFueXtgRmlyc3RgLCBgU2Vjb25kYCwgYFRoaXJkYH19LCBvdXQpCglvdXQsIGVyciA9IE1lcmdlKG1hcFtzdHJpbmddYW55e2BuYW1lYDogYEZpcnN0YH0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYEZpcnN0YH0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgRmlyc3RgfSwgb3V0KQoJb3V0LCBlcnIgPSBNZXJnZShtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBGaXJzdGAsIGBlbmFibGVkYDogdHJ1ZX0sIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBGaXJzdGAsIGBlbmFibGVkYDogdHJ1ZX0sIG91dCkKCW91dCwgZXJyID0gTWVyZ2UobmlsLCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBTZWNvbmRgLCBgZW5hYmxlZGA6IHRydWV9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFNlY29uZGAsIGBlbmFibGVkYDogdHJ1ZX0sIG91dCkKCW91dCwgZXJyID0gTWVyZ2UobWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgRmlyc3RgfSwgbWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgU2Vjb25kYCwgYGFnZWA6IDJ9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFNlY29uZGAsIGBhZ2VgOiAyfSwgb3V0KQoJb3V0LCBlcnIgPSBNZXJnZShtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBGaXJzdGB9LCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBTZWNvbmRgLCBgYWdlYDogMn0sIEFwcGVuZFZhbHVlcykKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgbmFtZWA6IFtdYW55e2BGaXJzdGAsIGBTZWNvbmRgfSwgYGFnZWA6IDJ9LCBvdXQpCglvdXQsIGVyciA9IE1lcmdlKG1hcFtzdHJpbmddYW55e2BuYW1lYDogYEZpcnN0YCwgYGVuYWJsZWRgOiBuaWx9LCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBTZWNvbmRgLCBgZW5hYmxlZGA6IHRydWV9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFNlY29uZGAsIGBlbmFibGVkYDogdHJ1ZX0sIG91dCkKCW91dCwgZXJyID0gTWVyZ2UobWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgRmlyc3RgLCBgZW5hYmxlZGA6IG5pbH0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFNlY29uZGAsIGBlbmFibGVkYDogdHJ1ZX0sIEFwcGVuZFZhbHVlcykKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgbmFtZWA6IFtdYW55e2BGaXJzdGAsIGBTZWNvbmRgfSwgYGVuYWJsZWRgOiB0cnVlfSwgb3V0KQoJb3V0LCBlcnIgPSBNZXJnZShtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBGaXJzdGAsIGBhZ2VgOiBgeWVzYH0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFNlY29uZGAsIGBhZ2VgOiA0Mn0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgU2Vjb25kYCwgYGFnZWA6IDQyfSwgb3V0KQoJb3V0LCBlcnIgPSBNZXJnZShtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBGaXJzdGAsIGBhZ2VgOiBgeWVzYH0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFNlY29uZGAsIGBhZ2VgOiA0Mn0sIEFwcGVuZFZhbHVlcykKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgbmFtZWA6IFtdYW55e2BGaXJzdGAsIGBTZWNvbmRgfSwgYGFnZWA6IFtdYW55e2B5ZXNgLCA0Mn19LCBvdXQpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMapPluck",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMapPluck(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRW1wdHkoUGx1Y2sobmlsLCBuaWwpKQoJYXNzZXJ0LkVtcHR5KFBsdWNrKG5pbCwgW11zdHJpbmd7YG5hbWVgfSkpCglhc3NlcnQuRW1wdHkoUGx1Y2soYHRlc3RgLCBbXXN0cmluZ3tgbmFtZWB9KSkKCWFzc2VydC5FbXB0eShQbHVjayhbXXN0cmluZ3tgdGVzdGAsIGB2YWx1ZXNgfSwgW11zdHJpbmd7YG5hbWVgfSkpCglhc3NlcnQuRXF1YWwoW11hbnl7YEFsaWNlYCwgYEJvYmAsIGBNYWxsb3J5YH0sIFBsdWNrKFtdbWFwW3N0cmluZ11zdHJpbmd7bWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQWxpY2VgfSwgbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQm9iYH0sIG1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYE1hbGxvcnlgfX0sIFtdc3RyaW5ne2BuYW1lYH0pKQoJYXNzZXJ0LkVxdWFsKFtdYW55e2BBbGljZWAsIGBNYWxsb3J5YH0sIFBsdWNrKFtdbWFwW3N0cmluZ11zdHJpbmd7bWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQWxpY2VgfSwgbWFwW3N0cmluZ11zdHJpbmd7YE5BTUVgOiBgQm9iYH0sIG1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYE1hbGxvcnlgfX0sIFtdc3RyaW5ne2BuYW1lYH0pKQoJYXNzZXJ0LkVxdWFsKFtdYW55e2BBbGljZWAsIGBCb2JgLCBgTWFsbG9yeWB9LCBQbHVjayhbXW1hcFtzdHJpbmddbWFwW3N0cmluZ11hbnl7bWFwW3N0cmluZ11tYXBbc3RyaW5nXWFueXtgaW5mb2A6IG1hcFtzdHJpbmddYW55e2BuYW1lYDogYEFsaWNlYH19LCBtYXBbc3RyaW5nXW1hcFtzdHJpbmddYW55e2BpbmZvYDogbWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgQm9iYH19LCBtYXBbc3RyaW5nXW1hcFtzdHJpbmddYW55e2BpbmZvYDogbWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgTWFsbG9yeWB9fX0sIFtdc3RyaW5ne2BpbmZvYCwgYG5hbWVgfSkpCglhc3NlcnQuRXF1YWwoW11hbnl7YEFsaWNlYCwgYEJvYmAsIGBNYWxsb3J5YH0sIFBsdWNrKFtdbWFwW2FueV1tYXBbYW55XWFueXttYXBbYW55XW1hcFthbnldYW55e2BpbmZvYDogbWFwW2FueV1hbnl7YG5hbWVgOiBgQWxpY2VgfX0sIG1hcFthbnldbWFwW2FueV1hbnl7YGluZm9gOiBtYXBbYW55XWFueXtgbmFtZWA6IGBCb2JgfX0sIG1hcFthbnldbWFwW2FueV1hbnl7YGluZm9gOiBtYXBbYW55XWFueXtgbmFtZWA6IGBNYWxsb3J5YH19fSwgW11zdHJpbmd7YGluZm9gLCBgbmFtZWB9KSkKCWFzc2VydC5FcXVhbChbXWFueXtgQWxpY2VgLCBgQm9iYCwgYE1hbGxvcnlgfSwgUGx1Y2soW11hbnl7bWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQWxpY2VgfSwgbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQm9iYH0sIG1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYE1hbGxvcnlgfX0sIFtdc3RyaW5ne2BuYW1lYH0pKQoJYXNzZXJ0LkVxdWFsKFtdYW55e2BBbGljZWAsIGBCb2JgLCBgTWFsbG9yeWB9LCBQbHVjayhbXWFueXsmbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQWxpY2VgfSwgJm1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYEJvYmB9LCAmbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgTWFsbG9yeWB9fSwgW11zdHJpbmd7YG5hbWVgfSkpCglhc3NlcnQuRXF1YWwoW11hbnl7YEFsaWNlYCwgYEJvYmAsIGBNYWxsb3J5YH0sIFBsdWNrKCZbXWFueXsmbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQWxpY2VgfSwgJm1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYEJvYmB9LCAmbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgTWFsbG9yeWB9fSwgW11zdHJpbmd7YG5hbWVgfSkpCglhc3NlcnQuRXF1YWwoW11hbnl7YEFsaWNlYCwgYEJvYmAsIGBNYWxsb3J5YH0sIFBsdWNrKCZbXWFueXtbXWFueXsmbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQWxpY2VgfSwgJm1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYEJvYmB9fSwgW11hbnl7Jm1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYE1hbGxvcnlgfX19LCBbXXN0cmluZ3tgKmAsIGBuYW1lYH0pKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMapSplit",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMapSplit(t *testing.T)",
                        "Source": "ewoJdmFyIGlucHV0ID0gYGtleTE9dmFsdWUxJmtleTI9dHJ1ZSZrZXkzPTNgCgl2YXIgb3V0cHV0ID0gU3BsaXQoaW5wdXQsIGA9YCwgYCZgKQoJaWYgbGVuKG91dHB1dCkgPT0gMCB7CgkJdC5FcnJvcigiT3V0cHV0IHNob3VsZCBub3QgYmUgZW1wdHkiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0W2BrZXkxYF07ICFvayB8fCB2ICE9IGB2YWx1ZTFgIHsKCQl0LkVycm9yZigiT3V0cHV0IHNob3VsZCBjb250YWluIGtleSAlcyA9PiAnJXMnIiwgYGtleTFgLCBgdmFsdWUxYCkKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFtga2V5MmBdOyAhb2sgfHwgdiAhPSBgdHJ1ZWAgewoJCXQuRXJyb3JmKCJPdXRwdXQgc2hvdWxkIGNvbnRhaW4ga2V5ICVzID0+ICclcyciLCBga2V5MmAsIGB0cnVlYCkKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFtga2V5M2BdOyAhb2sgfHwgdiAhPSBgM2AgewoJCXQuRXJyb3JmKCJPdXRwdXQgc2hvdWxkIGNvbnRhaW4ga2V5ICVzID0+ICclcyciLCBga2V5M2AsIGAzYCkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMapWalkFlatMap",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMapWalkFlatMap(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogdHJ1ZSwgYGNgOiBgVGhyZWVgfQoJdmFyIGNoZWNrQW5zd2VycyA9IGZ1bmMoY2FsbFNpZ25hdHVyZXMgbWFwW3N0cmluZ11mbkNhbGxTaWduYXR1cmUpIHsKCQl2LCBvayA6PSBjYWxsU2lnbmF0dXJlc1tgYF0KCQlhc3NlcnQuVHJ1ZShvaykKCQlhc3NlcnQuRXF1YWwoZm5DYWxsU2lnbmF0dXJle2lucHV0LCBuaWwsIGZhbHNlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BhYF0KCQlhc3NlcnQuVHJ1ZShvaykKCQlhc3NlcnQuRXF1YWwoZm5DYWxsU2lnbmF0dXJlezEsIFtdc3RyaW5ne2BhYH0sIHRydWV9LCB2KQoJCXYsIG9rID0gY2FsbFNpZ25hdHVyZXNbYGJgXQoJCWFzc2VydC5UcnVlKG9rKQoJCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7dHJ1ZSwgW11zdHJpbmd7YGJgfSwgdHJ1ZX0sIHYpCgkJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgY2BdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtgVGhyZWVgLCBbXXN0cmluZ3tgY2B9LCB0cnVlfSwgdikKCX0KCXZhciBjYWxsU2lnbmF0dXJlcyA9IG1ha2UobWFwW3N0cmluZ11mbkNhbGxTaWduYXR1cmUpCglhc3NlcnQuTmlsKFdhbGsoaW5wdXQsIGZ1bmModmFsdWUgYW55LCBwYXRoIFtdc3RyaW5nLCBpc0xlYWYgYm9vbCkgZXJyb3IgewoJCWNhbGxTaWduYXR1cmVzW3N0cmluZ3MuSm9pbihwYXRoLCBgLmApXSA9IGZuQ2FsbFNpZ25hdHVyZXtWYWx1ZTogdmFsdWUsIFBhdGg6IHBhdGgsIElzTGVhZjogaXNMZWFmfQoJCXJldHVybiBuaWwKCX0pKQoJY2hlY2tBbnN3ZXJzKGNhbGxTaWduYXR1cmVzKQoJY2FsbFNpZ25hdHVyZXMgPSBtYWtlKG1hcFtzdHJpbmddZm5DYWxsU2lnbmF0dXJlKQoJYXNzZXJ0Lk5pbChXYWxrKCZpbnB1dCwgZnVuYyh2YWx1ZSBhbnksIHBhdGggW11zdHJpbmcsIGlzTGVhZiBib29sKSBlcnJvciB7CgkJY2FsbFNpZ25hdHVyZXNbc3RyaW5ncy5Kb2luKHBhdGgsIGAuYCldID0gZm5DYWxsU2lnbmF0dXJle1ZhbHVlOiB2YWx1ZSwgUGF0aDogcGF0aCwgSXNMZWFmOiBpc0xlYWZ9CgkJcmV0dXJuIG5pbAoJfSkpCgljaGVja0Fuc3dlcnMoY2FsbFNpZ25hdHVyZXMpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMapWalkNestedMap",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMapWalkNestedMap(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgY2FsbFNpZ25hdHVyZXMgPSBtYWtlKG1hcFtzdHJpbmddZm5DYWxsU2lnbmF0dXJlKQoJdmFyIGIyYV9tYXAgPSBtYXBbc3RyaW5nXWFueXtgYWA6IHRydWV9Cgl2YXIgYjJiX21hcCA9IG1hcFtzdHJpbmddYW55e2BhYDogNDJ9Cgl2YXIgYjJfc2xpY2UgPSBbXW1hcFtzdHJpbmddYW55e2IyYV9tYXAsIGIyYl9tYXB9Cgl2YXIgYl9tYXAgPSBtYXBbc3RyaW5nXWFueXtgYjFgOiAxMSwgYGIyYDogYjJfc2xpY2V9Cgl2YXIgaW5wdXQgPSBtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogYl9tYXB9CglXYWxrKGlucHV0LCBmdW5jKHZhbHVlIGFueSwgcGF0aCBbXXN0cmluZywgaXNMZWFmIGJvb2wpIGVycm9yIHsKCQljYWxsU2lnbmF0dXJlc1tzdHJpbmdzLkpvaW4ocGF0aCwgYC5gKV0gPSBmbkNhbGxTaWduYXR1cmV7VmFsdWU6IHZhbHVlLCBQYXRoOiBwYXRoLCBJc0xlYWY6IGlzTGVhZn0KCQlyZXR1cm4gbmlsCgl9KQoJdiwgb2sgOj0gY2FsbFNpZ25hdHVyZXNbYGBdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7aW5wdXQsIG5pbCwgZmFsc2V9LCB2KQoJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgYWBdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7MSwgW11zdHJpbmd7YGFgfSwgdHJ1ZX0sIHYpCgl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BiYF0KCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtiX21hcCwgW11zdHJpbmd7YGJgfSwgZmFsc2V9LCB2KQoJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgYi5iMWBdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7MTEsIFtdc3RyaW5ne2BiYCwgYGIxYH0sIHRydWV9LCB2KQoJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgYi5iMmBdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7YjJfc2xpY2UsIFtdc3RyaW5ne2BiYCwgYGIyYH0sIGZhbHNlfSwgdikKCXYsIG9rID0gY2FsbFNpZ25hdHVyZXNbYGIuYjIuMGBdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7YjJhX21hcCwgW11zdHJpbmd7YGJgLCBgYjJgLCBgMGB9LCBmYWxzZX0sIHYpCgl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BiLmIyLjAuYWBdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7dHJ1ZSwgW11zdHJpbmd7YGJgLCBgYjJgLCBgMGAsIGBhYH0sIHRydWV9LCB2KQoJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgYi5iMi4xLmFgXQoJYXNzZXJ0LlRydWUob2spCglhc3NlcnQuRXF1YWwoZm5DYWxsU2lnbmF0dXJlezQyLCBbXXN0cmluZ3tgYmAsIGBiMmAsIGAxYCwgYGFgfSwgdHJ1ZX0sIHYpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMapWalkScalar",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMapWalkScalar(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKFdhbGsobmlsLCBuaWwpKQoJdmFyIGkgPSAwCglhc3NlcnQuTmlsKFdhbGsoNDIsIGZ1bmModmFsdWUgYW55LCBwYXRoIFtdc3RyaW5nLCBpc0xlYWYgYm9vbCkgZXJyb3IgewoJCWkgKz0gMQoJCWFzc2VydC5FcXVhbCg0MiwgdmFsdWUpCgkJYXNzZXJ0Lk5pbChwYXRoKQoJCWFzc2VydC5UcnVlKGlzTGVhZikKCQlyZXR1cm4gbmlsCgl9KSkKCWFzc2VydC5FcXVhbCgxLCBpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMapWalkStruct",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMapWalkStruct(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSB3YWxrVGVzdFN0cnVjdHtOYW1lOiBgRmlyc3RgLCBWYWx1ZTogNDIsIEZsYWdzOiBbXWJvb2x7dHJ1ZSwgdHJ1ZSwgZmFsc2UsIHRydWV9LCBTdWJtYXA6IG1hcFtzdHJpbmddc3RyaW5ne2BhYDogYDFgLCBgYmA6IGB0cnVlYCwgYGNgOiBgVGhyZWVgfX0KCXZhciBjaGVja0Fuc3dlcnMgPSBmdW5jKGNhbGxTaWduYXR1cmVzIG1hcFtzdHJpbmddZm5DYWxsU2lnbmF0dXJlKSB7CgkJdiwgb2sgOj0gY2FsbFNpZ25hdHVyZXNbYGBdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtpbnB1dCwgbmlsLCBmYWxzZX0sIHYpCgkJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgTmFtZWBdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtgRmlyc3RgLCBbXXN0cmluZ3tgTmFtZWB9LCB0cnVlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BWYWx1ZWBdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtpbnQ2NCg0MiksIFtdc3RyaW5ne2BWYWx1ZWB9LCB0cnVlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BGbGFnc2BdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtpbnB1dC5GbGFncywgW11zdHJpbmd7YEZsYWdzYH0sIGZhbHNlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BGbGFncy4wYF0KCQlhc3NlcnQuVHJ1ZShvaykKCQlhc3NlcnQuRXF1YWwoZm5DYWxsU2lnbmF0dXJle3RydWUsIFtdc3RyaW5ne2BGbGFnc2AsIGAwYH0sIHRydWV9LCB2KQoJCXYsIG9rID0gY2FsbFNpZ25hdHVyZXNbYEZsYWdzLjFgXQoJCWFzc2VydC5UcnVlKG9rKQoJCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7dHJ1ZSwgW11zdHJpbmd7YEZsYWdzYCwgYDFgfSwgdHJ1ZX0sIHYpCgkJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgRmxhZ3MuMmBdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtmYWxzZSwgW11zdHJpbmd7YEZsYWdzYCwgYDJgfSwgdHJ1ZX0sIHYpCgkJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgRmxhZ3MuM2BdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXt0cnVlLCBbXXN0cmluZ3tgRmxhZ3NgLCBgM2B9LCB0cnVlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BTdWJtYXBgXQoJCWFzc2VydC5UcnVlKG9rKQoJCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7aW5wdXQuU3VibWFwLCBbXXN0cmluZ3tgU3VibWFwYH0sIGZhbHNlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BTdWJtYXAuYWBdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtgMWAsIFtdc3RyaW5ne2BTdWJtYXBgLCBgYWB9LCB0cnVlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BTdWJtYXAuYmBdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtgdHJ1ZWAsIFtdc3RyaW5ne2BTdWJtYXBgLCBgYmB9LCB0cnVlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BTdWJtYXAuY2BdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtgVGhyZWVgLCBbXXN0cmluZ3tgU3VibWFwYCwgYGNgfSwgdHJ1ZX0sIHYpCgl9Cgl2YXIgY2FsbFNpZ25hdHVyZXMgPSBtYWtlKG1hcFtzdHJpbmddZm5DYWxsU2lnbmF0dXJlKQoJYXNzZXJ0Lk5pbChXYWxrU3RydWN0KGlucHV0LCBmdW5jKHZhbHVlIGFueSwgcGF0aCBbXXN0cmluZywgaXNMZWFmIGJvb2wpIGVycm9yIHsKCQljYWxsU2lnbmF0dXJlc1tzdHJpbmdzLkpvaW4ocGF0aCwgYC5gKV0gPSBmbkNhbGxTaWduYXR1cmV7VmFsdWU6IHZhbHVlLCBQYXRoOiBwYXRoLCBJc0xlYWY6IGlzTGVhZn0KCQlyZXR1cm4gbmlsCgl9KSkKCWNoZWNrQW5zd2VycyhjYWxsU2lnbmF0dXJlcykKCWNhbGxTaWduYXR1cmVzID0gbWFrZShtYXBbc3RyaW5nXWZuQ2FsbFNpZ25hdHVyZSkKCWFzc2VydC5OaWwoV2Fsa1N0cnVjdCgmaW5wdXQsIGZ1bmModmFsdWUgYW55LCBwYXRoIFtdc3RyaW5nLCBpc0xlYWYgYm9vbCkgZXJyb3IgewoJCWNhbGxTaWduYXR1cmVzW3N0cmluZ3MuSm9pbihwYXRoLCBgLmApXSA9IGZuQ2FsbFNpZ25hdHVyZXtWYWx1ZTogdmFsdWUsIFBhdGg6IHBhdGgsIElzTGVhZjogaXNMZWFmfQoJCXJldHVybiBuaWwKCX0pKQoJY2hlY2tBbnN3ZXJzKGNhbGxTaWduYXR1cmVzKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestRxMapFmt",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestRxMapFmt(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbSA9IHJ4dXRpbC5NYXRjaChyeE1hcEZtdCwgYCR7dGVzdGluZy50aGUudGhpbmd9YCkKCWFzc2VydC5Ob3ROaWwobSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXXN0cmluZ3tga2V5YDogYHRlc3RpbmcudGhlLnRoaW5nYCwgYGZhbGxiYWNrYDogYGAsIGBmbXRgOiBgYH0sIG0uTmFtZWRDYXB0dXJlcygpKQoJbSA9IHJ4dXRpbC5NYXRjaChyeE1hcEZtdCwgYCR7dGVzdGluZy50aGUudGhpbmc6JTQ4c31gKQoJYXNzZXJ0Lk5vdE5pbChtKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddc3RyaW5ne2BrZXlgOiBgdGVzdGluZy50aGUudGhpbmdgLCBgZmFsbGJhY2tgOiBgYCwgYGZtdGA6IGAlNDhzYH0sIG0uTmFtZWRDYXB0dXJlcygpKQoJbSA9IHJ4dXRpbC5NYXRjaChyeE1hcEZtdCwgYCR7dGVzdGluZy50aGUudGhpbmd8ZmFsbGJhY2sudmFsdWV9YCkKCWFzc2VydC5Ob3ROaWwobSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXXN0cmluZ3tga2V5YDogYHRlc3RpbmcudGhlLnRoaW5nYCwgYGZhbGxiYWNrYDogYGZhbGxiYWNrLnZhbHVlYCwgYGZtdGA6IGBgfSwgbS5OYW1lZENhcHR1cmVzKCkpCgltID0gcnh1dGlsLk1hdGNoKHJ4TWFwRm10LCBgJHt0ZXN0aW5nfHRoZXx0aGluZ3xmYWxsYmFjay52YWx1ZX1gKQoJYXNzZXJ0Lk5vdE5pbChtKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddc3RyaW5ne2BrZXlgOiBgdGVzdGluZ2AsIGBmYWxsYmFja2A6IGB0aGV8dGhpbmd8ZmFsbGJhY2sudmFsdWVgLCBgZm10YDogYGB9LCBtLk5hbWVkQ2FwdHVyZXMoKSkKCW0gPSByeHV0aWwuTWF0Y2gocnhNYXBGbXQsIGAke3Rlc3Rpbmd8dGhlfHRoaW5nfGZhbGxiYWNrLnZhbHVlOiU0OHN9YCkKCWFzc2VydC5Ob3ROaWwobSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXXN0cmluZ3tga2V5YDogYHRlc3RpbmdgLCBgZmFsbGJhY2tgOiBgdGhlfHRoaW5nfGZhbGxiYWNrLnZhbHVlYCwgYGZtdGA6IGAlNDhzYH0sIG0uTmFtZWRDYXB0dXJlcygpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSliceOfMaps",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSliceOfMaps(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5MZW4odCwgU2xpY2VPZk1hcHMobmlsKSwgMCkKCXJlcXVpcmUuTGVuKHQsIFNsaWNlT2ZNYXBzKFtdaW50ezF9KSwgMSkKCXZhciBzbTEgPSBTbGljZU9mTWFwcyhbXW1hcFtzdHJpbmddYW55e3tgaWRgOiBgb25lYH0sIHtgaWRgOiBgdHdvYH0sIHtgaWRgOiBgdGhyZWVgfX0pCglyZXF1aXJlLkxlbih0LCBzbTEsIDMpCglmb3IgaSwgbSA6PSByYW5nZSBzbTEgewoJCXN3aXRjaCBpIHsKCQljYXNlIDA6CgkJCXJlcXVpcmUuVHJ1ZSh0LCBtLlN0cmluZyhgaWRgKSA9PSBgb25lYCkKCQljYXNlIDE6CgkJCXJlcXVpcmUuVHJ1ZSh0LCBtLlN0cmluZyhgaWRgKSA9PSBgdHdvYCkKCQljYXNlIDI6CgkJCXJlcXVpcmUuVHJ1ZSh0LCBtLlN0cmluZyhgaWRgKSA9PSBgdGhyZWVgKQoJCX0KCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSprintf",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSprintf(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYEhlbGxvIGd1ZXN0ISBZb3VyIElQIGlzOiAodW5rbm93bilgLCBTcHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0fSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pfSIpKQoJYXNzZXJ0LkVxdWFsKGBIZWxsbyBndWVzdCEgWW91ciBJUCBpczogMTI3LjAuMC4xYCwgU3ByaW50ZigiSGVsbG8gJHt1c2VybmFtZXxndWVzdH0hIFlvdXIgSVAgaXM6ICR7aXBhZGRyZXNzfCh1bmtub3duKX0iLCBtYXBbc3RyaW5nXWFueXtgaXBhZGRyZXNzYDogYDEyNy4wLjAuMWB9KSkKCWFzc2VydC5FcXVhbChgSGVsbG8gZ3Vlc3QhIFlvdXIgSVAgaXM6IDEyNy4wLjAuMWAsIFNwcmludGYoIkhlbGxvICR7dXNlcm5hbWV8Z3Vlc3R9ISBZb3VyIElQIGlzOiAke2lwYWRkcmVzc3wodW5rbm93bil9IiwgbWFwW3N0cmluZ11hbnl7YHVzZXJuYW1lYDogYGAsIGBpcGFkZHJlc3NgOiBgMTI3LjAuMC4xYH0pKQoJYXNzZXJ0LkVxdWFsKGBIZWxsbyBmcmllbmQhIFlvdXIgSVAgaXM6ICh1bmtub3duKWAsIFNwcmludGYoIkhlbGxvICR7dXNlcm5hbWV8Z3Vlc3R9ISBZb3VyIElQIGlzOiAke2lwYWRkcmVzc3wodW5rbm93bil9IiwgbWFwW3N0cmluZ11hbnl7YHVzZXJuYW1lYDogYGZyaWVuZGB9KSkKCWFzc2VydC5FcXVhbChgSGVsbG8gZnJpZW5kISBZb3VyIElQIGlzOiAodW5rbm93bilgLCBTcHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0fSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pfSIsIG1hcFtzdHJpbmddYW55e2B1c2VybmFtZWA6IGBmcmllbmRgLCBgaXBhZGRyZXNzYDogYGB9KSkKCWFzc2VydC5FcXVhbChgSGVsbG8gZnJpZW5kISBZb3VyIElQIGlzOiAxMjcuMC4wLjFgLCBTcHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0fSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pfSIsIG1hcFtzdHJpbmddYW55e2B1c2VybmFtZWA6IGBmcmllbmRgLCBgaXBhZGRyZXNzYDogYDEyNy4wLjAuMWB9KSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSprintfFormatTime",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSprintfFormatTime(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYHRoZSB0aW1lIGlzOiAyMDA2LTAxLTAyVDE1OjA0OjA1LTA3OjAwYCwgU3ByaW50ZigidGhlIHRpbWUgaXM6ICR7bm93fSIsIG1hcFtzdHJpbmddYW55e2Bub3dgOiB0aW1ldXRpbC5SZWZlcmVuY2VUaW1lKCl9KSkKCWFzc2VydC5FcXVhbChgdGhlIHRpbWUgaXM6IEphbnVhcnkgMiwgMjAwNiAoMzowNHBtKWAsIFNwcmludGYoInRoZSB0aW1lIGlzOiAke25vdzolSmFudWFyeSAyLCAyMDA2ICgzOjA0cG0pfSIsIG1hcFtzdHJpbmddYW55e2Bub3dgOiB0aW1ldXRpbC5SZWZlcmVuY2VUaW1lKCl9KSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSprintfFormatting",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSprintfFormatting(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYEhlbGxvIGd1ZXN0ICAgICAhIFlvdXIgSVAgaXM6ICAgICAgICh1bmtub3duKWAsIFNwcmludGYoIkhlbGxvICR7dXNlcm5hbWV8Z3Vlc3Q6JS0xMHN9ISBZb3VyIElQIGlzOiAke2lwYWRkcmVzc3wodW5rbm93bik6JTE1c30iKSkKCWFzc2VydC5FcXVhbChgSGVsbG8gZ3Vlc3QgICAgICEgWW91ciBJUCBpczogICAgICAgMTI3LjAuMC4xYCwgU3ByaW50ZigiSGVsbG8gJHt1c2VybmFtZXxndWVzdDolLTEwc30hIFlvdXIgSVAgaXM6ICR7aXBhZGRyZXNzfCh1bmtub3duKTolMTVzfSIsIG1hcFtzdHJpbmddYW55e2BpcGFkZHJlc3NgOiBgMTI3LjAuMC4xYH0pKQoJYXNzZXJ0LkVxdWFsKGBIZWxsbyBndWVzdCAgICAgISBZb3VyIElQIGlzOiAgICAgICAxMjcuMC4wLjFgLCBTcHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0OiUtMTBzfSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pOiUxNXN9IiwgbWFwW3N0cmluZ11hbnl7YHVzZXJuYW1lYDogYGAsIGBpcGFkZHJlc3NgOiBgMTI3LjAuMC4xYH0pKQoJYXNzZXJ0LkVxdWFsKGBIZWxsbyBmcmllbmQgICAgISBZb3VyIElQIGlzOiAgICAgICAodW5rbm93bilgLCBTcHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0OiUtMTBzfSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pOiUxNXN9IiwgbWFwW3N0cmluZ11hbnl7YHVzZXJuYW1lYDogYGZyaWVuZGB9KSkKCWFzc2VydC5FcXVhbChgSGVsbG8gZnJpZW5kICAgICEgWW91ciBJUCBpczogICAgICAgKHVua25vd24pYCwgU3ByaW50ZigiSGVsbG8gJHt1c2VybmFtZXxndWVzdDolLTEwc30hIFlvdXIgSVAgaXM6ICR7aXBhZGRyZXNzfCh1bmtub3duKTolMTVzfSIsIG1hcFtzdHJpbmddYW55e2B1c2VybmFtZWA6IGBmcmllbmRgLCBgaXBhZGRyZXNzYDogYGB9KSkKCWFzc2VydC5FcXVhbChgSGVsbG8gZnJpZW5kICAgICEgWW91ciBJUCBpczogICAgICAgMTI3LjAuMC4xYCwgU3ByaW50ZigiSGVsbG8gJHt1c2VybmFtZXxndWVzdDolLTEwc30hIFlvdXIgSVAgaXM6ICR7aXBhZGRyZXNzfCh1bmtub3duKTolMTVzfSIsIG1hcFtzdHJpbmddYW55e2B1c2VybmFtZWA6IGBmcmllbmRgLCBgaXBhZGRyZXNzYDogYDEyNy4wLjAuMWB9KSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestStringKeys",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestStringKeys(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaTEgPSBtYXBbc3RyaW5nXWFueXtgMWA6IDEsIGAyYDogdHJ1ZSwgYDNgOiBgdGhyZWVgfQoJdmFyIGkyID0gbWFwW3N0cmluZ11ib29se2AxYDogdHJ1ZSwgYDJgOiBmYWxzZSwgYDNgOiB0cnVlfQoJdmFyIGkzID0gbWFwW3N0cmluZ11NeVRlc3RUaGluZ3tgMWA6IE15VGVzdFRoaW5ne30sIGAyYDogTXlUZXN0VGhpbmd7fSwgYDNgOiBNeVRlc3RUaGluZ3t9fQoJdmFyIGk0IHN5bmMuTWFwCglpNC5TdG9yZShgMWAsIE15VGVzdFRoaW5ne30pCglpNC5TdG9yZShgMmAsIDIpCglpNC5TdG9yZShgM2AsIDMuMTQpCgl2YXIgb3V0cHV0ID0gW11zdHJpbmd7YDFgLCBgMmAsIGAzYH0KCWFzc2VydC5FbXB0eShTdHJpbmdLZXlzKG5pbCkpCglhc3NlcnQuRXF1YWwob3V0cHV0LCBTdHJpbmdLZXlzKGkxKSkKCWFzc2VydC5FcXVhbChvdXRwdXQsIFN0cmluZ0tleXMoaTIpKQoJYXNzZXJ0LkVxdWFsKG91dHB1dCwgU3RyaW5nS2V5cyhpMykpCglhc3NlcnQuRXF1YWwob3V0cHV0LCBTdHJpbmdLZXlzKCZpNCkpCglhc3NlcnQuRW1wdHkoU3RyaW5nS2V5cyh0cnVlKSkKCWFzc2VydC5FbXB0eShTdHJpbmdLZXlzKDQpKQoJYXNzZXJ0LkVtcHR5KFN0cmluZ0tleXMoW11pbnR7MSwgMiwgM30pKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestStructFromMap",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestStructFromMap(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYXBbc3RyaW5nXWFueXtgTmFtZWA6IGBGb28gQmFyYCwgYGFjdGl2ZWA6IHRydWUsIGBzaG91bGRfbm90X3NldGA6IDQsIGBzdWJ0eXBlMmA6IG1hcFtzdHJpbmddYW55e2BBYDogMywgYGJgOiA0fSwgYFRpbWVUZXN0YDogMTUwMDAwMDAwMDAsIGBTdWJ0eXBlMWA6IG1hcFtzdHJpbmddYW55e2BBYDogMTExMSwgYGJgOiAyMjIyfSwgYEludFRlc3RgOiBpbnQ2NCg1KSwgYFByb3BlcnRpZXNgOiBtYXBbc3RyaW5nXWFueXtgZmlyc3RgOiAxLCBgc2Vjb25kYDogdHJ1ZSwgYHRoaXJkYDogYHRocmVlYH0sIGBTdHJTbGljZVRlc3RgOiBbXXN0cmluZ3tgb25lYCwgYHR3b2AsIGB0aHJlZWB9LCBgSW50ZXJmYWNlU3RyU2xpY2VUZXN0YDogW11hbnl7YG9uZWAsIGB0d29gLCBgdGhyZWVgfSwgYFN0cnVjdFNsaWNlVGVzdGA6IFtdU3VidHlwZVRlc3Rlcnt7MTAsIDExfSwgezEyLCAxM30sIHsxNCwgMTV9fSwgYFN0cnVjdFNsaWNlVGVzdDJgOiBbXW1hcFtzdHJpbmddYW55e3tgQWA6IDEwLCBgYmA6IDExfSwge2BBYDogMTIsIGBiYDogMTN9LCB7YEFgOiAxNCwgYGJgOiAxNX19LCBgU3RydWN0U2xpY2VUZXN0M2A6IFtdYW55e21hcFtzdHJpbmddYW55e2BBYDogMTAsIGBiYDogMTF9LCBtYXBbc3RyaW5nXWFueXtgQWA6IDEyLCBgYmA6IDEzfSwgbWFwW3N0cmluZ11hbnl7YEFgOiAxNCwgYGJgOiAxNX19fQoJdmFyIG91dHB1dCA9IE15U3RydWN0VGVzdGVye30KCXZhciBlcnIgPSBTdHJ1Y3RGcm9tTWFwKGlucHV0LCAmb3V0cHV0KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBGb28gQmFyYCwgb3V0cHV0Lk5hbWUpCglhc3NlcnQuVHJ1ZShvdXRwdXQuQWN0aXZlKQoJYXNzZXJ0Llplcm8ob3V0cHV0Lm5vbmV4cG9ydGVkKQoJYXNzZXJ0LkVxdWFsKDExMTEsIG91dHB1dC5TdWJ0eXBlMS5BKQoJYXNzZXJ0LkVxdWFsKDIyMjIsIG91dHB1dC5TdWJ0eXBlMS5CKQoJYXNzZXJ0Lk5vdE5pbChvdXRwdXQuU3VidHlwZTIpCglhc3NlcnQuRXF1YWwoMywgb3V0cHV0LlN1YnR5cGUyLkEpCglhc3NlcnQuRXF1YWwoNCwgb3V0cHV0LlN1YnR5cGUyLkIpCglhc3NlcnQuRXF1YWwodGltZS5EdXJhdGlvbigxNSkqdGltZS5TZWNvbmQsIG91dHB1dC5UaW1lVGVzdCkKCWFzc2VydC5FcXVhbChpbnQzMig1KSwgb3V0cHV0LkludFRlc3QpCglhc3NlcnQuTm90TmlsKG91dHB1dC5Qcm9wZXJ0aWVzKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEsIG91dHB1dC5Qcm9wZXJ0aWVzW2BmaXJzdGBdKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKHRydWUsIG91dHB1dC5Qcm9wZXJ0aWVzW2BzZWNvbmRgXSkKCWFzc2VydC5FcXVhbChgdGhyZWVgLCBvdXRwdXQuUHJvcGVydGllc1tgdGhpcmRgXSkKCWFzc2VydC5Ob3ROaWwob3V0cHV0LlN0clNsaWNlVGVzdCkKCWFzc2VydC5MZW4ob3V0cHV0LlN0clNsaWNlVGVzdCwgMykKCWFzc2VydC5FcXVhbChgb25lYCwgb3V0cHV0LlN0clNsaWNlVGVzdFswXSkKCWFzc2VydC5FcXVhbChgdHdvYCwgb3V0cHV0LlN0clNsaWNlVGVzdFsxXSkKCWFzc2VydC5FcXVhbChgdGhyZWVgLCBvdXRwdXQuU3RyU2xpY2VUZXN0WzJdKQoJYXNzZXJ0Lk5vdE5pbChvdXRwdXQuSW50ZXJmYWNlU3RyU2xpY2VUZXN0KQoJYXNzZXJ0LkxlbihvdXRwdXQuSW50ZXJmYWNlU3RyU2xpY2VUZXN0LCAzKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGBvbmVgLCBvdXRwdXQuSW50ZXJmYWNlU3RyU2xpY2VUZXN0WzBdKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGB0d29gLCBvdXRwdXQuSW50ZXJmYWNlU3RyU2xpY2VUZXN0WzFdKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGB0aHJlZWAsIG91dHB1dC5JbnRlcmZhY2VTdHJTbGljZVRlc3RbMl0pCglhc3NlcnQuTm90TmlsKG91dHB1dC5TdHJ1Y3RTbGljZVRlc3QpCglhc3NlcnQuTGVuKG91dHB1dC5TdHJ1Y3RTbGljZVRlc3QsIDMpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMTAsIG91dHB1dC5TdHJ1Y3RTbGljZVRlc3RbMF0uQSkKCWFzc2VydC5FcXVhbFZhbHVlcygxMSwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdFswXS5CKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEyLCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0WzFdLkEpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMTMsIG91dHB1dC5TdHJ1Y3RTbGljZVRlc3RbMV0uQikKCWFzc2VydC5FcXVhbFZhbHVlcygxNCwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdFsyXS5BKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDE1LCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0WzJdLkIpCglhc3NlcnQuTm90TmlsKG91dHB1dC5TdHJ1Y3RTbGljZVRlc3QyKQoJYXNzZXJ0LkxlbihvdXRwdXQuU3RydWN0U2xpY2VUZXN0MiwgMykKCWFzc2VydC5FcXVhbFZhbHVlcygxMCwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdDJbMF0uQSkKCWFzc2VydC5FcXVhbFZhbHVlcygxMSwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdDJbMF0uQikKCWFzc2VydC5FcXVhbFZhbHVlcygxMiwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdDJbMV0uQSkKCWFzc2VydC5FcXVhbFZhbHVlcygxMywgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdDJbMV0uQikKCWFzc2VydC5FcXVhbFZhbHVlcygxNCwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdDJbMl0uQSkKCWFzc2VydC5FcXVhbFZhbHVlcygxNSwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdDJbMl0uQikKCWFzc2VydC5Ob3ROaWwob3V0cHV0LlN0cnVjdFNsaWNlVGVzdDMpCglhc3NlcnQuTGVuKG91dHB1dC5TdHJ1Y3RTbGljZVRlc3QzLCAzKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEwLCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0M1swXS5BKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDExLCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0M1swXS5CKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEyLCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0M1sxXS5BKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEzLCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0M1sxXS5CKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDE0LCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0M1syXS5BKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDE1LCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0M1syXS5CKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestStructFromMapEmbedded",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestStructFromMapEmbedded(t *testing.T)",
                        "Source": "ewoJdHlwZSB0QWRkcmVzcyBzdHJ1Y3QgewoJCU51bWJlciAgIHN0cmluZwoJCVN0cmVldCAgIHN0cmluZwoJCUNpdHkgICAgIHN0cmluZyBgcG90YXRvOiJjaXR5ImAKCQlTdGF0ZSAgICBzdHJpbmcgYHBvdGF0bzoic3RhdGUiYAoJCUNvdW50cnkgIHN0cmluZyBgcG90YXRvOiJjb3VudHJ5ImAKCQlMb2FkZWRBdCB0aW1lLlRpbWUKCX0KCXR5cGUgdFBlcnNvbiBzdHJ1Y3QgewoJCU5hbWUgICAgc3RyaW5nCgkJQWdlICAgICBpbnQgYHBvdGF0bzoiYWdlImAKCQlBZGRyZXNzICp0QWRkcmVzcwoJfQoJdHlwZSB0VXNlciBzdHJ1Y3QgewoJCXRQZXJzb24KCQlFbWFpbCAgc3RyaW5nIGBwb3RhdG86ImVtYWlsImAKCQlBY3RpdmUgYm9vbCAgIGBwb3RhdG86IkFDVElWRSJgCgl9Cgl2YXIgYXNzZXJ0ID0gcmVxdWlyZS5OZXcodCkKCXZhciB0Z3QgdFVzZXIKCWFzc2VydC5Ob0Vycm9yKFRhZ2dlZFN0cnVjdEZyb21NYXAobWFwW3N0cmluZ11hbnl7YE5hbWVgOiBgUnVzdHkgU2hhY2tsZWZvcmRgLCBgYWdlYDogNDIwLCBgZW1haWxgOiBgbm9uZStvZkB5b3VyLmJpemAsIGBBQ1RJVkVgOiB0cnVlLCBgQWRkcmVzc2A6IG1hcFtzdHJpbmddYW55e2BOdW1iZXJgOiAzNTAsIGBTdHJlZXRgOiBgRmlmdGggQXZlbnVlYCwgYGNpdHlgOiBgTmV3IFlvcmtgLCBgc3RhdGVgOiBgTllgLCBgY291bnRyeWA6IGBVU2AsIGBMb2FkZWRBdGA6IGAyMDA2LTAxLTAyYH19LCAmdGd0LCBgcG90YXRvYCkpCglhc3NlcnQuRXF1YWwoYG5vbmUrb2ZAeW91ci5iaXpgLCB0Z3QuRW1haWwpCglhc3NlcnQuVHJ1ZSh0Z3QuQWN0aXZlKQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "ApplyFunc": {
                        "Name": "ApplyFunc",
                        "Source": "dHlwZSBBcHBseUZ1bmMgZnVuYyhrZXkgW11zdHJpbmcsIHZhbHVlIGFueSkgKGFueSwgYm9vbCk="
                    },
                    "ConversionFunc": {
                        "Name": "ConversionFunc",
                        "Source": "dHlwZSBDb252ZXJzaW9uRnVuYyBmdW5jKGZyb20gcmVmbGVjdC5UeXBlLCB0byByZWZsZWN0LlR5cGUsIGRhdGEgYW55KSAoYW55LCBlcnJvcik="
                    },
                    "Item": {
                        "Name": "Item",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Set",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Set(value any) error",
                                "IsPackageLevel": false
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "Key",
                                "Type": "any"
                            },
                            {
                                "Name": "Value",
                                "Type": "any"
                            },
                            {
                                "Name": "K",
                                "Type": "string"
                            },
                            {
                                "Name": "V",
                                "Type": "typeutil.Variant"
                            }
                        ],
                        "Source": "dHlwZSBJdGVtIHN0cnVjdCB7CglLZXkgICBhbnkKCVZhbHVlIGFueQoJSyAgICAgc3RyaW5nCglWICAgICB0eXBldXRpbC5WYXJpYW50Cgp9Cg==",
                        "HasUnexportedFields": true
                    },
                    "ItemFunc": {
                        "Name": "ItemFunc",
                        "Source": "dHlwZSBJdGVtRnVuYyBmdW5jKGtleSBzdHJpbmcsIHZhbHVlIHR5cGV1dGlsLlZhcmlhbnQpIGVycm9y"
                    },
                    "IterOptions": {
                        "Name": "IterOptions",
                        "MetaType": "struct",
                        "Fields": [
                            {
                                "Name": "TagName",
                                "Type": "string"
                            },
                            {
                                "Name": "SortKeys",
                                "Type": "bool"
                            }
                        ],
                        "Source": "dHlwZSBJdGVyT3B0aW9ucyBzdHJ1Y3QgewoJVGFnTmFtZSAgc3RyaW5nCglTb3J0S2V5cyBib29sCn0="
                    },
                    "KeyTransformFunc": {
                        "Name": "KeyTransformFunc",
                        "Source": "dHlwZSBLZXlUcmFuc2Zvcm1GdW5jIGZ1bmMoc3RyaW5nKSBzdHJpbmc="
                    },
                    "Map": {
                        "Name": "Map",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Auto",
                                "Comment": "Return the value at key as an automatically converted value.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "fallbacks",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "Auto(key string, fallbacks ...any) any",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Bool",
                                "Comment": "Return the value at key as a bool.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "Bool(key string) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Bytes",
                                "Comment": "Return the value at key as a byte slice.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    }
                                ],
                                "Signature": "Bytes(key string) []byte",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Compact",
                                "Comment": "Reject all nil values from the map.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "*Map"
                                    }
                                ],
                                "Signature": "Compact() *Map",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Delete",
                                "Comment": "Delete a value from the map.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "Delete(key string)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Duration",
                                "Comment": "Return the value at key interpreted as a Duration.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "fallbacks",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "time.Duration"
                                    }
                                ],
                                "Signature": "Duration(key string, fallbacks ...any) time.Duration",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Each",
                                "Comment": "Iterate through each item in the map.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "ItemFunc"
                                    },
                                    {
                                        "Name": "tagName",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Each(fn ItemFunc, tagName ...string) error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Err",
                                "Comment": "Return the value at key as an error, or nil if the value is not an error.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Err(key string) error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Float",
                                "Comment": "Return the value at key as a float.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "fallbacks",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "float64"
                                    }
                                ],
                                "Signature": "Float(key string, fallbacks ...any) float64",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Fprintf",
                                "Comment": "Uses the extended Fprintf in this package, passing this map as the data used in the given format string.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "w",
                                        "Type": "io.Writer"
                                    },
                                    {
                                        "Name": "format",
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "Fprintf(w io.Writer, format string)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Get",
                                "Comment": "Retrieve a value from the Map by the given dot.separated key, or return a fallback\nvalue.  Return values are a typeutil.Variant, which can be easily coerced into\nvarious types.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "fallbacks",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "typeutil.Variant"
                                    }
                                ],
                                "Signature": "Get(key string, fallbacks ...any) typeutil.Variant",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Int",
                                "Comment": "Return the value at key as an integer.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "fallbacks",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int64"
                                    }
                                ],
                                "Signature": "Int(key string, fallbacks ...any) int64",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsZero",
                                "Comment": "Return whether the value at the given key is that type's zero value.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsZero(key string) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Iter",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "opts",
                                        "Type": "...IterOptions"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": ""
                                    }
                                ],
                                "Signature": "Iter(opts ...IterOptions) ",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "JSON",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "indent",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Name": "data",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Signature": "JSON(indent ...string) data []byte",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "JSONPath",
                                "Comment": "Performs a JSONPath query against the given object and returns the results.\nSee JSONPath for details.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "query",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "fallback",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "JSONPath(query string, fallback ...any) any",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Keys",
                                "Comment": "Return the keys in this Map object.  You may specify the name of a struct tag on the underlying\nobject to use for generating key names.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "tagName",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "[]any"
                                    }
                                ],
                                "Signature": "Keys(tagName ...string) []any",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Len",
                                "Comment": "Return the length of the Map.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "int"
                                    }
                                ],
                                "Signature": "Len() int",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "M",
                                "Comment": "Create a new Variant map object from the given value.  A wide range of values are accepted, and\nthe best effort is made to convert those values into a usable map. Accepted values include typeutil.Variant,\nany value with a reflect.Kind of reflect.Map, sync.Map, another maputil.Map, url.Values,\nhttp.Header, or a string or []byte which will be decoded using json.Unmarshal if and only if the\nstring begins with \"{\" and ends with \"}\".",
                                "Arguments": [
                                    {
                                        "Name": "data",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Map"
                                    }
                                ],
                                "Signature": "M(data any) *Map",
                                "Source": "ewoJaWYgZGF0YVYsIG9rIDo9IGRhdGEuKHR5cGV1dGlsLlZhcmlhbnQpOyBvayB7CgkJZGF0YSA9IGRhdGFWLlZhbHVlCgl9IGVsc2UgaWYgZGF0YU0sIG9rIDo9IGRhdGEuKCpNYXApOyBvayB7CgkJcmV0dXJuIGRhdGFNCgl9IGVsc2UgaWYgZGF0YU0sIG9rIDo9IGRhdGEuKE1hcCk7IG9rIHsKCQlyZXR1cm4gJmRhdGFNCgl9IGVsc2UgaWYgZGF0YVNNLCBvayA6PSBkYXRhLigqc3luYy5NYXApOyBvayB7CgkJdmFyIGRhdGFNID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCQlkYXRhU00uUmFuZ2UoZnVuYyhrZXksIHZhbHVlIGFueSkgYm9vbCB7CgkJCWRhdGFNW3R5cGV1dGlsLlN0cmluZyhrZXkpXSA9IHZhbHVlCgkJCXJldHVybiB0cnVlCgkJfSkKCQlkYXRhID0gZGF0YU0KCX0gZWxzZSBpZiB1Viwgb2sgOj0gZGF0YS4odXJsLlZhbHVlcyk7IG9rIHsKCQl2YXIgZGF0YU0gPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJCWZvciBrLCB2IDo9IHJhbmdlIHVWIHsKCQkJc3dpdGNoIGxlbih2KSB7CgkJCWNhc2UgMDoKCQkJCWJyZWFrCgkJCWNhc2UgMToKCQkJCWRhdGFNW2tdID0gdHlwZXV0aWwuQXV0byh2WzBdKQoJCQlkZWZhdWx0OgoJCQkJZGF0YU1ba10gPSBzbGljZXV0aWwuQXV0b3R5cGUodikKCQkJfQoJCX0KCQlkYXRhID0gZGF0YU0KCX0gZWxzZSBpZiBoViwgb2sgOj0gZGF0YS4oaHR0cC5IZWFkZXIpOyBvayB7CgkJdmFyIGRhdGFNID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCQlmb3IgaywgdiA6PSByYW5nZSBoViB7CgkJCXN3aXRjaCBsZW4odikgewoJCQljYXNlIDA6CgkJCQlicmVhawoJCQljYXNlIDE6CgkJCQlkYXRhTVtrXSA9IHR5cGV1dGlsLkF1dG8odlswXSkKCQkJZGVmYXVsdDoKCQkJCWRhdGFNW2tdID0gc2xpY2V1dGlsLkF1dG90eXBlKHYpCgkJCX0KCQl9CgkJZGF0YSA9IGRhdGFNCgl9IGVsc2UgaWYgZFMsIG9rIDo9IGRhdGEuKHN0cmluZyk7IG9rIHsKCQlpZiBzdHJpbmd1dGlsLklzU3Vycm91bmRlZEJ5KHN0cmluZ3MuVHJpbVNwYWNlKGRTKSwgYHtgLCBgfWApIHsKCQkJZGF0YSA9IG1ha2UobWFwW3N0cmluZ11hbnkpCgkJCWpzb24uVW5tYXJzaGFsKFtdYnl0ZShkUyksICZkYXRhKQoJCX0KCX0gZWxzZSBpZiBkQiwgb2sgOj0gZGF0YS4oW11ieXRlKTsgb2sgewoJCWlmIHN0cmluZ3V0aWwuSXNTdXJyb3VuZGVkQnkoc3RyaW5ncy5UcmltU3BhY2Uoc3RyaW5nKGRCKSksIGB7YCwgYH1gKSB7CgkJCWRhdGEgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJCQlqc29uLlVubWFyc2hhbChkQiwgJmRhdGEpCgkJfQoJfQoJaWYgZGF0YSA9PSBuaWwgewoJCWRhdGEgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJfQoJcmV0dXJuICZNYXB7ZGF0YTogZGF0YSwgc3RydWN0VGFnS2V5OiBVbm1hcnNoYWxTdHJ1Y3RUYWd9Cn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Map",
                                "Comment": "Return the value at key as a Map.  If the resulting value is nil or not a\nmap type, a null Map will be returned.  All values retrieved from a null\nMap will return that type's zero value.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "tagName",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "map[typeutil.Variant]typeutil.Variant"
                                    }
                                ],
                                "Signature": "Map(key string, tagName ...string) map[typeutil.Variant]typeutil.Variant",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MapNative",
                                "Comment": "Return the value as a map[string]any.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "tagName",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "map[string]any"
                                    }
                                ],
                                "Signature": "MapNative(tagName ...string) map[string]any",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MapString",
                                "Comment": "Return the value as a map[string]string.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "tagName",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "map[string]string"
                                    }
                                ],
                                "Signature": "MapString(tagName ...string) map[string]string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MarshalJSON",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "MarshalJSON() ([]byte, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MarshalXML",
                                "Comment": "Marshals the current data into XML.  Nested maps are output as nested elements.  Map values that\nare scalars (strings, numbers, bools, dates/times) will appear as attributes on the parent element.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "e",
                                        "Type": "*xml.Encoder"
                                    },
                                    {
                                        "Name": "start",
                                        "Type": "xml.StartElement"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "MarshalXML(e *xml.Encoder, start xml.StartElement) error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Merge",
                                "Comment": "Copy the items from a map into this one.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int"
                                    }
                                ],
                                "Signature": "Merge(other any) int",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NInt",
                                "Comment": "Return the value at key as a native integer.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "fallbacks",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int"
                                    }
                                ],
                                "Signature": "NInt(key string, fallbacks ...any) int",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NewMap",
                                "Returns": [
                                    {
                                        "Type": "*Map"
                                    }
                                ],
                                "Signature": "NewMap() *Map",
                                "Source": "ewoJcmV0dXJuIE0obmlsKQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Set",
                                "Comment": "Set a value in the Map at the given dot.separated key to a value.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "typeutil.Variant"
                                    }
                                ],
                                "Signature": "Set(key string, value any) typeutil.Variant",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetFunc",
                                "Comment": "Set a value in the Map using a function.  The map will be locked to\nother modifications for the duration of the function's execution.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "vfunc",
                                        "Type": "MapSetFunc"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "typeutil.Variant"
                                    }
                                ],
                                "Signature": "SetFunc(key string, vfunc MapSetFunc) typeutil.Variant",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetIfZero",
                                "Comment": "Set a value in the Map at the given dot.separated key to a value, but only if the\ncurrent value at that key is that type's zero value.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "typeutil.Variant"
                                    },
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "SetIfZero(key string, value any) (typeutil.Variant, bool)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetMarshalXmlGeneric",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "yes",
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "SetMarshalXmlGeneric(yes bool)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetMarshalXmlKeyFunc",
                                "Comment": "Set a function that will be used to generate XML tag names when calling MarshalXML.  This works\nfor all keys, including ones that appear inside of maps.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "KeyTransformFunc"
                                    }
                                ],
                                "Signature": "SetMarshalXmlKeyFunc(fn KeyTransformFunc)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetRootTagName",
                                "Comment": "set the name of the root XML tag, used by MarshalXML.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "root",
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "SetRootTagName(root string)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetValueIfNonZero",
                                "Comment": "Set a value in the Map at the given dot.separated key to a value, but only if the\nnew value is not a zero value.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "typeutil.Variant"
                                    },
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "SetValueIfNonZero(key string, value any) (typeutil.Variant, bool)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Slice",
                                "Comment": "Return the value at key as a slice.  Scalar values will be returned as a slice containing\nonly that value.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "[]typeutil.Variant"
                                    }
                                ],
                                "Signature": "Slice(key string) []typeutil.Variant",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SliceOfMaps",
                                "Comment": "Convert the given value to a slice using typeutil.Slice, then return each element as a Map.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "[]*Map"
                                    }
                                ],
                                "Signature": "SliceOfMaps(key string) []*Map",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Sprintf",
                                "Comment": "Uses the extended Sprintf in this package, passing this map as the data used in the given format string.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "format",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "Sprintf(format string) string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "String",
                                "Comment": "Return the value at key as a string.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "fallbacks",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String(key string, fallbacks ...any) string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "StringKeys",
                                "Comment": "A string slice version of Keys()",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "tagName",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "[]string"
                                    }
                                ],
                                "Signature": "StringKeys(tagName ...string) []string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Strings",
                                "Comment": "Same as Slice(), but returns a []string",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "[]string"
                                    }
                                ],
                                "Signature": "Strings(key string) []string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Tag",
                                "Comment": "Specify which struct tag to honor for generating field names when then\nunderlying data is a struct.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Map"
                                    }
                                ],
                                "Signature": "Tag(key string) *Map",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Time",
                                "Comment": "Return the value at key interpreted as a Time.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "key",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "fallbacks",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "time.Time"
                                    }
                                ],
                                "Signature": "Time(key string, fallbacks ...any) time.Time",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "UnmarshalJSON",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "data",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "UnmarshalJSON(data []byte) error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Value",
                                "Comment": "Return the underlying value the M-object was created with.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "Value() any",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Walk",
                                "Comment": "A recursive walk form of Each()",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "fn",
                                        "Type": "WalkFunc"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Walk(fn WalkFunc) error",
                                "IsPackageLevel": false
                            }
                        ],
                        "Comment": "A Map object (or \"M\" object) is a utility struct that makes it straightforward to\nwork with interface data types that contain map-like data (has a reflect.Kind equal\nto reflect.Map).",
                        "Source": "dHlwZSBNYXAgc3RydWN0IHsKCn0vLyBBIE1hcCBvYmplY3QgKG9yICJNIiBvYmplY3QpIGlzIGEgdXRpbGl0eSBzdHJ1Y3QgdGhhdCBtYWtlcyBpdCBzdHJhaWdodGZvcndhcmQgdG8KLy8gd29yayB3aXRoIGludGVyZmFjZSBkYXRhIHR5cGVzIHRoYXQgY29udGFpbiBtYXAtbGlrZSBkYXRhIChoYXMgYSByZWZsZWN0LktpbmQgZXF1YWwKLy8gdG8gcmVmbGVjdC5NYXApLgoK",
                        "HasUnexportedFields": true
                    },
                    "MapSetFunc": {
                        "Name": "MapSetFunc",
                        "Source": "dHlwZSBNYXBTZXRGdW5jIGZ1bmMobSAqTWFwLCBrZXkgc3RyaW5nKSBhbnk="
                    },
                    "MergeOption": {
                        "Name": "MergeOption",
                        "MetaType": "int",
                        "Source": "dHlwZSBNZXJnZU9wdGlvbiBpbnQ="
                    },
                    "MergeOptions": {
                        "Name": "MergeOptions",
                        "Methods": [
                            {
                                "Name": "Has",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "option",
                                        "Type": "MergeOption"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "Has(option MergeOption) bool",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBNZXJnZU9wdGlvbnMgW11NZXJnZU9wdGlvbg=="
                    },
                    "MyStructTester": {
                        "Name": "MyStructTester",
                        "MetaType": "struct",
                        "Fields": [
                            {
                                "Name": "Name",
                                "Type": "string"
                            },
                            {
                                "Name": "Subtype1",
                                "Type": "SubtypeTester"
                            },
                            {
                                "Name": "Active",
                                "Type": "bool"
                            },
                            {
                                "Name": "Subtype2",
                                "Type": "*SubtypeTester"
                            },
                            {
                                "Name": "TimeTest",
                                "Type": "time.Duration"
                            },
                            {
                                "Name": "IntTest",
                                "Type": "int32"
                            },
                            {
                                "Name": "Properties",
                                "Type": "map[string]any"
                            },
                            {
                                "Name": "StrSliceTest",
                                "Type": "[]string"
                            },
                            {
                                "Name": "InterfaceStrSliceTest",
                                "Type": "[]string"
                            },
                            {
                                "Name": "StructSliceTest",
                                "Type": "[]SubtypeTester"
                            },
                            {
                                "Name": "StructSliceTest2",
                                "Type": "[]SubtypeTester"
                            },
                            {
                                "Name": "StructSliceTest3",
                                "Type": "[]SubtypeTester"
                            }
                        ],
                        "Source": "dHlwZSBNeVN0cnVjdFRlc3RlciBzdHJ1Y3QgewoJTmFtZSAgICAgICAgICAgICAgICAgIHN0cmluZwoJU3VidHlwZTEgICAgICAgICAgICAgIFN1YnR5cGVUZXN0ZXIKCUFjdGl2ZSAgICAgICAgICAgICAgICBib29sICAgICAgICAgICBgbWFwdXRpbDoiYWN0aXZlImAKCVN1YnR5cGUyICAgICAgICAgICAgICAqU3VidHlwZVRlc3RlciBgbWFwdXRpbDoic3VidHlwZTIiYAoJVGltZVRlc3QgICAgICAgICAgICAgIHRpbWUuRHVyYXRpb24KCUludFRlc3QgICAgICAgICAgICAgICBpbnQzMgoJUHJvcGVydGllcyAgICAgICAgICAgIG1hcFtzdHJpbmddYW55CglTdHJTbGljZVRlc3QgICAgICAgICAgW11zdHJpbmcKCUludGVyZmFjZVN0clNsaWNlVGVzdCBbXXN0cmluZwoJU3RydWN0U2xpY2VUZXN0ICAgICAgIFtdU3VidHlwZVRlc3RlcgoJU3RydWN0U2xpY2VUZXN0MiAgICAgIFtdU3VidHlwZVRlc3RlcgoJU3RydWN0U2xpY2VUZXN0MyAgICAgIFtdU3VidHlwZVRlc3RlcgoKfQo=",
                        "HasUnexportedFields": true
                    },
                    "MyTestThing": {
                        "Name": "MyTestThing",
                        "MetaType": "struct",
                        "Fields": [
                            {
                                "Name": "Name",
                                "Type": "string"
                            },
                            {
                                "Name": "Other",
                                "Type": "int"
                            }
                        ],
                        "Source": "dHlwZSBNeVRlc3RUaGluZyBzdHJ1Y3QgewoJTmFtZSAgc3RyaW5nCglPdGhlciBpbnQKfQ=="
                    },
                    "SubtypeTester": {
                        "Name": "SubtypeTester",
                        "MetaType": "struct",
                        "Fields": [
                            {
                                "Name": "A",
                                "Type": "int"
                            },
                            {
                                "Name": "B",
                                "Type": "int"
                            }
                        ],
                        "Source": "dHlwZSBTdWJ0eXBlVGVzdGVyIHN0cnVjdCB7CglBIGludAoJQiBpbnQgYG1hcHV0aWw6ImIiYAp9"
                    },
                    "WalkFunc": {
                        "Name": "WalkFunc",
                        "Source": "dHlwZSBXYWxrRnVuYyBmdW5jKHZhbHVlIGFueSwgcGF0aCBbXXN0cmluZywgaXNMZWFmIGJvb2wpIGVycm9y"
                    }
                }
            },
            {
                "Name": "mathutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/mathutil",
                "ImportPath": "mathutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "",
                "MainFunction": false,
                "CommentWordCount": 14,
                "LineCount": 167,
                "SourceLineCount": 107,
                "FunctionCount": 6,
                "TypeCount": 0,
                "ConstantCount": 0,
                "VariableCount": 0,
                "Statistics": {
                    "Mean": 0.1667,
                    "StdDev": 0.3727,
                    "GeometricMean": 0,
                    "HarmonicMean": 1,
                    "Median": 0,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "go.go",
                        "Imports": [
                            {
                                "PackageName": "math",
                                "Alias": "math"
                            }
                        ],
                        "Size": 2254,
                        "LineCount": 56,
                        "SourceLineCount": 18,
                        "FunctionCount": 1,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "mathutil.go",
                        "Imports": [
                            {
                                "PackageName": "math",
                                "Alias": "math"
                            }
                        ],
                        "Size": 997,
                        "LineCount": 60,
                        "SourceLineCount": 48,
                        "FunctionCount": 5,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "mathutil_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/assert",
                                "Alias": "assert"
                            }
                        ],
                        "Size": 1600,
                        "LineCount": 51,
                        "SourceLineCount": 41,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Functions": [
                    {
                        "Name": "Clamp",
                        "Arguments": [
                            {
                                "Name": "value",
                                "Type": "float64"
                            },
                            {
                                "Name": "lower",
                                "Type": "float64"
                            },
                            {
                                "Name": "upper",
                                "Type": "float64"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "Clamp(value float64, lower float64, upper float64) float64",
                        "Source": "ewoJdmFsdWUgPSBDbGFtcExvd2VyKHZhbHVlLCBsb3dlcikKCXZhbHVlID0gQ2xhbXBVcHBlcih2YWx1ZSwgdXBwZXIpCglyZXR1cm4gdmFsdWUKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ClampLower",
                        "Arguments": [
                            {
                                "Name": "value",
                                "Type": "float64"
                            },
                            {
                                "Name": "lower",
                                "Type": "float64"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "ClampLower(value float64, lower float64) float64",
                        "Source": "ewoJaWYgdmFsdWUgPCBsb3dlciB7CgkJdmFsdWUgPSBsb3dlcgoJfQoJcmV0dXJuIHZhbHVlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ClampUpper",
                        "Arguments": [
                            {
                                "Name": "value",
                                "Type": "float64"
                            },
                            {
                                "Name": "upper",
                                "Type": "float64"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "ClampUpper(value float64, upper float64) float64",
                        "Source": "ewoJaWYgdmFsdWUgPiB1cHBlciB7CgkJdmFsdWUgPSB1cHBlcgoJfQoJcmV0dXJuIHZhbHVlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "LeadingSignificantZeros",
                        "Arguments": [
                            {
                                "Name": "x",
                                "Type": "float64"
                            },
                            {
                                "Name": "places",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int"
                            }
                        ],
                        "Signature": "LeadingSignificantZeros(x float64, places int) int",
                        "Source": "ewoJdmFyIHpjb3VudCBpbnQKCWZvciBfLCBkaXYgOj0gbWF0aC5Nb2RmKHgpOyBkaXYgPiAwICYmIGRpdiA8IDE7IGRpdiA9IFJvdW5kUGxhY2VzKGRpdi8wLjEsIHBsYWNlcykgewoJCXpjb3VudCArPSAxCgl9CglpZiB6Y291bnQgPiAwIHsKCQlyZXR1cm4gemNvdW50IC0gMQoJfSBlbHNlIHsKCQlyZXR1cm4gMAoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Round",
                        "Comment": "The Golang 1.10 math.Round implementation.\n(see: https://golang.org/pkg/math/#Round)",
                        "Arguments": [
                            {
                                "Name": "x",
                                "Type": "float64"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "Round(x float64) float64",
                        "Source": "ewoJdmFyIGJpdHMgPSBtYXRoLkZsb2F0NjRiaXRzKHgpCgl2YXIgZSA9IHVpbnQoYml0cz4+c2hpZnQpICYgbWFzawoJaWYgZSA8IGJpYXMgewoJCWJpdHMgJj0gc2lnbk1hc2sKCQlpZiBlID09IGJpYXMtMSB7CgkJCWJpdHMgfD0gdXZvbmUKCQl9Cgl9IGVsc2UgaWYgZSA8IGJpYXMrc2hpZnQgewoJCWNvbnN0IGhhbGYgPSAxIDw8IChzaGlmdCAtIDEpCgkJZSAtPSBiaWFzCgkJYml0cyArPSBoYWxmID4+IGUKCQliaXRzICZePSBmcmFjTWFzayA+PiBlCgl9CglyZXR1cm4gbWF0aC5GbG9hdDY0ZnJvbWJpdHMoYml0cykKfS8vIFJvdW5kIGFueSBhYnMoeCkgPj0gMSBjb250YWluaW5nIGEgZnJhY3Rpb25hbCBjb21wb25lbnQgWzAsMSkuCi8vCi8vIE51bWJlcnMgd2l0aCBsYXJnZXIgZXhwb25lbnRzIGFyZSByZXR1cm5lZCB1bmNoYW5nZWQgc2luY2UgdGhleQovLyBtdXN0IGJlIGVpdGhlciBhbiBpbnRlZ2VyLCBpbmZpbml0eSwgb3IgTmFOLgo=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RoundPlaces",
                        "Arguments": [
                            {
                                "Name": "x",
                                "Type": "float64"
                            },
                            {
                                "Name": "places",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "RoundPlaces(x float64, places int) float64",
                        "Source": "ewoJaWYgcGxhY2VzIDw9IDAgewoJCXJldHVybiBSb3VuZCh4KQoJfSBlbHNlIHsKCQl2YXIgbXVsdGkgPSBtYXRoLlBvdygxMCwgQ2xhbXAoZmxvYXQ2NChwbGFjZXMpLCAwLCAxNikpCgkJcmV0dXJuIChSb3VuZCh4Km11bHRpKSAvIG11bHRpKQoJfQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestClamp",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestClamp(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IGFzc2VydC5OZXcodCkKCWFzc2VydC5UcnVlKENsYW1wKDAsIDAsIDApID09IDApCglhc3NlcnQuVHJ1ZShDbGFtcCgwLCAtMSwgMSkgPT0gMCkKCWFzc2VydC5UcnVlKENsYW1wKC0xLCAtMSwgMSkgPT0gLTEpCglhc3NlcnQuVHJ1ZShDbGFtcCgtMC45OTk5LCAtMSwgMSkgPT0gLTAuOTk5OSkKCWFzc2VydC5UcnVlKENsYW1wKC0xLjAwMDEsIC0xLCAxKSA9PSAtMSkKCWFzc2VydC5UcnVlKENsYW1wKC0yLCAtMSwgMSkgPT0gLTEpCglhc3NlcnQuVHJ1ZShDbGFtcCgxLCAtMSwgMSkgPT0gMSkKCWFzc2VydC5UcnVlKENsYW1wKDAuOTk5OSwgLTEsIDEpID09IDAuOTk5OSkKCWFzc2VydC5UcnVlKENsYW1wKDEuMDAwMSwgLTEsIDEpID09IDEpCglhc3NlcnQuVHJ1ZShDbGFtcCgyLCAtMSwgMSkgPT0gMSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestLeadingSignificantZeros",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestLeadingSignificantZeros(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IGFzc2VydC5OZXcodCkKCWFzc2VydC5FcXVhbCgwLCBMZWFkaW5nU2lnbmlmaWNhbnRaZXJvcygxLjEsIDEwKSkKCWFzc2VydC5FcXVhbCgxLCBMZWFkaW5nU2lnbmlmaWNhbnRaZXJvcygxLjAxMDAsIDEwKSkKCWFzc2VydC5FcXVhbCgyLCBMZWFkaW5nU2lnbmlmaWNhbnRaZXJvcygxLjAwMTAsIDEwKSkKCWFzc2VydC5FcXVhbCgzLCBMZWFkaW5nU2lnbmlmaWNhbnRaZXJvcygxLjAwMDEsIDEwKSkKCWFzc2VydC5FcXVhbCg0LCBMZWFkaW5nU2lnbmlmaWNhbnRaZXJvcygxLjAwMDAxLCAxMCkpCglhc3NlcnQuRXF1YWwoNSwgTGVhZGluZ1NpZ25pZmljYW50WmVyb3MoMS4wMDAwMDEsIDEwKSkKCWFzc2VydC5FcXVhbCgwLCBMZWFkaW5nU2lnbmlmaWNhbnRaZXJvcygxLjAwMDAwMDAwMDAwMDAxLCAxMikpCglhc3NlcnQuRXF1YWwoMTMsIExlYWRpbmdTaWduaWZpY2FudFplcm9zKDEuMDAwMDAwMDAwMDAwMDEsIDEzKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestRound",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestRound(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IGFzc2VydC5OZXcodCkKCWFzc2VydC5FcXVhbChmbG9hdDY0KDEpLCBSb3VuZCgxLjQ5OTk5OTk5OTk5OTk5OSkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgyKSwgUm91bmQoMS41KSkKCWFzc2VydC5FcXVhbChmbG9hdDY0KDIpLCBSb3VuZCgxLjk5OTk5OTk5OTk5OTk5OSkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgyKSwgUm91bmQoMS45OTk5OTk5OTk5OTk5OTkpKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMiksIFJvdW5kUGxhY2VzKDIuNDksIDApKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMi41KSwgUm91bmRQbGFjZXMoMi40OSwgMSkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgyLjQ5KSwgUm91bmRQbGFjZXMoMi40OSwgMikpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgyLjQ5KSwgUm91bmRQbGFjZXMoMi40OTAwMDAwMDAwNDksIDEwKSkKCWFzc2VydC5FcXVhbChmbG9hdDY0KDIuNDkwMDAwMDAwMSksIFJvdW5kUGxhY2VzKDIuNDkwMDAwMDAwMDUsIDEwKSkKfQ==",
                        "IsPackageLevel": true
                    }
                ]
            },
            {
                "Name": "netutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/netutil",
                "ImportPath": "netutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Utilities for working with networks and network accessories.\n\nUtilities for working with networks and network accessories.\n",
                "MainFunction": false,
                "CommentWordCount": 461,
                "LineCount": 737,
                "SourceLineCount": 505,
                "FunctionCount": 22,
                "TypeCount": 4,
                "ConstantCount": 0,
                "VariableCount": 4,
                "Statistics": {
                    "Mean": 0.3673,
                    "StdDev": 0.4586,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 0,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "icmp.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "net",
                                "Alias": "net"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "runtime",
                                "Alias": "runtime"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "golang.org/x/net/icmp",
                                "Alias": "icmp"
                            },
                            {
                                "PackageName": "golang.org/x/net/ipv4",
                                "Alias": "ipv4"
                            },
                            {
                                "PackageName": "golang.org/x/net/ipv6",
                                "Alias": "ipv6"
                            }
                        ],
                        "Size": 3670,
                        "LineCount": 141,
                        "SourceLineCount": 110,
                        "FunctionCount": 4,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 2
                    },
                    {
                        "Name": "mdns.go",
                        "Imports": [
                            {
                                "PackageName": "context",
                                "Alias": "context"
                            },
                            {
                                "PackageName": "crypto/sha256",
                                "Alias": "sha256"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "net",
                                "Alias": "net"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "sync",
                                "Alias": "sync"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-defaults",
                                "Alias": "go-defaults"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/rxutil",
                                "Alias": "rxutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/grandcat/zeroconf",
                                "Alias": "zeroconf"
                            }
                        ],
                        "Size": 5448,
                        "LineCount": 214,
                        "SourceLineCount": 174,
                        "FunctionCount": 5,
                        "TypeCount": 3,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "nettest.go",
                        "Imports": [
                            {
                                "PackageName": "net",
                                "Alias": "net"
                            }
                        ],
                        "Size": 3719,
                        "LineCount": 121,
                        "SourceLineCount": 79,
                        "FunctionCount": 4,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "netutil.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "net",
                                "Alias": "net"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/jackpal/gateway",
                                "Alias": "gateway"
                            },
                            {
                                "PackageName": "github.com/phayes/freeport",
                                "Alias": "freeport"
                            }
                        ],
                        "Size": 5151,
                        "LineCount": 198,
                        "SourceLineCount": 141,
                        "FunctionCount": 9,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 2
                    },
                    {
                        "Name": "netutil_test.go",
                        "Size": 1741,
                        "LineCount": 63,
                        "SourceLineCount": 1,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Variables": [
                    {
                        "Name": "DefaultWaitForOpenConnectionTimeout",
                        "Expression": "5 * time.Second"
                    },
                    {
                        "Name": "WaitForOpenCheckInterval",
                        "Expression": "time.Second"
                    },
                    {
                        "Name": "WaitForPingCheckInterval",
                        "Expression": "time.Second"
                    },
                    {
                        "Name": "WaitForPingReply",
                        "Expression": "5 * time.Second"
                    }
                ],
                "Functions": [
                    {
                        "Name": "DefaultGateway",
                        "Comment": "Retrieves the default gateway interface.",
                        "Returns": [
                            {
                                "Type": "net.IP"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "DefaultGateway() (net.IP, error)",
                        "Source": "ewoJcmV0dXJuIGdhdGV3YXkuRGlzY292ZXJHYXRld2F5KCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "EphemeralPort",
                        "Comment": "Retrieve an open ephemeral port.",
                        "Returns": [
                            {
                                "Type": "int"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "EphemeralPort() (int, error)",
                        "Source": "ewoJcmV0dXJuIGZyZWVwb3J0LkdldEZyZWVQb3J0KCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExpandPort",
                        "Comment": "Takes an address in the form of \"host:port\", looks for port zero (e.g: \":0\"),\nand gets an ephemeral local port and returns that address (e.g.: \":41327\").",
                        "Arguments": [
                            {
                                "Name": "address",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "ExpandPort(address string) string",
                        "Source": "ewoJaWYgaG9zdCwgcG9ydCwgZXJyIDo9IG5ldC5TcGxpdEhvc3RQb3J0KGFkZHJlc3MpOyBlcnIgPT0gbmlsIHsKCQlpZiBwIDo9IHR5cGV1dGlsLkludChwb3J0KTsgcCA9PSAwIHsKCQkJaWYgcCwgZXJyIDo9IEVwaGVtZXJhbFBvcnQoKTsgZXJyID09IG5pbCB7CgkJCQlyZXR1cm4gZm10LlNwcmludGYoIiV2OiVkIiwgaG9zdCwgcCkKCQkJfSBlbHNlIHsKCQkJCXBhbmljKGVyci5FcnJvcigpKQoJCQl9CgkJfQoJfQoJcmV0dXJuIGFkZHJlc3MKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "FQDN",
                        "Comment": "Return the current machine's Fully-qualified domain name,",
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "FQDN() string",
                        "Source": "ewoJaWYgaG9zdG5hbWUsIGVyciA6PSBvcy5Ib3N0bmFtZSgpOyBlcnIgPT0gbmlsIHsKCQlpZiByZXNwb25zZXMsIGVyciA6PSBuZXQuTG9va3VwSVAoaG9zdG5hbWUpOyBlcnIgPT0gbmlsIHsKCQkJZm9yIF8sIGFkZHIgOj0gcmFuZ2UgcmVzcG9uc2VzIHsKCQkJCWlmIGlwdjQgOj0gYWRkci5UbzQoKTsgaXB2NCAhPSBuaWwgewoJCQkJCWlmIGhvc3RzLCBlcnIgOj0gbmV0Lkxvb2t1cEFkZHIoaXB2NC5TdHJpbmcoKSk7IGVyciA9PSBuaWwgJiYgbGVuKGhvc3RzKSA+IDAgewoJCQkJCQlmb3IgXywgaG9zdCA6PSByYW5nZSBob3N0cyB7CgkJCQkJCQlpZiBmcWRuIDo9IHN0cmluZ3MuVHJpbVN1ZmZpeChob3N0LCAiLiIpOyBmcWRuICE9IGBgIHsKCQkJCQkJCQlyZXR1cm4gZnFkbgoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoJCXJldHVybiBob3N0bmFtZQoJfSBlbHNlIHsKCQlyZXR1cm4gYGAKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "GetRoutableAddresses",
                        "Comment": "Returns all addresses on the given interface that can route to the given gateway.  If gateway is nil,\nthe default gateway will be attempted.",
                        "Arguments": [
                            {
                                "Name": "gateway",
                                "Type": "net.IP"
                            },
                            {
                                "Name": "iface",
                                "Type": "*net.Interface"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]*IPAddress"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "GetRoutableAddresses(gateway net.IP, iface *net.Interface) ([]*IPAddress, error)",
                        "Source": "ewoJdmFyIGFkZHJlc3NlcyA9IG1ha2UoW10qSVBBZGRyZXNzLCAwKQoJaWYgZ2F0ZXdheSA9PSBuaWwgewoJCWlmIGd3LCBlcnIgOj0gRGVmYXVsdEdhdGV3YXkoKTsgZXJyID09IG5pbCB7CgkJCWdhdGV3YXkgPSBndwoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoImZhaWxlZCB0byByZXRyaWV2ZSBkZWZhdWx0IGdhdGV3YXk6ICV2IiwgZXJyKQoJCX0KCX0KCWlmIGFkZHJzLCBlcnIgOj0gaWZhY2UuQWRkcnMoKTsgZXJyID09IG5pbCB7CgkJZm9yIF8sIGFkZHIgOj0gcmFuZ2UgYWRkcnMgewoJCQlpZiBuZXR3b3JrLCBvayA6PSBhZGRyLigqbmV0LklQTmV0KTsgb2sgewoJCQkJaWYgbmV0d29yay5Db250YWlucyhnYXRld2F5KSB7CgkJCQkJYWRkcmVzc2VzID0gYXBwZW5kKGFkZHJlc3NlcywgJklQQWRkcmVzc3tJUDogbmV0d29yay5JUCwgTWFzazogbmV0d29yay5NYXNrLCBJbnRlcmZhY2U6ICppZmFjZSwgR2F0ZXdheTogZ2F0ZXdheX0pCgkJCQl9CgkJCX0KCQl9CgkJcmV0dXJuIGFkZHJlc3NlcywgbmlsCgl9IGVsc2UgewoJCXJldHVybiBuaWwsIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "HasRoutableIP",
                        "Comment": "Returns the first routable address on the given interface.",
                        "Arguments": [
                            {
                                "Name": "network",
                                "Type": "string"
                            },
                            {
                                "Name": "ifi",
                                "Type": "*net.Interface"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "net.IP"
                            },
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "HasRoutableIP(network string, ifi *net.Interface) (net.IP, bool)",
                        "Source": "ewoJaWZhdCwgZXJyIDo9IGlmaS5BZGRycygpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBmYWxzZQoJfQoJZm9yIF8sIGlmYSA6PSByYW5nZSBpZmF0IHsKCQlzd2l0Y2ggaWZhIDo9IGlmYS4odHlwZSkgewoJCWNhc2UgKm5ldC5JUEFkZHI6CgkJCWlmIGlwIDo9IElzUm91dGFibGVJUChuZXR3b3JrLCBpZmEuSVApOyBpcCAhPSBuaWwgewoJCQkJcmV0dXJuIGlwLCB0cnVlCgkJCX0KCQljYXNlICpuZXQuSVBOZXQ6CgkJCWlmIGlwIDo9IElzUm91dGFibGVJUChuZXR3b3JrLCBpZmEuSVApOyBpcCAhPSBuaWwgewoJCQkJcmV0dXJuIGlwLCB0cnVlCgkJCX0KCQl9Cgl9CglyZXR1cm4gbmlsLCBmYWxzZQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsMulticastCapable",
                        "Comment": "IsMulticastCapable reports whether ifi is an IP multicast-capable\nnetwork interface. Network must be \"ip\", \"ip4\" or \"ip6\".",
                        "Arguments": [
                            {
                                "Name": "network",
                                "Type": "string"
                            },
                            {
                                "Name": "ifi",
                                "Type": "*net.Interface"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "net.IP"
                            },
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsMulticastCapable(network string, ifi *net.Interface) (net.IP, bool)",
                        "Source": "ewoJc3dpdGNoIG5ldHdvcmsgewoJY2FzZSAiaXAiLCAiaXA0IiwgImlwNiI6CglkZWZhdWx0OgoJCXJldHVybiBuaWwsIGZhbHNlCgl9CglpZiBpZmkgPT0gbmlsIHx8IGlmaS5GbGFncyZuZXQuRmxhZ1VwID09IDAgfHwgaWZpLkZsYWdzJm5ldC5GbGFnTXVsdGljYXN0ID09IDAgewoJCXJldHVybiBuaWwsIGZhbHNlCgl9CglyZXR1cm4gSGFzUm91dGFibGVJUChuZXR3b3JrLCBpZmkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsRoutableIP",
                        "Comment": "Returns true when the given address is unicast routable beyond the current machine.",
                        "Arguments": [
                            {
                                "Name": "network",
                                "Type": "string"
                            },
                            {
                                "Name": "ip",
                                "Type": "net.IP"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "net.IP"
                            }
                        ],
                        "Signature": "IsRoutableIP(network string, ip net.IP) net.IP",
                        "Source": "ewoJaWYgIWlwLklzTG9vcGJhY2soKSAmJiAhaXAuSXNMaW5rTG9jYWxVbmljYXN0KCkgJiYgIWlwLklzR2xvYmFsVW5pY2FzdCgpIHsKCQlyZXR1cm4gbmlsCgl9Cglzd2l0Y2ggbmV0d29yayB7CgljYXNlICJpcDQiOgoJCWlmIGlwIDo9IGlwLlRvNCgpOyBpcCAhPSBuaWwgewoJCQlyZXR1cm4gaXAKCQl9CgljYXNlICJpcDYiOgoJCWlmIGlwLklzTG9vcGJhY2soKSB7CgkJCXJldHVybiBuaWwKCQl9CgkJaWYgaXAgOj0gaXAuVG8xNigpOyBpcCAhPSBuaWwgJiYgaXAuVG80KCkgPT0gbmlsIHsKCQkJcmV0dXJuIGlwCgkJfQoJZGVmYXVsdDoKCQlpZiBpcCA6PSBpcC5UbzQoKTsgaXAgIT0gbmlsIHsKCQkJcmV0dXJuIGlwCgkJfQoJCWlmIGlwIDo9IGlwLlRvMTYoKTsgaXAgIT0gbmlsIHsKCQkJcmV0dXJuIGlwCgkJfQoJfQoJcmV0dXJuIG5pbAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "OnePingOnly",
                        "Comment": "Send a single ICMP ECHO request packet to the given address on the given interface and wait for\nup to timeout for a reply.",
                        "Arguments": [
                            {
                                "Name": "dest",
                                "Type": "net.IP"
                            },
                            {
                                "Name": "source",
                                "Type": "*IPAddress"
                            },
                            {
                                "Name": "timeout",
                                "Type": "time.Duration"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "OnePingOnly(dest net.IP, source *IPAddress, timeout time.Duration) error",
                        "Source": "ewoJc3dpdGNoIHJ1bnRpbWUuR09PUyB7CgljYXNlIGBkYXJ3aW5gOgoJY2FzZSBgbGludXhgOgoJZGVmYXVsdDoKCQlyZXR1cm4gZm10LkVycm9yZigiZmF0YWw6IG5vdCBzdXBwb3J0ZWQgb24gJXYiLCBydW50aW1lLkdPT1MpCgl9Cgl2YXIgcHJvdG8gc3RyaW5nCgl2YXIgaWNtcHR5cCBpY21wLlR5cGUKCWlmIHNvdXJjZSA9PSBuaWwgewoJCXNvdXJjZSA9IERlZmF1bHRBZGRyZXNzKCkKCQlpZiBzb3VyY2UgPT0gbmlsIHsKCQkJcmV0dXJuIGZtdC5FcnJvcmYoImZhdGFsOiBubyBkZWZhdWx0IGludGVyZmFjZSB0byBwaW5nIGZyb20iKQoJCX0KCX0KCWlmIGxlbihzb3VyY2UuSVApID4gMzIgewoJCXByb3RvID0gYHVkcDZgCgkJaWNtcHR5cCA9IGlwdjYuSUNNUFR5cGVFY2hvUmVxdWVzdAoJfSBlbHNlIHsKCQlwcm90byA9IGB1ZHA0YAoJCWljbXB0eXAgPSBpcHY0LklDTVBUeXBlRWNobwoJfQoJaWYgY29ubiwgZXJyIDo9IGljbXAuTGlzdGVuUGFja2V0KHByb3RvLCBzb3VyY2UuSVAuU3RyaW5nKCkrYCVgK3NvdXJjZS5JbnRlcmZhY2UuTmFtZSk7IGVyciA9PSBuaWwgewoJCWRlZmVyIGNvbm4uQ2xvc2UoKQoJCWlmIGVyciA6PSBjb25uLlNldERlYWRsaW5lKHRpbWUuTm93KCkuQWRkKHRpbWVvdXQpKTsgZXJyICE9IG5pbCB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJiYWQgdGltZW91dDogJXYiLCBlcnIpCgkJfQoJCXZhciByZXEgPSBpY21wLk1lc3NhZ2V7VHlwZTogaWNtcHR5cCwgQ29kZTogMCwgQm9keTogJmljbXAuRWNob3tJRDogb3MuR2V0cGlkKCkgJiAweGZmZmYsIFNlcTogMSwgRGF0YTogW11ieXRlKCJIRUxMTy1SLVUtVEhFUkUiKX19CgkJaWYgaWNtcGJpbiwgZXJyIDo9IHJlcS5NYXJzaGFsKG5pbCk7IGVyciA9PSBuaWwgewoJCQlpZiBfLCBlcnIgOj0gY29ubi5Xcml0ZVRvKGljbXBiaW4sICZuZXQuVURQQWRkcntJUDogc291cmNlLklQLCBab25lOiBzb3VyY2UuSW50ZXJmYWNlLk5hbWV9KTsgZXJyICE9IG5pbCB7CgkJCQlyZXR1cm4gZm10LkVycm9yZigiZmFpbGVkIHRvIHNlbmQgcGluZzogJXYiLCBlcnIpCgkJCX0KCQkJdmFyIHJlcGx5YmluID0gbWFrZShbXWJ5dGUsIDE1MDApCgkJCWlmIG4sIF8sIGVyciA6PSBjb25uLlJlYWRGcm9tKHJlcGx5YmluKTsgZXJyID09IG5pbCB7CgkJCQlpZiBfLCBlcnIgOj0gaWNtcC5QYXJzZU1lc3NhZ2UoNTgsIHJlcGx5YmluWzpuXSk7IGVyciA9PSBuaWwgewoJCQkJCXJldHVybiBuaWwKCQkJCX0gZWxzZSB7CgkJCQkJcmV0dXJuIGZtdC5FcnJvcmYoImJhZCBJQ01QIHJlcGx5OiAldiIsIGVycikKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCXJldHVybiBmbXQuRXJyb3JmKCJmYWlsZWQgdG8gcmVhZCByZXBseTogJXYiLCBlcnIpCgkJCX0KCQl9IGVsc2UgewoJCQlyZXR1cm4gZm10LkVycm9yZigiZmF0YWw6IGJhZCBvdXRnb2luZyBJQ01QIHBhY2tldDogJXYiLCBlcnIpCgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gZm10LkVycm9yZigiZmF0YWw6IGZhaWxlZCB0byBzZXR1cCBwaW5nIHJlcGx5IGxpc3RlbmVyOiAldiIsIGVycikKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RoutableAddresses",
                        "Comment": "Return a list of routable IP addresses, along with their associated gateways and interfaces.",
                        "Returns": [
                            {
                                "Type": "[]*IPAddress"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "RoutableAddresses() ([]*IPAddress, error)",
                        "Source": "ewoJdmFyIGFkZHJlc3NlcyA9IG1ha2UoW10qSVBBZGRyZXNzLCAwKQoJdmFyIGdhdGV3YXlzIFtdbmV0LklQCglpZiBndywgZXJyIDo9IERlZmF1bHRHYXRld2F5KCk7IGVyciA9PSBuaWwgewoJCWdhdGV3YXlzID0gYXBwZW5kKGdhdGV3YXlzLCBndykKCX0KCWlmIGxlbihnYXRld2F5cykgPT0gMCB7CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigibm8gcm91dGFibGUgZ2F0ZXdheXMgZm91bmQiKQoJfQoJZm9yIF8sIGd3IDo9IHJhbmdlIGdhdGV3YXlzIHsKCQlpZiBpZmFjZXMsIGVyciA6PSBuZXQuSW50ZXJmYWNlcygpOyBlcnIgPT0gbmlsIHsKCQkJZm9yIF8sIGlmYWNlIDo9IHJhbmdlIGlmYWNlcyB7CgkJCQlpZiBhZGRycywgZXJyIDo9IEdldFJvdXRhYmxlQWRkcmVzc2VzKGd3LCAmaWZhY2UpOyBlcnIgPT0gbmlsIHsKCQkJCQlhZGRyZXNzZXMgPSBhcHBlbmQoYWRkcmVzc2VzLCBhZGRycy4uLikKCQkJCX0gZWxzZSB7CgkJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCQl9CgkJCX0KCQl9IGVsc2UgewoJCQlyZXR1cm4gbmlsLCBlcnIKCQl9Cgl9CglyZXR1cm4gYWRkcmVzc2VzLCBuaWwKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RoutedInterface",
                        "Comment": "RoutedInterface returns a network interface that can route IP\ntraffic and satisfies flags. It returns nil when an appropriate\nnetwork interface is not found. Network must be \"ip\", \"ip4\" or\n\"ip6\".",
                        "Arguments": [
                            {
                                "Name": "network",
                                "Type": "string"
                            },
                            {
                                "Name": "flags",
                                "Type": "net.Flags"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "*net.Interface"
                            }
                        ],
                        "Signature": "RoutedInterface(network string, flags net.Flags) *net.Interface",
                        "Source": "ewoJc3dpdGNoIG5ldHdvcmsgewoJY2FzZSAiaXAiLCAiaXA0IiwgImlwNiI6CglkZWZhdWx0OgoJCXJldHVybiBuaWwKCX0KCWlmdCwgZXJyIDo9IG5ldC5JbnRlcmZhY2VzKCkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwKCX0KCWZvciBfLCBpZmkgOj0gcmFuZ2UgaWZ0IHsKCQlpZiBpZmkuRmxhZ3MmZmxhZ3MgIT0gZmxhZ3MgewoJCQljb250aW51ZQoJCX0KCQlpZiBfLCBvayA6PSBIYXNSb3V0YWJsZUlQKG5ldHdvcmssICZpZmkpOyAhb2sgewoJCQljb250aW51ZQoJCX0KCQlyZXR1cm4gJmlmaQoJfQoJcmV0dXJuIG5pbAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "WaitForGatewayPing",
                        "Comment": "Like WaitForPing, but will identify the default gateway and ping that address.",
                        "Arguments": [
                            {
                                "Name": "totaltime",
                                "Type": "time.Duration"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "WaitForGatewayPing(totaltime time.Duration) error",
                        "Source": "ewoJaWYgYWRkciA6PSBEZWZhdWx0QWRkcmVzcygpOyBhZGRyICE9IG5pbCB7CgkJcmV0dXJuIFdhaXRGb3JQaW5nKGFkZHIuR2F0ZXdheSwgdG90YWx0aW1lKQoJfSBlbHNlIHsKCQlyZXR1cm4gZm10LkVycm9yZigibm8gZGVmYXVsdCBnYXRld2F5IGZvdW5kIikKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "WaitForGatewayPing6",
                        "Comment": "Like WaitForGatewayPing, but specifically pings an IPv6 gateway",
                        "Arguments": [
                            {
                                "Name": "totaltime",
                                "Type": "time.Duration"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "WaitForGatewayPing6(totaltime time.Duration) error",
                        "Source": "ewoJaWYgYWRkciA6PSBEZWZhdWx0QWRkcmVzczYoKTsgYWRkciAhPSBuaWwgewoJCXJldHVybiBXYWl0Rm9yUGluZyhhZGRyLkdhdGV3YXksIHRvdGFsdGltZSkKCX0gZWxzZSB7CgkJcmV0dXJuIGZtdC5FcnJvcmYoIm5vIGRlZmF1bHQgZ2F0ZXdheSBmb3VuZCIpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "WaitForOpen",
                        "Comment": "Periodically attempts to open a TCP socket to the given address, up to totaltime.  Returns nil if the socket\nwas opened successfully (which will then immediately be closed), or an error if the function timed out.\nThe check interval can be configured using the WaitForOpenCheckInterval package variable.",
                        "Arguments": [
                            {
                                "Name": "network",
                                "Type": "string"
                            },
                            {
                                "Name": "address",
                                "Type": "string"
                            },
                            {
                                "Name": "totaltime",
                                "Type": "time.Duration"
                            },
                            {
                                "Name": "timeouts",
                                "Type": "...time.Duration"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "WaitForOpen(network string, address string, totaltime time.Duration, timeouts ...time.Duration) error",
                        "Source": "ewoJdmFyIHN0YXJ0ZWQgPSB0aW1lLk5vdygpCgl2YXIgdGltZW91dCB0aW1lLkR1cmF0aW9uCglpZiBsZW4odGltZW91dHMpID4gMCB7CgkJdGltZW91dCA9IHRpbWVvdXRzWzBdCgl9IGVsc2UgewoJCXRpbWVvdXQgPSBEZWZhdWx0V2FpdEZvck9wZW5Db25uZWN0aW9uVGltZW91dAoJfQoJZm9yIHRpbWUuU2luY2Uoc3RhcnRlZCkgPCB0b3RhbHRpbWUgewoJCWlmIGNvbm4sIF8gOj0gbmV0LkRpYWxUaW1lb3V0KCJ0Y3AiLCBhZGRyZXNzLCB0aW1lb3V0KTsgY29ubiAhPSBuaWwgewoJCQljb25uLkNsb3NlKCkKCQkJcmV0dXJuIG5pbAoJCX0KCQl0aW1lLlNsZWVwKFdhaXRGb3JPcGVuQ2hlY2tJbnRlcnZhbCkKCX0KCXJldHVybiBmbXQuRXJyb3JmKCJUaW1lZCBvdXQgd2FpdGluZyBmb3IgJXMvJXMgdG8gb3BlbiIsIG5ldHdvcmssIGFkZHJlc3MpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "WaitForPing",
                        "Comment": "Periodically attempts to send an ICMP ECHO request (a \"ping\") to the given IP address, up to totaltime.\nReturns nil if an ECHO reply was received, or an error if the function timed out.\nThe check interval can be configured using the WaitForPingCheckInterval package variable.",
                        "Arguments": [
                            {
                                "Name": "addr",
                                "Type": "any"
                            },
                            {
                                "Name": "totaltime",
                                "Type": "time.Duration"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "WaitForPing(addr any, totaltime time.Duration) error",
                        "Source": "ewoJdmFyIHN0YXJ0ZWQgPSB0aW1lLk5vdygpCgl2YXIgYWRkcmVzcyBuZXQuSVAKCWlmIGEsIG9rIDo9IGFkZHIuKG5ldC5JUCk7IG9rIHsKCQlhZGRyZXNzID0gYQoJfSBlbHNlIGlmIGEsIG9rIDo9IGFkZHIuKHN0cmluZyk7IG9rIHsKCQlhZGRyZXNzID0gbmV0LlBhcnNlSVAoYSkKCX0gZWxzZSBpZiBhLCBvayA6PSBhZGRyLigqSVBBZGRyZXNzKTsgb2sgewoJCWFkZHJlc3MgPSBhLklQCgl9IGVsc2UgewoJCXJldHVybiBmbXQuRXJyb3JmKCJBZGRyZXNzIG11c3QgYmUgYSBzdHJpbmcsIG5ldC5JUCwgb3IgKklQQWRkcmVzcyIpCgl9Cglmb3IgdGltZS5TaW5jZShzdGFydGVkKSA8IHRvdGFsdGltZSB7CgkJaWYgZXJyIDo9IE9uZVBpbmdPbmx5KGFkZHJlc3MsIG5pbCwgV2FpdEZvclBpbmdSZXBseSk7IGVyciA9PSBuaWwgewoJCQlyZXR1cm4gbmlsCgkJfSBlbHNlIGlmIHN0cmluZ3MuSGFzUHJlZml4KGVyci5FcnJvcigpLCBgZmF0YWw6YCkgewoJCQlyZXR1cm4gZXJyCgkJfQoJCXRpbWUuU2xlZXAoV2FpdEZvck9wZW5DaGVja0ludGVydmFsKQoJfQoJcmV0dXJuIGZtdC5FcnJvcmYoIlRpbWVkIG91dCBhdHRlbXB0aW5nIHRvIHBpbmcgJXMgYWZ0ZXIgJXYiLCBhZGRyZXNzLCB0aW1lLlNpbmNlKHN0YXJ0ZWQpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ZeroconfDiscover",
                        "Comment": "Perform Multicast DNS discovery on the local network, calling the fn callback for each\ndiscovered service.",
                        "Arguments": [
                            {
                                "Name": "options",
                                "Type": "*ZeroconfOptions"
                            },
                            {
                                "Name": "fn",
                                "Type": "ServiceFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ZeroconfDiscover(options *ZeroconfOptions, fn ServiceFunc) error",
                        "Source": "ewoJaWYgZm4gPT0gbmlsIHsKCQlyZXR1cm4gZm10LkVycm9yZigiTXVzdCBwcm92aWRlIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVjZWl2ZSBkaXNjb3ZlciBzZXJ2aWNlcyIpCgl9CglpZiBvcHRpb25zID09IG5pbCB7CgkJb3B0aW9ucyA9IG5ldyhaZXJvY29uZk9wdGlvbnMpCgl9CglkZWZhdWx0cy5TZXREZWZhdWx0cyhvcHRpb25zKQoJaWYgb3B0aW9ucy5Db250ZXh0ID09IG5pbCB7CgkJb3B0aW9ucy5Db250ZXh0ID0gY29udGV4dC5CYWNrZ3JvdW5kKCkKCX0KCXZhciBmb3VuZCA9IDAKCWlmIHJlc29sdmVyLCBlcnIgOj0gemVyb2NvbmYuTmV3UmVzb2x2ZXIoemVyb2NvbmYuU2VsZWN0SVBUcmFmZmljKHplcm9jb25mLklQdjRBbmRJUHY2KSk7IGVyciA9PSBuaWwgewoJCXZhciBlbnRyaWVzID0gbWFrZShjaGFuICp6ZXJvY29uZi5TZXJ2aWNlRW50cnkpCgkJY3R4LCBjYW5jZWwgOj0gY29udGV4dC5XaXRoVGltZW91dChvcHRpb25zLkNvbnRleHQsIG9wdGlvbnMuVGltZW91dCkKCQlkZWZlciBjYW5jZWwoKQoJCWdvIGZ1bmMocmVzdWx0cyA8LWNoYW4gKnplcm9jb25mLlNlcnZpY2VFbnRyeSkgewoJCQlmb3IgZW50cnkgOj0gcmFuZ2UgcmVzdWx0cyB7CgkJCQlpZiBpc0VudHJ5TWF0Y2gob3B0aW9ucywgZW50cnkpIHsKCQkJCQlmb3VuZCArPSAxCgkJCQkJdmFyIGFkZHJzID0gbWFrZShbXW5ldC5JUCwgMCkKCQkJCQlhZGRycyA9IGFwcGVuZChhZGRycywgZW50cnkuQWRkcklQdjQuLi4pCgkJCQkJYWRkcnMgPSBhcHBlbmQoYWRkcnMsIGVudHJ5LkFkZHJJUHY2Li4uKQoJCQkJCXZhciBhZGRyID0gYGAKCQkJCQlpZiBsZW4oYWRkcnMpID4gMCB7CgkJCQkJCWFkZHIgPSBmbXQuU3ByaW50ZigiJXY6JWQiLCBhZGRyc1swXSwgZW50cnkuUG9ydCkKCQkJCQl9CgkJCQkJaWYgIWZuKCZTZXJ2aWNle0hvc3RuYW1lOiBlbnRyeS5Ib3N0TmFtZSwgSW5zdGFuY2U6IGVudHJ5Lkluc3RhbmNlLCBTZXJ2aWNlOiBlbnRyeS5TZXJ2aWNlLCBQb3J0OiBlbnRyeS5Qb3J0LCBEb21haW46IGVudHJ5LkRvbWFpbiwgVGV4dDogZW50cnkuVGV4dCwgQWRkcmVzc2VzOiBhZGRycywgQWRkcmVzczogYWRkcn0pIHsKCQkJCQkJY2FuY2VsKCkKCQkJCQl9CgkJCQl9CgkJCQlpZiBvcHRpb25zLkxpbWl0ID4gMCAmJiBmb3VuZCA+PSBvcHRpb25zLkxpbWl0IHsKCQkJCQljYW5jZWwoKQoJCQkJfQoJCQl9CgkJfShlbnRyaWVzKQoJCWlmIGVyciA6PSByZXNvbHZlci5Ccm93c2UoY3R4LCBvcHRpb25zLlNlcnZpY2UsIG9wdGlvbnMuRG9tYWluLCBlbnRyaWVzKTsgZXJyID09IG5pbCB7CgkJCXNlbGVjdCB7CgkJCWNhc2UgPC1jdHguRG9uZSgpOgoJCQl9CgkJCXJldHVybiBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gZm10LkVycm9yZigiYnJvd3NlIGVycm9yOiAldiIsIGVycikKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBlcnIKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ZeroconfRegister",
                        "Comment": "Register the given service in Multicast DNS.  Returns an ID that can be used to unregister\nthe service later.",
                        "Arguments": [
                            {
                                "Name": "svc",
                                "Type": "*Service"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ZeroconfRegister(svc *Service) (string, error)",
                        "Source": "ewoJaWYgc3ZjID09IG5pbCB7CgkJcmV0dXJuIGBgLCBmbXQuRXJyb3JmKCJNdXN0IHByb3ZpZGUgYSBzZXJ2aWNlIGNvbmZpZ3VyYXRpb24gdG8gcmVnaXN0ZXIgbUROUyIpCgl9IGVsc2UgaWYgc3ZjLkluc3RhbmNlID09IGBgIHsKCQlzdmMuSW5zdGFuY2UgPSBzdHJpbmd1dGlsLlVVSUQoKS5TdHJpbmcoKQoJfSBlbHNlIGlmIHN2Yy5TZXJ2aWNlID09IGBgIHsKCQlyZXR1cm4gYGAsIGZtdC5FcnJvcmYoIk11c3QgcHJvdmlkZSBhIHNlcnZpY2UgdHlwZSIpCgl9IGVsc2UgaWYgc3ZjLkRvbWFpbiA9PSBgYCB7CgkJcmV0dXJuIGBgLCBmbXQuRXJyb3JmKCJNdXN0IHByb3ZpZGUgYSBzZXJ2aWNlIGRvbWFpbiIpCgl9IGVsc2UgaWYgc3ZjLlBvcnQgPT0gMCB7CgkJcmV0dXJuIGBgLCBmbXQuRXJyb3JmKCJNdXN0IHNwZWNpZnkgYSBzZXJ2aWNlIHBvcnQiKQoJfQoJdmFyIHNsdWcgPSBmbXQuU3ByaW50ZigiJXgiLCBzaGEyNTYuU3VtMjU2KFtdYnl0ZShmbXQuU3ByaW50ZigiJXMuJXMlczolZCIsIHN2Yy5JbnN0YW5jZSwgc3ZjLlNlcnZpY2UsIHN2Yy5Eb21haW4sIHN2Yy5Qb3J0KSkpKQoJaWYgXywgb2sgOj0gcmVnaXN0ZXJlZC5Mb2FkKHNsdWcpOyBvayB7CgkJcmV0dXJuIHNsdWcsIGZtdC5FcnJvcmYoIkEgc2VydmljZSBtYXRjaGluZyB0aGVzZSBwYXJhbWV0ZXJzIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCIpCgl9CglpZiBzZXJ2ZXIsIGVyciA6PSB6ZXJvY29uZi5SZWdpc3RlcihzdmMuSW5zdGFuY2UsIHN2Yy5TZXJ2aWNlLCBzdmMuRG9tYWluLCBzdmMuUG9ydCwgc3ZjLlRleHQsIHN2Yy5JbnRlcmZhY2VzKTsgZXJyID09IG5pbCB7CgkJcmVnaXN0ZXJlZC5TdG9yZShzbHVnLCBzZXJ2ZXIpCgkJcmV0dXJuIHNsdWcsIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gYGAsIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ZeroconfUnregister",
                        "Comment": "Unregister a previously-registered service.",
                        "Arguments": [
                            {
                                "Name": "id",
                                "Type": "string"
                            }
                        ],
                        "Signature": "ZeroconfUnregister(id string)",
                        "Source": "ewoJZGVmZXIgcmVnaXN0ZXJlZC5EZWxldGUoaWQpCglpZiBzLCBvayA6PSByZWdpc3RlcmVkLkxvYWQoaWQpOyBvayB7CgkJaWYgc2VydmVyLCBvayA6PSBzLigqemVyb2NvbmYuU2VydmVyKTsgb2sgewoJCQlzZXJ2ZXIuU2h1dGRvd24oKQoJCX0KCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ZeroconfUnregisterAll",
                        "Comment": "Unregister all Multicast DNS services.",
                        "Signature": "ZeroconfUnregisterAll()",
                        "Source": "ewoJcmVnaXN0ZXJlZC5SYW5nZShmdW5jKGtleSwgdmFsdWUgYW55KSBib29sIHsKCQlaZXJvY29uZlVucmVnaXN0ZXIodHlwZXV0aWwuU3RyaW5nKGtleSkpCgkJcmV0dXJuIHRydWUKCX0pCn0=",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "IPAddress": {
                        "Name": "IPAddress",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "DefaultAddress",
                                "Comment": "Retrieves the first routable IP address on any interface that falls inside of the\nsystem's default gateway network.  Will return nil if no IP could be found.",
                                "Returns": [
                                    {
                                        "Type": "*IPAddress"
                                    }
                                ],
                                "Signature": "DefaultAddress() *IPAddress",
                                "Source": "ewoJaWYgYWRkcnMsIGVyciA6PSBSb3V0YWJsZUFkZHJlc3NlcygpOyBlcnIgPT0gbmlsICYmIGxlbihhZGRycykgPiAwIHsKCQlyZXR1cm4gYWRkcnNbMF0KCX0KCXJldHVybiBuaWwKfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "DefaultAddress6",
                                "Comment": "Like DefaultAddress, but specifically filters on IPv6 addresses.  If no routable\nIPv6 address is found, returns nil.",
                                "Returns": [
                                    {
                                        "Type": "*IPAddress"
                                    }
                                ],
                                "Signature": "DefaultAddress6() *IPAddress",
                                "Source": "ewoJaWYgYWRkcnMsIGVyciA6PSBSb3V0YWJsZUFkZHJlc3NlcygpOyBlcnIgPT0gbmlsICYmIGxlbihhZGRycykgPiAwIHsKCQlmb3IgXywgYWRkciA6PSByYW5nZSBhZGRycyB7CgkJCWlmIGxlbihhZGRyLklQKSA+IDMyIHsKCQkJCXJldHVybiBhZGRyCgkJCX0KCQl9Cgl9CglyZXR1cm4gbmlsCn0=",
                                "IsPackageLevel": true
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "IP",
                                "Type": "net.IP"
                            },
                            {
                                "Name": "Mask",
                                "Type": "net.IPMask"
                            },
                            {
                                "Name": "Interface",
                                "Type": "net.Interface"
                            },
                            {
                                "Name": "Gateway",
                                "Type": "net.IP"
                            }
                        ],
                        "Source": "dHlwZSBJUEFkZHJlc3Mgc3RydWN0IHsKCUlQICAgICAgICBuZXQuSVAKCU1hc2sgICAgICBuZXQuSVBNYXNrCglJbnRlcmZhY2UgbmV0LkludGVyZmFjZQoJR2F0ZXdheSAgIG5ldC5JUAp9"
                    },
                    "Service": {
                        "Name": "Service",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "String",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "Hostname",
                                "Type": "string"
                            },
                            {
                                "Name": "Instance",
                                "Type": "string"
                            },
                            {
                                "Name": "Service",
                                "Type": "string"
                            },
                            {
                                "Name": "Domain",
                                "Type": "string"
                            },
                            {
                                "Name": "Port",
                                "Type": "int"
                            },
                            {
                                "Name": "Text",
                                "Type": "[]string"
                            },
                            {
                                "Name": "Address",
                                "Type": "string"
                            },
                            {
                                "Name": "Addresses",
                                "Type": "[]net.IP"
                            },
                            {
                                "Name": "Interfaces",
                                "Type": "[]net.Interface"
                            }
                        ],
                        "Source": "dHlwZSBTZXJ2aWNlIHN0cnVjdCB7CglIb3N0bmFtZSAgIHN0cmluZyAgICAgICAgICBganNvbjoiaG9zdG5hbWUiYAoJSW5zdGFuY2UgICBzdHJpbmcgICAgICAgICAgYGpzb246Imluc3RhbmNlImAKCVNlcnZpY2UgICAgc3RyaW5nICAgICAgICAgIGBqc29uOiJzZXJ2aWNlImAKCURvbWFpbiAgICAgc3RyaW5nICAgICAgICAgIGBqc29uOiJkb21haW4iYAoJUG9ydCAgICAgICBpbnQgICAgICAgICAgICAgYGpzb246InBvcnQiYAoJVGV4dCAgICAgICBbXXN0cmluZyAgICAgICAgYGpzb246InR4dCJgCglBZGRyZXNzICAgIHN0cmluZyAgICAgICAgICBganNvbjoiYWRkcmVzcyJgCglBZGRyZXNzZXMgIFtdbmV0LklQICAgICAgICBganNvbjoiYWRkcmVzc2VzLG9taXRlbXB0eSJgCglJbnRlcmZhY2VzIFtdbmV0LkludGVyZmFjZSBganNvbjoiaW50ZXJmYWNlcyxvbWl0ZW1wdHkiYAp9"
                    },
                    "ServiceFunc": {
                        "Name": "ServiceFunc",
                        "Source": "dHlwZSBTZXJ2aWNlRnVuYyBmdW5jKCpTZXJ2aWNlKSBib29s"
                    },
                    "ZeroconfOptions": {
                        "Name": "ZeroconfOptions",
                        "MetaType": "struct",
                        "Fields": [
                            {
                                "Name": "Context",
                                "Type": "context.Context"
                            },
                            {
                                "Name": "Limit",
                                "Type": "int"
                            },
                            {
                                "Name": "Timeout",
                                "Type": "time.Duration"
                            },
                            {
                                "Name": "Service",
                                "Type": "string"
                            },
                            {
                                "Name": "Domain",
                                "Type": "string"
                            },
                            {
                                "Name": "CheckInterval",
                                "Type": "time.Duration"
                            },
                            {
                                "Name": "MatchInstance",
                                "Type": "string"
                            },
                            {
                                "Name": "MatchPort",
                                "Type": "string"
                            },
                            {
                                "Name": "MatchHostname",
                                "Type": "string"
                            },
                            {
                                "Name": "MatchAddress",
                                "Type": "string"
                            }
                        ],
                        "Source": "dHlwZSBaZXJvY29uZk9wdGlvbnMgc3RydWN0IHsKCUNvbnRleHQgICAgICAgY29udGV4dC5Db250ZXh0CglMaW1pdCAgICAgICAgIGludAoJVGltZW91dCAgICAgICB0aW1lLkR1cmF0aW9uIGBkZWZhdWx0OiIzMHMiYAoJU2VydmljZSAgICAgICBzdHJpbmcgICAgICAgIGBkZWZhdWx0OiJfaHR0cC5fdGNwImAKCURvbWFpbiAgICAgICAgc3RyaW5nICAgICAgICBgZGVmYXVsdDoiLmxvY2FsImAKCUNoZWNrSW50ZXJ2YWwgdGltZS5EdXJhdGlvbiBgZGVmYXVsdDoiMTAwbXMiYAoJTWF0Y2hJbnN0YW5jZSBzdHJpbmcKCU1hdGNoUG9ydCAgICAgc3RyaW5nCglNYXRjaEhvc3RuYW1lIHN0cmluZwoJTWF0Y2hBZGRyZXNzICBzdHJpbmcKfQ=="
                    }
                }
            },
            {
                "Name": "pathutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/pathutil",
                "ImportPath": "pathutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Additional helpers for working with file paths and filesystem information\n",
                "MainFunction": false,
                "CommentWordCount": 368,
                "LineCount": 311,
                "SourceLineCount": 217,
                "FunctionCount": 23,
                "TypeCount": 0,
                "ConstantCount": 0,
                "VariableCount": 0,
                "Statistics": {
                    "Mean": 0.513,
                    "StdDev": 0.4928,
                    "GeometricMean": 1,
                    "HarmonicMean": 0,
                    "Median": 0.8,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "pathutil.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "os/user",
                                "Alias": "user"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/gobwas/glob",
                                "Alias": "glob"
                            }
                        ],
                        "Size": 4982,
                        "LineCount": 209,
                        "SourceLineCount": 131,
                        "FunctionCount": 23,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "pathutil_test.go",
                        "Imports": [
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "os/user",
                                "Alias": "user"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 3391,
                        "LineCount": 102,
                        "SourceLineCount": 86,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Functions": [
                    {
                        "Name": "DirExists",
                        "Comment": "Returns true if the given path exists and is a directory.",
                        "Arguments": [
                            {
                                "Name": "path",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "DirExists(path string) bool",
                        "Source": "ewoJaWYgc3RhdCwgZXJyIDo9IG9zLlN0YXQocGF0aCk7IGVyciA9PSBuaWwgewoJCXJldHVybiBzdGF0LklzRGlyKCkKCX0KCXJldHVybiBmYWxzZQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Exists",
                        "Comment": "Returns true if the given path exists.",
                        "Arguments": [
                            {
                                "Name": "path",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "Exists(path string) bool",
                        "Source": "ewoJaWYgXywgZXJyIDo9IG9zLlN0YXQocGF0aCk7IGVyciA9PSBuaWwgewoJCXJldHVybiB0cnVlCgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExpandUser",
                        "Comment": "ExpandUser replaces the tilde (~) in a path into the current user's home directory.",
                        "Arguments": [
                            {
                                "Name": "path",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ExpandUser(path string) (string, error)",
                        "Source": "ewoJaWYgdSwgZXJyIDo9IHVzZXIuQ3VycmVudCgpOyBlcnIgPT0gbmlsIHsKCQl2YXIgZnVsbFRpbGRlID0gZm10LlNwcmludGYoIn4lcyIsIHUuTmFtZSkKCQlpZiBzdHJpbmdzLkhhc1ByZWZpeChwYXRoLCBgfi9gKSB8fCBwYXRoID09IGB+YCB7CgkJCXJldHVybiBzdHJpbmdzLlJlcGxhY2UocGF0aCwgYH5gLCB1LkhvbWVEaXIsIDEpLCBuaWwKCQl9CgkJaWYgc3RyaW5ncy5IYXNQcmVmaXgocGF0aCwgZnVsbFRpbGRlK2AvYCkgfHwgcGF0aCA9PSBmdWxsVGlsZGUgewoJCQlyZXR1cm4gc3RyaW5ncy5SZXBsYWNlKHBhdGgsIGZ1bGxUaWxkZSwgdS5Ib21lRGlyLCAxKSwgbmlsCgkJfQoJCXJldHVybiBwYXRoLCBuaWwKCX0gZWxzZSB7CgkJcmV0dXJuIHBhdGgsIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "FileExists",
                        "Comment": "Returns true if the given path exists and is a regular file.",
                        "Arguments": [
                            {
                                "Name": "path",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "FileExists(path string) bool",
                        "Source": "ewoJaWYgc3RhdCwgZXJyIDo9IG9zLlN0YXQocGF0aCk7IGVyciA9PSBuaWwgewoJCXJldHVybiBzdGF0Lk1vZGUoKS5Jc1JlZ3VsYXIoKQoJfQoJcmV0dXJuIGZhbHNlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsAppend",
                        "Arguments": [
                            {
                                "Name": "mode",
                                "Type": "os.FileMode"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsAppend(mode os.FileMode) bool",
                        "Source": "ewoJcmV0dXJuIChtb2RlJm9zLk1vZGVBcHBlbmQgIT0gMCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsAppendable",
                        "Comment": "Returns true if the given file can be opened for appending by the current user.",
                        "Arguments": [
                            {
                                "Name": "filename",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsAppendable(filename string) bool",
                        "Source": "ewoJaWYgZiwgZXJyIDo9IG9zLk9wZW5GaWxlKGZpbGVuYW1lLCBvcy5PX0FQUEVORCwgMCk7IGVyciA9PSBuaWwgewoJCWRlZmVyIGYuQ2xvc2UoKQoJCXJldHVybiB0cnVlCgl9IGVsc2UgewoJCXJldHVybiBmYWxzZQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsCharDevice",
                        "Arguments": [
                            {
                                "Name": "mode",
                                "Type": "os.FileMode"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsCharDevice(mode os.FileMode) bool",
                        "Source": "ewoJcmV0dXJuIChtb2RlJm9zLk1vZGVDaGFyRGV2aWNlICE9IDApCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsDevice",
                        "Arguments": [
                            {
                                "Name": "mode",
                                "Type": "os.FileMode"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsDevice(mode os.FileMode) bool",
                        "Source": "ewoJcmV0dXJuIChtb2RlJm9zLk1vZGVEZXZpY2UgIT0gMCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsExclusive",
                        "Arguments": [
                            {
                                "Name": "mode",
                                "Type": "os.FileMode"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsExclusive(mode os.FileMode) bool",
                        "Source": "ewoJcmV0dXJuIChtb2RlJm9zLk1vZGVFeGNsdXNpdmUgIT0gMCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsNamedPipe",
                        "Arguments": [
                            {
                                "Name": "mode",
                                "Type": "os.FileMode"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsNamedPipe(mode os.FileMode) bool",
                        "Source": "ewoJcmV0dXJuIChtb2RlJm9zLk1vZGVOYW1lZFBpcGUgIT0gMCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsNonemptyDir",
                        "Comment": "Returns true if the given path is a directory with items in it.",
                        "Arguments": [
                            {
                                "Name": "path",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsNonemptyDir(path string) bool",
                        "Source": "ewoJaWYgRGlyRXhpc3RzKHBhdGgpIHsKCQlpZiBlbnRyaWVzLCBlcnIgOj0gb3MuUmVhZERpcihwYXRoKTsgZXJyID09IG5pbCAmJiBsZW4oZW50cmllcykgPiAwIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsNonemptyExecutableFile",
                        "Comment": "Returns true if the given path is a regular file, is executable by any user, and has a non-zero size.",
                        "Arguments": [
                            {
                                "Name": "path",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsNonemptyExecutableFile(path string) bool",
                        "Source": "ewoJaWYgc3RhdCwgZXJyIDo9IG9zLlN0YXQocGF0aCk7IGVyciA9PSBuaWwgJiYgc3RhdC5TaXplKCkgPiAwICYmIChzdGF0Lk1vZGUoKS5QZXJtKCkmMDExMSkgIT0gMCB7CgkJcmV0dXJuIHRydWUKCX0KCXJldHVybiBmYWxzZQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsNonemptyFile",
                        "Comment": "Returns true if the given path is a regular file with a non-zero size.",
                        "Arguments": [
                            {
                                "Name": "path",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsNonemptyFile(path string) bool",
                        "Source": "ewoJaWYgRmlsZUV4aXN0cyhwYXRoKSB7CgkJaWYgc3RhdCwgZXJyIDo9IG9zLlN0YXQocGF0aCk7IGVyciA9PSBuaWwgJiYgc3RhdC5TaXplKCkgPiAwIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsReadable",
                        "Comment": "Returns true if the given file can be opened for reading by the current user.",
                        "Arguments": [
                            {
                                "Name": "filename",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsReadable(filename string) bool",
                        "Source": "ewoJaWYgZiwgZXJyIDo9IG9zLk9wZW5GaWxlKGZpbGVuYW1lLCBvcy5PX1JET05MWSwgMCk7IGVyciA9PSBuaWwgewoJCWRlZmVyIGYuQ2xvc2UoKQoJCXJldHVybiB0cnVlCgl9IGVsc2UgewoJCXJldHVybiBmYWxzZQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsSetgid",
                        "Arguments": [
                            {
                                "Name": "mode",
                                "Type": "os.FileMode"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsSetgid(mode os.FileMode) bool",
                        "Source": "ewoJcmV0dXJuIChtb2RlJm9zLk1vZGVTZXRnaWQgIT0gMCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsSetuid",
                        "Arguments": [
                            {
                                "Name": "mode",
                                "Type": "os.FileMode"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsSetuid(mode os.FileMode) bool",
                        "Source": "ewoJcmV0dXJuIChtb2RlJm9zLk1vZGVTZXR1aWQgIT0gMCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsSocket",
                        "Arguments": [
                            {
                                "Name": "mode",
                                "Type": "os.FileMode"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsSocket(mode os.FileMode) bool",
                        "Source": "ewoJcmV0dXJuIChtb2RlJm9zLk1vZGVTb2NrZXQgIT0gMCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsSticky",
                        "Arguments": [
                            {
                                "Name": "mode",
                                "Type": "os.FileMode"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsSticky(mode os.FileMode) bool",
                        "Source": "ewoJcmV0dXJuIChtb2RlJm9zLk1vZGVTdGlja3kgIT0gMCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsSymlink",
                        "Arguments": [
                            {
                                "Name": "mode",
                                "Type": "os.FileMode"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsSymlink(mode os.FileMode) bool",
                        "Source": "ewoJcmV0dXJuIChtb2RlJm9zLk1vZGVTeW1saW5rICE9IDApCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsTemporary",
                        "Arguments": [
                            {
                                "Name": "mode",
                                "Type": "os.FileMode"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsTemporary(mode os.FileMode) bool",
                        "Source": "ewoJcmV0dXJuIChtb2RlJm9zLk1vZGVUZW1wb3JhcnkgIT0gMCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsWritable",
                        "Comment": "Returns true if the given file can be opened for writing by the current user.",
                        "Arguments": [
                            {
                                "Name": "filename",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsWritable(filename string) bool",
                        "Source": "ewoJaWYgZiwgZXJyIDo9IG9zLk9wZW5GaWxlKGZpbGVuYW1lLCBvcy5PX1dST05MWSwgMCk7IGVyciA9PSBuaWwgewoJCWRlZmVyIGYuQ2xvc2UoKQoJCXJldHVybiB0cnVlCgl9IGVsc2UgewoJCXJldHVybiBmYWxzZQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "LinkExists",
                        "Comment": "Returns true if the given path exists and is a symbolic link.",
                        "Arguments": [
                            {
                                "Name": "path",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "LinkExists(path string) bool",
                        "Source": "ewoJaWYgc3RhdCwgZXJyIDo9IG9zLlN0YXQocGF0aCk7IGVyciA9PSBuaWwgewoJCXJldHVybiBJc1N5bWxpbmsoc3RhdC5Nb2RlKCkpCgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MatchPath",
                        "Comment": "Returns whether a given path matches a glob pattern.\n\nvia github.com/gobwas/glob:\n\nCompile creates Glob for given pattern and strings (if any present after pattern) as separators.\nThe pattern syntax is:\n\n\tpattern:\n\t    { term }\n\n\tterm:\n\t    `*`         matches any sequence of non-separator characters\n\t    `**`        matches any sequence of characters\n\t    `?`         matches any single non-separator character\n\t    `[` [ `!` ] { character-range } `]`\n\t                character class (must be non-empty)\n\t    `{` pattern-list `}`\n\t                pattern alternatives\n\t    c           matches character c (c != `*`, `**`, `?`, `\\`, `[`, `{`, `}`)\n\t    `\\` c       matches character c\n\n\tcharacter-range:\n\t    c           matches character c (c != `\\\\`, `-`, `]`)\n\t    `\\` c       matches character c\n\t    lo `-` hi   matches character c for lo \u003c= c \u003c= hi\n\n\tpattern-list:\n\t    pattern { `,` pattern }\n\t                comma-separated (without spaces) patterns",
                        "Arguments": [
                            {
                                "Name": "pattern",
                                "Type": "string"
                            },
                            {
                                "Name": "path",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "MatchPath(pattern string, path string) bool",
                        "Source": "ewoJaWYgZywgZXJyIDo9IGdsb2IuQ29tcGlsZShwYXR0ZXJuKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIGcuTWF0Y2gocGF0aCkKCX0KCXJldHVybiBmYWxzZQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestExpandUser",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestExpandUser(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgdiBzdHJpbmcKCXZhciBlcnIgZXJyb3IKCXUsIF8gOj0gdXNlci5DdXJyZW50KCkKCXYsIGVyciA9IEV4cGFuZFVzZXIoYC9kZXYvbnVsbGApCglhc3NlcnQuRXF1YWwodiwgYC9kZXYvbnVsbGApCglhc3NlcnQuTmlsKGVycikKCXYsIGVyciA9IEV4cGFuZFVzZXIoYH5gKQoJYXNzZXJ0LkVxdWFsKHYsIHUuSG9tZURpcikKCWFzc2VydC5OaWwoZXJyKQoJdiwgZXJyID0gRXhwYW5kVXNlcigifiIgKyB1Lk5hbWUpCglhc3NlcnQuRXF1YWwodiwgdS5Ib21lRGlyKQoJYXNzZXJ0Lk5pbChlcnIpCgl2LCBlcnIgPSBFeHBhbmRVc2VyKCJ+L3Rlc3QtMTIzIikKCWFzc2VydC5FcXVhbCh2LCB1LkhvbWVEaXIrIi90ZXN0LTEyMyIpCglhc3NlcnQuTmlsKGVycikKCXYsIGVyciA9IEV4cGFuZFVzZXIoIn4iICsgdS5OYW1lICsgIi90ZXN0LTEyMyIpCglhc3NlcnQuRXF1YWwodiwgdS5Ib21lRGlyKyIvdGVzdC0xMjMiKQoJYXNzZXJ0Lk5pbChlcnIpCgl2LCBlcnIgPSBFeHBhbmRVc2VyKCJ+L3Rlc3QtMTIzL34vMTIzIikKCWFzc2VydC5FcXVhbCh2LCB1LkhvbWVEaXIrIi90ZXN0LTEyMy9+LzEyMyIpCglhc3NlcnQuTmlsKGVycikKCXYsIGVyciA9IEV4cGFuZFVzZXIoIn4iICsgdS5OYW1lICsgIi90ZXN0LTEyMy9+IiArIHUuTmFtZSArICIvMTIzIikKCWFzc2VydC5FcXVhbCh2LCB1LkhvbWVEaXIrIi90ZXN0LTEyMy9+Iit1Lk5hbWUrIi8xMjMiKQoJYXNzZXJ0Lk5pbChlcnIpCglhc3NlcnQuRmFsc2UoSXNOb25lbXB0eUZpbGUoYC9ub25leGlzdGVudC50eHRgKSkKCWFzc2VydC5GYWxzZShJc05vbmVtcHR5RGlyKGAvbm9uZXhpc3RlbnQvZGlyYCkpCglhc3NlcnQuVHJ1ZShJc05vbmVtcHR5RmlsZShgL2V0Yy9ob3N0c2ApKQoJYXNzZXJ0LlRydWUoSXNOb25lbXB0eURpcihgL2V0Y2ApKQoJeCwgZXJyIDo9IG9zLkV4ZWN1dGFibGUoKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LlRydWUoSXNOb25lbXB0eUV4ZWN1dGFibGVGaWxlKHgpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMatchPath",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMatchPath(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aChgKipgLCBgL2hlbGxvL3RoZXJlLnR4dGApKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aChgKi50eHRgLCBgL2hlbGxvL3RoZXJlLnR4dGApKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aChgKiovKi50eHRgLCBgL2hlbGxvL3RoZXJlLnR4dGApKQoJcmVxdWlyZS5GYWxzZSh0LCBNYXRjaFBhdGgoYCoqLyoudHh0YCwgYC9oZWxsby90aGVyZS5qcGdgKSkKCXJlcXVpcmUuVHJ1ZSh0LCBNYXRjaFBhdGgoIiogP2F0ICogZXllcyIsICJteSBjYXQgaGFzIHZlcnkgYnJpZ2h0IGV5ZXMiKSkKCXJlcXVpcmUuVHJ1ZSh0LCBNYXRjaFBhdGgoIiIsICIiKSkKCXJlcXVpcmUuRmFsc2UodCwgTWF0Y2hQYXRoKCIiLCAiYiIpKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aCgiKsOkIiwgIsOlw6QiKSkKCXJlcXVpcmUuVHJ1ZSh0LCBNYXRjaFBhdGgoImFiYyIsICJhYmMiKSkKCXJlcXVpcmUuVHJ1ZSh0LCBNYXRjaFBhdGgoImEqYyIsICJhYmMiKSkKCXJlcXVpcmUuVHJ1ZSh0LCBNYXRjaFBhdGgoImEqYyIsICJhMTIzNDVjIikpCglyZXF1aXJlLlRydWUodCwgTWF0Y2hQYXRoKCJhP2MiLCAiYTFjIikpCglyZXF1aXJlLlRydWUodCwgTWF0Y2hQYXRoKCI/YXQiLCAiY2F0IikpCglyZXF1aXJlLlRydWUodCwgTWF0Y2hQYXRoKCI/YXQiLCAiZmF0IikpCglyZXF1aXJlLlRydWUodCwgTWF0Y2hQYXRoKCIqIiwgImFiYyIpKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aChgXCpgLCAiKiIpKQoJcmVxdWlyZS5GYWxzZSh0LCBNYXRjaFBhdGgoIj9hdCIsICJhdCIpKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aCgiKnRlc3QiLCAidGhpcyBpcyBhIHRlc3QiKSkKCXJlcXVpcmUuVHJ1ZSh0LCBNYXRjaFBhdGgoInRoaXMqIiwgInRoaXMgaXMgYSB0ZXN0IikpCglyZXF1aXJlLlRydWUodCwgTWF0Y2hQYXRoKCIqaXMgKiIsICJ0aGlzIGlzIGEgdGVzdCIpKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aCgiKmlzKmEqIiwgInRoaXMgaXMgYSB0ZXN0IikpCglyZXF1aXJlLlRydWUodCwgTWF0Y2hQYXRoKCIqKnRlc3QqKiIsICJ0aGlzIGlzIGEgdGVzdCIpKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aCgiKippcyoqYSoqKnRlc3QqIiwgInRoaXMgaXMgYSB0ZXN0IikpCglyZXF1aXJlLkZhbHNlKHQsIE1hdGNoUGF0aCgiKmlzIiwgInRoaXMgaXMgYSB0ZXN0IikpCglyZXF1aXJlLkZhbHNlKHQsIE1hdGNoUGF0aCgiKm5vKiIsICJ0aGlzIGlzIGEgdGVzdCIpKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aCgiWyFhXSoiLCAidGhpcyBpcyBhIHRlc3QzIikpCglyZXF1aXJlLlRydWUodCwgTWF0Y2hQYXRoKCIqYWJjIiwgImFiY2FiYyIpKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aCgiKiphYmMiLCAiYWJjYWJjIikpCglyZXF1aXJlLlRydWUodCwgTWF0Y2hQYXRoKCI/Pz8iLCAiYWJjIikpCglyZXF1aXJlLlRydWUodCwgTWF0Y2hQYXRoKCI/Kj8iLCAiYWJjIikpCglyZXF1aXJlLlRydWUodCwgTWF0Y2hQYXRoKCI/Kj8iLCAiYWMiKSkKCXJlcXVpcmUuRmFsc2UodCwgTWF0Y2hQYXRoKCJzdGEiLCAic3RhZ25hdGlvbiIpKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aCgic3RhKiIsICJzdGFnbmF0aW9uIikpCglyZXF1aXJlLkZhbHNlKHQsIE1hdGNoUGF0aCgic3RhPyIsICJzdGFnbmF0aW9uIikpCglyZXF1aXJlLkZhbHNlKHQsIE1hdGNoUGF0aCgic3RhP24iLCAic3RhZ25hdGlvbiIpKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aCgie2FiYyxkZWZ9Z2hpIiwgImRlZmdoaSIpKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aCgie2FiYyxhYmNkfWEiLCAiYWJjZGEiKSkKCXJlcXVpcmUuVHJ1ZSh0LCBNYXRjaFBhdGgoInthLGFifXtiYyxmfSIsICJhYmMiKSkKCXJlcXVpcmUuVHJ1ZSh0LCBNYXRjaFBhdGgoInsqLCoqfXthLGJ9IiwgImFiIikpCglyZXF1aXJlLkZhbHNlKHQsIE1hdGNoUGF0aCgieyosKip9e2EsYn0iLCAiYWMiKSkKCXJlcXVpcmUuVHJ1ZSh0LCBNYXRjaFBhdGgoIi97cmF0ZSxbYS16XVthLXpdW2Etel19KiIsICIvcmF0ZSIpKQoJcmVxdWlyZS5UcnVlKHQsIE1hdGNoUGF0aCgiL3tyYXRlLFswLTldWzAtOV1bMC05XX0qIiwgIi9yYXRlIikpCglyZXF1aXJlLlRydWUodCwgTWF0Y2hQYXRoKCIve3JhdGUsW2Etel1bYS16XVthLXpdfSoiLCAiL3VzZCIpKQp9",
                        "IsPackageLevel": true
                    }
                ]
            },
            {
                "Name": "rxutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/rxutil",
                "ImportPath": "rxutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Utilities to make working with regular expressions easier.\n",
                "MainFunction": false,
                "CommentWordCount": 186,
                "LineCount": 256,
                "SourceLineCount": 187,
                "FunctionCount": 9,
                "TypeCount": 1,
                "ConstantCount": 0,
                "VariableCount": 12,
                "Statistics": {
                    "Mean": 0.3545,
                    "StdDev": 0.4707,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 0,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "functions.go",
                        "Size": 511,
                        "LineCount": 20,
                        "SourceLineCount": 14,
                        "FunctionCount": 2,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "functions_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/alecthomas/assert",
                                "Alias": "assert"
                            }
                        ],
                        "Size": 336,
                        "LineCount": 15,
                        "SourceLineCount": 11,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "match.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "regexp",
                                "Alias": "regexp"
                            }
                        ],
                        "Size": 3406,
                        "LineCount": 133,
                        "SourceLineCount": 96,
                        "FunctionCount": 7,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "match_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 1965,
                        "LineCount": 71,
                        "SourceLineCount": 52,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "predefined.go",
                        "Imports": [
                            {
                                "PackageName": "regexp",
                                "Alias": "regexp"
                            }
                        ],
                        "Size": 633,
                        "LineCount": 17,
                        "SourceLineCount": 14,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 12
                    }
                ],
                "Variables": [
                    {
                        "Name": "Integers",
                        "Expression": "regexp.MustCompile(`-?\\d+`)"
                    },
                    {
                        "Name": "Letter",
                        "Expression": "regexp.MustCompile(`[\\p{Lu}\\p{Ll}]`)"
                    },
                    {
                        "Name": "Letters",
                        "Expression": "regexp.MustCompile(`[\\p{Lu}\\p{Ll}]+`)"
                    },
                    {
                        "Name": "LineBreak",
                        "Expression": "regexp.MustCompile(`(?:\\n|\\r|\\n\\r)`)"
                    },
                    {
                        "Name": "LineBreaks",
                        "Expression": "regexp.MustCompile(`[\\n\\r]+`)"
                    },
                    {
                        "Name": "LowerCaseLetter",
                        "Expression": "regexp.MustCompile(`\\p{Ll}`)"
                    },
                    {
                        "Name": "LowerCaseLetters",
                        "Expression": "regexp.MustCompile(`\\p{Ll}+`)"
                    },
                    {
                        "Name": "NonNegativeIntegers",
                        "Expression": "regexp.MustCompile(`\\d+`)"
                    },
                    {
                        "Name": "Numbers",
                        "Expression": "regexp.MustCompile(`-?\\d+(?:\\.\\d+)?`)"
                    },
                    {
                        "Name": "UpperCaseLetter",
                        "Expression": "regexp.MustCompile(`\\p{Lu}`)"
                    },
                    {
                        "Name": "UpperCaseLetters",
                        "Expression": "regexp.MustCompile(`\\p{Lu}+`)"
                    },
                    {
                        "Name": "Whitespace",
                        "Expression": "regexp.MustCompile(`\\s+`)"
                    }
                ],
                "Functions": [
                    {
                        "Name": "IsMatchString",
                        "Arguments": [
                            {
                                "Name": "pattern",
                                "Type": "any"
                            },
                            {
                                "Name": "source",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsMatchString(pattern any, source string) bool",
                        "Source": "ewoJcmV0dXJuIChNYXRjaChwYXR0ZXJuLCBzb3VyY2UpICE9IG5pbCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Split",
                        "Comment": "Splits a given string using the given regexp string or *regexp.Regexp value into zero or more parts.",
                        "Arguments": [
                            {
                                "Name": "pattern",
                                "Type": "any"
                            },
                            {
                                "Name": "s",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "Split(pattern any, s string) []string",
                        "Source": "ewoJcmV0dXJuIFNwbGl0TihwYXR0ZXJuLCBzLCAtMSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitN",
                        "Comment": "Splits a given string using the given regexp string or *regexp.Regexp value into at most n parts.",
                        "Arguments": [
                            {
                                "Name": "pattern",
                                "Type": "any"
                            },
                            {
                                "Name": "s",
                                "Type": "string"
                            },
                            {
                                "Name": "n",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "SplitN(pattern any, s string, n int) []string",
                        "Source": "ewoJaWYgcyA9PSBgYCB7CgkJcmV0dXJuIG1ha2UoW11zdHJpbmcsIDApCgl9CglpZiBtYXRjaCA6PSBNYXRjaChwYXR0ZXJuLCBzKTsgbWF0Y2ggIT0gbmlsIHsKCQlyZXR1cm4gbWF0Y2gucnguU3BsaXQocywgbikKCX0gZWxzZSB7CgkJcmV0dXJuIFtdc3RyaW5ne3N9Cgl9Cn0=",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestMatch",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMatch(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbWF0Y2ggPSBNYXRjaChgKD9QPGZpcnN0PlxkKylcLihcZCspLig/UDxzZWNvbmQ+XGQrKWAsIGAxMjM0LjU2NzguOWApCglhc3NlcnQuTm90TmlsKG1hdGNoKQoJYXNzZXJ0LkVxdWFsKGAxMjM0LjU2NzguOWAsIG1hdGNoLkdyb3VwKDApKQoJYXNzZXJ0LkVxdWFsKGAxMjM0YCwgbWF0Y2guR3JvdXAoMSkpCglhc3NlcnQuRXF1YWwoYDU2NzhgLCBtYXRjaC5Hcm91cCgyKSkKCWFzc2VydC5FcXVhbChgOWAsIG1hdGNoLkdyb3VwKDMpKQoJYXNzZXJ0LkVtcHR5KG1hdGNoLkdyb3VwKDQpKQoJYXNzZXJ0LkVxdWFsKGAxMjM0YCwgbWF0Y2guR3JvdXAoYGZpcnN0YCkpCglhc3NlcnQuRXF1YWwoYDlgLCBtYXRjaC5Hcm91cChgc2Vjb25kYCkpCglhc3NlcnQuRW1wdHkobWF0Y2guR3JvdXAoYHBvdGF0b2ApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMatchAndMap",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMatchAndMap(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbWF0Y2ggPSBNYXRjaChgKD9QPGZpcnN0PlxkKylcLihcZCspLig/UDxzZWNvbmQ+XGQrKWAsIGAxMjM0LjU2NzguOWApCglhc3NlcnQuTm90TmlsKG1hdGNoKQoJYXNzZXJ0LkVxdWFsKGAxMjM0LjU2NzguOWAsIG1hdGNoLkdyb3VwKDApKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddc3RyaW5ne2BmaXJzdGA6IGAxMjM0YCwgYHNlY29uZGA6IGA5YH0sIG1hdGNoLk5hbWVkQ2FwdHVyZXMoKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMatchCaptures",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMatchCaptures(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbWF0Y2ggPSBNYXRjaChgKD9QPGZpcnN0PlxkKylcLihcZCspLig/UDxzZWNvbmQ+XGQrKWAsIGAxMjM0LjU2NzguOWApCglhc3NlcnQuTm90TmlsKG1hdGNoKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2AxMjM0LjU2NzguOWAsIGAxMjM0YCwgYDU2NzhgLCBgOWB9LCBtYXRjaC5DYXB0dXJlcygpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestReplaceGroup",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestReplaceGroup(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbWF0Y2ggPSBNYXRjaChgKD9QPGZpcnN0PlxkKylcLihcZCspLig/UDxzZWNvbmQ+XGQrKWAsIGAxMjM0LjU2NzguOWApCglhc3NlcnQuTm90TmlsKG1hdGNoKQoJYXNzZXJ0LkVxdWFsKGByZXBsYCwgbWF0Y2guUmVwbGFjZUdyb3VwKDAsIGByZXBsYCkpCglhc3NlcnQuRXF1YWwoYGZpcnN0LjU2NzguOWAsIG1hdGNoLlJlcGxhY2VHcm91cCgxLCBgZmlyc3RgKSkKCWFzc2VydC5FcXVhbChgMTIzNC5zZWNvbmQuOWAsIG1hdGNoLlJlcGxhY2VHcm91cCgyLCBgc2Vjb25kYCkpCglhc3NlcnQuRXF1YWwoYDEyMzQuNTY3OC50aGlyZGAsIG1hdGNoLlJlcGxhY2VHcm91cCgzLCBgdGhpcmRgKSkKCWFzc2VydC5FcXVhbChgMTIzNC41Njc4LjlgLCBtYXRjaC5SZXBsYWNlR3JvdXAoNCwgYGZvdXJ0aGApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestReplaceGroupNamed",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestReplaceGroupNamed(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbWF0Y2ggPSBNYXRjaChgKD9QPGZpcnN0PlxkKylcLihcZCspLig/UDxzZWNvbmQ+XGQrKWAsIGAxMjM0LjU2NzguOWApCglhc3NlcnQuTm90TmlsKG1hdGNoKQoJYXNzZXJ0LkVxdWFsKGBmaXJzdC41Njc4LjlgLCBtYXRjaC5SZXBsYWNlR3JvdXAoYGZpcnN0YCwgYGZpcnN0YCkpCglhc3NlcnQuRXF1YWwoYDEyMzQuNTY3OC5zZWNvbmRgLCBtYXRjaC5SZXBsYWNlR3JvdXAoYHNlY29uZGAsIGBzZWNvbmRgKSkKCWFzc2VydC5FcXVhbChgMTIzNC41Njc4LjlgLCBtYXRjaC5SZXBsYWNlR3JvdXAoYHRoaXJkYCwgYHRoaXJkYCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSplitN",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSplitN(t *testing.T)",
                        "Source": "ewoJYXNzZXJ0LkVtcHR5KHQsIFNwbGl0KG5pbCwgYGApKQoJYXNzZXJ0LkVxdWFsKHQsIFtdc3RyaW5ne2AxOjI6M2B9LCBTcGxpdChuaWwsIGAxOjI6M2ApKQoJYXNzZXJ0LkVxdWFsKHQsIFtdc3RyaW5ne2AxYCwgYDJgLCBgM2B9LCBTcGxpdCgiOiIsICIxOjI6MyIpKQoJYXNzZXJ0LkVxdWFsKHQsIFtdc3RyaW5ne2AxYCwgYDJgLCBgM2AsIGBgfSwgU3BsaXQoIlxcVysiLCAiMS0tMjo6OzMgICAgIikpCn0=",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "MatchResult": {
                        "Name": "MatchResult",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "AllCaptures",
                                "Comment": "Returns all captures from all matches appended together.  The full match string\nfrom match is omitted, so only the actual values appearing within capture groups\nare returned.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]string"
                                    }
                                ],
                                "Signature": "AllCaptures() []string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Captures",
                                "Comment": "Return a slice of all capture groups.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]string"
                                    }
                                ],
                                "Signature": "Captures() []string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Group",
                                "Comment": "Return the value of the numbered capture group (if given an int), or the\nnamed capture group (if given a string).  Returns an empty string if the\ngiven group name or index does not exist.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "nameOrIndex",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "Group(nameOrIndex any) string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Match",
                                "Comment": "Returns a MatchResult object representing the leftmost match of pattern against\nsource, or nil if no matches were found.  Pattern can be a string or a\npreviously-compiled *regexp.Regexp.",
                                "Arguments": [
                                    {
                                        "Name": "pattern",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "source",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*MatchResult"
                                    }
                                ],
                                "Signature": "Match(pattern any, source string) *MatchResult",
                                "Source": "ewoJdmFyIHJ4ICpyZWdleHAuUmVnZXhwCglpZiByLCBvayA6PSBwYXR0ZXJuLigqcmVnZXhwLlJlZ2V4cCk7IG9rIHsKCQlyeCA9IHIKCX0gZWxzZSBpZiByLCBvayA6PSBwYXR0ZXJuLihyZWdleHAuUmVnZXhwKTsgb2sgewoJCXJ4ID0gJnIKCX0gZWxzZSB7CgkJcnggPSByZWdleHAuTXVzdENvbXBpbGUoZm10LlNwcmludGYoIiV2IiwgcGF0dGVybikpCgl9CglpZiByeC5NYXRjaFN0cmluZyhzb3VyY2UpIHsKCQlyZXR1cm4gJk1hdGNoUmVzdWx0e3J4OiByeCwgc291cmNlOiBzb3VyY2UsIG5hbWVzOiByeC5TdWJleHBOYW1lcygpLCBsZWZ0bW9zdF9zdWJtYXRjaGVzOiByeC5GaW5kU3RyaW5nU3VibWF0Y2goc291cmNlKSwgbGVmdG1vc3Rfc3VibWF0Y2hfaW5kaWNlczogcnguRmluZFN0cmluZ1N1Ym1hdGNoSW5kZXgoc291cmNlKSwgYWxsX3N1Ym1hdGNoZXM6IHJ4LkZpbmRBbGxTdHJpbmdTdWJtYXRjaChzb3VyY2UsIC0xKX0KCX0KCXJldHVybiBuaWwKfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "NamedCaptures",
                                "Comment": "Returns a map of all named capture matches, keyed on capture group name.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "map[string]string"
                                    }
                                ],
                                "Signature": "NamedCaptures() map[string]string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "ReplaceGroup",
                                "Comment": "Return a copy of source string with the given numbered or named group replaced\nwith repl.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "nameOrIndex",
                                        "Type": "any"
                                    },
                                    {
                                        "Name": "repl",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "ReplaceGroup(nameOrIndex any, repl string) string",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBNYXRjaFJlc3VsdCBzdHJ1Y3QgewoKfQo=",
                        "HasUnexportedFields": true
                    }
                }
            },
            {
                "Name": "sliceutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/sliceutil",
                "ImportPath": "sliceutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Utilities for converting, manipulating, and iterating over slices\n",
                "MainFunction": false,
                "CommentWordCount": 764,
                "LineCount": 1063,
                "SourceLineCount": 794,
                "FunctionCount": 34,
                "TypeCount": 4,
                "ConstantCount": 0,
                "VariableCount": 3,
                "Statistics": {
                    "Mean": 0.9,
                    "StdDev": 0.2751,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 1,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "sliceutil.go",
                        "Imports": [
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/utils",
                                "Alias": "utils"
                            },
                            {
                                "PackageName": "github.com/juliangruber/go-intersect",
                                "Alias": "go-intersect"
                            }
                        ],
                        "Size": 11552,
                        "LineCount": 507,
                        "SourceLineCount": 346,
                        "FunctionCount": 34,
                        "TypeCount": 4,
                        "ConstantCount": 0,
                        "VariableCount": 3
                    },
                    {
                        "Name": "sliceutil_test.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/alecthomas/assert",
                                "Alias": "assert"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 14013,
                        "LineCount": 556,
                        "SourceLineCount": 448,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Variables": [
                    {
                        "Name": "RelaxedEqualityCompare"
                    },
                    {
                        "Name": "Stop",
                        "Expression": "utils.Stop"
                    },
                    {
                        "Name": "StrictEqualityCompare"
                    }
                ],
                "Functions": [
                    {
                        "Name": "Append",
                        "Comment": "Returns a copy of the given slicified value with the given additional values appended.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "values",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Append(in any, values ...any) []any",
                        "Source": "ewoJcmV0dXJuIGFwcGVuZChTbGljZWlmeShpbiksIHZhbHVlcy4uLikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "At",
                        "Comment": "Returns the element in the given indexable value at the given index.  If the\nindex is present, the second return value will be true.  If the index is not\npresent, or the given input is not indexable, the second return value will be\nfalse.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "index",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            },
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "At(in any, index int) (any, bool)",
                        "Source": "ewoJaW4gPSB0eXBldXRpbC5SZXNvbHZlVmFsdWUoaW4pCglpZiB0eXBldXRpbC5Jc0tpbmQoaW4sIHJlZmxlY3QuQXJyYXksIHJlZmxlY3QuU2xpY2UsIHJlZmxlY3QuU3RyaW5nKSB7CgkJdmFyIGluViA9IHJlZmxlY3QuVmFsdWVPZihpbikKCQlpZiBpbmRleCA8IGluVi5MZW4oKSB7CgkJCXJldHVybiBpblYuSW5kZXgoaW5kZXgpLkludGVyZmFjZSgpLCB0cnVlCgkJfQoJfQoJcmV0dXJuIG5pbCwgZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Autotype",
                        "Comment": "Returns a copy of the given slice with each element's value passed to stringutil.Autotype",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Autotype(in any) []any",
                        "Source": "ewoJdmFyIG91dCBbXWFueQoJRWFjaChpbiwgZnVuYyhpIGludCwgdiBhbnkpIGVycm9yIHsKCQlvdXQgPSBhcHBlbmQob3V0LCBzdHJpbmd1dGlsLkF1dG90eXBlKHYpKQoJCXJldHVybiBuaWwKCX0pCglyZXR1cm4gb3V0Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Chunks",
                        "Comment": "Divide the given slice into chunks of (at most) a given length",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "size",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[][]any"
                            }
                        ],
                        "Signature": "Chunks(in any, size int) [][]any",
                        "Source": "ewoJaWYgIXR5cGV1dGlsLklzQXJyYXkoaW4pIHsKCQlyZXR1cm4gbmlsCgl9Cgl2YXIgb3V0cHV0ID0gbWFrZShbXVtdYW55LCAwKQoJdmFyIGN1cnJlbnQgPSBtYWtlKFtdYW55LCAwKQoJRWFjaChpbiwgZnVuYyhpIGludCwgdiBhbnkpIGVycm9yIHsKCQlpZiBpID4gMCAmJiBpJXNpemUgPT0gMCB7CgkJCW91dHB1dCA9IGFwcGVuZChvdXRwdXQsIGN1cnJlbnQpCgkJCWN1cnJlbnQgPSBuaWwKCQl9CgkJY3VycmVudCA9IGFwcGVuZChjdXJyZW50LCB2KQoJCXJldHVybiBuaWwKCX0pCglpZiBsZW4oY3VycmVudCkgPiAwIHsKCQlvdXRwdXQgPSBhcHBlbmQob3V0cHV0LCBjdXJyZW50KQoJfQoJcmV0dXJuIG91dHB1dAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Compact",
                        "Comment": "Removes all elements from the given interface slice that are \"empty\", which is\ndefined as being nil, a nil or zero-length array, chan, map, slice, or string.\n\nThe zero values of any other type are not considered empty and will remain in\nthe return value.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Compact(in any) []any",
                        "Source": "ewoJaWYgaW4gPT0gbmlsIHsKCQlyZXR1cm4gbmlsCgl9Cgl2YXIgcnYgPSBtYWtlKFtdYW55LCAwKQoJZm9yIF8sIHYgOj0gcmFuZ2UgU2xpY2VpZnkoaW4pIHsKCQlpZiB2ICE9IG5pbCB7CgkJCXZhciB2ViA9IHJlZmxlY3QuVmFsdWVPZih2KQoJCQlzd2l0Y2ggdlYuS2luZCgpIHsKCQkJY2FzZSByZWZsZWN0LkFycmF5LCByZWZsZWN0LkNoYW4sIHJlZmxlY3QuTWFwLCByZWZsZWN0LlNsaWNlLCByZWZsZWN0LlN0cmluZzoKCQkJCWlmIHZWLkxlbigpID4gMCB7CgkJCQkJcnYgPSBhcHBlbmQocnYsIHYpCgkJCQl9CgkJCWRlZmF1bHQ6CgkJCQlydiA9IGFwcGVuZChydiwgdikKCQkJfQoJCX0KCX0KCXJldHVybiBydgp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "CompactString",
                        "Comment": "Removes all zero-length strings from the given string slice, returning a new\nslice with the values removed.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "[]string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "CompactString(in []string) []string",
                        "Source": "ewoJaWYgaW4gPT0gbmlsIHsKCQlyZXR1cm4gbmlsCgl9Cgl2YXIgcnYgPSBtYWtlKFtdc3RyaW5nLCAwKQoJZm9yIF8sIHYgOj0gcmFuZ2UgaW4gewoJCWlmIHYgIT0gYGAgewoJCQlydiA9IGFwcGVuZChydiwgdikKCQl9Cgl9CglyZXR1cm4gcnYKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Contains",
                        "Comment": "Return whether the given slice contains the given value.  If a comparator is provided, it will\nbe used to compare the elements.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "value",
                                "Type": "any"
                            },
                            {
                                "Name": "comparators",
                                "Type": "...CompareFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "Contains(in any, value any, comparators ...CompareFunc) bool",
                        "Source": "ewoJaWYgbGVuKGNvbXBhcmF0b3JzKSA9PSAwIHsKCQljb21wYXJhdG9ycyA9IFtdQ29tcGFyZUZ1bmN7U3RyaWN0RXF1YWxpdHlDb21wYXJlfQoJfQoJdmFyIGNvbXBhcmF0b3IgPSBjb21wYXJhdG9yc1swXQoJaWYgaW5WIDo9IHJlZmxlY3QuVmFsdWVPZihpbik7IGluVi5Jc1ZhbGlkKCkgewoJCWZvciBpIDo9IDA7IGkgPCBpblYuTGVuKCk7IGkrKyB7CgkJCWlmIGN1cnJlbnQgOj0gaW5WLkluZGV4KGkpOyBjdXJyZW50LklzVmFsaWQoKSB7CgkJCQlpZiBjb21wYXJhdG9yKGksIHZhbHVlLCBjdXJyZW50LkludGVyZmFjZSgpKSB7CgkJCQkJcmV0dXJuIHRydWUKCQkJCX0KCQkJfQoJCX0KCX0KCXJldHVybiBmYWxzZQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ContainsAllStrings",
                        "Comment": "Returns whether the given string slice contains all of the following strings.",
                        "Arguments": [
                            {
                                "Name": "list",
                                "Type": "[]string"
                            },
                            {
                                "Name": "elems",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "ContainsAllStrings(list []string, elems ...string) bool",
                        "Source": "ewoJZm9yIF8sIGUgOj0gcmFuZ2UgZWxlbXMgewoJCWlmICFDb250YWluc1N0cmluZyhsaXN0LCBlKSB7CgkJCXJldHVybiBmYWxzZQoJCX0KCX0KCXJldHVybiB0cnVlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ContainsAnyString",
                        "Comment": "Returns whether the given string slice contains any of the following strings.",
                        "Arguments": [
                            {
                                "Name": "list",
                                "Type": "[]string"
                            },
                            {
                                "Name": "elems",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "ContainsAnyString(list []string, elems ...string) bool",
                        "Source": "ewoJZm9yIF8sIGUgOj0gcmFuZ2UgZWxlbXMgewoJCWlmIENvbnRhaW5zU3RyaW5nKGxpc3QsIGUpIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ContainsString",
                        "Comment": "Returns whether the given string slice contains a given string.",
                        "Arguments": [
                            {
                                "Name": "list",
                                "Type": "[]string"
                            },
                            {
                                "Name": "elem",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "ContainsString(list []string, elem string) bool",
                        "Source": "ewoJZm9yIF8sIHQgOj0gcmFuZ2UgbGlzdCB7CgkJaWYgdCA9PSBlbGVtIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Difference",
                        "Comment": "Return the slice that results from removing elements in second from the first.",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "second",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Difference(first any, second any) []any",
                        "Source": "ewoJdmFyIGRpZmYgPSBtYWtlKG1hcFthbnldYm9vbCkKCXZhciBvdXQgPSBtYWtlKFtdYW55LCAwKQoJdmFyIGFTID0gU2xpY2VpZnkoZmlyc3QpCgl2YXIgYlMgPSBTbGljZWlmeShzZWNvbmQpCglpZiBsZW4oYVMpID09IDAgewoJCXJldHVybiBvdXQKCX0gZWxzZSBpZiBsZW4oYlMpID09IDAgewoJCXJldHVybiBhUwoJfQoJZm9yIF8sIGl0ZW0gOj0gcmFuZ2UgYlMgewoJCWRpZmZbaXRlbV0gPSB0cnVlCgl9Cglmb3IgXywgaXRlbSA6PSByYW5nZSBhUyB7CgkJaWYgXywgb2sgOj0gZGlmZltpdGVtXTsgIW9rIHsKCQkJb3V0ID0gYXBwZW5kKG91dCwgaXRlbSkKCQl9Cgl9CglyZXR1cm4gb3V0Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Each",
                        "Comment": "Iterate through each element of the given array or slice, calling\niterFn exactly once for each element.  Otherwise, call iterFn one time\nwith the given input as the argument.",
                        "Arguments": [
                            {
                                "Name": "slice",
                                "Type": "any"
                            },
                            {
                                "Name": "iterFn",
                                "Type": "IterationFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "Each(slice any, iterFn IterationFunc) error",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLlNsaWNlRWFjaChzbGljZSwgaXRlckZuKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "First",
                        "Comment": "Returns the first element from the given slice, array or string; or nil.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "First(in any) any",
                        "Source": "ewoJcmV0dXJuIEdldChpbiwgMCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "FirstNonZero",
                        "Comment": "Returns the first element in the given inputs that is not that type's zero value.  All input values\nare flattened into a single array, so variadic elements can contain scalar or array values.",
                        "Arguments": [
                            {
                                "Name": "inputs",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "FirstNonZero(inputs ...any) any",
                        "Source": "ewoJZm9yIF8sIHYgOj0gcmFuZ2UgRmxhdHRlbihpbnB1dHMpIHsKCQlpZiAhdHlwZXV0aWwuSXNaZXJvKHYpIHsKCQkJcmV0dXJuIHYKCQl9Cgl9CglyZXR1cm4gbmlsCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Flatten",
                        "Comment": "Returns the given slice as a single-level flattened array.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Flatten(in any) []any",
                        "Source": "ewoJdmFyIG91dCA9IG1ha2UoW11hbnksIDApCglFYWNoKGluLCBmdW5jKF8gaW50LCB2YWx1ZSBhbnkpIGVycm9yIHsKCQlpZiB0eXBldXRpbC5Jc0FycmF5KHZhbHVlKSB7CgkJCW91dCA9IGFwcGVuZChvdXQsIEZsYXR0ZW4odmFsdWUpLi4uKQoJCX0gZWxzZSB7CgkJCW91dCA9IGFwcGVuZChvdXQsIHZhbHVlKQoJCX0KCQlyZXR1cm4gbmlsCgl9KQoJcmV0dXJuIG91dAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Get",
                        "Comment": "Returns the nth element from the given slice, array or string; or nil.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "index",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "Get(in any, index int) any",
                        "Source": "ewoJaWYgdiwgb2sgOj0gQXQoaW4sIGluZGV4KTsgb2sgewoJCXJldHVybiB2Cgl9IGVsc2UgewoJCXJldHVybiBuaWwKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Intersect",
                        "Comment": "Return the intersection of two slices.",
                        "Arguments": [
                            {
                                "Name": "a",
                                "Type": "any"
                            },
                            {
                                "Name": "b",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Intersect(a any, b any) []any",
                        "Source": "ewoJcmV0dXJuIFNsaWNlaWZ5KGludGVyc2VjdC5TaW1wbGUoYSwgYikpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IntersectStrings",
                        "Comment": "Return the intersection of two string slices.",
                        "Arguments": [
                            {
                                "Name": "a",
                                "Type": "[]string"
                            },
                            {
                                "Name": "b",
                                "Type": "[]string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "IntersectStrings(a []string, b []string) []string",
                        "Source": "ewoJaWYgbGVuKGEpID09IDAgfHwgbGVuKGIpID09IDAgewoJCXJldHVybiBtYWtlKFtdc3RyaW5nLCAwKQoJfQoJcmV0dXJuIFN0cmluZ2lmeShpbnRlcnNlY3QuU2ltcGxlKGEsIGIpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Last",
                        "Comment": "Returns the last element from the given slice, array or string; or nil.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "Last(in any) any",
                        "Source": "ewoJaWYgTGVuKGluKSA9PSAwIHsKCQlyZXR1cm4gbmlsCgl9CglyZXR1cm4gR2V0KGluLCBMZW4oaW4pLTEpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Len",
                        "Comment": "Returns the length of the given slice, array, or string.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int"
                            }
                        ],
                        "Signature": "Len(in any) int",
                        "Source": "ewoJaW4gPSB0eXBldXRpbC5SZXNvbHZlVmFsdWUoaW4pCglpZiB0eXBldXRpbC5Jc0tpbmQoaW4sIHJlZmxlY3QuQXJyYXksIHJlZmxlY3QuU2xpY2UsIHJlZmxlY3QuU3RyaW5nKSB7CgkJdmFyIGluViA9IHJlZmxlY3QuVmFsdWVPZihpbikKCQlyZXR1cm4gaW5WLkxlbigpCgl9CglyZXR1cm4gMAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Map",
                        "Comment": "Returns a copy of the given slice with each element modified by the a given function.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "fn",
                                "Type": "MapFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Map(in any, fn MapFunc) []any",
                        "Source": "ewoJdmFyIG91dCBbXWFueQoJRWFjaChpbiwgZnVuYyhpIGludCwgdiBhbnkpIGVycm9yIHsKCQlvdXQgPSBhcHBlbmQob3V0LCBmbihpLCB2KSkKCQlyZXR1cm4gbmlsCgl9KQoJcmV0dXJuIG91dAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MapString",
                        "Comment": "Returns a copy of the given slice with each element modified by the a given function, then\nconverted to a string.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "fn",
                                "Type": "MapStringFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "MapString(in any, fn MapStringFunc) []string",
                        "Source": "ewoJdmFyIG91dCA9IFN0cmluZ2lmeShpbikKCWZvciBpLCBlbCA6PSByYW5nZSBvdXQgewoJCW91dFtpXSA9IGZuKGksIGVsKQoJfQoJcmV0dXJuIG91dAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Or",
                        "Comment": "Returns the first item that is not the zero value for that value's type.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "Or(in ...any) any",
                        "Source": "ewoJZm9yIF8sIHYgOj0gcmFuZ2UgQ29tcGFjdChpbikgewoJCWlmIHYgIT0gcmVmbGVjdC5aZXJvKHJlZmxlY3QuVHlwZU9mKHYpKS5JbnRlcmZhY2UoKSB7CgkJCXJldHVybiB2CgkJfQoJfQoJcmV0dXJuIG5pbAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "OrString",
                        "Comment": "Returns the first item that is not a zero-length string.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "OrString(in ...string) string",
                        "Source": "ewoJaWYgdiA6PSBDb21wYWN0U3RyaW5nKGluKTsgbGVuKHYpID4gMCB7CgkJcmV0dXJuIHZbMF0KCX0gZWxzZSB7CgkJcmV0dXJuIGBgCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Rest",
                        "Comment": "Returns the all but the first element from the given slice, array or string; or nil.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Rest(in any) []any",
                        "Source": "ewoJaWYgdHlwZXV0aWwuSXNLaW5kKGluLCByZWZsZWN0LkFycmF5LCByZWZsZWN0LlNsaWNlLCByZWZsZWN0LlN0cmluZykgewoJCXZhciBpblYgPSByZWZsZWN0LlZhbHVlT2YoaW4pCgkJdmFyIGwgPSBpblYuTGVuKCkKCQlzd2l0Y2ggbCB7CgkJY2FzZSAwLCAxOgoJCQlyZXR1cm4gbmlsCgkJZGVmYXVsdDoKCQkJdmFyIG91dCA9IG1ha2UoW11hbnksIGwtMSkKCQkJZm9yIGkgOj0gMTsgaSA8IGw7IGkrKyB7CgkJCQl2YXIgZWxlbVYgPSBpblYuSW5kZXgoaSkKCQkJCWlmIGVsZW1WLkNhbkludGVyZmFjZSgpIHsKCQkJCQlvdXRbaS0xXSA9IGVsZW1WLkludGVyZmFjZSgpCgkJCQl9CgkJCX0KCQkJcmV0dXJuIG91dAoJCX0KCX0KCXJldHVybiBuaWwKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Slice",
                        "Comment": "Returns a new slice with only the specified subset of items included.  In addition to the\nnormal slice index rules in Golang, negative indices are also supported.  If a negative index is\ngiven for the from and/or to values, the index will be treated as being relative to the end of the\ngiven slice. For example:\n\n\tSlice([]any{1,2,3,4,5}, -5, -1)  // returns []any{1, 2, 3, 4, 5}\n\tSlice([]any{1,2,3,4,5}, -2, -1)  // returns []any{4, 5}\n\tSlice([]any{1,2,3,4,5}, -1, -1)  // returns []any{5}\n\tSlice([]any{1,2,3,4,5}, -4, -2)  // returns []any{2, 3, 4}",
                        "Arguments": [
                            {
                                "Name": "slice",
                                "Type": "any"
                            },
                            {
                                "Name": "from",
                                "Type": "int"
                            },
                            {
                                "Name": "to",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Slice(slice any, from int, to int) []any",
                        "Source": "ewoJdmFyIHNsaWNlUyA9IFNsaWNlaWZ5KHNsaWNlKQoJaWYgZnJvbSA8IDAgewoJCWZyb20gPSBsZW4oc2xpY2VTKSArIGZyb20KCX0KCWlmIGZyb20gPiBsZW4oc2xpY2VTKSB7CgkJcmV0dXJuIG1ha2UoW11hbnksIDApCgl9IGVsc2UgaWYgZnJvbSA8IDAgewoJCWZyb20gPSAwCgl9CglpZiB0byA+IGxlbihzbGljZVMpIHsKCQl0byA9IGxlbihzbGljZVMpCgl9IGVsc2UgaWYgdG8gPCAwIHsKCQl0byA9IGxlbihzbGljZVMpICsgdG8gKyAxCgl9CglpZiAoZnJvbSA+PSAwICYmIGZyb20gPCBsZW4oc2xpY2VTKSkgJiYgKHRvID49IGZyb20gJiYgdG8gPD0gbGVuKHNsaWNlUykpIHsKCQlyZXR1cm4gc2xpY2VTW2Zyb206dG9dCgl9IGVsc2UgewoJCXJldHVybiBtYWtlKFtdYW55LCAwKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Sliceify",
                        "Comment": "Takes some input value and returns it as a slice.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Sliceify(in any) []any",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLlNsaWNlaWZ5KGluKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitCompact",
                        "Comment": "Splits the given string by a delimiter, then eliminates any zero-length items.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Name": "out",
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "SplitCompact(in string, delimiter string) out []string",
                        "Source": "ewoJb3V0ID0gc3RyaW5ncy5TcGxpdChpbiwgZGVsaW1pdGVyKQoJb3V0ID0gQ29tcGFjdFN0cmluZyhvdXQpCglyZXR1cm4KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitTrimSpaceCompact",
                        "Comment": "Splits the given string by a delimiter, trims the space around each item,\nthen eliminates any zero-length results.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Name": "out",
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "SplitTrimSpaceCompact(in string, delimiter string) out []string",
                        "Source": "ewoJb3V0ID0gc3RyaW5ncy5TcGxpdChpbiwgZGVsaW1pdGVyKQoJZm9yIGksIHYgOj0gcmFuZ2Ugb3V0IHsKCQlvdXRbaV0gPSBzdHJpbmdzLlRyaW1TcGFjZSh2KQoJfQoJb3V0ID0gQ29tcGFjdFN0cmluZyhvdXQpCglyZXR1cm4KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "StringSlice",
                        "Comment": "Same as slice, but returns strings.",
                        "Arguments": [
                            {
                                "Name": "slice",
                                "Type": "any"
                            },
                            {
                                "Name": "from",
                                "Type": "int"
                            },
                            {
                                "Name": "to",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "StringSlice(slice any, from int, to int) []string",
                        "Source": "ewoJcmV0dXJuIFN0cmluZ2lmeShTbGljZShzbGljZSwgZnJvbSwgdG8pKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Stringify",
                        "Comment": "Converts all elements of the given interface slice to strings using the \"%v\"\nformat string via the fmt package.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "Stringify(in any) []string",
                        "Source": "ewoJaWYgYXJyIDo9IFNsaWNlaWZ5KGluKTsgbGVuKGFycikgPiAwIHsKCQl2YXIgb3V0ID0gbWFrZShbXXN0cmluZywgbGVuKGFycikpCgkJZm9yIGksIGl0ZW0gOj0gcmFuZ2UgYXJyIHsKCQkJb3V0W2ldID0gdHlwZXV0aWwuU3RyaW5nKGl0ZW0pCgkJfQoJCXJldHVybiBvdXQKCX0gZWxzZSB7CgkJcmV0dXJuIG5pbAoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TrimSpace",
                        "Comment": "Trims the whitespace from each element in the given array.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "TrimSpace(in any) []string",
                        "Source": "ewoJcmV0dXJuIE1hcFN0cmluZyhpbiwgZnVuYyhfIGludCwgZWwgc3RyaW5nKSBzdHJpbmcgewoJCXJldHVybiBzdHJpbmdzLlRyaW1TcGFjZShlbCkKCX0pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Unique",
                        "Comment": "Returns a new slice with only unique elements from the given interface included.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Unique(in any) []any",
                        "Source": "ewoJcmV0dXJuIHVuaXF1ZShpbiwgU3RyaWN0RXF1YWxpdHlDb21wYXJlKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "UniqueStrings",
                        "Comment": "Returns a new slice with only unique string elements from the given interface included.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "UniqueStrings(in any) []string",
                        "Source": "ewoJcmV0dXJuIFN0cmluZ2lmeShVbmlxdWUoaW4pKQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestAt",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestAt(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55Cgl2YXIgb3V0IGFueQoJdmFyIG9rIGJvb2wKCWlucHV0ID0gW11pbnR7MSwgMywgNX0KCW91dCwgb2sgPSBBdChpbnB1dCwgMCkKCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKDEsIG91dCkKCW91dCwgb2sgPSBBdChpbnB1dCwgMSkKCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKDMsIG91dCkKCW91dCwgb2sgPSBBdChpbnB1dCwgMikKCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKDUsIG91dCkKCW91dCwgb2sgPSBBdChpbnB1dCwgOTk5OTkpCglhc3NlcnQuRmFsc2Uob2spCglhc3NlcnQuTmlsKG91dCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestChunks",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestChunks(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBbXWludHsxLCAzLCA1LCA3LCA5LCAxMSwgMTMsIDE1LCAxNywgMTksIDIxLCAyM30KCWFzc2VydC5FcXVhbChbXVtdYW55e1tdYW55ezF9LCBbXWFueXszfSwgW11hbnl7NX0sIFtdYW55ezd9LCBbXWFueXs5fSwgW11hbnl7MTF9LCBbXWFueXsxM30sIFtdYW55ezE1fSwgW11hbnl7MTd9LCBbXWFueXsxOX0sIFtdYW55ezIxfSwgW11hbnl7MjN9fSwgQ2h1bmtzKGlucHV0LCAxKSkKCWFzc2VydC5FcXVhbChbXVtdYW55e1tdYW55ezEsIDN9LCBbXWFueXs1LCA3fSwgW11hbnl7OSwgMTF9LCBbXWFueXsxMywgMTV9LCBbXWFueXsxNywgMTl9LCBbXWFueXsyMSwgMjN9fSwgQ2h1bmtzKGlucHV0LCAyKSkKCWFzc2VydC5FcXVhbChbXVtdYW55e1tdYW55ezEsIDMsIDV9LCBbXWFueXs3LCA5LCAxMX0sIFtdYW55ezEzLCAxNSwgMTd9LCBbXWFueXsxOSwgMjEsIDIzfX0sIENodW5rcyhpbnB1dCwgMykpCglhc3NlcnQuRXF1YWwoW11bXWFueXtbXWFueXsxLCAzLCA1LCA3LCA5LCAxMSwgMTMsIDE1LCAxNywgMTksIDIxLCAyM319LCBDaHVua3MoaW5wdXQsIDEwMDApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestCompact",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCompact(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKENvbXBhY3QobmlsKSkKCWFzc2VydC5FcXVhbChbXWFueXswLCAxLCAyLCAzfSwgQ29tcGFjdChbXWFueXswLCAxLCAyLCAzfSkpCglhc3NlcnQuRXF1YWwoW11hbnl7MSwgMywgNX0sIENvbXBhY3QoW11hbnl7bmlsLCAxLCBuaWwsIDMsIG5pbCwgNX0pKQoJYXNzZXJ0LkVxdWFsKFtdYW55e2BvbmVgLCBgdGhyZWVgLCBgIGAsIGBmaXZlYH0sIENvbXBhY3QoW11hbnl7YG9uZWAsIGBgLCBgdGhyZWVgLCBgYCwgYCBgLCBgZml2ZWB9KSkKCWFzc2VydC5FcXVhbChbXWFueXtbXWludHsxLCAyLCAzfX0sIENvbXBhY3QoW11hbnl7bmlsLCBbXXN0cmluZ3t9LCBbXWludHsxLCAyLCAzfSwgbWFwW3N0cmluZ11ib29se319KSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestCompactString",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCompactString(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKENvbXBhY3RTdHJpbmcobmlsKSkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgb25lYCwgYHRocmVlYCwgYGZpdmVgfSwgQ29tcGFjdFN0cmluZyhbXXN0cmluZ3tgb25lYCwgYHRocmVlYCwgYGZpdmVgfSkpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YG9uZWAsIGB0aHJlZWAsIGAgYCwgYGZpdmVgfSwgQ29tcGFjdFN0cmluZyhbXXN0cmluZ3tgb25lYCwgYGAsIGB0aHJlZWAsIGBgLCBgIGAsIGBmaXZlYH0pKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestContains",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestContains(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55CglpbnB1dCA9IFtdaW50ezEsIDMsIDV9Cglhc3NlcnQuVHJ1ZShDb250YWlucyhpbnB1dCwgMSkpCglhc3NlcnQuVHJ1ZShDb250YWlucyhpbnB1dCwgMykpCglhc3NlcnQuVHJ1ZShDb250YWlucyhpbnB1dCwgNSkpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoaW5wdXQsIC0xKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhpbnB1dCwgMikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoaW5wdXQsIC0zKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhpbnB1dCwgNCkpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoaW5wdXQsIC01KSkKCWFzc2VydC5GYWxzZShDb250YWlucyhbXWludHt9LCAxKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhbXWludHt9LCAyKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhbXWludHt9LCAwKSkKCWlucHV0ID0gW11zdHJpbmd7Im9uZSIsICJ0aHJlZSIsICJmaXZlIn0KCWFzc2VydC5UcnVlKENvbnRhaW5zKGlucHV0LCAib25lIikpCglhc3NlcnQuVHJ1ZShDb250YWlucyhpbnB1dCwgInRocmVlIikpCglhc3NlcnQuVHJ1ZShDb250YWlucyhpbnB1dCwgImZpdmUiKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhpbnB1dCwgIk9uZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKGlucHV0LCAidHdvIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoaW5wdXQsICJUaHJlZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKGlucHV0LCAiZm91ciIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKGlucHV0LCAiRml2ZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKFtdc3RyaW5ne30sICJvbmUiKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhbXXN0cmluZ3t9LCAidHdvIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoW11zdHJpbmd7fSwgIiIpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestContainsAllStrings",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestContainsAllStrings(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBbXXN0cmluZ3sib25lIiwgInRocmVlIiwgImZpdmUifQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0LCAib25lIikpCglhc3NlcnQuVHJ1ZShDb250YWluc0FsbFN0cmluZ3MoaW5wdXQsICJ0aHJlZSIpKQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0LCAiZml2ZSIpKQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0LCAib25lIiwgInRocmVlIikpCglhc3NlcnQuVHJ1ZShDb250YWluc0FsbFN0cmluZ3MoaW5wdXQsICJvbmUiLCAiZml2ZSIpKQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0LCAib25lIiwgInRocmVlIiwgImZpdmUiKSkKCWFzc2VydC5GYWxzZShDb250YWluc0FsbFN0cmluZ3MoaW5wdXQsICJvbmUiLCAiZm91ciIpKQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0KSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestContainsAnyString",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestContainsAnyString(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBbXXN0cmluZ3sib25lIiwgInRocmVlIiwgImZpdmUifQoJdmFyIGFueSA9IFtdc3RyaW5neyJvbmUiLCAidHdvIiwgImZvdXIifQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbnlTdHJpbmcoaW5wdXQsIGFueS4uLikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNBbnlTdHJpbmcoaW5wdXQpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zQW55U3RyaW5nKFtdc3RyaW5ne30sICJvbmUiKSkKCWFzc2VydC5GYWxzZShDb250YWluc0FueVN0cmluZyhbXXN0cmluZ3t9LCAidHdvIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNBbnlTdHJpbmcoW11zdHJpbmd7fSwgIiIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zQW55U3RyaW5nKGlucHV0LCBbXXN0cmluZ3sic2l4IiwgInNldmVuIn0uLi4pKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestContainsString",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestContainsString(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBbXXN0cmluZ3sib25lIiwgInRocmVlIiwgImZpdmUifQoJYXNzZXJ0LlRydWUoQ29udGFpbnNTdHJpbmcoaW5wdXQsICJvbmUiKSkKCWFzc2VydC5UcnVlKENvbnRhaW5zU3RyaW5nKGlucHV0LCAidGhyZWUiKSkKCWFzc2VydC5UcnVlKENvbnRhaW5zU3RyaW5nKGlucHV0LCAiZml2ZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zU3RyaW5nKGlucHV0LCAiT25lIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNTdHJpbmcoaW5wdXQsICJ0d28iKSkKCWFzc2VydC5GYWxzZShDb250YWluc1N0cmluZyhpbnB1dCwgIlRocmVlIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNTdHJpbmcoaW5wdXQsICJmb3VyIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNTdHJpbmcoaW5wdXQsICJGaXZlIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNTdHJpbmcoW11zdHJpbmd7fSwgIm9uZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zU3RyaW5nKFtdc3RyaW5ne30sICJ0d28iKSkKCWFzc2VydC5GYWxzZShDb250YWluc1N0cmluZyhbXXN0cmluZ3t9LCAiIikpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDifference",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDifference(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRW1wdHkoRGlmZmVyZW5jZShuaWwsIG5pbCkpCglhc3NlcnQuRW1wdHkoRGlmZmVyZW5jZShuaWwsIFtdc3RyaW5ne2BhYCwgYGNgLCBgZWB9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBEaWZmZXJlbmNlKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBuaWwpKQoJYXNzZXJ0LkVsZW1lbnRzTWF0Y2goW11hbnl7YGFgfSwgRGlmZmVyZW5jZShbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgW11zdHJpbmd7YGJgLCBgY2B9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBEaWZmZXJlbmNlKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBbXXN0cmluZ3tgeGAsIGB5YCwgYHpgfSkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestEach",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestEach(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIHRlc3RTdHJ1Y3Qgc3RydWN0IHsKCQlOYW1lICBzdHJpbmcKCQlIZWxsbyBib29sCgkJdW5leCAgc3RyaW5nCgl9Cglhc3NlcnQuTmlsKEVhY2gobmlsLCBuaWwpKQoJYXNzZXJ0Lk5pbChFYWNoKFtdc3RyaW5ne2BvbmVgLCBgdHdvYCwgYHRocmVlYH0sIGZ1bmMoaSBpbnQsIHYgYW55KSBlcnJvciB7CgkJcmV0dXJuIFN0b3AKCX0pKQoJdmFyIGNvdW50ID0gMAoJYXNzZXJ0Lk5pbChFYWNoKFtdc3RyaW5ne2BvbmVgLCBgdHdvYCwgYHRocmVlYH0sIGZ1bmMoaSBpbnQsIHYgYW55KSBlcnJvciB7CgkJaWYgdi4oc3RyaW5nKSA9PSBgdHdvYCB7CgkJCXJldHVybiBTdG9wCgkJfSBlbHNlIHsKCQkJY291bnQgKz0gMQoJCQlyZXR1cm4gbmlsCgkJfQoJfSkpCgl2YXIgdmFsdWVzID0gW11hbnl7fQoJYXNzZXJ0Lk5pbChFYWNoKG1hcFtzdHJpbmddc3RyaW5ne2BvbmVgOiBgZmlyc3RgLCBgdHdvYDogYHNlY29uZGAsIGB0aHJlZWA6IGB0aGlyZGB9LCBmdW5jKGkgaW50LCB2IGFueSkgZXJyb3IgewoJCXZhbHVlcyA9IGFwcGVuZCh2YWx1ZXMsIHYpCgkJcmV0dXJuIG5pbAoJfSkpCgl2YWx1ZXMgPSBbXWFueXt9Cglhc3NlcnQuTmlsKEVhY2goJnRlc3RTdHJ1Y3R7TmFtZTogYHRlc3RgLCBIZWxsbzogdHJ1ZSwgdW5leDogYHNob3VsZCBub3Qgc2VlIG1lYH0sIGZ1bmMoaSBpbnQsIHYgYW55KSBlcnJvciB7CgkJdmFsdWVzID0gYXBwZW5kKHZhbHVlcywgdikKCQlyZXR1cm4gbmlsCgl9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKFtdYW55e2B0ZXN0YCwgdHJ1ZX0sIHZhbHVlcykKCXZhciB2YWxjaGFuID0gbWFrZShjaGFuIHN0cmluZykKCWdvIGZ1bmMoKSB7CgkJZGVmZXIgY2xvc2UodmFsY2hhbikKCQlmb3IgaSA6PSAwOyBpIDwgMzsgaSsrIHsKCQkJdmFsY2hhbiA8LSBmbXQuU3ByaW50ZigidmFsdWUlZCIsIGkpCgkJfQoJfSgpCgl2YXIgdmFsdWVzUyA9IG1ha2UoWyAvLyB0ZXN0IEVhY2gtaW5nIG92ZXIgYSBjaGFubmVsCgldc3RyaW5nLCAwKQoJYXNzZXJ0Lk5pbChFYWNoKHZhbGNoYW4sIGZ1bmMoaSBpbnQsIHYgYW55KSBlcnJvciB7CgkJdmFsdWVzUyA9IGFwcGVuZCh2YWx1ZXNTLCBmbXQuU3ByaW50ZigiJXYiLCB2KSkKCQlyZXR1cm4gbmlsCgl9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKFtdc3RyaW5ne2B2YWx1ZTBgLCBgdmFsdWUxYCwgYHZhbHVlMmB9LCB2YWx1ZXNTKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestFirst",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestFirst(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55Cglhc3NlcnQuTmlsKEZpcnN0KG5pbCkpCglhc3NlcnQuTmlsKEZpcnN0KGlucHV0KSkKCWlucHV0ID0gW11pbnR7fQoJYXNzZXJ0Lk5pbChGaXJzdChpbnB1dCkpCglpbnB1dCA9IFtdaW50ezEsIDMsIDV9Cglhc3NlcnQuRXF1YWwoMSwgRmlyc3QoaW5wdXQpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestFirstNonZero",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestFirstNonZero(t *testing.T)",
                        "Source": "ewoJYXNzZXJ0Lk5pbCh0LCBGaXJzdE5vblplcm8oKSkKCWFzc2VydC5FcXVhbCh0LCA0MiwgRmlyc3ROb25aZXJvKDQyKSkKCWFzc2VydC5FcXVhbCh0LCA0MiwgRmlyc3ROb25aZXJvKGBgLCAwLCBmYWxzZSwgNDIsIGZhbHNlLCB0cnVlLCA5NikpCglhc3NlcnQuRXF1YWwodCwgOCwgRmlyc3ROb25aZXJvKFtdaW50ezAsIDAsIDB9LCA4LCBbXWludHs2OX0pKQoJYXNzZXJ0LkVxdWFsKHQsIDg0LCBGaXJzdE5vblplcm8oW11pbnR7MCwgMCwgMH0sIDAsIFtdaW50ezg0fSkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestFlatten",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestFlatten(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11hbnl7YG9uZWAsIGB0d29gLCBgdGhyZWVgfSwgRmxhdHRlbihbXXN0cmluZ3tgb25lYCwgYHR3b2AsIGB0aHJlZWB9KSkKCWFzc2VydC5FcXVhbChbXWFueXtgb25lYCwgYHR3b2AsIGB0aHJlZWB9LCBGbGF0dGVuKFtdYW55e1tdc3RyaW5ne2BvbmVgLCBgdHdvYH0sIGB0aHJlZWB9KSkKCWFzc2VydC5FcXVhbChbXWFueXtgb25lYCwgYHR3b2AsIGB0aHJlZWB9LCBGbGF0dGVuKFtdYW55e1tdc3RyaW5ne2BvbmVgfSwgW11zdHJpbmd7YHR3b2B9LCBbXXN0cmluZ3tgdGhyZWVgfX0pKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestGet",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestGet(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55CglpbnB1dCA9IFtdaW50ezEsIDMsIDV9Cglhc3NlcnQuRXF1YWwoMSwgR2V0KGlucHV0LCAwKSkKCWFzc2VydC5FcXVhbCgzLCBHZXQoaW5wdXQsIDEpKQoJYXNzZXJ0LkVxdWFsKDUsIEdldChpbnB1dCwgMikpCglhc3NlcnQuTmlsKEdldChpbnB1dCwgOTk5OTkpKQoJYXNzZXJ0Lk5pbChHZXQobmlsLCAwKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIntersect",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIntersect(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRW1wdHkoSW50ZXJzZWN0U3RyaW5ncyhuaWwsIG5pbCkpCglhc3NlcnQuRW1wdHkoSW50ZXJzZWN0U3RyaW5ncyhbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgbmlsKSkKCWFzc2VydC5FbXB0eShJbnRlcnNlY3RTdHJpbmdzKG5pbCwgW11zdHJpbmd7YGFgLCBgY2AsIGBlYH0pKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BhYCwgYGNgfSwgSW50ZXJzZWN0U3RyaW5ncyhbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgW11zdHJpbmd7YGFgLCBgY2AsIGBlYH0pKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestLast",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestLast(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55Cglhc3NlcnQuTmlsKExhc3QobmlsKSkKCWFzc2VydC5OaWwoTGFzdChpbnB1dCkpCglpbnB1dCA9IFtdaW50e30KCWFzc2VydC5OaWwoTGFzdChpbnB1dCkpCglpbnB1dCA9IFtdaW50ezEsIDMsIDV9Cglhc3NlcnQuRXF1YWwoNSwgTGFzdChpbnB1dCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestLen",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestLen(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55Cglhc3NlcnQuWmVybyhMZW4obmlsKSkKCWFzc2VydC5aZXJvKExlbihpbnB1dCkpCglpbnB1dCA9IFtdaW50ezEsIDMsIDV9Cglhc3NlcnQuRXF1YWwoMywgTGVuKGlucHV0KSkKCWFzc2VydC5FcXVhbCgzLCBMZW4oYDEyM2ApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMap",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMap(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11hbnl7MTAsIDIwLCAzMH0sIE1hcChbXWludHsxLCAyLCAzfSwgZnVuYyhfIGludCwgdiBhbnkpIGFueSB7CgkJcmV0dXJuIHYuKGludCkgKiAxMAoJfSkpCglhc3NlcnQuRXF1YWwoW11hbnl7dHJ1ZSwgZmFsc2UsIHRydWV9LCBNYXAoW11ib29se2ZhbHNlLCB0cnVlLCBmYWxzZX0sIGZ1bmMoXyBpbnQsIHYgYW55KSBhbnkgewoJCXJldHVybiAhdi4oYm9vbCkKCX0pKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestMapString",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestMapString(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YDEtMXRob3VzYW5kYCwgYDItMXRob3VzYW5kYCwgYDMtMXRob3VzYW5kYH0sIE1hcFN0cmluZyhbXWludHsxLCAyLCAzfSwgZnVuYyhfIGludCwgdiBzdHJpbmcpIHN0cmluZyB7CgkJcmV0dXJuIHYgKyBgLTF0aG91c2FuZGAKCX0pKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BmaXJzdGAsIGB0aGlyZGAsIGBmaWZ0aGB9LCBDb21wYWN0U3RyaW5nKE1hcFN0cmluZyhbXXN0cmluZ3tgZmlyc3RgLCBgc2Vjb25kYCwgYHRoaXJkYCwgYGZvdXJ0aGAsIGBmaWZ0aGB9LCBmdW5jKF8gaW50LCB2IHN0cmluZykgc3RyaW5nIHsKCQlzd2l0Y2ggdiB7CgkJY2FzZSBgc2Vjb25kYCwgYGZvdXJ0aGA6CgkJCXJldHVybiBgYAoJCWRlZmF1bHQ6CgkJCXJldHVybiB2CgkJfQoJfSkpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestOr",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestOr(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKE9yKCkpCglhc3NlcnQuTmlsKE9yKG5pbCkpCglhc3NlcnQuRXF1YWwoMSwgT3IoMCwgMSwgMCwgMiwgMCwgMywgNCwgNSwgNikpCglhc3NlcnQuRXF1YWwodHJ1ZSwgT3IoZmFsc2UsIGZhbHNlLCB0cnVlKSkKCWFzc2VydC5FcXVhbChgb25lYCwgT3IoYG9uZWApKQoJYXNzZXJ0LkVxdWFsKDQuMCwgT3IobmlsLCBgYCwgZmFsc2UsIDAsIDQuMCkpCglhc3NlcnQuTmlsKE9yKGZhbHNlLCBmYWxzZSwgZmFsc2UpKQoJYXNzZXJ0Lk5pbChPcigwLCAwLCAwKSkKCWFzc2VydC5FcXVhbChgdGhyZWVgLCBPcihgYCwgYGAsIGB0aHJlZWApKQoJdHlwZSB0ZXN0U3RydWN0IHN0cnVjdHsgbmFtZSBzdHJpbmcgfQoJYXNzZXJ0LkVxdWFsKHRlc3RTdHJ1Y3R7YHRocmVlYH0sIE9yKHRlc3RTdHJ1Y3R7fSwgdGVzdFN0cnVjdHt9LCB0ZXN0U3RydWN0e2B0aHJlZWB9KSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestOrString",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestOrString(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGAsIE9yU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYGAsIE9yU3RyaW5nKGBgKSkKCWFzc2VydC5FcXVhbChgb25lYCwgT3JTdHJpbmcoYG9uZWApKQoJYXNzZXJ0LkVxdWFsKGB0d29gLCBPclN0cmluZyhgYCwgYHR3b2AsIGBgLCBgdGhyZWVgKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestRest",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestRest(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55Cglhc3NlcnQuTmlsKFJlc3QobmlsKSkKCWFzc2VydC5OaWwoUmVzdChpbnB1dCkpCglpbnB1dCA9IFtdaW50ezF9Cglhc3NlcnQuTmlsKFJlc3QoaW5wdXQpKQoJaW5wdXQgPSBbXWludHsxLCAzLCA1fQoJYXNzZXJ0LkVxdWFsKFtdYW55ezMsIDV9LCBSZXN0KGlucHV0KSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSlice",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSlice(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW4gPSBbXWFueXsxLCAyLCAzLCA0LCA1fQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55e30sIFNsaWNlKGluLCA5OSwgLTEpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55ezF9LCBTbGljZShpbiwgMCwgMSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MSwgMn0sIFNsaWNlKGluLCAwLCAyKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXsxLCAyLCAzLCA0fSwgU2xpY2UoaW4sIDAsIDQpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55ezMsIDR9LCBTbGljZShpbiwgMiwgNCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MywgNH0sIFNsaWNlKGluLCAyLCA0KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXs0LCA1fSwgU2xpY2UoaW4sIC0yLCAtMSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MSwgMiwgMywgNCwgNX0sIFNsaWNlKGluLCAtNSwgLTEpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55ezIsIDMsIDR9LCBTbGljZShpbiwgLTQsIC0yKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXt9LCBTbGljZShpbiwgLTYsIC02KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXsxfSwgU2xpY2UoaW4sIC01LCAtNSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7Mn0sIFNsaWNlKGluLCAtNCwgLTQpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55ezN9LCBTbGljZShpbiwgLTMsIC0zKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXs0fSwgU2xpY2UoaW4sIC0yLCAtMikpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7NX0sIFNsaWNlKGluLCAtMSwgLTEpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55ezF9LCBTbGljZShpbiwgMCwgMSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7Mn0sIFNsaWNlKGluLCAxLCAyKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXszfSwgU2xpY2UoaW4sIDIsIDMpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55ezR9LCBTbGljZShpbiwgMywgNCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7NX0sIFNsaWNlKGluLCA0LCA1KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXt9LCBTbGljZShpbiwgNSwgNikpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MSwgMiwgMywgNCwgNX0sIFNsaWNlKGluLCAtMTAwLCAtMSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MSwgMiwgMywgNH0sIFNsaWNlKGluLCAtMTAwLCAtMikpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MSwgMiwgM30sIFNsaWNlKGluLCAtMTAwLCAtMykpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MSwgMn0sIFNsaWNlKGluLCAtMTAwLCAtNCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MX0sIFNsaWNlKGluLCAtMTAwLCAtNSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7fSwgU2xpY2UoaW4sIC0xMDAsIC02KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXsyLCAzLCA0LCA1fSwgU2xpY2UoaW4sIDEsIC0xKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXsyLCAzLCA0fSwgU2xpY2UoaW4sIDEsIC0yKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXsyLCAzfSwgU2xpY2UoaW4sIDEsIC0zKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXsyfSwgU2xpY2UoaW4sIDEsIC00KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXt9LCBTbGljZShpbiwgMSwgLTUpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55e30sIFNsaWNlKGluLCAxLCAtNikpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSplitCompact",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSplitCompact(t *testing.T)",
                        "Source": "ewoJYXNzZXJ0LkVxdWFsKHQsIFtdc3RyaW5ne30sIFNwbGl0Q29tcGFjdChgYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgIGB9LCBTcGxpdENvbXBhY3QoYCBgLCBgLGApKQoJYXNzZXJ0LkVxdWFsKHQsIFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBTcGxpdENvbXBhY3QoYGEsYixjYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgIGEgYCwgYCAgYiAgYCwgYCAgIGMgICBgfSwgU3BsaXRDb21wYWN0KGAgYSAsICBiICAsICAgYyAgIGAsIGAsYCkpCglhc3NlcnQuRXF1YWwodCwgW11zdHJpbmd7YGFgLCBgYmAsIGBjYH0sIFNwbGl0Q29tcGFjdChgYSwsYixjYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgU3BsaXRDb21wYWN0KGBhLCxiLGMsYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgU3BsaXRDb21wYWN0KGAsLCxhLCwsYiwsLCwsYywsLGAsIGAsYCkpCglhc3NlcnQuRXF1YWwodCwgW11zdHJpbmd7YGFgLCBgYmAsIGBjYH0sIFNwbGl0Q29tcGFjdChgYSwsLGIsLCwsLGNgLCBgLGApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSplitTrimSpaceCompact",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSplitTrimSpaceCompact(t *testing.T)",
                        "Source": "ewoJYXNzZXJ0LkVxdWFsKHQsIFtdc3RyaW5ne30sIFNwbGl0VHJpbVNwYWNlQ29tcGFjdChgYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3t9LCBTcGxpdFRyaW1TcGFjZUNvbXBhY3QoYCBgLCBgLGApKQoJYXNzZXJ0LkVxdWFsKHQsIFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBTcGxpdFRyaW1TcGFjZUNvbXBhY3QoYGEsYixjYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgU3BsaXRUcmltU3BhY2VDb21wYWN0KGAgYSAsICBiICAsICAgYyAgIGAsIGAsYCkpCglhc3NlcnQuRXF1YWwodCwgW11zdHJpbmd7YGFgLCBgYmAsIGBjYH0sIFNwbGl0VHJpbVNwYWNlQ29tcGFjdChgYSwsYixjYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgU3BsaXRUcmltU3BhY2VDb21wYWN0KGBhLCxiLGMsYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgU3BsaXRUcmltU3BhY2VDb21wYWN0KGAsLCxhLCwsYiwsLCwsYywsLGAsIGAsYCkpCglhc3NlcnQuRXF1YWwodCwgW11zdHJpbmd7YGFgLCBgYmAsIGBjYH0sIFNwbGl0VHJpbVNwYWNlQ29tcGFjdChgYSwsLGIsLCwsLGNgLCBgLGApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestStringify",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestStringify(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKFN0cmluZ2lmeShuaWwpKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2AwYCwgYDFgLCBgMmB9LCBTdHJpbmdpZnkoW11hbnl7MCwgMSwgMn0pKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2AwLjVgLCBgMC41NWAsIGAwLjU1NWAsIGAwLjU1NTAwMWB9LCBTdHJpbmdpZnkoW11hbnl7MC41LCAwLjU1LCAwLjU1NTAwLCAwLjU1NTAwMX0pKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2B0cnVlYCwgYHRydWVgLCBgZmFsc2VgfSwgU3RyaW5naWZ5KFtdYW55e3RydWUsIHRydWUsIGZhbHNlfSkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestTrimSpace",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestTrimSpace(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKFRyaW1TcGFjZShuaWwpKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BhYWFgLCBgYmJiYCwgYGNjY2B9LCBUcmltU3BhY2UoW11zdHJpbmd7YGFhYWAsIGAgICBiYmIgYCwgYCBjY2MgICAgYH0pKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestUnique",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestUnique(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11hbnl7YG9uZWAsIGB0d29gLCBgdGhyZWVgfSwgVW5pcXVlKFtdc3RyaW5ne2BvbmVgLCBgb25lYCwgYHR3b2AsIGB0aHJlZWB9KSkKCWFzc2VydC5FcXVhbChbXWFueXsxLCAyLCAzfSwgVW5pcXVlKFtdaW50ezEsIDIsIDIsIDN9KSkKCWFzc2VydC5Ob3RFcXVhbChbXWFueXsxLCAyLCAzfSwgVW5pcXVlKFtdaW50NjR7MSwgMiwgMiwgM30pKQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "CompareFunc": {
                        "Name": "CompareFunc",
                        "Source": "dHlwZSBDb21wYXJlRnVuYyBmdW5jKGkgaW50LCBmaXJzdCBhbnksIHNlY29uZCBhbnkpIGJvb2wgLy8ge30K"
                    },
                    "IterationFunc": {
                        "Name": "IterationFunc",
                        "Source": "dHlwZSBJdGVyYXRpb25GdW5jID0gdXRpbHMuSXRlcmF0aW9uRnVuYw=="
                    },
                    "MapFunc": {
                        "Name": "MapFunc",
                        "Source": "dHlwZSBNYXBGdW5jIGZ1bmMoaSBpbnQsIHZhbHVlIGFueSkgYW55"
                    },
                    "MapStringFunc": {
                        "Name": "MapStringFunc",
                        "Source": "dHlwZSBNYXBTdHJpbmdGdW5jIGZ1bmMoaSBpbnQsIHZhbHVlIHN0cmluZykgc3RyaW5n"
                    }
                }
            },
            {
                "Name": "stringutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/stringutil",
                "ImportPath": "stringutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Utilities for converting and manipulating data to and from strings\n",
                "MainFunction": false,
                "CommentWordCount": 838,
                "LineCount": 2608,
                "SourceLineCount": 1997,
                "FunctionCount": 86,
                "TypeCount": 6,
                "ConstantCount": 17,
                "VariableCount": 9,
                "Statistics": {
                    "Mean": 0.3959,
                    "StdDev": 0.4796,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 0,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "001_stringutil_general_test.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 18122,
                        "LineCount": 626,
                        "SourceLineCount": 492,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "002_stringutil_convert_to_test.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "math",
                                "Alias": "math"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 7179,
                        "LineCount": 320,
                        "SourceLineCount": 250,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "003_stringutil_tostring_test.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 2764,
                        "LineCount": 125,
                        "SourceLineCount": 99,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "004_stringutil_tobytestring_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            }
                        ],
                        "Size": 905,
                        "LineCount": 42,
                        "SourceLineCount": 36,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "scan_interceptor.go",
                        "Imports": [
                            {
                                "PackageName": "bufio",
                                "Alias": "bufio"
                            },
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            }
                        ],
                        "Size": 4349,
                        "LineCount": 137,
                        "SourceLineCount": 83,
                        "FunctionCount": 5,
                        "TypeCount": 2,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "scan_interceptor_test.go",
                        "Imports": [
                            {
                                "PackageName": "bufio",
                                "Alias": "bufio"
                            },
                            {
                                "PackageName": "bytes",
                                "Alias": "bytes"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 6419,
                        "LineCount": 246,
                        "SourceLineCount": 195,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "stringutil.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "math",
                                "Alias": "math"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "regexp",
                                "Alias": "regexp"
                            },
                            {
                                "PackageName": "strconv",
                                "Alias": "strconv"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "unicode",
                                "Alias": "unicode"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/rxutil",
                                "Alias": "rxutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/utils",
                                "Alias": "utils"
                            },
                            {
                                "PackageName": "github.com/jdkato/prose/tokenize",
                                "Alias": "tokenize"
                            }
                        ],
                        "Size": 24523,
                        "LineCount": 1020,
                        "SourceLineCount": 769,
                        "FunctionCount": 73,
                        "TypeCount": 3,
                        "ConstantCount": 17,
                        "VariableCount": 9
                    },
                    {
                        "Name": "uuid.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/base64",
                                "Alias": "base64"
                            },
                            {
                                "PackageName": "encoding/hex",
                                "Alias": "hex"
                            },
                            {
                                "PackageName": "github.com/ghetzel/uuid",
                                "Alias": "uuid"
                            },
                            {
                                "PackageName": "github.com/jbenet/go-base58",
                                "Alias": "go-base58"
                            }
                        ],
                        "Size": 1022,
                        "LineCount": 64,
                        "SourceLineCount": 52,
                        "FunctionCount": 8,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "uuid_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 607,
                        "LineCount": 28,
                        "SourceLineCount": 21,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Constants": [
                    {
                        "Name": "Boolean",
                        "Immutable": true,
                        "Expression": "utils.Boolean"
                    },
                    {
                        "Name": "Bytes",
                        "Immutable": true,
                        "Expression": "utils.Bytes"
                    },
                    {
                        "Name": "Exa",
                        "Immutable": true,
                        "Expression": "6"
                    },
                    {
                        "Name": "Float",
                        "Immutable": true,
                        "Expression": "utils.Float"
                    },
                    {
                        "Name": "Giga",
                        "Immutable": true,
                        "Expression": "3"
                    },
                    {
                        "Name": "Integer",
                        "Immutable": true,
                        "Expression": "utils.Integer"
                    },
                    {
                        "Name": "Invalid",
                        "Type": "ConvertType",
                        "Immutable": true,
                        "Expression": "utils.Invalid"
                    },
                    {
                        "Name": "Kilo",
                        "Immutable": true,
                        "Expression": "1"
                    },
                    {
                        "Name": "Mega",
                        "Immutable": true,
                        "Expression": "2"
                    },
                    {
                        "Name": "Nil",
                        "Immutable": true,
                        "Expression": "utils.Nil"
                    },
                    {
                        "Name": "None",
                        "Type": "SiPrefix",
                        "Immutable": true,
                        "Expression": "0"
                    },
                    {
                        "Name": "Peta",
                        "Immutable": true,
                        "Expression": "5"
                    },
                    {
                        "Name": "String",
                        "Immutable": true,
                        "Expression": "utils.String"
                    },
                    {
                        "Name": "Tera",
                        "Immutable": true,
                        "Expression": "4"
                    },
                    {
                        "Name": "Time",
                        "Immutable": true,
                        "Expression": "utils.Time"
                    },
                    {
                        "Name": "Yotta",
                        "Immutable": true,
                        "Expression": "8"
                    },
                    {
                        "Name": "Zetta",
                        "Immutable": true,
                        "Expression": "7"
                    }
                ],
                "Variables": [
                    {
                        "Name": "BooleanFalseValues",
                        "Expression": "utils.BooleanFalseValues"
                    },
                    {
                        "Name": "BooleanTrueValues",
                        "Expression": "utils.BooleanTrueValues"
                    },
                    {
                        "Name": "DefaultDecimalSeparator",
                        "Expression": "`.`",
                        "Value": "."
                    },
                    {
                        "Name": "DefaultThousandsSeparator",
                        "Expression": "`,`",
                        "Value": ","
                    },
                    {
                        "Name": "ExpandEnvPreserveIfEmpty",
                        "Expression": "false",
                        "Comment": "If set to true, ExpandEnv() will preserve ${...} sequences whose resulting value would yield an empty string.\nFallback and formatting values are still supported, as the determination of value emptiness is made after parsing\nthe sequence.  This is to avoid unset environment variables resulting in the escape sequences being erased, which is often\nthe case when running ExpandEnv() against various shell languages (Bash, et. al)"
                    },
                    {
                        "Name": "ExpandEnvTempDelimiterClose",
                        "Expression": "\"\\u3019\"",
                        "Value": "\\u3019"
                    },
                    {
                        "Name": "ExpandEnvTempDelimiterOpen",
                        "Expression": "\"\\u3018\"",
                        "Value": "\\u3018"
                    },
                    {
                        "Name": "NilStrings",
                        "Expression": "utils.NilStrings"
                    },
                    {
                        "Name": "TimeFormats",
                        "Expression": "utils.TimeFormats"
                    }
                ],
                "Functions": [
                    {
                        "Name": "Autotype",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "Autotype(in any) any",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLkF1dG90eXBlKGluKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Camelize",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Camelize(in any) string",
                        "Source": "ewoJcmV0dXJuIHN0cmluZ3MuSm9pbihUb2tlbml6ZUZ1bmMoTXVzdFN0cmluZyhpbiksIElzU2VwYXJhdG9yLCBmdW5jKHBhcnQgc3RyaW5nKSBbXXN0cmluZyB7CgkJcGFydCA9IHN0cmluZ3MuVHJpbVNwYWNlKHBhcnQpCgkJcGFydCA9IHN0cmluZ3MuVGl0bGUocGFydCkKCQlyZXR1cm4gW11zdHJpbmd7cGFydH0KCX0pLCBgYCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertTo",
                        "Arguments": [
                            {
                                "Name": "toType",
                                "Type": "ConvertType"
                            },
                            {
                                "Name": "inI",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertTo(toType ConvertType, inI any) (any, error)",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLkNvbnZlcnRUbyh0b1R5cGUsIGluSSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertToBool",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertToBool(in any) (bool, error)",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLkNvbnZlcnRUb0Jvb2woaW4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertToBytes",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertToBytes(in any) ([]byte, error)",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLkNvbnZlcnRUb0J5dGVzKGluKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertToFloat",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertToFloat(in any) (float64, error)",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLkNvbnZlcnRUb0Zsb2F0KGluKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertToInteger",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int64"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertToInteger(in any) (int64, error)",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLkNvbnZlcnRUb0ludGVnZXIoaW4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertToString",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertToString(in any) (string, error)",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLkNvbnZlcnRUb1N0cmluZyhpbikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertToTime",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Time"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertToTime(in any) (time.Time, error)",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLkNvbnZlcnRUb1RpbWUoaW4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DetectTimeFormat",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "DetectTimeFormat(in string) string",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLkRldGVjdFRpbWVGb3JtYXQoaW4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Elide",
                        "Comment": "Truncate the given string to a certain number of characters.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "charcount",
                                "Type": "int"
                            },
                            {
                                "Name": "trailer",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Elide(in string, charcount int, trailer ...string) string",
                        "Source": "ewoJaWYgbGVuKGluKSA8IGNoYXJjb3VudCB7CgkJcmV0dXJuIGluCgl9CglyZXR1cm4gaW5bMDpjaGFyY291bnRdICsgc3RyaW5ncy5Kb2luKHRyYWlsZXIsIGBgKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ElideRight",
                        "Comment": "Truncate the given string to a certain number of characters from the end.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "charcount",
                                "Type": "int"
                            },
                            {
                                "Name": "leader",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "ElideRight(in string, charcount int, leader ...string) string",
                        "Source": "ewoJaWYgbGVuKGluKSA8IGNoYXJjb3VudCB7CgkJcmV0dXJuIGluCgl9CglyZXR1cm4gc3RyaW5ncy5Kb2luKGxlYWRlciwgYGApICsgaW5bbGVuKGluKS1jaGFyY291bnQ6XQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ElideWords",
                        "Comment": "Truncate the given string to a certain number of words.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "wordcount",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "ElideWords(in string, wordcount int) string",
                        "Source": "ewoJdmFyIHdvcmRzID0gU3BsaXRXb3JkcyhpbikKCXZhciB3YyA9IGxlbih3b3JkcykKCWlmIHdjID09IDAgewoJCXJldHVybiBgYAoJfSBlbHNlIGlmIHdjIDw9IHdvcmRjb3VudCB7CgkJcmV0dXJuIHN0cmluZ3MuSm9pbih3b3JkcywgYCBgKQoJfSBlbHNlIHsKCQl3b3JkcyA9IHdvcmRzWzA6d29yZGNvdW50XQoJCXJldHVybiBzdHJpbmdzLlRyaW1SaWdodEZ1bmMoc3RyaW5ncy5Kb2luKHdvcmRzLCBgIGApLCBmdW5jKHIgcnVuZSkgYm9vbCB7CgkJCXJldHVybiB1bmljb2RlLklzUHVuY3QocikgfHwgdW5pY29kZS5Jc1NwYWNlKHIpCgkJfSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExpandEnv",
                        "Comment": "Return the given string with environment variable substitution sequences\nexpanded and (optionally) formatted.  This function operates similarly to\nos.ExpandEnv, but accepts custom fmt.Printf formatting directives.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "ExpandEnv(in string) string",
                        "Source": "ewoJZm9yIHsKCQlpZiBtYXRjaCA6PSByeHV0aWwuTWF0Y2gocnhFbnZWYXJFeHByLCBpbik7IG1hdGNoICE9IG5pbCB7CgkJCXZhciBmb3JtYXQgPSBtYXRjaC5Hcm91cChgZm10YCkKCQkJdmFyIHZhcm5hbWUgPSBtYXRjaC5Hcm91cChgZW52YCkKCQkJdmFyIGZhbGxiYWNrID0gbWF0Y2guR3JvdXAoYGZhbGxiYWNrYCkKCQkJaWYgdmFybmFtZSAhPSBgYCB7CgkJCQlpZiBmb3JtYXQgPT0gYGAgewoJCQkJCWZvcm1hdCA9IGAldmAKCQkJCX0KCQkJCXZhciB0eXBlZCBhbnkKCQkJCWlmIHZhbCA6PSBvcy5HZXRlbnYodmFybmFtZSk7IHZhbCAhPSBgYCB7CgkJCQkJdHlwZWQgPSBBdXRvdHlwZSh2YWwpCgkJCQl9IGVsc2UgewoJCQkJCXR5cGVkID0gQXV0b3R5cGUoZmFsbGJhY2spCgkJCQl9CgkJCQlpZiB0eXBlZCAhPSBuaWwgewoJCQkJCWluID0gbWF0Y2guUmVwbGFjZUdyb3VwKDEsIGZtdC5TcHJpbnRmKGZvcm1hdCwgdHlwZWQpKQoJCQkJfSBlbHNlIGlmIEV4cGFuZEVudlByZXNlcnZlSWZFbXB0eSB7CgkJCQkJaW4gPSBtYXRjaC5SZXBsYWNlR3JvdXAoMSwgZm10LlNwcmludGYoZm9ybWF0LCBFeHBhbmRFbnZUZW1wRGVsaW1pdGVyT3Blbit2YXJuYW1lK0V4cGFuZEVudlRlbXBEZWxpbWl0ZXJDbG9zZSkpCgkJCQl9IGVsc2UgewoJCQkJCWluID0gbWF0Y2guUmVwbGFjZUdyb3VwKDEsIGZtdC5TcHJpbnRmKGZvcm1hdCwgYGApKQoJCQkJfQoJCQl9CgkJfSBlbHNlIHsKCQkJYnJlYWsKCQl9Cgl9CglpbiA9IHN0cmluZ3MuUmVwbGFjZUFsbChpbiwgRXhwYW5kRW52VGVtcERlbGltaXRlck9wZW4sIGAke2ApCglpbiA9IHN0cmluZ3MuUmVwbGFjZUFsbChpbiwgRXhwYW5kRW52VGVtcERlbGltaXRlckNsb3NlLCBgfWApCglyZXR1cm4gaW4KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "HasAnyPrefix",
                        "Comment": "HasPrefix tests whether the string s begins with any prefix in prefixes.",
                        "Arguments": [
                            {
                                "Name": "s",
                                "Type": "string"
                            },
                            {
                                "Name": "prefixes",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "HasAnyPrefix(s string, prefixes ...string) bool",
                        "Source": "ewoJZm9yIF8sIHAgOj0gcmFuZ2UgcHJlZml4ZXMgewoJCWlmIHN0cmluZ3MuSGFzUHJlZml4KHMsIHApIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "HasAnySuffix",
                        "Comment": "HasSuffix tests whether the string s begins with any suffix in suffixes.",
                        "Arguments": [
                            {
                                "Name": "s",
                                "Type": "string"
                            },
                            {
                                "Name": "suffixes",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "HasAnySuffix(s string, suffixes ...string) bool",
                        "Source": "ewoJZm9yIF8sIHAgOj0gcmFuZ2Ugc3VmZml4ZXMgewoJCWlmIHN0cmluZ3MuSGFzU3VmZml4KHMsIHApIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Hyphenate",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Hyphenate(in any) string",
                        "Source": "ewoJcmV0dXJuIFNuYWtlaWZ5KGluLCAnLScpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsBoolean",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsBoolean(in any) bool",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLklzQm9vbGVhbihpbikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsBooleanFalse",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsBooleanFalse(in any) bool",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLklzQm9vbGVhbkZhbHNlKGluKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsBooleanTrue",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsBooleanTrue(in any) bool",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLklzQm9vbGVhblRydWUoaW4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsFloat",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsFloat(in any) bool",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLklzRmxvYXQoaW4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsHexadecimal",
                        "Comment": "Returns whether the given string is a hexadecimal number. If the string is\nprefixed with \"0x\", the prefix is removed first. If length is greater than 0,\nthe length of the input (excluding prefix) is checked as well.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "length",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsHexadecimal(in string, length int) bool",
                        "Source": "ewoJaW4gPSBzdHJpbmdzLlRyaW1QcmVmaXgoaW4sIGAweGApCglpZiBJc01peGVkQ2FzZShpbikgewoJCXJldHVybiBmYWxzZQoJfQoJaWYgcnhIZXhhZGVjaW1hbC5NYXRjaFN0cmluZyhpbikgewoJCWlmIGxlbmd0aCA8PSAwIHsKCQkJcmV0dXJuIHRydWUKCQl9IGVsc2UgaWYgbGVuKGluKSA9PSBsZW5ndGggewoJCQlyZXR1cm4gdHJ1ZQoJCX0KCX0KCXJldHVybiBmYWxzZQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsInteger",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsInteger(in any) bool",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLklzSW50ZWdlcihpbikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsMixedCase",
                        "Comment": "Returns whether the letters (Unicode Catgeory 'L') in a given string are\nhomogenous in case (all upper-case or all lower-case).",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsMixedCase(in string) bool",
                        "Source": "ewoJdmFyIGhhc0xvd2VyIGJvb2wKCXZhciBoYXNVcHBlciBib29sCglmb3IgXywgYyA6PSByYW5nZSBpbiB7CgkJaWYgdW5pY29kZS5Jc0xldHRlcihjKSB7CgkJCWlmIHVuaWNvZGUuSXNMb3dlcihjKSB7CgkJCQloYXNMb3dlciA9IHRydWUKCQkJCWlmIGhhc1VwcGVyIHsKCQkJCQlyZXR1cm4gdHJ1ZQoJCQkJfQoJCQl9IGVsc2UgaWYgdW5pY29kZS5Jc1VwcGVyKGMpIHsKCQkJCWhhc1VwcGVyID0gdHJ1ZQoJCQkJaWYgaGFzTG93ZXIgewoJCQkJCXJldHVybiB0cnVlCgkJCQl9CgkJCX0KCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsNumeric",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsNumeric(in any) bool",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLklzTnVtZXJpYyhpbikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsSeparator",
                        "Arguments": [
                            {
                                "Name": "r",
                                "Type": "rune"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsSeparator(r rune) bool",
                        "Source": "ewoJaWYgciA8PSAweDdGIHsKCQlzd2l0Y2ggewoJCWNhc2UgJzAnIDw9IHIgJiYgciA8PSAnOSc6CgkJCXJldHVybiBmYWxzZQoJCWNhc2UgJ2EnIDw9IHIgJiYgciA8PSAneic6CgkJCXJldHVybiBmYWxzZQoJCWNhc2UgJ0EnIDw9IHIgJiYgciA8PSAnWic6CgkJCXJldHVybiBmYWxzZQoJCX0KCQlyZXR1cm4gdHJ1ZQoJfQoJaWYgdW5pY29kZS5Jc0xldHRlcihyKSB8fCB1bmljb2RlLklzRGlnaXQocikgewoJCXJldHVybiBmYWxzZQoJfQoJcmV0dXJuIHVuaWNvZGUuSXNTcGFjZShyKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsSurroundedBy",
                        "Arguments": [
                            {
                                "Name": "inI",
                                "Type": "any"
                            },
                            {
                                "Name": "prefix",
                                "Type": "string"
                            },
                            {
                                "Name": "suffix",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsSurroundedBy(inI any, prefix string, suffix string) bool",
                        "Source": "ewoJaWYgaW4sIGVyciA6PSBUb1N0cmluZyhpbkkpOyBlcnIgPT0gbmlsIHsKCQlpZiBzdHJpbmdzLkhhc1ByZWZpeChpbiwgcHJlZml4KSAmJiBzdHJpbmdzLkhhc1N1ZmZpeChpbiwgc3VmZml4KSB7CgkJCXJldHVybiB0cnVlCgkJfQoJfQoJcmV0dXJuIGZhbHNlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsTime",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsTime(in any) bool",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLklzVGltZShpbikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "LongestCommonPrefix",
                        "Arguments": [
                            {
                                "Name": "inputs",
                                "Type": "[]string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "LongestCommonPrefix(inputs []string) string",
                        "Source": "ewoJdmFyIG91dHB1dCA9IGBgCgl2YXIgc2hvcnRlc3RJbnB1dExlbiA9IDAKCWZvciBfLCBpbiA6PSByYW5nZSBpbnB1dHMgewoJCWlmIHNob3J0ZXN0SW5wdXRMZW4gPT0gMCB8fCBsZW4oaW4pIDwgc2hvcnRlc3RJbnB1dExlbiB7CgkJCXNob3J0ZXN0SW5wdXRMZW4gPSBsZW4oaW4pCgkJfQoJfQpMQ1BMb29wOgoJZm9yIGkgOj0gMDsgaSA8IHNob3J0ZXN0SW5wdXRMZW47IGkrKyB7CgkJdmFyIGN1cnJlbnQgYnl0ZQoJCWZvciBfLCBpbnB1dCA6PSByYW5nZSBpbnB1dHMgewoJCQlpZiBpIDwgbGVuKGlucHV0KSB7CgkJCQlpZiBjdXJyZW50ID09IDAgewoJCQkJCWN1cnJlbnQgPSBpbnB1dFtpXQoJCQkJfSBlbHNlIGlmIGN1cnJlbnQgIT0gaW5wdXRbaV0gewoJCQkJCWJyZWFrIExDUExvb3AKCQkJCX0KCQkJfQoJCX0KCQlpZiBjdXJyZW50ID09IDAgewoJCQlicmVhawoJCX0KCQlvdXRwdXQgPSBvdXRwdXQgKyBzdHJpbmcoY3VycmVudCkKCX0KCXJldHVybiBvdXRwdXQKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustBool",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "fallbackOpt",
                                "Type": "...bool"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "MustBool(in any, fallbackOpt ...bool) bool",
                        "Source": "ewoJaWYgdiwgZXJyIDo9IENvbnZlcnRUb0Jvb2woaW4pOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gdgoJfSBlbHNlIGlmIGxlbihmYWxsYmFja09wdCkgPiAwIHsKCQlyZXR1cm4gZmFsbGJhY2tPcHRbMF0KCX0gZWxzZSB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustFloat",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "fallbackOpt",
                                "Type": "...float64"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "MustFloat(in any, fallbackOpt ...float64) float64",
                        "Source": "ewoJaWYgdiwgZXJyIDo9IENvbnZlcnRUb0Zsb2F0KGluKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIHYKCX0gZWxzZSBpZiBsZW4oZmFsbGJhY2tPcHQpID4gMCB7CgkJcmV0dXJuIGZhbGxiYWNrT3B0WzBdCgl9IGVsc2UgewoJCXBhbmljKGVyci5FcnJvcigpKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustInteger",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "fallbackOpt",
                                "Type": "...int64"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int64"
                            }
                        ],
                        "Signature": "MustInteger(in any, fallbackOpt ...int64) int64",
                        "Source": "ewoJaWYgdiwgZXJyIDo9IENvbnZlcnRUb0ludGVnZXIoaW4pOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gdgoJfSBlbHNlIGlmIGxlbihmYWxsYmFja09wdCkgPiAwIHsKCQlyZXR1cm4gZmFsbGJhY2tPcHRbMF0KCX0gZWxzZSB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustString",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "fallbackOpt",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "MustString(in any, fallbackOpt ...string) string",
                        "Source": "ewoJaWYgdiwgZXJyIDo9IFRvU3RyaW5nKGluKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIHYKCX0gZWxzZSBpZiBsZW4oZmFsbGJhY2tPcHQpID4gMCB7CgkJcmV0dXJuIGZhbGxiYWNrT3B0WzBdCgl9IGVsc2UgewoJCXBhbmljKGVyci5FcnJvcigpKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MustTime",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "fallbackOpt",
                                "Type": "...time.Time"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Time"
                            }
                        ],
                        "Signature": "MustTime(in any, fallbackOpt ...time.Time) time.Time",
                        "Source": "ewoJaWYgdiwgZXJyIDo9IENvbnZlcnRUb1RpbWUoaW4pOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gdgoJfSBlbHNlIGlmIGxlbihmYWxsYmFja09wdCkgPiAwIHsKCQlyZXR1cm4gZmFsbGJhY2tPcHRbMF0KCX0gZWxzZSB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "PrefixEach",
                        "Comment": "Prefix each element in the given string slice with prefix.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "[]string"
                            },
                            {
                                "Name": "prefix",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "PrefixEach(in []string, prefix string) []string",
                        "Source": "ewoJcmV0dXJuIFdyYXBFYWNoKGluLCBwcmVmaXgsIGBgKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "PrefixIf",
                        "Comment": "Prefix the given string if it is non-empty",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "prefix",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "PrefixIf(in string, prefix string) string",
                        "Source": "ewoJaWYgIXR5cGV1dGlsLklzWmVybyhpbikgewoJCWluID0gcHJlZml4ICsgaW4KCX0KCXJldHVybiBpbgp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "PrefixLines",
                        "Comment": "Takes the given string, splits it into lines, and prefixes each line with the given prefix string.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "prefix",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "PrefixLines(in any, prefix string) string",
                        "Source": "ewoJdmFyIGxpbmVzID0gU3BsaXRMaW5lcyhpbiwgIlxuIikKCWZvciBpLCBsaW5lIDo9IHJhbmdlIGxpbmVzIHsKCQlsaW5lc1tpXSA9IHByZWZpeCArIGxpbmUKCX0KCXJldHVybiBzdHJpbmdzLkpvaW4obGluZXMsICJcbiIpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RelaxedEqual",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "second",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "RelaxedEqual(first any, second any) (bool, error)",
                        "Source": "ewoJaWYgcmVmbGVjdC5EZWVwRXF1YWwoZmlyc3QsIHNlY29uZCkgewoJCXJldHVybiB0cnVlLCBuaWwKCX0gZWxzZSBpZiBJc051bWVyaWMoZmlyc3QpICYmIElzTnVtZXJpYyhzZWNvbmQpIHsKCQlpZiBmViwgZXJyIDo9IENvbnZlcnRUb0Zsb2F0KGZpcnN0KTsgZXJyID09IG5pbCB7CgkJCWlmIHNWLCBlcnIgOj0gQ29udmVydFRvRmxvYXQoc2Vjb25kKTsgZXJyID09IG5pbCB7CgkJCQlyZXR1cm4gKGZWID09IHNWKSwgbmlsCgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gZmFsc2UsIGVycgoJCQl9CgkJfSBlbHNlIHsKCQkJcmV0dXJuIGZhbHNlLCBlcnIKCQl9Cgl9IGVsc2UgaWYgSXNCb29sZWFuVHJ1ZShmaXJzdCkgJiYgSXNCb29sZWFuVHJ1ZShzZWNvbmQpIHsKCQlyZXR1cm4gdHJ1ZSwgbmlsCgl9IGVsc2UgaWYgSXNCb29sZWFuRmFsc2UoZmlyc3QpICYmIElzQm9vbGVhbkZhbHNlKHNlY29uZCkgewoJCXJldHVybiB0cnVlLCBuaWwKCX0gZWxzZSBpZiBJc1RpbWUoZmlyc3QpICYmIElzVGltZShzZWNvbmQpIHsKCQlpZiBmViwgZXJyIDo9IENvbnZlcnRUb1RpbWUoZmlyc3QpOyBlcnIgPT0gbmlsIHsKCQkJaWYgc1YsIGVyciA6PSBDb252ZXJ0VG9UaW1lKHNlY29uZCk7IGVyciA9PSBuaWwgewoJCQkJcmV0dXJuIGZWLkVxdWFsKHNWKSwgbmlsCgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gZmFsc2UsIGVycgoJCQl9CgkJfSBlbHNlIHsKCQkJcmV0dXJuIGZhbHNlLCBlcnIKCQl9Cgl9IGVsc2UgewoJCWlmIGZWLCBlcnIgOj0gVG9TdHJpbmcoZmlyc3QpOyBlcnIgPT0gbmlsIHsKCQkJaWYgc1YsIGVyciA6PSBUb1N0cmluZyhzZWNvbmQpOyBlcnIgPT0gbmlsIHsKCQkJCXJldHVybiAoZlYgPT0gc1YpLCBuaWwKCQkJfSBlbHNlIHsKCQkJCXJldHVybiBmYWxzZSwgZXJyCgkJCX0KCQl9IGVsc2UgewoJCQlyZXR1cm4gZmFsc2UsIGVycgoJCX0KCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Snakeify",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "separator",
                                "Type": "rune"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Snakeify(in any, separator rune) string",
                        "Source": "ewoJdmFyIGluUyA9IHN0cmluZ3MuTWFwKGZ1bmMociBydW5lKSBydW5lIHsKCQlpZiB1bmljb2RlLklzU3BhY2UocikgewoJCQlyZXR1cm4gc2VwYXJhdG9yCgkJfSBlbHNlIGlmIHVuaWNvZGUuSXNQdW5jdChyKSAmJiBzZXBhcmF0b3IgIT0gciB7CgkJCXJldHVybiBzZXBhcmF0b3IKCQl9IGVsc2UgewoJCQlyZXR1cm4gcgoJCX0KCX0sIE11c3RTdHJpbmcoaW4pKQoJdmFyIG91dCA9IG1ha2UoW11ydW5lLCAwKQoJdmFyIHJ1bmVzID0gW11ydW5lKGluUykKCXZhciBzZXBmbiA9IGZ1bmMoaSBpbnQpIGJvb2wgewoJCXJldHVybiBpID49IDAgJiYgaSA8IGxlbihydW5lcykgJiYgdW5pY29kZS5Jc0xvd2VyKHJ1bmVzW2ldKQoJfQoJZm9yIGksIHIgOj0gcmFuZ2UgcnVuZXMgewoJCWlmIHVuaWNvZGUuSXNVcHBlcihyKSB7CgkJCXIgPSB1bmljb2RlLlRvTG93ZXIocikKCQkJaWYgaSA+IDAgJiYgcnVuZXNbaS0xXSAhPSBzZXBhcmF0b3IgJiYgKHNlcGZuKGktMSkgfHwgc2VwZm4oaSsxKSkgewoJCQkJb3V0ID0gYXBwZW5kKG91dCwgc2VwYXJhdG9yKQoJCQl9CgkJfQoJCW91dCA9IGFwcGVuZChvdXQsIHIpCgl9CglyZXR1cm4gc3RyaW5nKG91dCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SoftEqual",
                        "Comment": "A case insensitive, single return version of RelaxedEqual that trims leading and trailing whitespace from strings before comparison.",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "second",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "SoftEqual(first any, second any) bool",
                        "Source": "ewoJaWYgdHlwZXV0aWwuSXNLaW5kT2ZTdHJpbmcoZmlyc3QpIHsKCQlmaXJzdCA9IHN0cmluZ3MuVHJpbVNwYWNlKHN0cmluZ3MuVG9Mb3dlcih0eXBldXRpbC5TdHJpbmcoZmlyc3QpKSkKCX0KCWlmIHR5cGV1dGlsLklzS2luZE9mU3RyaW5nKHNlY29uZCkgewoJCXNlY29uZCA9IHN0cmluZ3MuVHJpbVNwYWNlKHN0cmluZ3MuVG9Mb3dlcih0eXBldXRpbC5TdHJpbmcoc2Vjb25kKSkpCgl9CglpZiBlcSwgZXJyIDo9IFJlbGF4ZWRFcXVhbChmaXJzdCwgc2Vjb25kKTsgZXJyID09IG5pbCAmJiBlcSB7CgkJcmV0dXJuIHRydWUKCX0gZWxzZSB7CgkJcmV0dXJuIGZhbHNlCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitLines",
                        "Comment": "Split the given input into lines.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "SplitLines(in any, delimiter string) []string",
                        "Source": "ewoJdmFyIGJsb2Igc3RyaW5nCglpZiBiLCBvayA6PSBpbi4oW11ieXRlKTsgb2sgewoJCWJsb2IgPSBzdHJpbmcoYikKCX0gZWxzZSB7CgkJYmxvYiA9IHR5cGV1dGlsLlN0cmluZyhpbikKCX0KCXJldHVybiBzdHJpbmdzLlNwbGl0KGJsb2IsIGRlbGltaXRlcikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitPair",
                        "Comment": "Split the given string into two parts.  If there is only one resulting part,\nthat part will be the first return value and the second return value will be empty.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SplitPair(in string, delimiter string) (string, string)",
                        "Source": "ewoJdmFyIHBhcnRzID0gc3RyaW5ncy5TcGxpdChpbiwgZGVsaW1pdGVyKQoJc3dpdGNoIGxlbihwYXJ0cykgewoJY2FzZSAxOgoJCXJldHVybiBwYXJ0c1swXSwgYGAKCWRlZmF1bHQ6CgkJcmV0dXJuIHBhcnRzWzBdLCBzdHJpbmdzLkpvaW4ocGFydHNbMTpdLCBkZWxpbWl0ZXIpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitPairAuto",
                        "Comment": "Identical to SplitPair, but returns the result of passing the second value in the pair to Autotype()",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "SplitPairAuto(in string, delimiter string) (string, any)",
                        "Source": "ewoJdmFyIGEsIGIgPSBTcGxpdFBhaXIoaW4sIGRlbGltaXRlcikKCXJldHVybiBhLCBBdXRvdHlwZShiKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitPairRight",
                        "Comment": "Split the given string into two parts from the right. If there is only one resulting part,\nthat part will be the first return value and the second return value will be empty.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SplitPairRight(in string, delimiter string) (string, string)",
                        "Source": "ewoJdmFyIHBhcnRzID0gc3RyaW5ncy5TcGxpdChpbiwgZGVsaW1pdGVyKQoJc3dpdGNoIGxlbihwYXJ0cykgewoJY2FzZSAxOgoJCXJldHVybiBwYXJ0c1swXSwgYGAKCWRlZmF1bHQ6CgkJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0c1swOmxlbihwYXJ0cyktMV0sIGRlbGltaXRlciksIHBhcnRzW2xlbihwYXJ0cyktMV0KCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitPairRightTrailing",
                        "Comment": "Split the given string into two parts.  If there is only one resulting part,\nthat part will be the second return value and the first return value will be empty.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SplitPairRightTrailing(in string, delimiter string) (string, string)",
                        "Source": "ewoJZmlyc3QsIHJlc3QgOj0gU3BsaXRQYWlyUmlnaHQoaW4sIGRlbGltaXRlcikKCWlmIHJlc3QgPT0gYGAgewoJCXJldHVybiByZXN0LCBmaXJzdAoJfSBlbHNlIHsKCQlyZXR1cm4gZmlyc3QsIHJlc3QKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitPairTrailing",
                        "Comment": "Split the given string into two parts.  If there is only one resulting part,\nthat part will be the second return value and the first return value will be empty.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SplitPairTrailing(in string, delimiter string) (string, string)",
                        "Source": "ewoJZmlyc3QsIHJlc3QgOj0gU3BsaXRQYWlyKGluLCBkZWxpbWl0ZXIpCglpZiByZXN0ID09IGBgIHsKCQlyZXR1cm4gcmVzdCwgZmlyc3QKCX0gZWxzZSB7CgkJcmV0dXJuIGZpcnN0LCByZXN0Cgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitPairTrimSpace",
                        "Comment": "Identical to SplitPair, but trims any leading and trailing whitespace from each output value.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SplitPairTrimSpace(in string, delimiter string) (string, string)",
                        "Source": "ewoJdmFyIGEsIGIgPSBTcGxpdFBhaXIoaW4sIGRlbGltaXRlcikKCWEgPSBzdHJpbmdzLlRyaW1TcGFjZShhKQoJYiA9IHN0cmluZ3MuVHJpbVNwYWNlKGIpCglyZXR1cm4gYSwgYgp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitPairTrimSpaceAuto",
                        "Comment": "Identical to SplitPairTrimSpace, but returns the result of passing the second value in the pair to Autotype()",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "SplitPairTrimSpaceAuto(in string, delimiter string) (string, any)",
                        "Source": "ewoJdmFyIGEsIGIgPSBTcGxpdFBhaXJUcmltU3BhY2UoaW4sIGRlbGltaXRlcikKCXJldHVybiBhLCBBdXRvdHlwZShiKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitTrim",
                        "Comment": "Identical to strings.Split, but trims any leading and trailing whitespace from each element using\nstrings.Trim.",
                        "Arguments": [
                            {
                                "Name": "s",
                                "Type": "string"
                            },
                            {
                                "Name": "sep",
                                "Type": "string"
                            },
                            {
                                "Name": "cutset",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "SplitTrim(s string, sep string, cutset string) []string",
                        "Source": "ewoJdmFyIHBhcnRzID0gc3RyaW5ncy5TcGxpdChzLCBzZXApCglmb3IgaSwgcGFydCA6PSByYW5nZSBwYXJ0cyB7CgkJcGFydHNbaV0gPSBzdHJpbmdzLlRyaW0ocGFydCwgY3V0c2V0KQoJfQoJcmV0dXJuIHBhcnRzCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitTrimSpace",
                        "Comment": "Identical to strings.Split, but trims any leading and trailing whitespace from each element.",
                        "Arguments": [
                            {
                                "Name": "s",
                                "Type": "string"
                            },
                            {
                                "Name": "sep",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "SplitTrimSpace(s string, sep string) []string",
                        "Source": "ewoJdmFyIHBhcnRzID0gc3RyaW5ncy5TcGxpdChzLCBzZXApCglmb3IgaSwgcGFydCA6PSByYW5nZSBwYXJ0cyB7CgkJcGFydHNbaV0gPSBzdHJpbmdzLlRyaW1TcGFjZShwYXJ0KQoJfQoJcmV0dXJuIHBhcnRzCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitTriple",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SplitTriple(in string, delimiter string) (string, string, string)",
                        "Source": "ewoJdmFyIHBhcnRzID0gc3RyaW5ncy5TcGxpdChpbiwgZGVsaW1pdGVyKQoJc3dpdGNoIGxlbihwYXJ0cykgewoJY2FzZSAxOgoJCXJldHVybiBwYXJ0c1swXSwgYGAsIGBgCgljYXNlIDI6CgkJcmV0dXJuIHBhcnRzWzBdLCBwYXJ0c1sxXSwgYGAKCWRlZmF1bHQ6CgkJcmV0dXJuIHBhcnRzWzBdLCBwYXJ0c1sxXSwgc3RyaW5ncy5Kb2luKHBhcnRzWzI6XSwgZGVsaW1pdGVyKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitTripleTrimSpace",
                        "Comment": "Identical to SplitPair, but trims any leading and trailing whitespace from each output value.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "delimiter",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SplitTripleTrimSpace(in string, delimiter string) (string, string, string)",
                        "Source": "ewoJdmFyIGEsIGIsIGMgPSBTcGxpdFRyaXBsZShpbiwgZGVsaW1pdGVyKQoJYSA9IHN0cmluZ3MuVHJpbVNwYWNlKGEpCgliID0gc3RyaW5ncy5UcmltU3BhY2UoYikKCWMgPSBzdHJpbmdzLlRyaW1TcGFjZShjKQoJcmV0dXJuIGEsIGIsIGMKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SplitWords",
                        "Comment": "Split the given string into words.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "SplitWords(in string) []string",
                        "Source": "ewoJdmFyIHRva2VuaXplciA9IHRva2VuaXplLk5ld1RyZWViYW5rV29yZFRva2VuaXplcigpCgl2YXIgb3V0ID0gbWFrZShbXXN0cmluZywgMCkKCWZvciBfLCB3b3JkIDo9IHJhbmdlIHRva2VuaXplci5Ub2tlbml6ZShpbikgewoJCW91dCA9IGFwcGVuZChvdXQsIHdvcmQpCgl9CglyZXR1cm4gb3V0Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Squeeze",
                        "Comment": "Return the given string with sequences repeating character replaced with a\nsingle instance of that character.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Squeeze(in string) string",
                        "Source": "ewoJcmV0dXJuIFNxdWVlemVGdW5jKGluLCBmdW5jKHIgcnVuZSkgYm9vbCB7CgkJcmV0dXJuIHRydWUKCX0pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SqueezeFunc",
                        "Comment": "Return the given string with sequences of characters matching the given function\nreplaced with a single instance of that character.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "fn",
                                "Type": "OnlySqueezeFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SqueezeFunc(in string, fn OnlySqueezeFunc) string",
                        "Source": "ewoJdmFyIG91dCA9IG1ha2UoW11ydW5lLCAwKQoJdmFyIHByZXZpb3VzIHJ1bmUKCWZvciBfLCBjaGFyIDo9IHJhbmdlIGluIHsKCQlpZiBmbiA9PSBuaWwgfHwgZm4oY2hhcikgewoJCQlpZiBjaGFyICE9IHByZXZpb3VzIHsKCQkJCW91dCA9IGFwcGVuZChvdXQsIGNoYXIpCgkJCX0KCQl9IGVsc2UgewoJCQlvdXQgPSBhcHBlbmQob3V0LCBjaGFyKQoJCX0KCQlwcmV2aW91cyA9IGNoYXIKCX0KCXJldHVybiBzdHJpbmcob3V0KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SqueezeSpace",
                        "Comment": "Return the given string with sequences of whitespace characters replaced with\na single instance of that character.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SqueezeSpace(in string) string",
                        "Source": "ewoJcmV0dXJuIFNxdWVlemVGdW5jKGluLCBmdW5jKHIgcnVuZSkgYm9vbCB7CgkJcmV0dXJuIHVuaWNvZGUuSXNTcGFjZShyKQoJfSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SuffixEach",
                        "Comment": "Suffix each element in the given string slice with suffix.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "[]string"
                            },
                            {
                                "Name": "prefix",
                                "Type": "string"
                            },
                            {
                                "Name": "suffix",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "SuffixEach(in []string, prefix string, suffix string) []string",
                        "Source": "ewoJcmV0dXJuIFdyYXBFYWNoKGluLCBgYCwgc3VmZml4KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SuffixIf",
                        "Comment": "Suffix the given string if it is non-empty",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "suffix",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SuffixIf(in string, suffix string) string",
                        "Source": "ewoJaWYgIXR5cGV1dGlsLklzWmVybyhpbikgewoJCWluID0gaW4gKyBzdWZmaXgKCX0KCXJldHVybiBpbgp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SuffixLines",
                        "Comment": "Takes the given string, splits it into lines, and suffixes each line with the given suffix string.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "suffix",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "SuffixLines(in any, suffix string) string",
                        "Source": "ewoJdmFyIGxpbmVzID0gU3BsaXRMaW5lcyhpbiwgIlxuIikKCWZvciBpLCBsaW5lIDo9IHJhbmdlIGxpbmVzIHsKCQlsaW5lc1tpXSA9IGxpbmUgKyBzdWZmaXgKCX0KCXJldHVybiBzdHJpbmdzLkpvaW4obGluZXMsICJcbiIpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Thousandify",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "separator",
                                "Type": "string"
                            },
                            {
                                "Name": "decimal",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Thousandify(in any, separator string, decimal string) string",
                        "Source": "ewoJaWYgc2VwYXJhdG9yID09IGBgIHsKCQlzZXBhcmF0b3IgPSBEZWZhdWx0VGhvdXNhbmRzU2VwYXJhdG9yCgl9CglpZiBkZWNpbWFsID09IGBgIHsKCQlkZWNpbWFsID0gRGVmYXVsdERlY2ltYWxTZXBhcmF0b3IKCX0KCWlmIGluU3RyLCBlcnIgOj0gVG9TdHJpbmcoaW4pOyBlcnIgPT0gbmlsIHsKCQlpZiBJc051bWVyaWMoaW4pIHsKCQkJdmFyIGJ1ZmZlciBbXXJ1bmUKCQkJdmFyIGxhc3RJbmRleEJlZm9yZURlY2ltYWwgPSBzdHJpbmdzLkluZGV4KGluU3RyLCBkZWNpbWFsKSAtIDEKCQkJdmFyIGRlY2ltYWxBbmRBZnRlciA9IHN0cmluZ3MuSW5kZXgoaW5TdHIsIGRlY2ltYWwpCgkJCWlmIGxhc3RJbmRleEJlZm9yZURlY2ltYWwgPCAwIHsKCQkJCWxhc3RJbmRleEJlZm9yZURlY2ltYWwgPSBsZW4oaW5TdHIpIC0gMQoJCQl9CgkJCXZhciBqID0gMAoJCQlmb3IgaSA6PSBsYXN0SW5kZXhCZWZvcmVEZWNpbWFsOyBpID49IDA7IGktLSB7CgkJCQlqKysKCQkJCWJ1ZmZlciA9IGFwcGVuZChbXXJ1bmV7cnVuZShpblN0cltpXSl9LCBidWZmZXIuLi4pCgkJCQlpZiBqID09IDMgJiYgaSA+IDAgJiYgIShpID09IDEgJiYgaW5TdHJbMF0gPT0gJy0nKSB7CgkJCQkJYnVmZmVyID0gYXBwZW5kKFtdcnVuZShzZXBhcmF0b3IpLCBidWZmZXIuLi4pCgkJCQkJaiA9IDAKCQkJCX0KCQkJfQoJCQlpZiBkZWNpbWFsQW5kQWZ0ZXIgPj0gMCB7CgkJCQlmb3IgXywgciA6PSByYW5nZSBpblN0cltkZWNpbWFsQW5kQWZ0ZXI6XSB7CgkJCQkJYnVmZmVyID0gYXBwZW5kKGJ1ZmZlciwgcnVuZShyKSkKCQkJCX0KCQkJfQoJCQlyZXR1cm4gc3RyaW5nKGJ1ZmZlcls6XSkKCQl9IGVsc2UgewoJCQlyZXR1cm4gaW5TdHIKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBgYAoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ToByteString",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "formatString",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ToByteString(in any, formatString ...string) (string, error)",
                        "Source": "ewoJaWYgYXNCeXRlcywgZXJyIDo9IENvbnZlcnRUb0ludGVnZXIoaW4pOyBlcnIgPT0gbmlsIHsKCQlmb3IgaSA6PSAwOyBpIDwgOTsgaSsrIHsKCQkJaWYgY29udmVydGVkIDo9IChmbG9hdDY0KGFzQnl0ZXMpIC8gbWF0aC5Qb3coMTAyNCwgZmxvYXQ2NChpKSkpOyBjb252ZXJ0ZWQgPCAxMDI0IHsKCQkJCXZhciBwcmVmaXggPSBTaVByZWZpeChpKQoJCQkJdmFyIGYgPSBgJWdgCgkJCQlpZiBsZW4oZm9ybWF0U3RyaW5nKSA+IDAgewoJCQkJCWYgPSBmb3JtYXRTdHJpbmdbMF0KCQkJCX0KCQkJCXJldHVybiBmbXQuU3ByaW50ZihmKyIlc0IiLCBjb252ZXJ0ZWQsIHByZWZpeC5TdHJpbmcoKSksIG5pbAoJCQl9CgkJfQoJCXJldHVybiBmbXQuU3ByaW50ZigiJWRCIiwgYXNCeXRlcyksIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gYGAsIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ToBytes",
                        "Arguments": [
                            {
                                "Name": "input",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ToBytes(input string) (float64, error)",
                        "Source": "ewoJaWYgc3RyaW5ncy5IYXNTdWZmaXgoaW5wdXQsICJpYiIpIHx8IHN0cmluZ3MuSGFzU3VmZml4KGlucHV0LCAiaUIiKSB7CgkJaW5wdXQgPSBpbnB1dFswIDogbGVuKGlucHV0KS0yXQoJfSBlbHNlIGlmIGxlbihpbnB1dCkgPiAyICYmIElzSW50ZWdlcihzdHJpbmcoaW5wdXRbbGVuKGlucHV0KS0zXSkpICYmIChpbnB1dFtsZW4oaW5wdXQpLTFdID09ICdiJyB8fCBpbnB1dFtsZW4oaW5wdXQpLTFdID09ICdCJykgewoJCWlucHV0ID0gaW5wdXRbMCA6IGxlbihpbnB1dCktMV0KCX0KCWlmIHByZWZpeCwgZXJyIDo9IEdldFNpUHJlZml4KHN0cmluZyhpbnB1dFtsZW4oaW5wdXQpLTFdKSk7IGVyciA9PSBuaWwgewoJCWlmIHYsIGVyciA6PSBzdHJjb252LlBhcnNlRmxvYXQoaW5wdXRbMDpsZW4oaW5wdXQpLTFdLCA2NCk7IGVyciA9PSBuaWwgewoJCQlyZXR1cm4gdiAqIG1hdGguUG93KDEwMjQsIGZsb2F0NjQocHJlZml4KSksIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiAwLCBlcnIKCQl9Cgl9IGVsc2UgewoJCWlmIHYsIGVyciA6PSBzdHJjb252LlBhcnNlRmxvYXQoaW5wdXQsIDY0KTsgZXJyID09IG5pbCB7CgkJCXJldHVybiB2LCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gMCwgZm10LkVycm9yZigiVW5yZWNvZ25pemVkIGlucHV0IHN0cmluZyAnJXMnIiwgaW5wdXQpCgkJfQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ToString",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ToString(in any) (string, error)",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLlRvU3RyaW5nKGluKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ToStringSlice",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ToStringSlice(in any) ([]string, error)",
                        "Source": "ewoJdmFyIHZhbHVlcyA9IG1ha2UoW11zdHJpbmcsIDApCglpZiBpbiAhPSBuaWwgewoJCWlmIHYsIG9rIDo9IGluLihbXXN0cmluZyk7IG9rIHsKCQkJcmV0dXJuIHYsIG5pbAoJCX0KCQl2YXIgaW5WID0gcmVmbGVjdC5WYWx1ZU9mKGluKQoJCWlmIGluVi5Jc1ZhbGlkKCkgewoJCQlpZiBpblYuS2luZCgpID09IHJlZmxlY3QuUHRyIHsKCQkJCWluViA9IGluVi5FbGVtKCkKCQkJfQoJCQlpZiBpblYuSXNWYWxpZCgpIHsKCQkJCXN3aXRjaCBpblYuS2luZCgpIHsKCQkJCWNhc2UgcmVmbGVjdC5BcnJheSwgcmVmbGVjdC5TbGljZToKCQkJCQlmb3IgaSA6PSAwOyBpIDwgaW5WLkxlbigpOyBpKysgewoJCQkJCQlpZiBpbmRleFYgOj0gaW5WLkluZGV4KGkpOyBpbmRleFYuSXNWYWxpZCgpIHsKCQkJCQkJCWlmIHYsIGVyciA6PSBUb1N0cmluZyhpbmRleFYuSW50ZXJmYWNlKCkpOyBlcnIgPT0gbmlsIHsKCQkJCQkJCQl2YWx1ZXMgPSBhcHBlbmQodmFsdWVzLCB2KQoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQlyZXR1cm4gbmlsLCBlcnIKCQkJCQkJCX0KCQkJCQkJfSBlbHNlIHsKCQkJCQkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkVsZW1lbnQgJWQgaW4gc2xpY2UgaXMgaW52YWxpZCIsIGkpCgkJCQkJCX0KCQkJCQl9CgkJCQlkZWZhdWx0OgoJCQkJCWlmIHYsIGVyciA6PSBUb1N0cmluZyhpbik7IGVyciA9PSBuaWwgewoJCQkJCQl2YWx1ZXMgPSBhcHBlbmQodmFsdWVzLCB2KQoJCQkJCX0gZWxzZSB7CgkJCQkJCXJldHVybiBuaWwsIGVycgoJCQkJCX0KCQkJCX0KCQkJfSBlbHNlIHsKCQkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkNhbm5vdCBwYXJzZSB2YWx1ZSBwb2ludGVkIHRvIGJ5IGdpdmVuIHZhbHVlLiIpCgkJCX0KCQl9IGVsc2UgewoJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJDYW5ub3QgcGFyc2UgZ2l2ZW4gdmFsdWUuIikKCQl9Cgl9CglyZXR1cm4gdmFsdWVzLCBuaWwKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TokenizeFunc",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "tokenizer",
                                "Type": ""
                            },
                            {
                                "Name": "partfn",
                                "Type": ""
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "TokenizeFunc(in string, tokenizer , partfn ) []string",
                        "Source": "ewoJdmFyIHBhcnRzID0gc3RyaW5ncy5GaWVsZHNGdW5jKGluLCB0b2tlbml6ZXIpCgl2YXIgb3V0ID0gbWFrZShbIC8vIHNwbGl0IG9uIHdvcmQtc2VwYXJhdGluZyBjaGFyYWN0ZXJzIChhbmQgZGlzY2FyZCB0aGVtKSwgb3Igb24gY2FwaXRhbAoJLy8gbGV0dGVycyAocHJlc2VydmluZyB0aGVtKQoJXXN0cmluZywgMCkKCWZvciBfLCBwYXJ0IDo9IHJhbmdlIHBhcnRzIHsKCQl2YXIgcGFydE91dCA9IHBhcnRmbihwYXJ0KQoJCWlmIHBhcnRPdXQgIT0gbmlsIHsKCQkJZm9yIF8sIHYgOj0gcmFuZ2UgcGFydE91dCB7CgkJCQlpZiB2ICE9IGBgIHsKCQkJCQlvdXQgPSBhcHBlbmQob3V0LCB2KQoJCQkJfQoJCQl9CgkJfQoJfQoJcmV0dXJuIG91dAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Underscore",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Underscore(in any) string",
                        "Source": "ewoJcmV0dXJuIFNuYWtlaWZ5KGluLCAnXycpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Unwrap",
                        "Comment": "Return the given string with the given prefix and suffix removed.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "prefix",
                                "Type": "string"
                            },
                            {
                                "Name": "suffix",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Unwrap(in string, prefix string, suffix string) string",
                        "Source": "ewoJaW4gPSBzdHJpbmdzLlRyaW1QcmVmaXgoaW4sIHByZWZpeCkKCWluID0gc3RyaW5ncy5UcmltU3VmZml4KGluLCBzdWZmaXgpCglyZXR1cm4gaW4KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Wrap",
                        "Comment": "Return the given string with prefixed and suffixed with other strings.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "prefix",
                                "Type": "string"
                            },
                            {
                                "Name": "suffix",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Wrap(in string, prefix string, suffix string) string",
                        "Source": "ewoJaW4gPSBzdHJpbmdzLlRyaW1QcmVmaXgoaW4sIHByZWZpeCkKCWluID0gc3RyaW5ncy5UcmltU3VmZml4KGluLCBzdWZmaXgpCglyZXR1cm4gcHJlZml4ICsgaW4gKyBzdWZmaXgKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "WrapEach",
                        "Comment": "Wrap each element in the given string slice with prefix and suffix.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "[]string"
                            },
                            {
                                "Name": "prefix",
                                "Type": "string"
                            },
                            {
                                "Name": "suffix",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "WrapEach(in []string, prefix string, suffix string) []string",
                        "Source": "ewoJdmFyIG91dCA9IG1ha2UoW11zdHJpbmcsIGxlbihpbikpCglmb3IgaSwgdiA6PSByYW5nZSBpbiB7CgkJb3V0W2ldID0gV3JhcCh2LCBwcmVmaXgsIHN1ZmZpeCkKCX0KCXJldHVybiBvdXQKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "WrapIf",
                        "Comment": "Wrap the given string if it is non-empty",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            },
                            {
                                "Name": "prefix",
                                "Type": "string"
                            },
                            {
                                "Name": "suffix",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "WrapIf(in string, prefix string, suffix string) string",
                        "Source": "ewoJaWYgIXR5cGV1dGlsLklzWmVybyhpbikgewoJCWluID0gV3JhcChpbiwgcHJlZml4LCBzdWZmaXgpCgl9CglyZXR1cm4gaW4KfQ==",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestAutotypeBool",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestAutotypeBool(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglmb3IgXywgdGVzdFZhbHVlIDo9IHJhbmdlIFtdc3RyaW5ne2B0cnVlYCwgYFRydWVgLCBgZmFsc2VgLCBgRmFsc2VgfSB7CgkJYXNzZXJ0LklzVHlwZSh0cnVlLCBBdXRvdHlwZSh0ZXN0VmFsdWUpKQoJfQoJZm9yIF8sIHRlc3RWYWx1ZSA6PSByYW5nZSBbXXN0cmluZ3tgdHJ1ZXNgLCBgRmFsc2VzYCwgYHBvdGF0b2B9IHsKCQlhc3NlcnQuSXNUeXBlKGBgLCBBdXRvdHlwZSh0ZXN0VmFsdWUpKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestAutotypeDate",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestAutotypeDate(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglmb3IgXywgdGVzdFZhbHVlIDo9IHJhbmdlIFRpbWVGb3JtYXRzIHsKCQl2YXIgdHZTID0gc3RyaW5ncy5SZXBsYWNlKHN0cmluZyh0ZXN0VmFsdWUpLCBgX2AsIGBgLCAtMSkKCQl0dlMgPSBzdHJpbmdzLlRyaW1TdWZmaXgodHZTLCBgMDc6MDBgKQoJCWFzc2VydC5Jc1R5cGUodGltZS5Ob3coKSwgQXV0b3R5cGUodHZTKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestAutotypeFloat",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestAutotypeFloat(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglmb3IgXywgdGVzdFZhbHVlIDo9IHJhbmdlIFtdc3RyaW5ne2AtMC4wMDAwMDAwMDAwMWAsIGAwLjAwMDAwMDAwMDAxYCwgYDEuNWAsIGAtMS41YCwgZm10LlNwcmludGYoIiVmIiwgbWF0aC5NYXhGbG9hdDY0KSwgZm10LlNwcmludGYoIiVmIiwgLTEqbWF0aC5NYXhGbG9hdDY0KX0gewoJCWFzc2VydC5Jc1R5cGUoZmxvYXQ2NCgwKSwgQXV0b3R5cGUodGVzdFZhbHVlKSwgdGVzdFZhbHVlKQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestAutotypeInt",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestAutotypeInt(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglmb3IgXywgdGVzdFZhbHVlIDo9IHJhbmdlIFtdc3RyaW5ne2AtMWAsIGAwYCwgYDFgLCBgMTIzNDVgLCBgLTEyMzQ1YCwgZm10LlNwcmludGYoIiVkIiwgbWF0aC5NYXhJbnQ2NCksIGZtdC5TcHJpbnRmKCIlZCIsIG1hdGguTWluSW50NjQpfSB7CgkJYXNzZXJ0LklzVHlwZShpbnQ2NCgwKSwgQXV0b3R5cGUodGVzdFZhbHVlKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestAutotypeNil",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestAutotypeNil(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglmb3IgXywgdGVzdFZhbHVlIDo9IHJhbmdlIFtdc3RyaW5ne2BgLCBgbmlsYCwgYG51bGxgLCBgTmlsYCwgYE5VTExgLCBgTm9uZWAsIGB1bmRlZmluZWRgfSB7CgkJYXNzZXJ0Lk5pbChBdXRvdHlwZSh0ZXN0VmFsdWUpLCBmbXQuU3ByaW50ZigiJXEgd2FzIG5vdCBhdXRvdHlwZWQgdG8gbmlsIiwgdGVzdFZhbHVlKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestAutotypePreserveLeadingZeroes",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestAutotypePreserveLeadingZeroes(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglmb3IgXywgdGVzdFZhbHVlIDo9IHJhbmdlIFtdc3RyaW5ne2AwMGAsIGAwMWAsIGAwNzc1M2AsIGAwNjA5NGAsIGAwMDAwMDAwMDEwMDAwMDAwYH0gewoJCWFzc2VydC5Jc1R5cGUoYGAsIEF1dG90eXBlKHRlc3RWYWx1ZSkpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestCamelize",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCamelize(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgdGVzdHMgPSBtYXBbc3RyaW5nXXN0cmluZ3tgVGVzdGA6IGBUZXN0YCwgYHRlc3RgOiBgVGVzdGAsIGB0ZXN0X3ZhbHVlYDogYFRlc3RWYWx1ZWAsIGB0ZXN0LVZhbHVlYDogYFRlc3RWYWx1ZWAsIGB0ZXN0LVZhbF91ZWA6IGBUZXN0VmFsVWVgLCBgdGVzdCB2YWx1ZWA6IGBUZXN0VmFsdWVgLCBgVGVzdFZhbHVlYDogYFRlc3RWYWx1ZWAsIGB0ZXN0VmFsdWVgOiBgVGVzdFZhbHVlYCwgYFRlU3QgVmFMdWVgOiBgVGVTdFZhTHVlYH0KCWZvciBoYXZlLCB3YW50IDo9IHJhbmdlIHRlc3RzIHsKCQlhc3NlcnQuRXF1YWwod2FudCwgQ2FtZWxpemUoaGF2ZSkpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestConvertToBoolean",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestConvertToBoolean(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2LCBlcnIgOj0gQ29udmVydFRvKEJvb2xlYW4sIG5pbCkKCWFzc2VydC5FcXVhbChmYWxzZSwgdikKCXYsIGVyciA9IENvbnZlcnRUbyhCb29sZWFuLCBgdHJ1ZWApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwodHJ1ZSwgdikKCXYsIGVyciA9IENvbnZlcnRUbyhCb29sZWFuLCBgZmFsc2VgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZhbHNlLCB2KQoJdiwgZXJyID0gQ29udmVydFRvQm9vbChgdHJ1ZWApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwodHJ1ZSwgdikKCXYsIGVyciA9IENvbnZlcnRUb0Jvb2woYGZhbHNlYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChmYWxzZSwgdikKCWZvciBfLCBmYWlsIDo9IHJhbmdlIFtdc3RyaW5ne2AxLjVgLCBgcG90YXRvYCwgYDAxYCwgYDIwMTUtMDUtMDEgMDA6MTU6MTZgfSB7CgkJXywgZXJyIDo9IENvbnZlcnRUbyhCb29sZWFuLCBmYWlsKQoJCWFzc2VydC5FcnJvcihlcnIpCgkJXywgZXJyID0gQ29udmVydFRvQm9vbChmYWlsKQoJCWFzc2VydC5FcnJvcihlcnIpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestConvertToBytes",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestConvertToBytes(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2LCBlcnIgOj0gQ29udmVydFRvKEJ5dGVzLCBuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoW11ieXRle30sIHYpCgl2LCBlcnIgPSBDb252ZXJ0VG8oQnl0ZXMsIFtdYnl0ZXt9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKFtdYnl0ZXt9LCB2KQoJdiwgZXJyID0gQ29udmVydFRvKEJ5dGVzLCBbXWJ5dGV7MSwgMiwgM30pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoW11ieXRlezEsIDIsIDN9LCB2KQoJdiwgZXJyID0gQ29udmVydFRvKEJ5dGVzLCBgdGVzdGApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoW11ieXRlezB4NzQsIDB4NjUsIDB4NzMsIDB4NzR9LCB2KQoJdiwgZXJyID0gQ29udmVydFRvKEJ5dGVzLCBbXWludHsweDc0LCAweDY1LCAweDczLCAweDc0fSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgdGVzdGAsIHN0cmluZyh2LihbXWJ5dGUpKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestConvertToFloat",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestConvertToFloat(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIHRlc3RGbG9hdCBmbG9hdDY0Cgljb25zdCAoCgkJdGVzdEZsb2F0WmVybyB0ZXN0RmxvYXQgPSBpb3RhCgkJdGVzdEZsb2F0RSAgICAgICAgICAgICAgPSAyLjcxODI4CgkJdGVzdEZsb2F0UGkgICAgICAgICAgICAgPSAzLjE0MTU5NwoJKQoJdiwgZXJyIDo9IENvbnZlcnRUbyhGbG9hdCwgbmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMCksIHYpCgl2LCBlcnIgPSBDb252ZXJ0VG8oRmxvYXQsICIxLjUiKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMS41KSwgdikKCXYsIGVyciA9IENvbnZlcnRUbyhGbG9hdCwgIjEiKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMS4wKSwgdikKCXYsIGVyciA9IENvbnZlcnRUb0Zsb2F0KCIxLjUiKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMS41KSwgdikKCXYsIGVyciA9IENvbnZlcnRUb0Zsb2F0KCIxLjAiKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMS4wKSwgdikKCXYsIGVyciA9IENvbnZlcnRUbyhGbG9hdCwgdGVzdEZsb2F0WmVybykKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChmbG9hdDY0KDApLCB2KQoJdiwgZXJyID0gQ29udmVydFRvKEZsb2F0LCB0ZXN0RmxvYXRFKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMi43MTgyOCksIHYpCgl2LCBlcnIgPSBDb252ZXJ0VG8oRmxvYXQsIHRlc3RGbG9hdFBpKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMy4xNDE1OTcpLCB2KQoJZm9yIF8sIGZhaWwgOj0gcmFuZ2UgW11zdHJpbmd7YHBvdGF0b2AsIGB0cnVlYCwgYDIwMTUtMDUtMDEgMDA6MTU6MTZgfSB7CgkJXywgZXJyIDo9IENvbnZlcnRUbyhGbG9hdCwgZmFpbCkKCQlhc3NlcnQuRXJyb3IoZXJyKQoJCV8sIGVyciA9IENvbnZlcnRUb0Zsb2F0KGZhaWwpCgkJYXNzZXJ0LkVycm9yKGVycikKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestConvertToInteger",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestConvertToInteger(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2LCBlcnIgOj0gQ29udmVydFRvKEludGVnZXIsIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChpbnQ2NCgwKSwgdikKCXYsIGVyciA9IENvbnZlcnRUbyhJbnRlZ2VyLCAiNyIpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoaW50NjQoNyksIHYpCgl2LCBlcnIgPSBDb252ZXJ0VG9JbnRlZ2VyKCI3IikKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChpbnQ2NCg3KSwgdikKCXZhciB0bSA9IHRpbWUuRGF0ZSgyMDEwLCAyLCAyMSwgMTUsIDE0LCAxMywgMCwgdGltZS5VVEMpCgl2LCBlcnIgPSBDb252ZXJ0VG8oSW50ZWdlciwgdG0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwodG0uVW5peE5hbm8oKSwgdikKCXYsIGVyciA9IENvbnZlcnRUb0ludGVnZXIodG0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwodG0uVW5peE5hbm8oKSwgdikKCXYsIGVyciA9IENvbnZlcnRUbyhJbnRlZ2VyLCBgMjAxMC0wMi0yMSAxNToxNDoxM2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwodG0uVW5peE5hbm8oKSwgdikKCXR5cGUgdGVzdEludCBpbnQ2NAoJY29uc3QgKAoJCXRlc3RJbnQxIHRlc3RJbnQgPSBpb3RhCgkJdGVzdEludDIgICAgICAgICA9IDIKCQl0ZXN0SW50MyAgICAgICAgID0gMwoJKQoJdiwgZXJyID0gQ29udmVydFRvKEludGVnZXIsIHRlc3RJbnQxKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGludDY0KDApLCB2KQoJdiwgZXJyID0gQ29udmVydFRvKEludGVnZXIsIHRlc3RJbnQyKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGludDY0KDIpLCB2KQoJdiwgZXJyID0gQ29udmVydFRvKEludGVnZXIsIHRlc3RJbnQzKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGludDY0KDMpLCB2KQoJZm9yIF8sIGZhaWwgOj0gcmFuZ2UgW11zdHJpbmd7YDAuMGAsIGAxLjVgLCBgcG90YXRvYCwgYHRydWVgfSB7CgkJXywgZXJyIDo9IENvbnZlcnRUbyhJbnRlZ2VyLCBmYWlsKQoJCWFzc2VydC5FcnJvcihlcnIpCgkJXywgZXJyID0gQ29udmVydFRvSW50ZWdlcihmYWlsKQoJCWFzc2VydC5FcnJvcihlcnIpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestConvertToString",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestConvertToString(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2LCBlcnIgOj0gQ29udmVydFRvKFN0cmluZywgbmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBgLCB2KQoJdiwgZXJyID0gQ29udmVydFRvKFN0cmluZywgW11ieXRlezB4NzQsIDB4NjUsIDB4NzMsIDB4NzR9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0YCwgdikKCXYsIGVyciA9IENvbnZlcnRUbyhTdHJpbmcsIFtddWludDh7MHg3NCwgMHg2NSwgMHg3MywgMHg3NH0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYHRlc3RgLCB2KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestConvertToTime",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestConvertToTime(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgYXRMZWFzdE5vdyA9IHRpbWUuTm93KCkKCXZhciB2YWx1ZXMgPSBtYXBbc3RyaW5nXXRpbWUuVGltZXtgMjAxNS0wNS0wMSAwMDoxNToxNmA6IHRpbWUuRGF0ZSgyMDE1LCA1LCAxLCAwLCAxNSwgMTYsIDAsIHRpbWUuVVRDKSwgYEZyaSBNYXkgMSAwMDoxNToxNiBVVEMgMjAxNWA6IHRpbWUuRGF0ZSgyMDE1LCA1LCAxLCAwLCAxNSwgMTYsIDAsIHRpbWUuVVRDKSwgYDExMzYyMzk0NDVgOiB0aW1lLkRhdGUoMjAwNiwgMSwgMiwgMTcsIDQsIDUsIDAsIHRpbWUuTm93KCkuTG9jYXRpb24oKSksIGAyMDM4LTAxLTE5IDAzOjE0OjA2YDogdGltZS5EYXRlKDIwMzgsIDEsIDE5LCAzLCAxNCwgNiwgMCwgdGltZS5VVEMpLCBgMjAzOC0wMS0xOSAwMzoxNDowN2A6IHRpbWUuRGF0ZSgyMDM4LCAxLCAxOSwgMywgMTQsIDcsIDAsIHRpbWUuVVRDKSwgYDIwMzgtMDEtMTkgMDM6MTQ6MDhgOiB0aW1lLkRhdGUoMjAzOCwgMSwgMTksIDMsIDE0LCA4LCAwLCB0aW1lLlVUQyksIGAyMTQ3NDgzNjQ2YDogdGltZS5EYXRlKDIwMzgsIDEsIDE5LCAzLCAxNCwgNiwgMCwgdGltZS5VVEMpLCBgMjE0NzQ4MzY0N2A6IHRpbWUuRGF0ZSgyMDM4LCAxLCAxOSwgMywgMTQsIDcsIDAsIHRpbWUuVVRDKSwgYDIxNDc0ODM2NDhgOiB0aW1lLkRhdGUoMjAzOCwgMSwgMTksIDMsIDE0LCA4LCAwLCB0aW1lLlVUQyl9Cgl2LCBlcnIgOj0gQ29udmVydFRvVGltZShgbm93YCkKCWFzc2VydC5OaWwoZXJyKQoJYXNzZXJ0LlRydWUodi5BZnRlcihhdExlYXN0Tm93KSkKCXYsIGVyciA9IENvbnZlcnRUb1RpbWUodGltZS5Ob3coKSkKCWFzc2VydC5OaWwoZXJyKQoJYXNzZXJ0LlRydWUodi5BZnRlcihhdExlYXN0Tm93KSkKCXYsIGVyciA9IENvbnZlcnRUb1RpbWUoYDAwMDAtMDAtMDAgMDA6MDA6MDBgKQoJYXNzZXJ0Lk5pbChlcnIpCglhc3NlcnQuWmVybyh2KQoJZm9yIGluLCBvdXQgOj0gcmFuZ2UgdmFsdWVzIHsKCQl2LCBlcnIgOj0gQ29udmVydFRvKFRpbWUsIGluKQoJCWFzc2VydC5Ob0Vycm9yKGVycikKCQlhc3NlcnQuSXNUeXBlKHRpbWUuTm93KCksIHYpCgkJYXNzZXJ0LlRydWUob3V0LkVxdWFsKHYuKHRpbWUuVGltZSkpLCBpbikKCQl2LCBlcnIgPSBDb252ZXJ0VG9UaW1lKGluKQoJCWFzc2VydC5Ob0Vycm9yKGVycikKCQlhc3NlcnQuVHJ1ZShvdXQuRXF1YWwodi4odGltZS5UaW1lKSksIGluKQoJfQoJZm9yIF8sIGZhaWwgOj0gcmFuZ2UgW11zdHJpbmd7YDEuNWAsIGBwb3RhdG9gLCBgZmFsc2VgfSB7CgkJXywgZXJyIDo9IENvbnZlcnRUbyhUaW1lLCBmYWlsKQoJCWFzc2VydC5FcnJvcihlcnIpCgkJXywgZXJyID0gQ29udmVydFRvVGltZShmYWlsKQoJCWFzc2VydC5FcnJvcihlcnIpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestElide",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestElide(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGhlbGxvIHRoZXJlYCwgRWxpZGUoYGhlbGxvIHRoZXJlYCwgMTAwKSkKCWFzc2VydC5FcXVhbChgaGVsbG8gdGhlcmVgLCBFbGlkZVJpZ2h0KGBoZWxsbyB0aGVyZWAsIDEwMCkpCglhc3NlcnQuRXF1YWwoYGhlbGxvYCwgRWxpZGUoYGhlbGxvIHRoZXJlYCwgNSkpCglhc3NlcnQuRXF1YWwoYHRoZXJlYCwgRWxpZGVSaWdodChgaGVsbG8gdGhlcmVgLCA1KSkKCWFzc2VydC5FcXVhbChgaGVsbG8gdGhlcmVgLCBFbGlkZShgaGVsbG8gdGhlcmVgLCAxMDAsIGAuLi5gKSkKCWFzc2VydC5FcXVhbChgaGVsbG8gdGhlcmVgLCBFbGlkZVJpZ2h0KGBoZWxsbyB0aGVyZWAsIDEwMCwgYC4uLmApKQoJYXNzZXJ0LkVxdWFsKGBoZWxsby4uLmAsIEVsaWRlKGBoZWxsbyB0aGVyZWAsIDUsIGAuLi5gKSkKCWFzc2VydC5FcXVhbChgLi4udGhlcmVgLCBFbGlkZVJpZ2h0KGBoZWxsbyB0aGVyZWAsIDUsIGAuLi5gKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestElideWords",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestElideWords(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGAsIEVsaWRlV29yZHMoYGAsIDApKQoJYXNzZXJ0LkVxdWFsKGAuYCwgRWxpZGVXb3JkcyhgLmAsIDEpKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0YCwgRWxpZGVXb3JkcyhgdGVzdC5gLCAxKSkKCWFzc2VydC5FcXVhbChgVGhpcyBpcyB0aGUgc29uZyB0aGF0IG5ldmVyIGVuZHNgLCBFbGlkZVdvcmRzKGBUaGlzIGlzIHRoZSBzb25nIHRoYXQgbmV2ZXIgZW5kcywgaXQganVzdCBnb2VzIG9uIGFuZCBvbiBteSBmcmllbmRzLmAsIDcpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestExpandEnv",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestExpandEnv(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTm9FcnJvcihvcy5TZXRlbnYoYEdPU1RPQ0tVVElMX1RFU1RfSU5UYCwgYDQyYCkpCglhc3NlcnQuTm9FcnJvcihvcy5TZXRlbnYoYEdPU1RPQ0tVVElMX1RFU1RfRkxPQVRgLCBgMy4xNDE1OTc2MjVgKSkKCWFzc2VydC5Ob0Vycm9yKG9zLlNldGVudihgR09TVE9DS1VUSUxfVEVTVF9TVFJgLCBgaGVsbG9gKSkKCWFzc2VydC5Ob0Vycm9yKG9zLlNldGVudihgR09TVE9DS1VUSUxfVEVTVF9VTklDT0RFYCwgYOWLpOaBs2ApKQoJYXNzZXJ0LkVxdWFsKGBUaGUgYW5zd2VyIGlzIDQyIWAsIEV4cGFuZEVudigiVGhlIGFuc3dlciBpcyAke0dPU1RPQ0tVVElMX1RFU1RfSU5UfSEiKSkKCWFzc2VydC5FcXVhbChgVGhlIGFuc3dlciBpcyA0MiFgLCBFeHBhbmRFbnYoIlRoZSBhbnN3ZXIgaXMgJHtHT1NUT0NLVVRJTF9URVNUX0lOVDolZH0hIikpCglhc3NlcnQuRXF1YWwoYFBpIGlzIGFib3V0IDMuMTQxNTk3NjI1IWAsIEV4cGFuZEVudigiUGkgaXMgYWJvdXQgJHtHT1NUT0NLVVRJTF9URVNUX0ZMT0FUfSEiKSkKCWFzc2VydC5FcXVhbChgUGkgaXMgYWJvdXQgMy4xNCFgLCBFeHBhbmRFbnYoIlBpIGlzIGFib3V0ICR7R09TVE9DS1VUSUxfVEVTVF9GTE9BVDolLjJmfSEiKSkKCWFzc2VydC5FcXVhbChgUGkgaXMgYWJvdXQgMyFgLCBFeHBhbmRFbnYoIlBpIGlzIGFib3V0ICR7R09TVE9DS1VUSUxfVEVTVF9GTE9BVDolLjBmfSEiKSkKCWFzc2VydC5FcXVhbChgaGVsbG8sIHdvcmxkIWAsIEV4cGFuZEVudigiJHtHT1NUT0NLVVRJTF9URVNUX1NUUn0sIHdvcmxkISIpKQoJYXNzZXJ0LkVxdWFsKGBoZWxsbywgd29ybGQhYCwgRXhwYW5kRW52KCIke0dPU1RPQ0tVVElMX1RFU1RfU1RSOiVzfSwgd29ybGQhIikpCglhc3NlcnQuRXF1YWwoYGhlbGxvLCB3b3JsZCFgLCBFeHBhbmRFbnYoIiR7R09TVE9DS1VUSUxfVEVTVF9TVFI6JXZ9LCB3b3JsZCEiKSkKCWFzc2VydC5FcXVhbChgJSFkKHN0cmluZz1oZWxsbyksIHdvcmxkIWAsIEV4cGFuZEVudigiJHtHT1NUT0NLVVRJTF9URVNUX1NUUjolZH0sIHdvcmxkISIpKQoJYXNzZXJ0LkVxdWFsKGDli6TmgbNgLCBFeHBhbmRFbnYoIiR7R09TVE9DS1VUSUxfVEVTVF9VTklDT0RFfSIpKQoJYXNzZXJ0LkVxdWFsKGBgLCBFeHBhbmRFbnYoIiR7R09TVE9DS1VUSUxfVEVTVF9VTlNFVH0iKSkKCWFzc2VydC5FcXVhbChgZmFsbGJhY2sudmFsdWV8eWAsIEV4cGFuZEVudigiJHtHT1NUT0NLVVRJTF9URVNUX1VOU0VUfGZhbGxiYWNrLnZhbHVlfHl9IikpCglhc3NlcnQuRXF1YWwoYCAgICAgICAgICAgICAgICBgLCBFeHBhbmRFbnYoIiR7R09TVE9DS1VUSUxfVEVTVF9VTlNFVDolMTZzfSIpKQoJYXNzZXJ0LkVxdWFsKGBmYWxsYmFjay52YWx1ZXx5YCwgRXhwYW5kRW52KCIke0dPU1RPQ0tVVElMX1RFU1RfVU5TRVR8ZmFsbGJhY2sudmFsdWV8eTolMTZzfSIpKQoJRXhwYW5kRW52UHJlc2VydmVJZkVtcHR5ID0gdHJ1ZQoJYXNzZXJ0LkVxdWFsKGAke0dPU1RPQ0tVVElMX1RFU1RfVU5TRVR9YCwgRXhwYW5kRW52KCIke0dPU1RPQ0tVVElMX1RFU1RfVU5TRVR9IikpCglhc3NlcnQuRXF1YWwoYGZhbGxiYWNrLnZhbHVlfHlgLCBFeHBhbmRFbnYoIiR7R09TVE9DS1VUSUxfVEVTVF9VTlNFVHxmYWxsYmFjay52YWx1ZXx5fSIpKQoJYXNzZXJ0LkVxdWFsKGAke0dPU1RPQ0tVVElMX1RFU1RfVU5TRVR9YCwgRXhwYW5kRW52KCIke0dPU1RPQ0tVVElMX1RFU1RfVU5TRVQ6JTE2c30iKSkKCWFzc2VydC5FcXVhbChgZmFsbGJhY2sudmFsdWV8eWAsIEV4cGFuZEVudigiJHtHT1NUT0NLVVRJTF9URVNUX1VOU0VUfGZhbGxiYWNrLnZhbHVlfHk6JTE2c30iKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestHyphenate",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestHyphenate(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgdGVzdHMgPSBtYXBbc3RyaW5nXXN0cmluZ3tgVGVzdGA6IGB0ZXN0YCwgYHRlc3RgOiBgdGVzdGAsIGB0ZXN0X3ZhbHVlYDogYHRlc3QtdmFsdWVgLCBgdGVzdC1WYWx1ZWA6IGB0ZXN0LXZhbHVlYCwgYHRlc3QgdmFsdWVgOiBgdGVzdC12YWx1ZWAsIGBUZXN0VmFsdWVgOiBgdGVzdC12YWx1ZWAsIGB0ZXN0VmFsdWVgOiBgdGVzdC12YWx1ZWAsIGBUZVN0IFZhTHVlYDogYHRlLXN0LXZhLWx1ZWB9Cglmb3IgaGF2ZSwgd2FudCA6PSByYW5nZSB0ZXN0cyB7CgkJYXNzZXJ0LkVxdWFsKHdhbnQsIEh5cGhlbmF0ZShoYXZlKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsHexadecimal",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsHexadecimal(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglmb3IgaSA6PSAwOyBpIDwgMTY7IGkrKyB7CgkJYXNzZXJ0LlRydWUoSXNIZXhhZGVjaW1hbChmbXQuU3ByaW50ZigiJXgiLCBpKSwgLTEpKQoJCWFzc2VydC5UcnVlKElzSGV4YWRlY2ltYWwoZm10LlNwcmludGYoIiVYIiwgaSksIC0xKSkKCX0KCWZvciBpIDo9IDEwOyBpIDwgMTY7IGkrKyB7CgkJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoZm10LlNwcmludGYoIiV4JVgiLCBpLCBpKSwgLTEpKQoJCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGZtdC5TcHJpbnRmKCIlWCV4IiwgaSwgaSksIC0xKSkKCQlhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChmbXQuU3ByaW50ZigiJXgiLCBpKSwgMikpCgkJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoZm10LlNwcmludGYoIiVYIiwgaSksIDIpKQoJfQoJYXNzZXJ0LlRydWUoSXNIZXhhZGVjaW1hbChgYWJjMTIzYCwgLTEpKQoJYXNzZXJ0LlRydWUoSXNIZXhhZGVjaW1hbChgQUJDMTIzYCwgLTEpKQoJYXNzZXJ0LlRydWUoSXNIZXhhZGVjaW1hbChgYWJjMTIzYCwgNikpCglhc3NlcnQuVHJ1ZShJc0hleGFkZWNpbWFsKGBBQkMxMjNgLCA2KSkKCWFzc2VydC5UcnVlKElzSGV4YWRlY2ltYWwoYGIyNjI1Mjg2MmExMWRkMzIyMTQyN2JkYmFlNjAyNTYwNGIxNzYwZTRgLCA0MCkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChgYUJjMTIzYCwgLTEpKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYGFiYzEyM2AsIDMyKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGBBQkMxMjNgLCAzMikpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsMixedCase",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsMixedCase(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRmFsc2UoSXNNaXhlZENhc2UoYGApKQoJYXNzZXJ0LkZhbHNlKElzTWl4ZWRDYXNlKGAwMTIzNDU2Nzg5YCkpCglhc3NlcnQuRmFsc2UoSXNNaXhlZENhc2UoYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YCkpCglhc3NlcnQuRmFsc2UoSXNNaXhlZENhc2UoYGFiY2RlZmdoaWprbG0wMTIzNDU2Nzg5bm9wcXJzdHV2d3h5emApKQoJYXNzZXJ0LkZhbHNlKElzTWl4ZWRDYXNlKGBBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmApKQoJYXNzZXJ0LkZhbHNlKElzTWl4ZWRDYXNlKGBBQkNERUZHSElKS0xNMDEyMzQ1Njc4OU5PUFFSU1RVVldYWVpgKSkKCWFzc2VydC5GYWxzZShJc01peGVkQ2FzZShgIEFCQ0RFRkdISUpLTE0gMDEyMzQ1Njc4OSBOT1BRUlNUVVZXWFlaIGApKQoJYXNzZXJ0LkZhbHNlKElzTWl4ZWRDYXNlKGDRgdC+0Y7MgdC3YCkpCglhc3NlcnQuRmFsc2UoSXNNaXhlZENhc2UoYNCh0J7QrsyB0JdgKSkKCWFzc2VydC5UcnVlKElzTWl4ZWRDYXNlKGBBYkNkRWZHaElqS2xNbk9wUXJTdFV2V3hZemApKQoJYXNzZXJ0LlRydWUoSXNNaXhlZENhc2UoYEFCQ0RFRkdISUpLTE0wMTIzNDU2Nzg5bm9wcXJzdHV2d3h5emApKQoJYXNzZXJ0LlRydWUoSXNNaXhlZENhc2UoYNCh0L7RjsyB0LdgKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestLongestCommonPrefix",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestLongestCommonPrefix(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGAsIExvbmdlc3RDb21tb25QcmVmaXgobmlsKSkKCWFzc2VydC5FcXVhbChgaW50ZXJzdGVsbGFyYCwgTG9uZ2VzdENvbW1vblByZWZpeChbXXN0cmluZ3tgaW50ZXJzdGVsbGFyYH0pKQoJYXNzZXJ0LkVxdWFsKGBpbnRlcnNgLCBMb25nZXN0Q29tbW9uUHJlZml4KFtdc3RyaW5ne2BpbnRlcnN0ZWxsYXJgLCBgaW50ZXJzcGFjZWAsIGBpbnRlcnN0aXRpYWxgfSkpCglhc3NlcnQuRXF1YWwoYGludGVyYCwgTG9uZ2VzdENvbW1vblByZWZpeChbXXN0cmluZ3tgaW50ZXJzdGVsbGFyYCwgYGludGVyc3BhY2VgLCBgaW50ZXJzdGl0aWFsYCwgYGludGVyZXN0aW5nYCwgYGludGVyZXN0YH0pKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0LmAsIExvbmdlc3RDb21tb25QcmVmaXgoW11zdHJpbmd7YHRlc3QudmFsdWVgLCBgdGVzdC5kZWJ1Z2AsIGB0ZXN0LnRlc3RgfSkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestPrefixLines",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestPrefixLines(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoIi4uLjFcbi4uLjJcbi4uLjMiLCBQcmVmaXhMaW5lcygiMVxuMlxuMyIsIGAuLi5gKSkKCWFzc2VydC5FcXVhbCgiLi4uMVxuLi4uMlxuLi4uM1xuLi4uIiwgUHJlZml4TGluZXMoIjFcbjJcbjNcbiIsIGAuLi5gKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestRelaxedEqual",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestRelaxedEqual(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgllcSwgZXJyIDo9IFJlbGF4ZWRFcXVhbChuaWwsIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKGVxKQoJZXEsIGVyciA9IFJlbGF4ZWRFcXVhbCgxLCAxKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LlRydWUoZXEpCgllcSwgZXJyID0gUmVsYXhlZEVxdWFsKGludCgxKSwgaW50NjQoMSkpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZShlcSkKCWVxLCBlcnIgPSBSZWxheGVkRXF1YWwoZmxvYXQ2NCgxKSwgYnl0ZSgxKSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKGVxKQoJZXEsIGVyciA9IFJlbGF4ZWRFcXVhbChmbG9hdDY0KDEuMDApLCBgMWApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZShlcSkKCWVxLCBlcnIgPSBSZWxheGVkRXF1YWwodHJ1ZSwgdHJ1ZSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKGVxKQoJZXEsIGVyciA9IFJlbGF4ZWRFcXVhbChmYWxzZSwgZmFsc2UpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZShlcSkKCWVxLCBlcnIgPSBSZWxheGVkRXF1YWwoYHRydWVgLCBgb25gKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LlRydWUoZXEpCgllcSwgZXJyID0gUmVsYXhlZEVxdWFsKGB0cnVlYCwgYHllc2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZShlcSkKCWVxLCBlcnIgPSBSZWxheGVkRXF1YWwoYGJvb2AsIGBib29gKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LlRydWUoZXEpCgllcSwgZXJyID0gUmVsYXhlZEVxdWFsKDEsIHRydWUpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRmFsc2UoZXEpCgllcSwgZXJyID0gUmVsYXhlZEVxdWFsKHRydWUsIGZhbHNlKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkZhbHNlKGVxKQoJZXEsIGVyciA9IFJlbGF4ZWRFcXVhbChmYWxzZSwgdHJ1ZSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5GYWxzZShlcSkKCWVxLCBlcnIgPSBSZWxheGVkRXF1YWwoYHRydWVgLCBgbm9gKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkZhbHNlKGVxKQoJZXEsIGVyciA9IFJlbGF4ZWRFcXVhbChgZmFsc2VgLCBgeWVzYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5GYWxzZShlcSkKCWVxLCBlcnIgPSBSZWxheGVkRXF1YWwoYGJvb2AsIGBCb29gKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkZhbHNlKGVxKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestScanInterceptorAddIntercept",
                        "Comment": "test add intercept after the fact\n---------------------------------------------------------------------------------------------",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestScanInterceptorAddIntercept(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyb3JzID0gMAoJdmFyIHdhcm5pbmdzID0gMAoJdmFyIGxpbmVzIFtdc3RyaW5nCgl2YXIgc3BsaXR0ZXIgPSBOZXdTY2FuSW50ZXJjZXB0b3IoYnVmaW8uU2NhbkxpbmVzLCBtYXBbc3RyaW5nXUludGVyY2VwdEZ1bmN7YFtlcnJvcl0gYDogZnVuYyhzZXEgW11ieXRlKSB7CgkJZXJyb3JzICs9IDEKCX19KQoJdmFyIGRhdGEgPSBieXRlcy5OZXdCdWZmZXIoW11ieXRlKCJXYXJuaW5nOiBQZXJtYW5lbnRseSBhZGRlZCAnWzEyNy4wLjAuMV06MjIwMCcgKEVDRFNBKSB0byB0aGUgbGlzdCBvZiBrbm93biBob3N0cy5cbiIgKyAiW2Vycm9yXSBzb21ldGhpbmcgY29vbCB3ZW50IHdyb25nXG4iKSkKCXZhciBzY2FubmVyID0gYnVmaW8uTmV3U2Nhbm5lcihkYXRhKQoJc2Nhbm5lci5TcGxpdChzcGxpdHRlci5TY2FuKQoJZm9yIHNjYW5uZXIuU2NhbigpIHsKCQlsaW5lcyA9IGFwcGVuZChsaW5lcywgc2Nhbm5lci5UZXh0KCkpCgl9Cglhc3NlcnQuTm9FcnJvcihzY2FubmVyLkVycigpKQoJYXNzZXJ0LkVxdWFsKDEsIGVycm9ycykKCWFzc2VydC5FcXVhbCgwLCB3YXJuaW5ncykKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgV2FybmluZzogUGVybWFuZW50bHkgYWRkZWQgJ1sxMjcuMC4wLjFdOjIyMDAnIChFQ0RTQSkgdG8gdGhlIGxpc3Qgb2Yga25vd24gaG9zdHMuYCwgYFtlcnJvcl0gc29tZXRoaW5nIGNvb2wgd2VudCB3cm9uZ2B9LCBsaW5lcykKCXNjYW5uZXIgPSBidWZpby5OZXdTY2FubmVyKGRhdGEpCglzY2FubmVyLlNwbGl0KHNwbGl0dGVyLlNjYW4pCglzcGxpdHRlci5JbnRlcmNlcHQoYFdhcm5pbmc6YCwgZnVuYyhzZXEgW11ieXRlKSB7CgkJd2FybmluZ3MgKz0gMQoJfSkKCWxpbmVzID0gbmlsCglkYXRhLldyaXRlU3RyaW5nKCJzb21lIGNvb2wgc3R1ZmYgZ29pbmcgb24gT0ggTk9PT08gV2FybmluZzogTk9PT09PT09cbiIpCglmb3Igc2Nhbm5lci5TY2FuKCkgewoJCWxpbmVzID0gYXBwZW5kKGxpbmVzLCBzY2FubmVyLlRleHQoKSkKCX0KCWFzc2VydC5Ob0Vycm9yKHNjYW5uZXIuRXJyKCkpCglhc3NlcnQuRXF1YWwoMSwgd2FybmluZ3MpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YHNvbWUgY29vbCBzdHVmZiBnb2luZyBvbiBPSCBOT09PTyBXYXJuaW5nOiBOT09PT09PT2B9LCBsaW5lcykKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestScanInterceptorBinarySubsequence",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestScanInterceptorBinarySubsequence(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgdGVybWluYXRvcnMgPSAwCgl2YXIgc3BsaXR0ZXIgPSBOZXdTY2FuSW50ZXJjZXB0b3IoYnVmaW8uU2NhbkJ5dGVzKQoJdmFyIGRhdGEgPSBieXRlcy5OZXdCdWZmZXIoW11ieXRlezB4NzEsIDB4MDAsIDB4NWQsIDB4MTMsIDB4ZmUsIDB4MDUsIDB4ZmYsIDB4ZmYsIDB4ZTcsIDB4ZmUsIDB4MDAsIDB4MTYsIDB4MjAsIDB4MDIsIDB4MDcsIDB4NWQsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4YWEsIDB4NTV9KQoJc3BsaXR0ZXIuSW50ZXJjZXB0KHN0cmluZyhbXWJ5dGV7MHhBQSwgMHg1NX0pLCBmdW5jKHNlcSBbXWJ5dGUpIHsKCQl0ZXJtaW5hdG9ycyArPSAxCgl9KQoJdmFyIHNjYW5uZXIgPSBidWZpby5OZXdTY2FubmVyKGRhdGEpCglzY2FubmVyLlNwbGl0KHNwbGl0dGVyLlNjYW4pCglmb3Igc2Nhbm5lci5TY2FuKCkgewoJCWNvbnRpbnVlCgl9Cglhc3NlcnQuTm9FcnJvcihzY2FubmVyLkVycigpKQoJYXNzZXJ0LkVxdWFsKDEsIHRlcm1pbmF0b3JzKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestScanInterceptorMultiple",
                        "Comment": "test multiple subsequences\n---------------------------------------------------------------------------------------------",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestScanInterceptorMultiple(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyb3JzID0gMAoJdmFyIHByb21wdHMgPSAwCgl2YXIgbGluZXMgW11zdHJpbmcKCXZhciBzcGxpdHRlciA9IE5ld1NjYW5JbnRlcmNlcHRvcihidWZpby5TY2FuTGluZXMsIG1hcFtzdHJpbmddSW50ZXJjZXB0RnVuY3tgW2Vycm9yXSBgOiBmdW5jKHNlcSBbXWJ5dGUpIHsKCQllcnJvcnMgKz0gMQoJfSwgYCBwYXNzd29yZDogYDogZnVuYyhzZXEgW11ieXRlKSB7CgkJcHJvbXB0cyArPSAxCgl9LCBgUGFzc3dvcmQ6IGA6IGZ1bmMoc2VxIFtdYnl0ZSkgewoJCXByb21wdHMgKz0gMQoJfX0pCgl2YXIgZGF0YSA9IGJ5dGVzLk5ld0J1ZmZlcihbXWJ5dGUoIlBhc3N3b3JkOiBbZXJyb3JdIHNvbWV0aGluZyBjb29sIHdlbnQgd3JvbmdcbiIgKyAidGVzdEAxMjcuMC4wLjEncyBwYXNzd29yZDogIikpCgl2YXIgc2Nhbm5lciA9IGJ1ZmlvLk5ld1NjYW5uZXIoZGF0YSkKCXNjYW5uZXIuU3BsaXQoc3BsaXR0ZXIuU2NhbikKCWZvciBzY2FubmVyLlNjYW4oKSB7CgkJbGluZXMgPSBhcHBlbmQobGluZXMsIHNjYW5uZXIuVGV4dCgpKQoJfQoJYXNzZXJ0Lk5vRXJyb3Ioc2Nhbm5lci5FcnIoKSkKCWFzc2VydC5FcXVhbCgxLCBlcnJvcnMpCglhc3NlcnQuRXF1YWwoMiwgcHJvbXB0cykKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgUGFzc3dvcmQ6IFtlcnJvcl0gc29tZXRoaW5nIGNvb2wgd2VudCB3cm9uZ2AsIGB0ZXN0QDEyNy4wLjAuMSdzIHBhc3N3b3JkOiBgfSwgbGluZXMpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestScanInterceptorNothing",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestScanInterceptorNothing(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbGluZXMgW11zdHJpbmcKCXZhciBzcGxpdHRlciA9IE5ld1NjYW5JbnRlcmNlcHRvcihidWZpby5TY2FuTGluZXMpCgl2YXIgZGF0YSA9IGJ5dGVzLk5ld0J1ZmZlcihbXWJ5dGUoImZpcnN0XG5zZWNvbmRcbnRoaXJkXG4iKSkKCXZhciBzY2FubmVyID0gYnVmaW8uTmV3U2Nhbm5lcihkYXRhKQoJc2Nhbm5lci5TcGxpdChzcGxpdHRlci5TY2FuKQoJZm9yIHNjYW5uZXIuU2NhbigpIHsKCQlsaW5lcyA9IGFwcGVuZChsaW5lcywgc2Nhbm5lci5UZXh0KCkpCgl9Cglhc3NlcnQuTm9FcnJvcihzY2FubmVyLkVycigpKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BmaXJzdGAsIGBzZWNvbmRgLCBgdGhpcmRgfSwgbGluZXMpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestScanInterceptorRepeats",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestScanInterceptorRepeats(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgdGhlID0gMAoJdmFyIGZhdGhlciA9IDAKCXZhciBoYWQgPSAwCgl2YXIgc3BsaXR0ZXIgPSBOZXdTY2FuSW50ZXJjZXB0b3IoYnVmaW8uU2NhbkxpbmVzLCBtYXBbc3RyaW5nXUludGVyY2VwdEZ1bmN7YHRoZWA6IGZ1bmMoc2VxIFtdYnl0ZSkgewoJCXRoZSArPSAxCgl9LCBgRmF0aGVyYDogZnVuYyhzZXEgW11ieXRlKSB7CgkJZmF0aGVyICs9IDEKCX0sIGBoYWRgOiBmdW5jKHNlcSBbXWJ5dGUpIHsKCQloYWQgKz0gMQoJfX0pCgl2YXIgZGF0YSA9IGJ5dGVzLk5ld0J1ZmZlcihbXWJ5dGUoIkl0IHdhcyBOb3ZlbWJlci4gQWx0aG91Z2ggaXQgd2FzIG5vdCB5ZXQgbGF0ZSwgdGhlIHNreSB3YXMgZGFyayB3aGVuIEkgdHVybmVkIGludG8gTGF1bmRyZXNzICIgKyAiUGFzc2FnZS4gRmF0aGVyIGhhZCBmaW5pc2hlZCBmb3IgdGhlIGRheSwgc3dpdGNoZWQgb2ZmIHRoZSBzaG9wIGxpZ2h0cyBhbmQgY2xvc2VkIHRoZSBzaHV0dGVyczsgIiArICJidXQgc28gSSB3b3VsZCBub3QgY29tZSBob21lIHRvIGRhcmtuZXNzIGhlIGhhZCBsZWZ0IG9uIHRoZSBsaWdodCBvdmVyIHRoZSBzdGFpcnMgdG8gdGhlIGZsYXQuICIgKyAiVGhyb3VnaCB0aGUgZ2xhc3MgaW4gdGhlIGRvb3IgaXQgY2FzdCBhIGZvb2xzY2FwIHJlY3RhbmdsZSBvZiBwYWxlbmVzcyBvbnRvIHRoZSB3ZXQgcGF2ZW1lbnQsIGFuZCAiICsgIml0IHdhcyB3aGlsZSBJIHdhcyBzdGFuZGluZyBpbiB0aGF0IHJlY3RhbmdsZSwgYWJvdXQgdG8gdHVybiBteSBrZXkgaW4gdGhlIGRvb3IsIHRoYXQgSSBmaXJzdCBzYXcgIiArICJ0aGUgbGV0dGVyLiBBbm90aGVyIHdoaXRlIHJlY3RhbmdsZSwgaXQgd2FzIG9uIHRoZSBmaWZ0aCBzdGVwIGZyb20gdGhlIGJvdHRvbSwgd2hlcmUgSSBjb3VsZG4ndCBtaXNzIGl0LlxuIiArICJcbiIgKyAiSSBjbG9zZWQgdGhlIGRvb3IgYW5kIHB1dCB0aGUgc2hvcCBrZXkgaW4gaXRzIHVzdWFsIHBsYWNlIGJlaGluZCBCYWlsZXkncyBBZHZhbmNlZCBQcmluY2lwbGVzIG9mIEdlb21ldHJ5LiAiICsgIlBvb3IgQmFpbGV5LiBObyBvbmUgaGFzIHdhbnRlZCBoaXMgZmF0IGdyYXkgYm9vayBmb3IgdGhpcnR5IHllYXJzLiBTb21ldGltZXMgSSB3b25kZXIgd2hhdCBoZSBtYWtlcyBvZiBoaXMgIiArICJyb2xlIGFzIGd1YXJkaWFuIG9mIHRoZSBib29rc2hvcCBrZXlzLiBJIGRvbid0IHN1cHBvc2UgaXQncyB0aGUgZGVzdGlueSBoZSBoYWQgaW4gbWluZCBmb3IgdGhlIG1hc3RlcndvcmsgIiArICJ0aGF0IGhlIHNwZW50IHR3byBkZWNhZGVzIHdyaXRpbmcuIikpCgl2YXIgc2Nhbm5lciA9IGJ1ZmlvLk5ld1NjYW5uZXIoZGF0YSkKCXNjYW5uZXIuU3BsaXQoc3BsaXR0ZXIuU2NhbikKCWZvciBzY2FubmVyLlNjYW4oKSB7CgkJY29udGludWUKCX0KCWFzc2VydC5Ob0Vycm9yKHNjYW5uZXIuRXJyKCkpCglhc3NlcnQuRXF1YWwoMjEsIHRoZSkKCWFzc2VydC5FcXVhbCgxLCBmYXRoZXIpCglhc3NlcnQuRXF1YWwoMywgaGFkKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestScanInterceptorSingle",
                        "Comment": "test single subsequence\n---------------------------------------------------------------------------------------------",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestScanInterceptorSingle(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyb3JzID0gMAoJdmFyIHByb21wdHMgPSAwCgl2YXIgbGluZXMgW11zdHJpbmcKCXZhciBzcGxpdHRlciA9IE5ld1NjYW5JbnRlcmNlcHRvcihidWZpby5TY2FuTGluZXMsIG1hcFtzdHJpbmddSW50ZXJjZXB0RnVuY3tgW2Vycm9yXSBgOiBmdW5jKHNlcSBbXWJ5dGUpIHsKCQllcnJvcnMgKz0gMQoJfSwgYCBwYXNzd29yZDogYDogZnVuYyhzZXEgW11ieXRlKSB7CgkJcHJvbXB0cyArPSAxCgl9LCBgUGFzc3dvcmQ6IGA6IGZ1bmMoc2VxIFtdYnl0ZSkgewoJCXByb21wdHMgKz0gMQoJfX0pCgl2YXIgZGF0YSA9IGJ5dGVzLk5ld0J1ZmZlcihbXWJ5dGUoIldhcm5pbmc6IFBlcm1hbmVudGx5IGFkZGVkICdbMTI3LjAuMC4xXToyMjAwJyAoRUNEU0EpIHRvIHRoZSBsaXN0IG9mIGtub3duIGhvc3RzLlxuIiArICJ0ZXN0QDEyNy4wLjAuMSdzIHBhc3N3b3JkOiAiKSkKCXZhciBzY2FubmVyID0gYnVmaW8uTmV3U2Nhbm5lcihkYXRhKQoJc2Nhbm5lci5TcGxpdChzcGxpdHRlci5TY2FuKQoJZm9yIHNjYW5uZXIuU2NhbigpIHsKCQlsaW5lcyA9IGFwcGVuZChsaW5lcywgc2Nhbm5lci5UZXh0KCkpCgl9Cglhc3NlcnQuTm9FcnJvcihzY2FubmVyLkVycigpKQoJYXNzZXJ0LkVxdWFsKDAsIGVycm9ycykKCWFzc2VydC5FcXVhbCgxLCBwcm9tcHRzKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BXYXJuaW5nOiBQZXJtYW5lbnRseSBhZGRlZCAnWzEyNy4wLjAuMV06MjIwMCcgKEVDRFNBKSB0byB0aGUgbGlzdCBvZiBrbm93biBob3N0cy5gLCBgdGVzdEAxMjcuMC4wLjEncyBwYXNzd29yZDogYH0sIGxpbmVzKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSnakeify",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSnakeify(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgdGVzdHMgPSBtYXBbc3RyaW5nXXN0cmluZ3tgVGVzdGA6IGB0ZXN0YCwgYHRlc3RgOiBgdGVzdGAsIGB0ZXN0X3ZhbHVlYDogYHRlc3Q6dmFsdWVgLCBgdGVzdC1WYWx1ZWA6IGB0ZXN0OnZhbHVlYCwgYHRlc3QgdmFsdWVgOiBgdGVzdDp2YWx1ZWAsIGBUZXN0VmFsdWVgOiBgdGVzdDp2YWx1ZWAsIGB0ZXN0VmFsdWVgOiBgdGVzdDp2YWx1ZWAsIGBUZVN0IFZhTHVlYDogYHRlOnN0OnZhOmx1ZWB9Cglmb3IgaGF2ZSwgd2FudCA6PSByYW5nZSB0ZXN0cyB7CgkJYXNzZXJ0LkVxdWFsKHdhbnQsIFNuYWtlaWZ5KGhhdmUsICc6JykpCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSplitPairFamily",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSplitPairFamily(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmlyc3QsIHJlc3Qgc3RyaW5nCglmaXJzdCwgcmVzdCA9IFNwbGl0UGFpcihgYCwgYC5gKQoJYXNzZXJ0LkVxdWFsKGBgLCBmaXJzdCkKCWFzc2VydC5FcXVhbChgYCwgcmVzdCkKCWZpcnN0LCByZXN0ID0gU3BsaXRQYWlyKGB0ZXN0YCwgYC5gKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0YCwgZmlyc3QpCglhc3NlcnQuRXF1YWwoYGAsIHJlc3QpCglmaXJzdCwgcmVzdCA9IFNwbGl0UGFpcihgdGVzdC52YWx1ZXNgLCBgLmApCglhc3NlcnQuRXF1YWwoYHRlc3RgLCBmaXJzdCkKCWFzc2VydC5FcXVhbChgdmFsdWVzYCwgcmVzdCkKCWZpcnN0LCByZXN0ID0gU3BsaXRQYWlyKGB0ZXN0LnZhbHVlcy5uZXN0ZWRgLCBgLmApCglhc3NlcnQuRXF1YWwoYHRlc3RgLCBmaXJzdCkKCWFzc2VydC5FcXVhbChgdmFsdWVzLm5lc3RlZGAsIHJlc3QpCgl2YXIgaywgdiA9IFNwbGl0UGFpckF1dG8oYHg9MWAsIGA9YCkKCWFzc2VydC5FcXVhbChgeGAsIGspCglhc3NlcnQuRXF1YWwoaW50NjQoMSksIHYpCglrLCB2ID0gU3BsaXRQYWlyQXV0byhgeT10cnVlYCwgYD1gKQoJYXNzZXJ0LkVxdWFsKGB5YCwgaykKCWFzc2VydC5FcXVhbCh0cnVlLCB2KQoJaywgdiA9IFNwbGl0UGFpckF1dG8oYGQ9MjAwNi0wMS0wMmAsIGA9YCkKCWFzc2VydC5FcXVhbChgZGAsIGspCglhc3NlcnQuRXF1YWwoMjAwNiwgdi4odGltZS5UaW1lKS5ZZWFyKCkpCglhc3NlcnQuRXF1YWwodGltZS5KYW51YXJ5LCB2Lih0aW1lLlRpbWUpLk1vbnRoKCkpCglhc3NlcnQuRXF1YWwoMiwgdi4odGltZS5UaW1lKS5EYXkoKSkKCWZpcnN0LCByZXN0ID0gU3BsaXRQYWlyVHJpbVNwYWNlKGAgdGVzdCBgLCBgLmApCglhc3NlcnQuRXF1YWwoYHRlc3RgLCBmaXJzdCkKCWFzc2VydC5FcXVhbChgYCwgcmVzdCkKCWZpcnN0LCByZXN0ID0gU3BsaXRQYWlyVHJpbVNwYWNlKGAgIHRlc3QgIC4gICAgdmFsdWVzCQkgYCwgYC5gKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0YCwgZmlyc3QpCglhc3NlcnQuRXF1YWwoYHZhbHVlc2AsIHJlc3QpCglmaXJzdCwgcmVzdCA9IFNwbGl0UGFpclRyaW1TcGFjZShgICAgdGVzdCAgLiAgdmFsdWVzICAuICBuZXN0ZWRgLCBgLmApCglhc3NlcnQuRXF1YWwoYHRlc3RgLCBmaXJzdCkKCWFzc2VydC5FcXVhbChgdmFsdWVzICAuICBuZXN0ZWRgLCByZXN0KQoJZmlyc3QsIHJlc3QgPSBTcGxpdFBhaXJUcmFpbGluZyhgYCwgYC5gKQoJYXNzZXJ0LkVxdWFsKGBgLCBmaXJzdCkKCWFzc2VydC5FcXVhbChgYCwgcmVzdCkKCWZpcnN0LCByZXN0ID0gU3BsaXRQYWlyVHJhaWxpbmcoYHRlc3RgLCBgLmApCglhc3NlcnQuRXF1YWwoYGAsIGZpcnN0KQoJYXNzZXJ0LkVxdWFsKGB0ZXN0YCwgcmVzdCkKCWZpcnN0LCByZXN0ID0gU3BsaXRQYWlyVHJhaWxpbmcoYHRlc3QudmFsdWVzYCwgYC5gKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0YCwgZmlyc3QpCglhc3NlcnQuRXF1YWwoYHZhbHVlc2AsIHJlc3QpCglmaXJzdCwgcmVzdCA9IFNwbGl0UGFpclRyYWlsaW5nKGB0ZXN0LnZhbHVlcy5uZXN0ZWRgLCBgLmApCglhc3NlcnQuRXF1YWwoYHRlc3RgLCBmaXJzdCkKCWFzc2VydC5FcXVhbChgdmFsdWVzLm5lc3RlZGAsIHJlc3QpCglmaXJzdCwgcmVzdCA9IFNwbGl0UGFpclJpZ2h0KGBgLCBgLmApCglhc3NlcnQuRXF1YWwoYGAsIGZpcnN0KQoJYXNzZXJ0LkVxdWFsKGBgLCByZXN0KQoJZmlyc3QsIHJlc3QgPSBTcGxpdFBhaXJSaWdodChgdGVzdGAsIGAuYCkKCWFzc2VydC5FcXVhbChgdGVzdGAsIGZpcnN0KQoJYXNzZXJ0LkVxdWFsKGBgLCByZXN0KQoJZmlyc3QsIHJlc3QgPSBTcGxpdFBhaXJSaWdodChgdGVzdC52YWx1ZXNgLCBgLmApCglhc3NlcnQuRXF1YWwoYHRlc3RgLCBmaXJzdCkKCWFzc2VydC5FcXVhbChgdmFsdWVzYCwgcmVzdCkKCWZpcnN0LCByZXN0ID0gU3BsaXRQYWlyUmlnaHQoYHRlc3QudmFsdWVzLm5lc3RlZGAsIGAuYCkKCWFzc2VydC5FcXVhbChgdGVzdC52YWx1ZXNgLCBmaXJzdCkKCWFzc2VydC5FcXVhbChgbmVzdGVkYCwgcmVzdCkKCWZpcnN0LCByZXN0ID0gU3BsaXRQYWlyUmlnaHRUcmFpbGluZyhgYCwgYC5gKQoJYXNzZXJ0LkVxdWFsKGBgLCBmaXJzdCkKCWFzc2VydC5FcXVhbChgYCwgcmVzdCkKCWZpcnN0LCByZXN0ID0gU3BsaXRQYWlyUmlnaHRUcmFpbGluZyhgdGVzdGAsIGAuYCkKCWFzc2VydC5FcXVhbChgYCwgZmlyc3QpCglhc3NlcnQuRXF1YWwoYHRlc3RgLCByZXN0KQoJZmlyc3QsIHJlc3QgPSBTcGxpdFBhaXJSaWdodFRyYWlsaW5nKGB0ZXN0LnZhbHVlc2AsIGAuYCkKCWFzc2VydC5FcXVhbChgdGVzdGAsIGZpcnN0KQoJYXNzZXJ0LkVxdWFsKGB2YWx1ZXNgLCByZXN0KQoJZmlyc3QsIHJlc3QgPSBTcGxpdFBhaXJSaWdodFRyYWlsaW5nKGB0ZXN0LnZhbHVlcy5uZXN0ZWRgLCBgLmApCglhc3NlcnQuRXF1YWwoYHRlc3QudmFsdWVzYCwgZmlyc3QpCglhc3NlcnQuRXF1YWwoYG5lc3RlZGAsIHJlc3QpCn0vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0K",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSplitTrim",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSplitTrim(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7fSwgU3BsaXRUcmltKGBgLCBgYCwgYGApKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBTcGxpdFRyaW0oYGE6YjpjYCwgYDpgLCBgYCkpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YGFgLCBgYmAsIGBjYH0sIFNwbGl0VHJpbShgIGEgOmIgOiBjYCwgYDpgLCBgIGApKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2AgYSBgLCBgIGIgYCwgYCBjIGB9LCBTcGxpdFRyaW0oYD4gYSA6PiBiIDo+IGMgYCwgYDpgLCBgPmApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSplitTrimSpace",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSplitTrimSpace(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7fSwgU3BsaXRUcmltU3BhY2UoYGAsIGBgKSkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgU3BsaXRUcmltU3BhY2UoYGE6YjpjYCwgYDpgKSkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgU3BsaXRUcmltU3BhY2UoYCBhIDpiIDogY2AsIGA6YCkpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YD4gYWAsIGA+IGJgLCBgPiBjYH0sIFNwbGl0VHJpbVNwYWNlKGA+IGEgOj4gYiA6PiBjIGAsIGA6YCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSplitWords",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSplitWords(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YEdvbGRlbnJvZC1hZG9ybmVkYCwgYGxvZ2AsIGAuYH0sIFNwbGl0V29yZHMoYEdvbGRlbnJvZC1hZG9ybmVkIGxvZy5gKSkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgR29sZGVucm9kYCwgYGFkb3JuZWRgLCBgbG9nYCwgYC5gfSwgU3BsaXRXb3JkcyhgR29sZGVucm9kIGFkb3JuZWQgbG9nLmApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSqueezes",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSqueezes(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRW1wdHkoU3F1ZWV6ZShgYCkpCglhc3NlcnQuRXF1YWwoYCBgLCBTcXVlZXplKGAgICAgIGApKQoJYXNzZXJ0LkVxdWFsKGBUaGlzc3NzIGlzIGEgdGVzdC5gLCBTcXVlZXplU3BhY2UoYFRoaXNzc3MgICBpcyBhICAgICAgdGVzdC5gKSkKCWFzc2VydC5FcXVhbCgiXHQgVGhpcyBpcyBhIHRlc3QuIFx0ICIsIFNxdWVlemVTcGFjZSgiXHRcdCAgVGhpcyAgIGlzIGEgICAgICB0ZXN0LiBcdCAiKSkKCWFzc2VydC5FcXVhbChgVGhpcyBpcyBhIHRlc3QuYCwgU3F1ZWV6ZShgVGhpc3NzcyAgIGlzIGEgICAgICB0ZXN0LmApKQoJYXNzZXJ0LkVxdWFsKGDli6TmgbNgLCBTcXVlZXplKGDli6Tli6TmgbPmgbNgKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSuffixLines",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSuffixLines(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoIjE8PDxcbjI8PDxcbjM8PDwiLCBTdWZmaXhMaW5lcygiMVxuMlxuMyIsIGA8PDxgKSkKCWFzc2VydC5FcXVhbCgiMTw8PFxuMjw8PFxuMzw8PFxuPDw8IiwgU3VmZml4TGluZXMoIjFcbjJcbjNcbiIsIGA8PDxgKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestThousandify",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestThousandify(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGAsIFRob3VzYW5kaWZ5KGBgLCBgYCwgYGApKQoJYXNzZXJ0LkVxdWFsKGAwYCwgVGhvdXNhbmRpZnkoYDBgLCBgYCwgYGApKQoJYXNzZXJ0LkVxdWFsKGAxYCwgVGhvdXNhbmRpZnkoYDFgLCBgYCwgYGApKQoJYXNzZXJ0LkVxdWFsKGAxLDAwMGAsIFRob3VzYW5kaWZ5KGAxMDAwYCwgYGAsIGBgKSkKCWFzc2VydC5FcXVhbChgMSwwMDAuMDAwYCwgVGhvdXNhbmRpZnkoYDEwMDAuMDAwYCwgYGAsIGBgKSkKCWFzc2VydC5FcXVhbChgMSwwMDAuMDAxYCwgVGhvdXNhbmRpZnkoYDEwMDAuMDAxYCwgYGAsIGBgKSkKCWFzc2VydC5FcXVhbChgOSwyMjMsMzcyLDAzNiw4NTQsNzc1LDgwN2AsIFRob3VzYW5kaWZ5KGA5MjIzMzcyMDM2ODU0Nzc1ODA3YCwgYGAsIGBgKSkKCWFzc2VydC5FcXVhbChgLTksMjIzLDM3MiwwMzYsODU0LDc3NSw4MDlgLCBUaG91c2FuZGlmeShgLTkyMjMzNzIwMzY4NTQ3NzU4MDlgLCBgYCwgYGApKQoJYXNzZXJ0LkVxdWFsKGAtOSwyMjMsMzcyLDAzNiw4NTQsNzc1LDgwOSw5MjIsMzM3LDIwMyw2ODUsNDc3LDU4MCw5OTIsMjMzLDcyMCwzNjgsNTQ3LDc1OCwwOTksMjIzLDM3MiwwMzYsODU0LDc3NSw4MDlgLCBUaG91c2FuZGlmeShgLTkyMjMzNzIwMzY4NTQ3NzU4MDk5MjIzMzcyMDM2ODU0Nzc1ODA5OTIyMzM3MjAzNjg1NDc3NTgwOTkyMjMzNzIwMzY4NTQ3NzU4MDlgLCBgYCwgYGApKQoJYXNzZXJ0LkVxdWFsKGAwYCwgVGhvdXNhbmRpZnkoMCwgYGAsIGBgKSkKCWFzc2VydC5FcXVhbChgMWAsIFRob3VzYW5kaWZ5KDEsIGBgLCBgYCkpCglhc3NlcnQuRXF1YWwoYDEsMDAwYCwgVGhvdXNhbmRpZnkoMTAwMCwgYGAsIGBgKSkKCWFzc2VydC5FcXVhbChgMSwwMDBgLCBUaG91c2FuZGlmeSgxMDAwLjAwMCwgYGAsIGBgKSkKCWFzc2VydC5FcXVhbChgMSwwMDAuMDAxYCwgVGhvdXNhbmRpZnkoMTAwMC4wMDEsIGBgLCBgYCkpCglhc3NlcnQuRXF1YWwoYDksMjIzLDM3MiwwMzYsODU0LDc3NSw4MDdgLCBUaG91c2FuZGlmeSg5MjIzMzcyMDM2ODU0Nzc1ODA3LCBgYCwgYGApKQoJYXNzZXJ0LkVxdWFsKGAtOSwyMjMsMzcyLDAzNiw4NTQsNzc1LDgwOGAsIFRob3VzYW5kaWZ5KC05MjIzMzcyMDM2ODU0Nzc1ODA4LCBgYCwgYGApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestToByteString",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestToByteString(t *testing.T)",
                        "Source": "ewoJdmFyIHRlc3R2YWx1ZXMgPSBtYXBbYW55XXN0cmluZ3swOiBgMEJgLCAxOiBgMUJgLCAxMDIzOiBgMTAyM0JgLCAxMDI0OiBgMUtCYCwgMTUzNjogYDEuNUtCYCwgMjA0ODogYDJLQmAsIDEwNDg1NzU6IGAxMDIzLjk5OTAyMzQzNzVLQmAsIDEwNDg1NzY6IGAxTUJgfQoJZm9yIGluLCBvdXQgOj0gcmFuZ2UgdGVzdHZhbHVlcyB7CgkJaWYgdiwgZXJyIDo9IFRvQnl0ZVN0cmluZyhpbik7IGVyciAhPSBuaWwgfHwgdiAhPSBvdXQgewoJCQl0LkVycm9yZigiVmFsdWUgJXYgKCVUKSBUb0J5dGVTdHJpbmcgZmFpbGVkOiBleHBlY3RlZCAnJXMnLCBnb3QgJyVzJyAoZXJyOiAldikiLCBpbiwgaW4sIG91dCwgdiwgZXJyKQoJCX0KCX0KCXRlc3R2YWx1ZXMgPSBtYXBbYW55XXN0cmluZ3swOiBgMC4wMEJgLCAxOiBgMS4wMEJgLCAxMDIzOiBgMTAyMy4wMEJgLCAxMDI0OiBgMS4wMEtCYCwgMTUzNjogYDEuNTBLQmAsIDIwNDg6IGAyLjAwS0JgLCAxMDQ4NTc1OiBgMTAyNC4wMEtCYCwgMTA0ODU3NjogYDEuMDBNQmB9Cglmb3IgaW4sIG91dCA6PSByYW5nZSB0ZXN0dmFsdWVzIHsKCQlpZiB2LCBlcnIgOj0gVG9CeXRlU3RyaW5nKGluLCBgJS4yZmApOyBlcnIgIT0gbmlsIHx8IHYgIT0gb3V0IHsKCQkJdC5FcnJvcmYoIlZhbHVlICV2ICglVCkgVG9CeXRlU3RyaW5nIGZhaWxlZDogZXhwZWN0ZWQgJyVzJywgZ290ICclcycgKGVycjogJXYpIiwgaW4sIGluLCBvdXQsIHYsIGVycikKCQl9Cgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestToBytes",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestToBytes(t *testing.T)",
                        "Source": "ewoJdmFyIGV4cGVjdGVkID0gbWFwW3N0cmluZ11tYXBbc3RyaW5nXWZsb2F0NjR7YGA6IG1hcFtzdHJpbmddZmxvYXQ2NHtgLTFgOiAtMSwgYDBgOiAwLCBgMWA6IDEsIGA0NjExNjg2MDE4NDI3Mzg3OTAzYDogNDYxMTY4NjAxODQyNzM4NzkwMywgYDQ2MTE2ODYwMTg0MjczODc5MDRgOiA0NjExNjg2MDE4NDI3Mzg3OTA0LCBgNDYxMTY4NjAxODQyNzM4NzkwNWA6IDQ2MTE2ODYwMTg0MjczODc5MDUsIGA5MjIzMzcyMDM2ODU0Nzc1ODA3YDogOTIyMzM3MjAzNjg1NDc3NTgwNywgYC00NjExNjg2MDE4NDI3Mzg3OTAzYDogLTQ2MTE2ODYwMTg0MjczODc5MDMsIGAtNDYxMTY4NjAxODQyNzM4NzkwNGA6IC00NjExNjg2MDE4NDI3Mzg3OTA0LCBgLTQ2MTE2ODYwMTg0MjczODc5MDVgOiAtNDYxMTY4NjAxODQyNzM4NzkwNSwgYC05MjIzMzcyMDM2ODU0Nzc1ODA3YDogLTkyMjMzNzIwMzY4NTQ3NzU4MDcsIGAtOTIyMzM3MjAzNjg1NDc3NTgwOGA6IC05MjIzMzcyMDM2ODU0Nzc1ODA4fSwgYGJgOiBtYXBbc3RyaW5nXWZsb2F0NjR7YC0xYDogLTEsIGAwYDogMCwgYDFgOiAxLCBgNDYxMTY4NjAxODQyNzM4NzkwM2A6IDQ2MTE2ODYwMTg0MjczODc5MDMsIGA0NjExNjg2MDE4NDI3Mzg3OTA0YDogNDYxMTY4NjAxODQyNzM4NzkwNCwgYDQ2MTE2ODYwMTg0MjczODc5MDVgOiA0NjExNjg2MDE4NDI3Mzg3OTA1LCBgOTIyMzM3MjAzNjg1NDc3NTgwN2A6IDkyMjMzNzIwMzY4NTQ3NzU4MDcsIGAtNDYxMTY4NjAxODQyNzM4NzkwM2A6IC00NjExNjg2MDE4NDI3Mzg3OTAzLCBgLTQ2MTE2ODYwMTg0MjczODc5MDRgOiAtNDYxMTY4NjAxODQyNzM4NzkwNCwgYC00NjExNjg2MDE4NDI3Mzg3OTA1YDogLTQ2MTE2ODYwMTg0MjczODc5MDUsIGAtOTIyMzM3MjAzNjg1NDc3NTgwN2A6IC05MjIzMzcyMDM2ODU0Nzc1ODA3LCBgLTkyMjMzNzIwMzY4NTQ3NzU4MDhgOiAtOTIyMzM3MjAzNjg1NDc3NTgwOH0sIGBrYDogbWFwW3N0cmluZ11mbG9hdDY0e2AtMWA6IC0xMDI0LCBgMGA6IDAsIGAxYDogMTAyNCwgYDAuNWA6IDUxMiwgYDJgOiAyMDQ4LCBgOTAwNzE5OTI1NDc0MDk5MmA6IDkyMjMzNzIwMzY4NTQ3NzU4MDh9LCBgbWA6IG1hcFtzdHJpbmddZmxvYXQ2NHtgLTFgOiAtMTA0ODU3NiwgYDBgOiAwLCBgMWA6IDEwNDg1NzYsIGAwLjVgOiA1MjQyODgsIGA4Nzk2MDkzMDIyMjA4YDogOTIyMzM3MjAzNjg1NDc3NTgwOH0sIGBnYDogbWFwW3N0cmluZ11mbG9hdDY0e2AtMWA6IC0xMDczNzQxODI0LCBgMGA6IDAsIGAxYDogMTA3Mzc0MTgyNCwgYDAuNWA6IDUzNjg3MDkxMiwgYDg1ODk5MzQ1OTJgOiA5MjIzMzcyMDM2ODU0Nzc1ODA4fSwgYHRgOiBtYXBbc3RyaW5nXWZsb2F0NjR7YC0xYDogLTEwOTk1MTE2Mjc3NzYsIGAwYDogMCwgYDFgOiAxMDk5NTExNjI3Nzc2LCBgMC41YDogNTQ5NzU1ODEzODg4LCBgODM4ODYwOGA6IDkyMjMzNzIwMzY4NTQ3NzU4MDh9LCBgcGA6IG1hcFtzdHJpbmddZmxvYXQ2NHtgLTFgOiAtMTEyNTg5OTkwNjg0MjYyNCwgYDBgOiAwLCBgMWA6IDExMjU4OTk5MDY4NDI2MjQsIGAwLjVgOiA1NjI5NDk5NTM0MjEzMTIsIGA4MTkyYDogOTIyMzM3MjAzNjg1NDc3NTgwOH0sIGBlYDogbWFwW3N0cmluZ11mbG9hdDY0e2AtMWA6IC0xMTUyOTIxNTA0NjA2ODQ2OTc2LCBgMGA6IDAsIGAxYDogMTE1MjkyMTUwNDYwNjg0Njk3NiwgYDAuNWA6IDU3NjQ2MDc1MjMwMzQyMzQ4OCwgYDhgOiA5MjIzMzcyMDM2ODU0Nzc1ODA4fSwgYHpgOiBtYXBbc3RyaW5nXWZsb2F0NjR7YC0xYDogLTExODA1OTE2MjA3MTc0MTEzMDM0MjQsIGAwYDogMCwgYDFgOiAxMTgwNTkxNjIwNzE3NDExMzAzNDI0LCBgMC41YDogNTkwMjk1ODEwMzU4NzA1NjUxNzEyfSwgYHlgOiBtYXBbc3RyaW5nXWZsb2F0NjR7YC0xYDogLTEyMDg5MjU4MTk2MTQ2MjkxNzQ3MDYxNzYsIGAwYDogMCwgYDFgOiAxMjA4OTI1ODE5NjE0NjI5MTc0NzA2MTc2LCBgMC41YDogNjA0NDYyOTA5ODA3MzE0NTg3MzUzMDg4fX0KCXZhciB0ZXN0RXhwZWN0YXRpb25zID0gZnVuYyhleHBlY3RlZFZhbHVlcyBtYXBbc3RyaW5nXWZsb2F0NjQsIGFwcGVuZFRvSW5wdXQgc3RyaW5nKSB7CgkJZm9yIGluLCBvdXQgOj0gcmFuZ2UgZXhwZWN0ZWRWYWx1ZXMgewoJCQlpbiA9IGluICsgYXBwZW5kVG9JbnB1dAoJCQlpZiB2LCBlcnIgOj0gVG9CeXRlcyhpbik7IGVyciA9PSBuaWwgewoJCQkJaWYgdiAhPSBvdXQgewoJCQkJCXQuRXJyb3JmKCJDb252ZXJzaW9uIGVycm9yIG9uICclcyc6IGV4cGVjdGVkICVmLCBnb3QgJWYiLCBpbiwgb3V0LCB2KQoJCQkJfQoJCQl9IGVsc2UgewoJCQkJdC5FcnJvcmYoIkdvdCBlcnJvciBjb252ZXJ0aW5nICclcycgdG8gYnl0ZXM6ICV2IiwgaW4sIGVycikKCQkJfQoJCX0KCX0KCWZvciBzdWZmaXgsIGV4cGVjdGF0aW9ucyA6PSByYW5nZSBleHBlY3RlZCB7CgkJdGVzdEV4cGVjdGF0aW9ucyhleHBlY3RhdGlvbnMsIHN1ZmZpeCkKCQlpZiBzdWZmaXggIT0gYGAgJiYgc3VmZml4ICE9IGBiYCB7CgkJCXRlc3RFeHBlY3RhdGlvbnMoZXhwZWN0YXRpb25zLCBzdWZmaXgrYGJgKQoJCQl0ZXN0RXhwZWN0YXRpb25zKGV4cGVjdGF0aW9ucywgc3VmZml4K2BCYCkKCQkJdGVzdEV4cGVjdGF0aW9ucyhleHBlY3RhdGlvbnMsIHN1ZmZpeCtgaWJgKQoJCQl0ZXN0RXhwZWN0YXRpb25zKGV4cGVjdGF0aW9ucywgc3VmZml4K2BpQmApCgkJfQoJfQoJaWYgdiwgZXJyIDo9IFRvQnl0ZXMoYHBvdGF0b2ApOyBlcnIgPT0gbmlsIHsKCQl0LkVycm9yZigiVmFsdWUgJ3BvdGF0bycgaW5leHBsaWNhYmx5IHJldHVybmVkIGEgdmFsdWUgKCV2KSIsIHYpCgl9CglpZiB2LCBlcnIgOj0gVG9CeXRlcyhgcG90YXRvR2ApOyBlcnIgPT0gbmlsIHsKCQl0LkVycm9yZigiVmFsdWUgJ3BvdGF0b0cnIGluZXhwbGljYWJseSByZXR1cm5lZCBhIHZhbHVlICgldikiLCB2KQoJfQoJaWYgdiwgZXJyIDo9IFRvQnl0ZXMoYDEyM1hgKTsgZXJyID09IG5pbCB7CgkJdC5FcnJvcmYoIkludmFsaWQgU0kgc3VmZml4ICdYJyBkaWQgbm90IGVycm9yLCBnb3Q6ICV2IiwgdikKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestToString",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestToString(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgdGVzdHZhbHVlcyA9IG1hcFthbnldc3RyaW5ne25pbDogYGAsIGZtdC5FcnJvcmYoYGVycm9yLXdvcmtlZGApOiBgZXJyb3Itd29ya2VkYCwgbmV3KGZtdFN0cmluZ2VyVGVzdCk6IGBzdHJpbmdlci13b3JrZWRgLCBpbnQoMCk6IGAwYCwgaW50KDEpOiBgMWAsIGludDgoMCk6IGAwYCwgaW50OCgxKTogYDFgLCBpbnQxNigwKTogYDBgLCBpbnQxNigxKTogYDFgLCBpbnQzMigwKTogYDBgLCBpbnQzMigxKTogYDFgLCBpbnQ2NCgwKTogYDBgLCBpbnQ2NCgxKTogYDFgLCB1aW50KDApOiBgMGAsIHVpbnQoMSk6IGAxYCwgdWludDgoMCk6IGAwYCwgdWludDgoMSk6IGAxYCwgdWludDE2KDApOiBgMGAsIHVpbnQxNigxKTogYDFgLCB1aW50MzIoMCk6IGAwYCwgdWludDMyKDEpOiBgMWAsIHVpbnQ2NCgwKTogYDBgLCB1aW50NjQoMSk6IGAxYCwgZmxvYXQzMigwLjApOiBgMGAsIGZsb2F0MzIoMS4wKTogYDFgLCBmbG9hdDY0KDAuMCk6IGAwYCwgZmxvYXQ2NCgxLjApOiBgMWAsIGZsb2F0MzIoMC41KTogYDAuNWAsIGZsb2F0MzIoMS43KTogYDEuN2AsIGZsb2F0NjQoMC42KTogYDAuNmAsIGZsb2F0NjQoMS4yKTogYDEuMmB9Cglmb3IgaW4sIG91dCA6PSByYW5nZSB0ZXN0dmFsdWVzIHsKCQlpZiB2LCBlcnIgOj0gVG9TdHJpbmcoaW4pOyBlcnIgIT0gbmlsIHx8IHYgIT0gb3V0IHsKCQkJdC5FcnJvcmYoIlZhbHVlICV2ICglVCkgVG9TdHJpbmcgZmFpbGVkOiBleHBlY3RlZCAnJXMnLCBnb3QgJyVzJyAoZXJyOiAldikiLCBpbiwgaW4sIG91dCwgdiwgZXJyKQoJCX0KCX0KCXMsIGVyciA6PSBUb1N0cmluZyhbXXVpbnQ4ezB4NzQsIDB4NjUsIDB4NzMsIDB4NzR9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0YCwgcykKCXMsIGVyciA9IFRvU3RyaW5nKFtdYnl0ZXsweDc0LCAweDY1LCAweDczLCAweDc0fSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgdGVzdGAsIHMpCglzLCBlcnIgPSBUb1N0cmluZyhbXXJ1bmV7J3QnLCAnZScsICdzJywgJ3QnfSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgdGVzdGAsIHMpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestToStringSlice",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestToStringSlice(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2LCBlcnIgOj0gVG9TdHJpbmdTbGljZShbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSkKCWFzc2VydC5OaWwoZXJyKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCB2KQoJdiwgZXJyID0gVG9TdHJpbmdTbGljZShbXWludHsxLCAyLCAzfSkKCWFzc2VydC5OaWwoZXJyKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2AxYCwgYDJgLCBgM2B9LCB2KQoJdiwgZXJyID0gVG9TdHJpbmdTbGljZShbXWZsb2F0MzJ7MS41LCAyLjcsIDMuMDAzMjQ3N30pCglhc3NlcnQuTmlsKGVycikKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgMS41YCwgYDIuN2AsIGAzLjAwMzI0NzdgfSwgdikKCXYsIGVyciA9IFRvU3RyaW5nU2xpY2UoW11mbG9hdDY0ezEuNSwgMi43LCAzLjk4MzI0MTI3NTQ4OTIxMzd9KQoJYXNzZXJ0Lk5pbChlcnIpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YDEuNWAsIGAyLjdgLCBgMy45ODMyNDEyNzU0ODkyMTM3YH0sIHYpCgl2LCBlcnIgPSBUb1N0cmluZ1NsaWNlKFtdYW55ezEsIHRydWUsIDMuOTgzMjQxMjc1NDg5MjEzNywgYGZvdXJgfSkKCWFzc2VydC5OaWwoZXJyKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2AxYCwgYHRydWVgLCBgMy45ODMyNDEyNzU0ODkyMTM3YCwgYGZvdXJgfSwgdikKCXYsIGVyciA9IFRvU3RyaW5nU2xpY2UodHJ1ZSkKCWFzc2VydC5OaWwoZXJyKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2B0cnVlYH0sIHYpCgl2LCBlcnIgPSBUb1N0cmluZ1NsaWNlKHRydWUpCglhc3NlcnQuTmlsKGVycikKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgdHJ1ZWB9LCB2KQoJdiwgZXJyID0gVG9TdHJpbmdTbGljZShuaWwpCglhc3NlcnQuTmlsKGVycikKCWFzc2VydC5FcXVhbChbXXN0cmluZ3t9LCB2KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestUUID",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestUUID(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBbXWJ5dGV7MHgwMSwgMHgwMiwgMHgwMywgMHgwMSwgMHgwMiwgMHgwMywgMHgwMSwgMHgwMiwgMHgwMywgMHgwMSwgMHgwMiwgMHgwMywgMHgwMSwgMHgwMiwgMHgwMywgMHgwMX0KCXV1aWQsIGVyciA6PSBVdWlkRnJvbUJ5dGVzKGlucHV0KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGAwMTAyMDMwMS0wMjAzLTAxMDItMDMwMS0wMjAzMDEwMjAzMDFgLCB1dWlkLlN0cmluZygpKQoJYXNzZXJ0LkVxdWFsKGlucHV0LCB1dWlkLkJ5dGVzKCkpCglhc3NlcnQuRXF1YWwoYDAxMDIwMzAxMDIwMzAxMDIwMzAxMDIwMzAxMDIwMzAxYCwgdXVpZC5IZXgoKSkKCWFzc2VydC5FcXVhbChgQVFJREFRSURBUUlEQVFJREFRSURBUT09YCwgdXVpZC5CYXNlNjQoKSkKCWFzc2VydC5FcXVhbChgOERmYlV5VHIyelpBQlZaZGJtZG82YCwgdXVpZC5CYXNlNTgoKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestUnderscore",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestUnderscore(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgdGVzdHMgPSBtYXBbc3RyaW5nXXN0cmluZ3tgVGVzdGA6IGB0ZXN0YCwgYHRlc3RgOiBgdGVzdGAsIGB0ZXN0X3ZhbHVlYDogYHRlc3RfdmFsdWVgLCBgdGVzdC1WYWx1ZWA6IGB0ZXN0X3ZhbHVlYCwgYHRlc3QgdmFsdWVgOiBgdGVzdF92YWx1ZWAsIGBUZXN0VmFsdWVgOiBgdGVzdF92YWx1ZWAsIGB0ZXN0VmFsdWVgOiBgdGVzdF92YWx1ZWAsIGBUZVN0IFZhTHVlYDogYHRlX3N0X3ZhX2x1ZWB9Cglmb3IgaGF2ZSwgd2FudCA6PSByYW5nZSB0ZXN0cyB7CgkJYXNzZXJ0LkVxdWFsKHdhbnQsIFVuZGVyc2NvcmUoaGF2ZSkpCgl9Cn0=",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "ConvertType": {
                        "Name": "ConvertType",
                        "Methods": [
                            {
                                "Name": "ParseType",
                                "Arguments": [
                                    {
                                        "Name": "name",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "ConvertType"
                                    }
                                ],
                                "Signature": "ParseType(name string) ConvertType",
                                "Source": "ewoJc3dpdGNoIHN0cmluZ3MuVG9Mb3dlcihuYW1lKSB7CgljYXNlIGBzdHJgOgoJCXJldHVybiB1dGlscy5TdHJpbmcKCWNhc2UgYGJvb2xgOgoJCXJldHVybiB1dGlscy5Cb29sZWFuCgljYXNlIGBmbG9hdGA6CgkJcmV0dXJuIHV0aWxzLkZsb2F0CgljYXNlIGBpbnRgOgoJCXJldHVybiB1dGlscy5JbnRlZ2VyCgljYXNlIGB0aW1lYDoKCQlyZXR1cm4gdXRpbHMuVGltZQoJY2FzZSBgYnl0ZXNgOgoJCXJldHVybiB1dGlscy5CeXRlcwoJZGVmYXVsdDoKCQlyZXR1cm4gdXRpbHMuSW52YWxpZAoJfQp9",
                                "IsPackageLevel": true
                            }
                        ],
                        "Source": "dHlwZSBDb252ZXJ0VHlwZSA9IHV0aWxzLkNvbnZlcnRUeXBl"
                    },
                    "InterceptFunc": {
                        "Name": "InterceptFunc",
                        "Source": "dHlwZSBJbnRlcmNlcHRGdW5jIGZ1bmMoc2VxIFtdYnl0ZSk="
                    },
                    "OnlySqueezeFunc": {
                        "Name": "OnlySqueezeFunc",
                        "Source": "dHlwZSBPbmx5U3F1ZWV6ZUZ1bmMgZnVuYyhyIHJ1bmUpIGJvb2w="
                    },
                    "ScanInterceptor": {
                        "Name": "ScanInterceptor",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "BytesScanned",
                                "Comment": "Return the total number of bytes this scanner has scanned.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "int64"
                                    }
                                ],
                                "Signature": "BytesScanned() int64",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Intercept",
                                "Comment": "Add an intercept sequence and handler.  If the sequence is already registered, its handler\nfunction will be replaced with this one.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "sequence",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "handler",
                                        "Type": "InterceptFunc"
                                    }
                                ],
                                "Signature": "Intercept(sequence string, handler InterceptFunc)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "InterceptCounts",
                                "Comment": "Returns a map of intercept sequences and the number of times each one was fired.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "map[string]int64"
                                    }
                                ],
                                "Signature": "InterceptCounts() map[string]int64",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NewScanInterceptor",
                                "Arguments": [
                                    {
                                        "Name": "passthrough",
                                        "Type": "bufio.SplitFunc"
                                    },
                                    {
                                        "Name": "intercepts",
                                        "Type": "...map[string]InterceptFunc"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*ScanInterceptor"
                                    }
                                ],
                                "Signature": "NewScanInterceptor(passthrough bufio.SplitFunc, intercepts ...map[string]InterceptFunc) *ScanInterceptor",
                                "Source": "ewoJdmFyIGludGVyY2VwdCBtYXBbc3RyaW5nXUludGVyY2VwdEZ1bmMKCWlmIGxlbihpbnRlcmNlcHRzKSA9PSAwIHsKCQlpbnRlcmNlcHQgPSBtYWtlKG1hcFtzdHJpbmddSW50ZXJjZXB0RnVuYykKCX0gZWxzZSB7CgkJaW50ZXJjZXB0ID0gaW50ZXJjZXB0c1swXQoJfQoJcmV0dXJuICZTY2FuSW50ZXJjZXB0b3J7cGFzc3Rocm91Z2g6IHBhc3N0aHJvdWdoLCBhY2N1bXVsYXRvcjogYnl0ZXMuTmV3QnVmZmVyKG5pbCksIHN1YnNlcXVlbmNlczogaW50ZXJjZXB0LCBoaWdoV2F0ZXJNYXJrOiBtYWtlKG1hcFtzdHJpbmddaW50NjQpLCBpbnRlcmNlcHRTdGF0czogbWFrZShtYXBbc3RyaW5nXWludDY0KX0KfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Scan",
                                "Comment": "Implements the bufio.SplitFunc function signature for use in a bufio.Scanner.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "data",
                                        "Type": "[]byte"
                                    },
                                    {
                                        "Name": "atEOF",
                                        "Type": "bool"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Name": "advance",
                                        "Type": "int"
                                    },
                                    {
                                        "Name": "token",
                                        "Type": "[]byte"
                                    },
                                    {
                                        "Name": "err",
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Scan(data []byte, atEOF bool) (advance int, token []byte, err error)",
                                "IsPackageLevel": false
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "Disabled",
                                "Type": "bool"
                            }
                        ],
                        "Comment": "A ScanInterceptor is used as a SplitFunc on a bufio.Scanner.  It will look at the stream of bytes being scanned for\nspecific substrings.  The registered handler function associated with a substring will be called whenever it is seen\nin the stream.  The passthrough SplitFunc is called as normal.  This allows for a stream to be\nsplit and processed while also being inspected for specific content, allowing the user to react to that content\nas it comes by.",
                        "Source": "dHlwZSBTY2FuSW50ZXJjZXB0b3Igc3RydWN0IHsKCURpc2FibGVkIGJvb2wKCn0vLyBBIFNjYW5JbnRlcmNlcHRvciBpcyB1c2VkIGFzIGEgU3BsaXRGdW5jIG9uIGEgYnVmaW8uU2Nhbm5lci4gIEl0IHdpbGwgbG9vayBhdCB0aGUgc3RyZWFtIG9mIGJ5dGVzIGJlaW5nIHNjYW5uZWQgZm9yCi8vIHNwZWNpZmljIHN1YnN0cmluZ3MuICBUaGUgcmVnaXN0ZXJlZCBoYW5kbGVyIGZ1bmN0aW9uIGFzc29jaWF0ZWQgd2l0aCBhIHN1YnN0cmluZyB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciBpdCBpcyBzZWVuCi8vIGluIHRoZSBzdHJlYW0uICBUaGUgcGFzc3Rocm91Z2ggU3BsaXRGdW5jIGlzIGNhbGxlZCBhcyBub3JtYWwuICBUaGlzIGFsbG93cyBmb3IgYSBzdHJlYW0gdG8gYmUKLy8gc3BsaXQgYW5kIHByb2Nlc3NlZCB3aGlsZSBhbHNvIGJlaW5nIGluc3BlY3RlZCBmb3Igc3BlY2lmaWMgY29udGVudCwgYWxsb3dpbmcgdGhlIHVzZXIgdG8gcmVhY3QgdG8gdGhhdCBjb250ZW50Ci8vIGFzIGl0IGNvbWVzIGJ5LgoK",
                        "HasUnexportedFields": true
                    },
                    "SiPrefix": {
                        "Name": "SiPrefix",
                        "MetaType": "int",
                        "Methods": [
                            {
                                "Name": "String",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "GetSiPrefix",
                                "Arguments": [
                                    {
                                        "Name": "input",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "SiPrefix"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "GetSiPrefix(input string) (SiPrefix, error)",
                                "Source": "ewoJc3dpdGNoIGlucHV0IHsKCWNhc2UgIiIsICJiIiwgIkIiOgoJCXJldHVybiBOb25lLCBuaWwKCWNhc2UgImsiLCAiSyI6CgkJcmV0dXJuIEtpbG8sIG5pbAoJY2FzZSAibSIsICJNIjoKCQlyZXR1cm4gTWVnYSwgbmlsCgljYXNlICJnIiwgIkciOgoJCXJldHVybiBHaWdhLCBuaWwKCWNhc2UgInQiLCAiVCI6CgkJcmV0dXJuIFRlcmEsIG5pbAoJY2FzZSAicCIsICJQIjoKCQlyZXR1cm4gUGV0YSwgbmlsCgljYXNlICJlIiwgIkUiOgoJCXJldHVybiBFeGEsIG5pbAoJY2FzZSAieiIsICJaIjoKCQlyZXR1cm4gWmV0dGEsIG5pbAoJY2FzZSAieSIsICJZIjoKCQlyZXR1cm4gWW90dGEsIG5pbAoJZGVmYXVsdDoKCQlyZXR1cm4gTm9uZSwgZm10LkVycm9yZigiVW5yZWNvZ25pemVkIFNJIHVuaXQgJyVzJyIsIGlucHV0KQoJfQp9",
                                "IsPackageLevel": true
                            }
                        ],
                        "Source": "dHlwZSBTaVByZWZpeCBpbnQ="
                    },
                    "Uuid": {
                        "Name": "Uuid",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Base58",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "Base58() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Base64",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "Base64() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Bytes",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    }
                                ],
                                "Signature": "Bytes() []byte",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Hex",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "Hex() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MustUUID",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Uuid"
                                    }
                                ],
                                "Signature": "MustUUID(in string) *Uuid",
                                "Source": "ewoJaWYgdXVpZCwgZXJyIDo9IHV1aWQuUGFyc2UoaW4pOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gJlV1aWR7VVVJRDogdXVpZH0KCX0gZWxzZSB7CgkJcGFuaWMoZXJyKQoJfQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "ParseUUID",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Uuid"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "ParseUUID(in string) (*Uuid, error)",
                                "Source": "ewoJaWYgdXVpZCwgZXJyIDo9IHV1aWQuUGFyc2UoaW4pOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gJlV1aWR7VVVJRDogdXVpZH0sIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KfQ==",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "UUID",
                                "Returns": [
                                    {
                                        "Type": "*Uuid"
                                    }
                                ],
                                "Signature": "UUID() *Uuid",
                                "Source": "ewoJcmV0dXJuICZVdWlke1VVSUQ6IHV1aWQuTmV3KCl9Cn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "UuidFromBytes",
                                "Arguments": [
                                    {
                                        "Name": "b",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Uuid"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "UuidFromBytes(b []byte) (*Uuid, error)",
                                "Source": "ewoJaWYgdXVpZCwgZXJyIDo9IHV1aWQuRnJvbUJ5dGVzKGIpOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gJlV1aWR7dXVpZH0sIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KfQ==",
                                "IsPackageLevel": true
                            }
                        ],
                        "Source": "dHlwZSBVdWlkIHN0cnVjdHsgdXVpZC5VVUlEIH0="
                    }
                }
            },
            {
                "Name": "structutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/structutil",
                "ImportPath": "structutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Utilities for working with and manipulating structs.\n",
                "MainFunction": false,
                "CommentWordCount": 92,
                "LineCount": 536,
                "SourceLineCount": 428,
                "FunctionCount": 13,
                "TypeCount": 5,
                "ConstantCount": 0,
                "VariableCount": 2,
                "Statistics": {
                    "Mean": 0.1739,
                    "StdDev": 0.379,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 0,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "s.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                                "Alias": "maputil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                "Alias": "sliceutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                "Alias": "stringutil"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 3484,
                        "LineCount": 171,
                        "SourceLineCount": 135,
                        "FunctionCount": 10,
                        "TypeCount": 2,
                        "ConstantCount": 0,
                        "VariableCount": 1
                    },
                    {
                        "Name": "s_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 2804,
                        "LineCount": 126,
                        "SourceLineCount": 107,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "structutil.go",
                        "Imports": [
                            {
                                "PackageName": "errors",
                                "Alias": "errors"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                "Alias": "typeutil"
                            }
                        ],
                        "Size": 3999,
                        "LineCount": 165,
                        "SourceLineCount": 126,
                        "FunctionCount": 3,
                        "TypeCount": 2,
                        "ConstantCount": 0,
                        "VariableCount": 1
                    },
                    {
                        "Name": "structutil_test.go",
                        "Imports": [
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 1092,
                        "LineCount": 74,
                        "SourceLineCount": 60,
                        "FunctionCount": 0,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Variables": [
                    {
                        "Name": "StopIterating",
                        "Expression": "errors.New(`stop iterating`)"
                    },
                    {
                        "Name": "StructTag",
                        "Type": "string",
                        "Expression": "`structutil`",
                        "Value": "structutil"
                    }
                ],
                "Functions": [
                    {
                        "Name": "CopyFunc",
                        "Arguments": [
                            {
                                "Name": "dest",
                                "Type": "any"
                            },
                            {
                                "Name": "source",
                                "Type": "any"
                            },
                            {
                                "Name": "fn",
                                "Type": "StructValueFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "CopyFunc(dest any, source any, fn StructValueFunc) error",
                        "Source": "ewoJaWYgZGVzdCA9PSBuaWwgfHwgc291cmNlID09IG5pbCB8fCBmbiA9PSBuaWwgewoJCXJldHVybiBuaWwKCX0KCXZhciBkZXN0ViByZWZsZWN0LlZhbHVlCgl2YXIgc3JjViByZWZsZWN0LlZhbHVlCglpZiBkViwgb2sgOj0gZGVzdC4ocmVmbGVjdC5WYWx1ZSk7IG9rIHsKCQlkZXN0ViA9IGRWCgl9IGVsc2UgewoJCWRlc3RWID0gcmVmbGVjdC5WYWx1ZU9mKGRlc3QpCgl9CglpZiBzViwgb2sgOj0gc291cmNlLihyZWZsZWN0LlZhbHVlKTsgb2sgewoJCXNyY1YgPSBzVgoJfSBlbHNlIHsKCQlzcmNWID0gcmVmbGVjdC5WYWx1ZU9mKHNvdXJjZSkKCX0KCWlmIGRWLCBlcnIgOj0gdmFsaWRhdGVQdHJUb1N0cnVjdChgZGVzdGluYXRpb25gLCBkZXN0Vik7IGVyciA9PSBuaWwgewoJCWRlc3RWID0gZFYKCX0gZWxzZSB7CgkJcmV0dXJuIGVycgoJfQoJaWYgc1YsIGVyciA6PSB2YWxpZGF0ZVB0clRvU3RydWN0KGBzb3VyY2VgLCBzcmNWKTsgZXJyID09IG5pbCB7CgkJc3JjViA9IHNWCgl9IGVsc2UgewoJCXJldHVybiBlcnIKCX0KCXZhciBkZXN0VCA9IGRlc3RWLlR5cGUoKQoJdmFyIHNyY1QgPSBzcmNWLlR5cGUoKQoJZm9yIHMgOj0gMDsgcyA8IHNyY1QuTnVtRmllbGQoKTsgcysrIHsKCQl2YXIgc0ZpZWxkVCA9IHNyY1QuRmllbGQocykKCQl2YXIgc0ZpZWxkViA9IHNyY1YuRmllbGQocykKCQlpZiBzRmllbGRULlBrZ1BhdGggIT0gYGAgewoJCQljb250aW51ZQoJCX0KCQlpZiBkRmllbGRULCBvayA6PSBkZXN0VC5GaWVsZEJ5TmFtZShzRmllbGRULk5hbWUpOyBvayB7CgkJCXZhciBkRmllbGRWID0gZGVzdFYuRmllbGRCeU5hbWUoZEZpZWxkVC5OYW1lKQoJCQlpZiBkRmllbGRULkFub255bW91cyB7CgkJCQlpZiBlcnIgOj0gQ29weUZ1bmMoZEZpZWxkViwgc0ZpZWxkViwgZm4pOyBlcnIgIT0gbmlsIHsKCQkJCQlyZXR1cm4gZXJyCgkJCQl9CgkJCX0gZWxzZSB7CgkJCQlpZiBzRmllbGRWLkNhbkludGVyZmFjZSgpICYmIGRGaWVsZFYuQ2FuSW50ZXJmYWNlKCkgewoJCQkJCWlmIHJlcGwsIG9rIDo9IGZuKGRGaWVsZFQuTmFtZSwgc0ZpZWxkVi5JbnRlcmZhY2UoKSwgZEZpZWxkVi5JbnRlcmZhY2UoKSk7IG9rIHsKCQkJCQkJaWYgZEZpZWxkVi5DYW5TZXQoKSB7CgkJCQkJCQlpZiBlcnIgOj0gdHlwZXV0aWwuU2V0VmFsdWUoZEZpZWxkViwgcmVwbCk7IGVyciAhPSBuaWwgewoJCQkJCQkJCXJldHVybiBlcnIKCQkJCQkJCX0KCQkJCQkJfSBlbHNlIHsKCQkJCQkJCXJldHVybiBmbXQuRXJyb3JmKCJmaWVsZCAlcSBpcyBub3Qgc2V0dGFibGUiLCBkRmllbGRULk5hbWUpCgkJCQkJCX0KCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCXJldHVybiBmbXQuRXJyb3JmKCJDYW5ub3QgcmV0cmlldmUgZmllbGQgdmFsdWUgJXEiLCBkRmllbGRULk5hbWUpCgkJCQl9CgkJCX0KCQl9Cgl9CglyZXR1cm4gbmlsCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "CopyNonZero",
                        "Comment": "Copy all values from the source into the destination, provided the source value for the corresponding\nfield is not that type's zero value.",
                        "Arguments": [
                            {
                                "Name": "dest",
                                "Type": "any"
                            },
                            {
                                "Name": "source",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "CopyNonZero(dest any, source any) error",
                        "Source": "ewoJcmV0dXJuIENvcHlGdW5jKGRlc3QsIHNvdXJjZSwgZnVuYyhuYW1lIHN0cmluZywgcyBhbnksIGQgYW55KSAoYW55LCBib29sKSB7CgkJaWYgdHlwZXV0aWwuSXNaZXJvKHMpIHsKCQkJcmV0dXJuIG5pbCwgZmFsc2UKCQl9IGVsc2UgewoJCQlyZXR1cm4gcywgdHJ1ZQoJCX0KCX0pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "FieldsFunc",
                        "Comment": "Iterates over all exported and embedded fields in the given struct, calling fn for each field.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "fn",
                                "Type": "StructFieldFunc"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "FieldsFunc(in any, fn StructFieldFunc) error",
                        "Source": "ewoJaWYgaW4gPT0gbmlsIHx8IGZuID09IG5pbCB7CgkJcmV0dXJuIG5pbAoJfQoJdmFyIGluVmFsdSByZWZsZWN0LlZhbHVlCglpZiB2LCBvayA6PSBpbi4ocmVmbGVjdC5WYWx1ZSk7IG9rIHsKCQlpblZhbHUgPSB2Cgl9IGVsc2UgewoJCWluVmFsdSA9IHJlZmxlY3QuVmFsdWVPZihpbikKCX0KCWlmIGluVmFsdS5LaW5kKCkgPT0gcmVmbGVjdC5QdHIgewoJCWluVmFsdSA9IGluVmFsdS5FbGVtKCkKCX0KCXZhciBpblR5cGUgPSBpblZhbHUuVHlwZSgpCkZpZWxkTG9vcDoKCWZvciBpIDo9IDA7IGkgPCBpblR5cGUuTnVtRmllbGQoKTsgaSsrIHsKCQl2YXIgZmllbGRUID0gaW5UeXBlLkZpZWxkKGkpCgkJdmFyIGZpZWxkViA9IGluVmFsdS5GaWVsZChpKQoJCWlmIGZpZWxkVC5Bbm9ueW1vdXMgewoJCQlpZiBlcnIgOj0gRmllbGRzRnVuYyhmaWVsZFYsIGZuKTsgZXJyICE9IG5pbCB7CgkJCQlyZXR1cm4gZXJyCgkJCX0KCQl9CgkJaWYgZmllbGRULlBrZ1BhdGggIT0gYGAgewoJCQljb250aW51ZQoJCX0KCQlzd2l0Y2ggZXJyIDo9IGZuKCZmaWVsZFQsIGZpZWxkVik7IGVyciB7CgkJY2FzZSBTdG9wSXRlcmF0aW5nOgoJCQlicmVhayBGaWVsZExvb3AKCQljYXNlIG5pbDoKCQkJY29udGludWUKCQlkZWZhdWx0OgoJCQlyZXR1cm4gZXJyCgkJfQoJfQoJcmV0dXJuIG5pbAp9",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestCopyFunc",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestCopyFunc(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZGVzdCA9IHRQZXJzb257VEJhc2U6ICZUQmFzZXtFbmFibGVkOiB0cnVlfX0KCXZhciBzcmMgPSB0UGVyc29ue1RCYXNlOiAmVEJhc2V7TmFtZTogYEJvYiBKb2huc29uYCwgQWdlOiA0Mn0sIEFkZHJlc3M6IGAxMjMgRmFrZSBTdC5gfQoJYXNzZXJ0Lk5vRXJyb3IoQ29weU5vblplcm8oJmRlc3QsICZzcmMpKQoJYXNzZXJ0LkVxdWFsKHRQZXJzb257QWRkcmVzczogYDEyMyBGYWtlIFN0LmAsIFRCYXNlOiAmVEJhc2V7QWdlOiA0MiwgRW5hYmxlZDogdHJ1ZSwgTmFtZTogYEJvYiBKb2huc29uYH19LCBkZXN0KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestFieldsFunc",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestFieldsFunc(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCUZpZWxkc0Z1bmMoJlRCYXNle05hbWU6IGBoZWxsb2AsIEFnZTogMzIsIEVuYWJsZWQ6IHRydWUsIGhpZGRlbjogdHJ1ZX0sIGZ1bmMoZmllbGQgKnJlZmxlY3QuU3RydWN0RmllbGQsIHZhbHVlIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCQlpZiB2YWx1ZS5DYW5JbnRlcmZhY2UoKSB7CgkJCW91dFtmaWVsZC5OYW1lXSA9IHZhbHVlLkludGVyZmFjZSgpCgkJfQoJCXJldHVybiBuaWwKCX0pCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YE5hbWVgOiBgaGVsbG9gLCBgQWdlYDogMzIsIGBFbmFibGVkYDogdHJ1ZX0sIG91dCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestS",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestS(t *testing.T)",
                        "Source": "ewoJdmFyIGJhc2UgPSAmdFN0cnVjdENoaWxke3RTdHJ1Y3RCYXNlOiAmdFN0cnVjdEJhc2V7TmFtZTogYHRlc3RgLCBBZ2U6IDQyLCBXb3JkczogW11zdHJpbmd7YGhlbGxvYCwgYHRoZXJlYH0sIFBocmFzZTogW11zdHJpbmd7YG1heWAsIGB0aGVgLCBgZm9yY2VgLCBgYmVgLCBgd2l0aGAsIGB5b3VgfX0sIEFkZHJlc3M6IGAxMjMgRmFrZSBTdC5gLCBEZXRhaWxzOiBtYXBbc3RyaW5nXWFueXtgZ2xvYmFsYDogbWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgYmFzZWAsIGB2YWx1ZXNgOiBbXWludHsyLCA0LCA2fX19fQoJdmFyIHMgPSBTKGJhc2UpCgl2YXIgZmllbGRzID0gcy5GaWVsZHMoKQoJcmVxdWlyZS5MZW4odCwgZmllbGRzLCA3KQoJZm9yIGksIGZpZWxkIDo9IHJhbmdlIGZpZWxkcyB7CgkJdmFyIG5hbWUgPSBmaWVsZC5OYW1lCgkJdmFyIHR5cG4gPSBmaWVsZC5UeXBlLlN0cmluZygpCgkJc3dpdGNoIGkgewoJCWNhc2UgMDoKCQkJcmVxdWlyZS5FcXVhbCh0LCBgTmFtZWAsIG5hbWUpCgkJCXJlcXVpcmUuRXF1YWwodCwgYHN0cmluZ2AsIHR5cG4pCgkJCXJlcXVpcmUuRXF1YWwodCwgYHRlc3RgLCBmaWVsZC5WKCkuU3RyaW5nKCkpCgkJY2FzZSAxOgoJCQlyZXF1aXJlLkVxdWFsKHQsIGBBZ2VgLCBuYW1lKQoJCQlyZXF1aXJlLkVxdWFsKHQsIGBpbnRgLCB0eXBuKQoJCQlyZXF1aXJlLkVxdWFsKHQsIGludDY0KDQyKSwgZmllbGQuVigpLkludCgpKQoJCWNhc2UgMjoKCQkJcmVxdWlyZS5FcXVhbCh0LCBgRW5hYmxlZGAsIG5hbWUpCgkJCXJlcXVpcmUuRXF1YWwodCwgYGJvb2xgLCB0eXBuKQoJCQlyZXF1aXJlLkVxdWFsKHQsIGZhbHNlLCBmaWVsZC5WKCkuQm9vbCgpKQoJCWNhc2UgMzoKCQkJcmVxdWlyZS5FcXVhbCh0LCBgV29yZHNgLCBuYW1lKQoJCQlyZXF1aXJlLkVxdWFsKHQsIGBbXXN0cmluZ2AsIHR5cG4pCgkJCXJlcXVpcmUuRXF1YWwodCwgW11zdHJpbmd7YGhlbGxvYCwgYHRoZXJlYH0sIGZpZWxkLlYoKS5TdHJpbmdzKCkpCgkJCXZhciB0YWcsIGF0dHJzLCBvayA9IGZpZWxkLkdldFRhZyhgdGVzdGluZ2ApCgkJCXJlcXVpcmUuVHJ1ZSh0LCBvaykKCQkJcmVxdWlyZS5FcXVhbCh0LCBgV09SRFNgLCB0YWcpCgkJCXJlcXVpcmUuRXF1YWwodCwgW11zdHJpbmd7YG9taXRlbXB0eWB9LCBhdHRycykKCQkJdGFnLCBhdHRycywgb2sgPSBmaWVsZC5HZXRUYWcoYG90aGVyYCkKCQkJcmVxdWlyZS5GYWxzZSh0LCBvaykKCQkJcmVxdWlyZS5FcXVhbCh0LCBgYCwgdGFnKQoJCQlyZXF1aXJlLkVtcHR5KHQsIGF0dHJzKQoJCWNhc2UgNDoKCQkJcmVxdWlyZS5FcXVhbCh0LCBgUGhyYXNlYCwgbmFtZSkKCQkJcmVxdWlyZS5FcXVhbCh0LCBgW11zdHJpbmdgLCB0eXBuKQoJCQlyZXF1aXJlLkVxdWFsKHQsIFtdc3RyaW5ne2BtYXlgLCBgdGhlYCwgYGZvcmNlYCwgYGJlYCwgYHdpdGhgLCBgeW91YH0sIGZpZWxkLlYoKS5TdHJpbmdzKCkpCgkJY2FzZSA1OgoJCQlyZXF1aXJlLkVxdWFsKHQsIGBBZGRyZXNzYCwgbmFtZSkKCQkJcmVxdWlyZS5FcXVhbCh0LCBgc3RyaW5nYCwgdHlwbikKCQkJcmVxdWlyZS5FcXVhbCh0LCBgMTIzIEZha2UgU3QuYCwgZmllbGQuVigpLlN0cmluZygpKQoJCWNhc2UgNjoKCQkJcmVxdWlyZS5FcXVhbCh0LCBgRGV0YWlsc2AsIG5hbWUpCgkJCXJlcXVpcmUuRXF1YWwodCwgYG1hcFtzdHJpbmddaW50ZXJmYWNlIHt9YCwgdHlwbikKCQkJcmVxdWlyZS5MZW4odCwgYmFzZS5EZXRhaWxzLCAxKQoJCX0KCX0KCXJlcXVpcmUuTm9FcnJvcih0LCBzLk1lcmdlKCZ0U3RydWN0Q2hpbGR7dFN0cnVjdEJhc2U6ICZ0U3RydWN0QmFzZXtXb3JkczogW11zdHJpbmd7YGdlbmVyYWxgLCBga2Vub2JpYH0sIFBocmFzZTogW11zdHJpbmd7YGFuZGAsIGBhbHNvYCwgYHdpdGhgLCBgeW91YH19LCBBZGRyZXNzOiBgOTg3IEx1bHogTGFuZWAsIERldGFpbHM6IG1hcFtzdHJpbmddYW55e2BnbG9iYWxgOiBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGByZXBsYWNlZGAsIGB2YWx1ZXNgOiBbXWludHsxLCAzLCA1fX19fSkpCglyZXF1aXJlLkVxdWFsKHQsIFtdc3RyaW5ne2BoZWxsb2AsIGB0aGVyZWAsIGBnZW5lcmFsYCwgYGtlbm9iaWB9LCBiYXNlLldvcmRzKQoJcmVxdWlyZS5FcXVhbCh0LCBbXXN0cmluZ3tgYW5kYCwgYGFsc29gLCBgd2l0aGAsIGB5b3VgfSwgYmFzZS5QaHJhc2UpCglyZXF1aXJlLkVxdWFsKHQsIG1hcFtzdHJpbmddYW55e2BnbG9iYWxgOiBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGByZXBsYWNlZGAsIGB2YWx1ZXNgOiBbXWFueXsxLCAzLCA1fX19LCBiYXNlLkRldGFpbHMpCn0=",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "Field": {
                        "Name": "Field",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "GetTag",
                                "Comment": "Retrieve the field name and attributes associated with the given field tag.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "label",
                                        "Type": "string"
                                    },
                                    {
                                        "Name": "fallback",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "string"
                                    },
                                    {
                                        "Type": "[]string"
                                    },
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "GetTag(label string, fallback ...any) (string, []string, bool)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Kind",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "reflect.Kind"
                                    }
                                ],
                                "Signature": "Kind() reflect.Kind",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MergeValue",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "MergeValue(in any) error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Set",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Set(value any) error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "V",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "typeutil.Variant"
                                    }
                                ],
                                "Signature": "V() typeutil.Variant",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Value",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "reflect.Value"
                                    }
                                ],
                                "Signature": "Value() reflect.Value",
                                "IsPackageLevel": false
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "Struct",
                                "Type": "*Struct"
                            }
                        ],
                        "Source": "dHlwZSBGaWVsZCBzdHJ1Y3QgewoJKnJlZmxlY3QuU3RydWN0RmllbGQKCVN0cnVjdCAqU3RydWN0Cn0="
                    },
                    "Struct": {
                        "Name": "Struct",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Field",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "name",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Field"
                                    },
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "Field(name string) (*Field, bool)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Fields",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]*Field"
                                    }
                                ],
                                "Signature": "Fields() []*Field",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Merge",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Merge(other any) error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "S",
                                "Arguments": [
                                    {
                                        "Name": "src",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Struct"
                                    }
                                ],
                                "Signature": "S(src any) *Struct",
                                "Source": "ewoJcmV0dXJuICZTdHJ1Y3R7U291cmNlOiBzcmMsIGZpZWxkczogbWFrZShbXSpGaWVsZCwgMCksIGZpZWxkbWFwOiBtYWtlKG1hcFtzdHJpbmddKkZpZWxkKX0KfQ==",
                                "IsPackageLevel": true
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "Source",
                                "Type": "any"
                            }
                        ],
                        "Comment": "A Struct, or \"S-object\", can be used to rapidly and safely inspect, iterate over, and modify values of a struct.",
                        "Source": "dHlwZSBTdHJ1Y3Qgc3RydWN0IHsKCVNvdXJjZSBhbnkKCn0vLyBBIFN0cnVjdCwgb3IgIlMtb2JqZWN0IiwgY2FuIGJlIHVzZWQgdG8gcmFwaWRseSBhbmQgc2FmZWx5IGluc3BlY3QsIGl0ZXJhdGUgb3ZlciwgYW5kIG1vZGlmeSB2YWx1ZXMgb2YgYSBzdHJ1Y3QuCgo=",
                        "HasUnexportedFields": true
                    },
                    "StructFieldFunc": {
                        "Name": "StructFieldFunc",
                        "Source": "dHlwZSBTdHJ1Y3RGaWVsZEZ1bmMgZnVuYyhmaWVsZCAqcmVmbGVjdC5TdHJ1Y3RGaWVsZCwgdmFsdWUgcmVmbGVjdC5WYWx1ZSkgZXJyb3I="
                    },
                    "StructValueFunc": {
                        "Name": "StructValueFunc",
                        "Source": "dHlwZSBTdHJ1Y3RWYWx1ZUZ1bmMgZnVuYyhmaWVsZCBzdHJpbmcsIHNvdXJjZVZhbHVlIGFueSwgZGVzdFZhbHVlIGFueSkgKGFueSwgYm9vbCkgLy8gUmVjZWl2ZXMgYSBzdHJ1Y3QgZmllbGQgbmFtZSwgdGhlIHZhbHVlIG9mIHRoYXQgZmllbGQgaW4gdGhlIHNvdXJjZSBzdHJ1Y3QsIGFuZCB0aGUgdmFsdWUgZm9yIHRoYXQgZmllbGQgaW4gdGhlIGRlc3RpbmF0aW9uIHN0cnVjdC4KLy8gUmV0dXJucyB0aGUgdmFsdWUgdGhhdCBzaG91bGQgYmUgcGxhY2VkIGluIHRoZSBkZXN0aW5hdGlvbiBzdHJ1Y3QgZmllbGRzLiAgSWYgdGhlIHJldHVybmVkIGJvb2wgaXMgZmFsc2UsIG5vIGNoYW5nZXMgd2lsbAovLyBiZSBtYWRlLgo="
                    },
                    "TBase": {
                        "Name": "TBase",
                        "MetaType": "struct",
                        "Fields": [
                            {
                                "Name": "Name",
                                "Type": "string"
                            },
                            {
                                "Name": "Age",
                                "Type": "int"
                            },
                            {
                                "Name": "Enabled",
                                "Type": "bool"
                            }
                        ],
                        "Source": "dHlwZSBUQmFzZSBzdHJ1Y3QgewoJTmFtZSAgICBzdHJpbmcKCUFnZSAgICAgaW50CglFbmFibGVkIGJvb2wKCn0K",
                        "HasUnexportedFields": true
                    }
                }
            },
            {
                "Name": "timeutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/timeutil",
                "ImportPath": "timeutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Utilities for messing with time.\n",
                "MainFunction": false,
                "CommentWordCount": 135,
                "LineCount": 191,
                "SourceLineCount": 130,
                "FunctionCount": 5,
                "TypeCount": 0,
                "ConstantCount": 0,
                "VariableCount": 0,
                "Statistics": {
                    "Mean": 0.98,
                    "StdDev": 0.04,
                    "GeometricMean": 0.9791,
                    "HarmonicMean": 0.9783,
                    "Median": 1,
                    "Minimum": 0.9,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "timeutil.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/utils",
                                "Alias": "utils"
                            }
                        ],
                        "Size": 1592,
                        "LineCount": 59,
                        "SourceLineCount": 34,
                        "FunctionCount": 5,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "timeutil_test.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 2803,
                        "LineCount": 132,
                        "SourceLineCount": 96,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Functions": [
                    {
                        "Name": "DurationHMS",
                        "Comment": "Extracts the hours, minutes, and seconds from the given duration.",
                        "Arguments": [
                            {
                                "Name": "d",
                                "Type": "time.Duration"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int"
                            },
                            {
                                "Type": "int"
                            },
                            {
                                "Type": "int"
                            }
                        ],
                        "Signature": "DurationHMS(d time.Duration) (int, int, int)",
                        "Source": "ewoJZCA9IGQuUm91bmQodGltZS5TZWNvbmQpCgl2YXIgaCA9IGQgLyB0aW1lLkhvdXIKCWQgLT0gaCAqIHRpbWUuSG91cgoJdmFyIG0gPSBkIC8gdGltZS5NaW51dGUKCWQgLT0gbSAqIHRpbWUuTWludXRlCgl2YXIgcyA9IGQgLyB0aW1lLlNlY29uZAoJcmV0dXJuIGludChoKSwgaW50KG0pLCBpbnQocykKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "FormatTimer",
                        "Comment": "Formats the given duration in a colon-separated timer format in the form\n[HH:]MM:SS.",
                        "Arguments": [
                            {
                                "Name": "d",
                                "Type": "time.Duration"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "FormatTimer(d time.Duration) string",
                        "Source": "ewoJaCwgbSwgcyA6PSBEdXJhdGlvbkhNUyhkKQoJdmFyIG91dCA9IGZtdC5TcHJpbnRmKCIlMDJkOiUwMmQ6JTAyZCIsIGgsIG0sIHMpCglvdXQgPSBzdHJpbmdzLlRyaW1QcmVmaXgob3V0LCBgMDA6YCkKCW91dCA9IHN0cmluZ3MuVHJpbVByZWZpeChvdXQsIGAwYCkKCXJldHVybiBvdXQKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "FormatTimerf",
                        "Comment": "Formats the given duration using the given format string.  The string follows\nthe same formatting rules as described in the fmt package, and will receive\nthree integer arguments: hours, minutes, and seconds.",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "d",
                                "Type": "time.Duration"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "FormatTimerf(format string, d time.Duration) string",
                        "Source": "ewoJaCwgbSwgcyA6PSBEdXJhdGlvbkhNUyhkKQoJdmFyIG91dCA9IGZtdC5TcHJpbnRmKGZvcm1hdCwgaCwgbSwgcykKCXJldHVybiBvdXQKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ParseDuration",
                        "Comment": "Provides an API-compatible version of time.ParseDuration that accepts additional\nformats for parsing durations:\n\n\t1y, 3year, 5years: Expands to (n*24*365) hours\n\t1w, 3weeks, 5wks:  Expands to (n*24*7) hours\n\t1d, 1day, 5days:   Expands to (n*24) hours",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Duration"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ParseDuration(in string) (time.Duration, error)",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLlBhcnNlRHVyYXRpb24oaW4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ReferenceTime",
                        "Comment": "Return the standard Golang reference time (2006-01-02T15:04:05.999999999Z07:00)",
                        "Returns": [
                            {
                                "Type": "time.Time"
                            }
                        ],
                        "Signature": "ReferenceTime() time.Time",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLlJlZmVyZW5jZVRpbWUKfQ==",
                        "IsPackageLevel": true
                    }
                ],
                "Examples": [
                    {
                        "Name": "ExampleFormatTimer_complete",
                        "Label": "Complete",
                        "For": "FormatTimer",
                        "Signature": "ExampleFormatTimer_complete()",
                        "Source": "ewoJZm10LlByaW50KEZvcm1hdFRpbWVyKDIzKnRpbWUuSG91ciArIDQqdGltZS5NaW51dGUgKyAxMyp0aW1lLlNlY29uZCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleFormatTimer_oneHour",
                        "Label": "OneHour",
                        "For": "FormatTimer",
                        "Signature": "ExampleFormatTimer_oneHour()",
                        "Source": "ewoJZm10LlByaW50KEZvcm1hdFRpbWVyKHRpbWUuSG91cikpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleFormatTimer_oneMinute",
                        "Label": "OneMinute",
                        "For": "FormatTimer",
                        "Signature": "ExampleFormatTimer_oneMinute()",
                        "Source": "ewoJZm10LlByaW50KEZvcm1hdFRpbWVyKHRpbWUuTWludXRlKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleFormatTimer_oneSecond",
                        "Label": "OneSecond",
                        "For": "FormatTimer",
                        "Signature": "ExampleFormatTimer_oneSecond()",
                        "Source": "ewoJZm10LlByaW50KEZvcm1hdFRpbWVyKHRpbWUuU2Vjb25kKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleFormatTimer_overOneMinute",
                        "Label": "OverOneMinute",
                        "For": "FormatTimer",
                        "Signature": "ExampleFormatTimer_overOneMinute()",
                        "Source": "ewoJZm10LlByaW50KEZvcm1hdFRpbWVyKDExOSAqIHRpbWUuU2Vjb25kKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleFormatTimer_underOneMinute",
                        "Label": "UnderOneMinute",
                        "For": "FormatTimer",
                        "Signature": "ExampleFormatTimer_underOneMinute()",
                        "Source": "ewoJZm10LlByaW50KEZvcm1hdFRpbWVyKDU5ICogdGltZS5TZWNvbmQpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ExampleFormatTimer_zeroValue",
                        "Label": "ZeroValue",
                        "For": "FormatTimer",
                        "Signature": "ExampleFormatTimer_zeroValue()",
                        "Source": "ewoJZm10LlByaW50KEZvcm1hdFRpbWVyKDApKQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestDurationHMS",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDurationHMS(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgloLCBtLCBzIDo9IER1cmF0aW9uSE1TKDApCglhc3NlcnQuRXF1YWwoMCwgaCkKCWFzc2VydC5FcXVhbCgwLCBtKQoJYXNzZXJ0LkVxdWFsKDAsIHMpCgloLCBtLCBzID0gRHVyYXRpb25ITVModGltZS5TZWNvbmQpCglhc3NlcnQuRXF1YWwoMCwgaCkKCWFzc2VydC5FcXVhbCgwLCBtKQoJYXNzZXJ0LkVxdWFsKDEsIHMpCgloLCBtLCBzID0gRHVyYXRpb25ITVModGltZS5NaW51dGUpCglhc3NlcnQuRXF1YWwoMCwgaCkKCWFzc2VydC5FcXVhbCgxLCBtKQoJYXNzZXJ0LkVxdWFsKDAsIHMpCgloLCBtLCBzID0gRHVyYXRpb25ITVModGltZS5Ib3VyKQoJYXNzZXJ0LkVxdWFsKDEsIGgpCglhc3NlcnQuRXF1YWwoMCwgbSkKCWFzc2VydC5FcXVhbCgwLCBzKQoJaCwgbSwgcyA9IER1cmF0aW9uSE1TKDU5ICogdGltZS5TZWNvbmQpCglhc3NlcnQuRXF1YWwoMCwgaCkKCWFzc2VydC5FcXVhbCgwLCBtKQoJYXNzZXJ0LkVxdWFsKDU5LCBzKQoJaCwgbSwgcyA9IER1cmF0aW9uSE1TKDExOSAqIHRpbWUuU2Vjb25kKQoJYXNzZXJ0LkVxdWFsKDAsIGgpCglhc3NlcnQuRXF1YWwoMSwgbSkKCWFzc2VydC5FcXVhbCg1OSwgcykKCWgsIG0sIHMgPSBEdXJhdGlvbkhNUygyMyp0aW1lLkhvdXIgKyA0KnRpbWUuTWludXRlICsgMTMqdGltZS5TZWNvbmQpCglhc3NlcnQuRXF1YWwoMjMsIGgpCglhc3NlcnQuRXF1YWwoNCwgbSkKCWFzc2VydC5FcXVhbCgxMywgcykKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestFormatTimer",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestFormatTimer(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0ID0gRm9ybWF0VGltZXIoMCkKCWFzc2VydC5FcXVhbChgMDowMGAsIG91dCkKCW91dCA9IEZvcm1hdFRpbWVyKHRpbWUuU2Vjb25kKQoJYXNzZXJ0LkVxdWFsKGAwOjAxYCwgb3V0KQoJb3V0ID0gRm9ybWF0VGltZXIodGltZS5NaW51dGUpCglhc3NlcnQuRXF1YWwoYDE6MDBgLCBvdXQpCglvdXQgPSBGb3JtYXRUaW1lcih0aW1lLkhvdXIpCglhc3NlcnQuRXF1YWwoYDE6MDA6MDBgLCBvdXQpCglvdXQgPSBGb3JtYXRUaW1lcig1OSAqIHRpbWUuU2Vjb25kKQoJYXNzZXJ0LkVxdWFsKGAwOjU5YCwgb3V0KQoJb3V0ID0gRm9ybWF0VGltZXIoMTE5ICogdGltZS5TZWNvbmQpCglhc3NlcnQuRXF1YWwoYDE6NTlgLCBvdXQpCglvdXQgPSBGb3JtYXRUaW1lcigyMyp0aW1lLkhvdXIgKyA0KnRpbWUuTWludXRlICsgMTMqdGltZS5TZWNvbmQpCglhc3NlcnQuRXF1YWwoYDIzOjA0OjEzYCwgb3V0KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestParseDuration",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestParseDuration(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2LCBlcnIgOj0gUGFyc2VEdXJhdGlvbihgYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5aZXJvKHYpCglmb3IgaW4sIG91dCA6PSByYW5nZSBtYXBbc3RyaW5nXXRpbWUuRHVyYXRpb257YDRoYDogdGltZS5EdXJhdGlvbig0ICogdGltZS5Ib3VyKSwgYDRIYDogdGltZS5EdXJhdGlvbig0ICogdGltZS5Ib3VyKSwgYDFkYDogdGltZS5EdXJhdGlvbigyNCAqIHRpbWUuSG91ciksIGAxZGF5YDogdGltZS5EdXJhdGlvbigyNCAqIHRpbWUuSG91ciksIGAxZGF5c2A6IHRpbWUuRHVyYXRpb24oMjQgKiB0aW1lLkhvdXIpLCBgNSB5ZWFycyA0IHdlZWtzIDMgZGF5cyAyIGhvdXJzIDEgbWludXRlYDogdGltZS5EdXJhdGlvbig0NDU0Nip0aW1lLkhvdXIpICsgdGltZS5NaW51dGUsIGAxZDFoYDogdGltZS5EdXJhdGlvbigyNSAqIHRpbWUuSG91ciksIGAxZCAxaGA6IHRpbWUuRHVyYXRpb24oMjUgKiB0aW1lLkhvdXIpfSB7CgkJdiwgZXJyIDo9IFBhcnNlRHVyYXRpb24oaW4pCgkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCWFzc2VydC5FcXVhbChvdXQsIHYsIGZtdC5TcHJpbnRmKCJpbj0ldiIsIGluKSkKCX0KfQ==",
                        "IsPackageLevel": true
                    }
                ]
            },
            {
                "Name": "typeutil",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/typeutil",
                "ImportPath": "typeutil",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "Helpers for type inflection and simplifying working with Golang generic interface types\n",
                "MainFunction": false,
                "CommentWordCount": 1133,
                "LineCount": 2837,
                "SourceLineCount": 2306,
                "FunctionCount": 99,
                "TypeCount": 4,
                "ConstantCount": 3,
                "VariableCount": 0,
                "Statistics": {
                    "Mean": 0.5481,
                    "StdDev": 0.4498,
                    "GeometricMean": 0.949,
                    "HarmonicMean": 0,
                    "Median": 0.7,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "reflect.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            }
                        ],
                        "Size": 3310,
                        "LineCount": 139,
                        "SourceLineCount": 103,
                        "FunctionCount": 5,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "reflect_test.go",
                        "Imports": [
                            {
                                "PackageName": "errors",
                                "Alias": "errors"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 2631,
                        "LineCount": 79,
                        "SourceLineCount": 62,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "sigparse.peg.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "os",
                                "Alias": "os"
                            },
                            {
                                "PackageName": "sort",
                                "Alias": "sort"
                            },
                            {
                                "PackageName": "strconv",
                                "Alias": "strconv"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            }
                        ],
                        "Size": 20316,
                        "LineCount": 939,
                        "SourceLineCount": 892,
                        "FunctionCount": 2,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "values.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/json",
                                "Alias": "json"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/davecgh/go-spew/spew",
                                "Alias": "spew"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/utils",
                                "Alias": "utils"
                            }
                        ],
                        "Size": 10467,
                        "LineCount": 424,
                        "SourceLineCount": 303,
                        "FunctionCount": 25,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "values_test.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 8744,
                        "LineCount": 354,
                        "SourceLineCount": 254,
                        "FunctionCount": 0,
                        "TypeCount": 1,
                        "ConstantCount": 3,
                        "VariableCount": 0
                    },
                    {
                        "Name": "variant.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/json",
                                "Alias": "json"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "text/template",
                                "Alias": "template"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/utils",
                                "Alias": "utils"
                            }
                        ],
                        "Size": 13278,
                        "LineCount": 632,
                        "SourceLineCount": 459,
                        "FunctionCount": 67,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "variant_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 7489,
                        "LineCount": 270,
                        "SourceLineCount": 233,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    }
                ],
                "Constants": [
                    {
                        "Name": "Value1",
                        "Type": "testEnum",
                        "Immutable": true,
                        "Expression": "`value-1`",
                        "Value": "value-1"
                    },
                    {
                        "Name": "Value2",
                        "Type": "testEnum",
                        "Immutable": true,
                        "Expression": "`value-2`",
                        "Value": "value-2"
                    },
                    {
                        "Name": "Value3",
                        "Type": "testEnum",
                        "Immutable": true,
                        "Expression": "`value-3`",
                        "Value": "value-3"
                    }
                ],
                "Functions": [
                    {
                        "Name": "Auto",
                        "Comment": "Package-level auto converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "Auto(in any) any",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLkF1dG8oKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Bool",
                        "Comment": "Package-level bool converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "Bool(in any) bool",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLkJvb2woKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Bytes",
                        "Comment": "Package-level bytes converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            }
                        ],
                        "Signature": "Bytes(in any) []byte",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLkJ5dGVzKCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Dump",
                        "Comment": "Returns a pretty-printed string representation of the given values.",
                        "Arguments": [
                            {
                                "Name": "in1",
                                "Type": "any"
                            },
                            {
                                "Name": "in",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Dump(in1 any, in ...any) string",
                        "Source": "ewoJcmV0dXJuIHNjcy5TZHVtcChhcHBlbmQoW11hbnl7aW4xfSwgaW4uLi4pLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Dumpf",
                        "Comment": "Returns a pretty-printed string representation of the given values.",
                        "Arguments": [
                            {
                                "Name": "format",
                                "Type": "string"
                            },
                            {
                                "Name": "in",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "Dumpf(format string, in ...any) string",
                        "Source": "ewoJcmV0dXJuIGZtdC5TcHJpbnRmKGZvcm1hdCwgc2NzLlNkdW1wKGluLi4uKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Duration",
                        "Comment": "Package-level duration converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Duration"
                            }
                        ],
                        "Signature": "Duration(in any) time.Duration",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLkR1cmF0aW9uKCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Err",
                        "Comment": "Package-level error converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "Err(in any) error",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLkVycigpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Float",
                        "Comment": "Package-level float converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "Float(in any) float64",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLkZsb2F0KCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "FunctionArity",
                        "Comment": "Returns the number of input and return arguments a given function has.",
                        "Arguments": [
                            {
                                "Name": "fn",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int"
                            },
                            {
                                "Type": "int"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "FunctionArity(fn any) (int, int, error)",
                        "Source": "ewoJaWYgSXNGdW5jdGlvbihmbikgewoJCXZhciBmblQgPSByZWZsZWN0LlR5cGVPZihmbikKCQlyZXR1cm4gZm5ULk51bUluKCksIGZuVC5OdW1PdXQoKSwgbmlsCgl9IGVsc2UgewoJCXJldHVybiAwLCAwLCBmbXQuRXJyb3JmKCJleHBlY3RlZCBmdW5jdGlvbiwgZ290ICVUIiwgZm4pCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "FunctionMatchesSignature",
                        "Comment": "Returns whether the given function's actual signature matches the given spec string (as parsed by\nParseSignatureString).",
                        "Arguments": [
                            {
                                "Name": "fn",
                                "Type": "any"
                            },
                            {
                                "Name": "signature",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "FunctionMatchesSignature(fn any, signature string) error",
                        "Source": "ewoJZm4gPSBSZXNvbHZlVmFsdWUoZm4pCgl2YXIgZm5UID0gcmVmbGVjdC5WYWx1ZU9mKGZuKS5UeXBlKCkKCWlmIGZuVC5LaW5kKCkgIT0gcmVmbGVjdC5GdW5jIHsKCQlyZXR1cm4gZm10LkVycm9yZigiZXhwZWN0ZWQgZnVuY3Rpb24sIGdvdCAlVCIsIGZuKQoJfQoJaWYgXywgYXJncywgcmV0dXJucywgZXJyIDo9IFBhcnNlU2lnbmF0dXJlU3RyaW5nKHNpZ25hdHVyZSk7IGVyciA9PSBuaWwgewoJCWlmIGxlbihhcmdzKSAhPSBmblQuTnVtSW4oKSB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJleHBlY3RlZCAlZCBhcmd1bWVudHMsIGdvdCAlZCIsIGxlbihhcmdzKSwgZm5ULk51bUluKCkpCgkJfQoJCWlmIGxlbihyZXR1cm5zKSAhPSBmblQuTnVtT3V0KCkgewoJCQlyZXR1cm4gZm10LkVycm9yZigiZXhwZWN0ZWQgJWQgcmV0dXJuIGFyZ3VtZW50cywgZ290ICVkIiwgbGVuKHJldHVybnMpLCBmblQuTnVtT3V0KCkpCgkJfQoJCWZvciBpLCBhcmcgOj0gcmFuZ2UgYXJncyB7CgkJCXZhciBmbkFyZyA9IGZuVC5JbihpKQoJCQlpZiAhYXJnLklzU2FtZVR5cGVBcyhmbkFyZykgewoJCQkJcmV0dXJuIGZtdC5FcnJvcmYoImFyZ3VtZW50ICVkIHR5cGUgbWlzbWF0Y2g6IGV4cGVjdGVkICV2LCBnb3QgJXYiLCBpLCBhcmcsIGZuQXJnKQoJCQl9CgkJfQoJCWZvciBpLCBhcmcgOj0gcmFuZ2UgcmV0dXJucyB7CgkJCXZhciBmbkFyZyA9IGZuVC5PdXQoaSkKCQkJaWYgIWFyZy5Jc1NhbWVUeXBlQXMoZm5BcmcpIHsKCQkJCXJldHVybiBmbXQuRXJyb3JmKCJyZXR1cm4gYXJndW1lbnQgJWQgdHlwZSBtaXNtYXRjaDogZXhwZWN0ZWQgJXYsIGdvdCAldiIsIGksIGFyZywgZm5BcmcpCgkJCX0KCQl9CgkJcmV0dXJuIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gZXJyCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Int",
                        "Comment": "Package-level int64 converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int64"
                            }
                        ],
                        "Signature": "Int(in any) int64",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLkludCgpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsArray",
                        "Comment": "Returns whether the given value is a slice or array.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsArray(in any) bool",
                        "Source": "ewoJcmV0dXJuIElzS2luZChpbiwgdXRpbHMuU2xpY2VUeXBlcy4uLikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsDuration",
                        "Comment": "Return whether the value can be interpreted as a duration.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsDuration(in any) bool",
                        "Source": "ewoJcmV0dXJuIFZWKGluKS5Jc0R1cmF0aW9uKCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsEmpty",
                        "Comment": "Returns whether the given value is \"empty\" in the semantic sense. Zero values\nare considered empty, as are arrays, slices, and maps containing only empty\nvalues (called recursively). Finally, strings are trimmed of whitespace and\nconsidered empty if the result is zero-length.",
                        "Arguments": [
                            {
                                "Name": "value",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsEmpty(value any) bool",
                        "Source": "ewoJdmFyIHZhbHVlViA9IHJlZmxlY3QuVmFsdWVPZih2YWx1ZSkKCWlmIHZhbHVlVi5LaW5kKCkgPT0gcmVmbGVjdC5QdHIgewoJCXZhbHVlViA9IHZhbHVlVi5FbGVtKCkKCX0KCXN3aXRjaCB2YWx1ZVYuS2luZCgpIHsKCWNhc2UgcmVmbGVjdC5TdHJ1Y3Q6CgkJaWYgSXNaZXJvKHZhbHVlKSB7CgkJCXJldHVybiB0cnVlCgkJfQoJfQoJc3dpdGNoIHZhbHVlVi5LaW5kKCkgewoJY2FzZSByZWZsZWN0LkFycmF5LCByZWZsZWN0LlNsaWNlOgoJCWlmIHZhbHVlVi5MZW4oKSA9PSAwIHsKCQkJcmV0dXJuIHRydWUKCQl9IGVsc2UgewoJCQlmb3IgaSA6PSAwOyBpIDwgdmFsdWVWLkxlbigpOyBpKysgewoJCQkJaWYgaW5kZXhWIDo9IHZhbHVlVi5JbmRleChpKTsgaW5kZXhWLklzVmFsaWQoKSAmJiAhSXNFbXB0eShpbmRleFYuSW50ZXJmYWNlKCkpIHsKCQkJCQlyZXR1cm4gZmFsc2UKCQkJCX0KCQkJfQoJCQlyZXR1cm4gdHJ1ZQoJCX0KCWNhc2UgcmVmbGVjdC5NYXA6CgkJaWYgdmFsdWVWLkxlbigpID09IDAgewoJCQlyZXR1cm4gdHJ1ZQoJCX0gZWxzZSB7CgkJCWZvciBfLCBrZXlWIDo9IHJhbmdlIHZhbHVlVi5NYXBLZXlzKCkgewoJCQkJaWYgaW5kZXhWIDo9IHZhbHVlVi5NYXBJbmRleChrZXlWKTsgaW5kZXhWLklzVmFsaWQoKSAmJiAhSXNFbXB0eShpbmRleFYuSW50ZXJmYWNlKCkpIHsKCQkJCQlyZXR1cm4gZmFsc2UKCQkJCX0KCQkJfQoJCQlyZXR1cm4gdHJ1ZQoJCX0KCWNhc2UgcmVmbGVjdC5DaGFuOgoJCWlmIHZhbHVlVi5MZW4oKSA9PSAwIHsKCQkJcmV0dXJuIHRydWUKCQl9CgljYXNlIHJlZmxlY3QuU3RyaW5nOgoJCWlmIGxlbihzdHJpbmdzLlRyaW1TcGFjZShmbXQuU3ByaW50ZigiJXYiLCB2YWx1ZSkpKSA9PSAwIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsFloat",
                        "Comment": "Returns whether the given value represents a floating point value.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsFloat(in any) bool",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLklzRmxvYXQoaW4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsFunction",
                        "Comment": "Returns whether the given value is a function of any kind",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsFunction(in any) bool",
                        "Source": "ewoJcmV0dXJuIElzS2luZChpbiwgcmVmbGVjdC5GdW5jKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsFunctionArity",
                        "Comment": "Returns whether the given value is a function.  If inParams is not -1, the function must\naccept that number of arguments.  If outParams is not -1, the function must return that\nnumber of values.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "inParams",
                                "Type": "int"
                            },
                            {
                                "Name": "outParams",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsFunctionArity(in any, inParams int, outParams int) bool",
                        "Source": "ewoJaWYgSXNLaW5kKGluLCByZWZsZWN0LkZ1bmMpIHsKCQl2YXIgaW5UID0gcmVmbGVjdC5UeXBlT2YoaW4pCgkJaWYgaW5QYXJhbXMgPCAwIHx8IGluUGFyYW1zID49IDAgJiYgaW5ULk51bUluKCkgPT0gaW5QYXJhbXMgewoJCQlpZiBvdXRQYXJhbXMgPCAwIHx8IG91dFBhcmFtcyA+PSAwICYmIGluVC5OdW1PdXQoKSA9PSBvdXRQYXJhbXMgewoJCQkJcmV0dXJuIHRydWUKCQkJfQoJCX0KCX0KCXJldHVybiBmYWxzZQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsInteger",
                        "Comment": "Returns whether the given value represents an integer value.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsInteger(in any) bool",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLklzSW50ZWdlcihpbikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsKind",
                        "Comment": "Dectect whether the concrete underlying value of the given input is one or more\nKinds of value.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "kinds",
                                "Type": "...reflect.Kind"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsKind(in any, kinds ...reflect.Kind) bool",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLklzS2luZChpbiwga2luZHMuLi4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsKindOfBool",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsKindOfBool(in any) bool",
                        "Source": "ewoJdmFyIGtpbmQgcmVmbGVjdC5LaW5kCglpZiBrLCBvayA6PSBpbi4ocmVmbGVjdC5LaW5kKTsgb2sgewoJCWtpbmQgPSBrCgl9IGVsc2UgewoJCWtpbmQgPSByZWZsZWN0LlR5cGVPZihpbikuS2luZCgpCgl9CglyZXR1cm4gSXNLaW5kKGtpbmQsIHJlZmxlY3QuQm9vbCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsKindOfFloat",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsKindOfFloat(in any) bool",
                        "Source": "ewoJdmFyIGtpbmQgcmVmbGVjdC5LaW5kCglpZiBrLCBvayA6PSBpbi4ocmVmbGVjdC5LaW5kKTsgb2sgewoJCWtpbmQgPSBrCgl9IGVsc2UgewoJCWtpbmQgPSByZWZsZWN0LlR5cGVPZihpbikuS2luZCgpCgl9CglyZXR1cm4gSXNLaW5kKGtpbmQsIHJlZmxlY3QuRmxvYXQzMiwgcmVmbGVjdC5GbG9hdDY0KQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsKindOfInteger",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsKindOfInteger(in any) bool",
                        "Source": "ewoJdmFyIGtpbmQgcmVmbGVjdC5LaW5kCglpZiBrLCBvayA6PSBpbi4ocmVmbGVjdC5LaW5kKTsgb2sgewoJCWtpbmQgPSBrCgl9IGVsc2UgewoJCWtpbmQgPSByZWZsZWN0LlR5cGVPZihpbikuS2luZCgpCgl9CglyZXR1cm4gSXNLaW5kKGtpbmQsIHJlZmxlY3QuSW50LCByZWZsZWN0LkludDgsIHJlZmxlY3QuSW50MTYsIHJlZmxlY3QuSW50MzIsIHJlZmxlY3QuSW50NjQsIHJlZmxlY3QuVWludCwgcmVmbGVjdC5VaW50OCwgcmVmbGVjdC5VaW50MTYsIHJlZmxlY3QuVWludDMyLCByZWZsZWN0LlVpbnQ2NCwgcmVmbGVjdC5VaW50cHRyKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsKindOfString",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsKindOfString(in any) bool",
                        "Source": "ewoJdmFyIGtpbmQgcmVmbGVjdC5LaW5kCglpZiBrLCBvayA6PSBpbi4ocmVmbGVjdC5LaW5kKTsgb2sgewoJCWtpbmQgPSBrCgl9IGVsc2UgaWYgaW5UIDo9IHJlZmxlY3QuVHlwZU9mKGluKTsgaW5UICE9IG5pbCB7CgkJa2luZCA9IGluVC5LaW5kKCkKCX0KCXJldHVybiBJc0tpbmQoa2luZCwgcmVmbGVjdC5TdHJpbmcpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsLessThan",
                        "Arguments": [
                            {
                                "Name": "a",
                                "Type": "any"
                            },
                            {
                                "Name": "b",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsLessThan(a any, b any) bool",
                        "Source": "ewoJcmV0dXJuIFZWKGEpLklzTGVzc1RoYW4oYikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsMap",
                        "Comment": "Returns whether the given value is a map.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsMap(in any) bool",
                        "Source": "ewoJcmV0dXJuIElzS2luZChpbiwgcmVmbGVjdC5NYXApCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsNumeric",
                        "Comment": "Returns whether the given value represents a numeric value.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsNumeric(in any) bool",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLklzTnVtZXJpYyhpbikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsScalar",
                        "Comment": "Return whether the given input is a discrete scalar value (ints, floats, bools,\nstrings), otherwise known as \"primitive types\" in some other languages.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsScalar(in any) bool",
                        "Source": "ewoJaWYgIUlzS2luZChpbiwgdXRpbHMuQ29tcG91bmRUeXBlcy4uLikgewoJCXJldHVybiB0cnVlCgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsStruct",
                        "Comment": "Returns whether the given value is a struct.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsStruct(in any) bool",
                        "Source": "ewoJcmV0dXJuIElzS2luZChpbiwgcmVmbGVjdC5TdHJ1Y3QpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsTime",
                        "Comment": "Return whether the value can be interpreted as a time.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsTime(in any) bool",
                        "Source": "ewoJcmV0dXJuIFZWKGluKS5Jc1RpbWUoKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsZero",
                        "Comment": "Returns whether the given value represents the underlying type's zero value",
                        "Arguments": [
                            {
                                "Name": "value",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsZero(value any) bool",
                        "Source": "ewoJcmV0dXJuIHV0aWxzLklzWmVybyh2YWx1ZSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "JSON",
                        "Comment": "Provide a variable to encode as JSON, and an optional indent string.  If no indent argument is\nprovided, the default indent is \"  \" (two spaces).  If an empty string is explcitly provided\nfor the indent argument, the output will not be indented (single line).",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "indent",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "JSON(in any, indent ...string) string",
                        "Source": "ewoJdmFyIGkgc3RyaW5nCgl2YXIgb3V0IFtdYnl0ZQoJdmFyIGVyciBlcnJvcgoJaWYgbGVuKGluZGVudCkgPiAwIHsKCQlpID0gaW5kZW50WzBdCgl9IGVsc2UgewoJCWkgPSBgICBgCgl9CglpZiBpID09IGBgIHsKCQlvdXQsIGVyciA9IGpzb24uTWFyc2hhbChpbikKCX0gZWxzZSB7CgkJb3V0LCBlcnIgPSBqc29uLk1hcnNoYWxJbmRlbnQoaW4sIGBgLCBpKQoJfQoJaWYgZXJyID09IG5pbCB7CgkJcmV0dXJuIHN0cmluZyhvdXQpCgl9IGVsc2UgewoJCXJldHVybiBgYAoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Len",
                        "Comment": "Returns the length of the given value that could have a length (strings, slices, arrays,\nmaps, and channels).  If the value is not a type that has a length, -1 is returned.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int"
                            }
                        ],
                        "Signature": "Len(in any) int",
                        "Source": "ewoJaWYgSXNLaW5kKGluLCByZWZsZWN0LkFycmF5LCByZWZsZWN0LkNoYW4sIHJlZmxlY3QuTWFwLCByZWZsZWN0LlNsaWNlLCByZWZsZWN0LlN0cmluZykgewoJCXJldHVybiByZWZsZWN0LlZhbHVlT2YoaW4pLkxlbigpCgl9IGVsc2UgewoJCXJldHVybiAtMQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Map",
                        "Comment": "Package-level map converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "tagName",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[Variant]Variant"
                            }
                        ],
                        "Signature": "Map(in any, tagName ...string) map[Variant]Variant",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLk1hcCh0YWdOYW1lLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "MapNative",
                        "Comment": "Package-level map[string]any converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "tagName",
                                "Type": "...string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "map[string]any"
                            }
                        ],
                        "Signature": "MapNative(in any, tagName ...string) map[string]any",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLk1hcE5hdGl2ZSh0YWdOYW1lLi4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "NInt",
                        "Comment": "Package-level native int converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int"
                            }
                        ],
                        "Signature": "NInt(in any) int",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLk5JbnQoKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "OrAuto",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "rest",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "OrAuto(first any, rest ...any) any",
                        "Source": "ewoJcmV0dXJuIFYoZmlyc3QpLk9yQXV0byhyZXN0Li4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "OrBool",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "rest",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "OrBool(first any, rest ...any) bool",
                        "Source": "ewoJcmV0dXJuIFYoZmlyc3QpLk9yQm9vbChyZXN0Li4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "OrBytes",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "[]byte"
                            },
                            {
                                "Name": "rest",
                                "Type": "...[]byte"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            }
                        ],
                        "Signature": "OrBytes(first []byte, rest ...[]byte) []byte",
                        "Source": "ewoJcmV0dXJuIFYoZmlyc3QpLk9yQnl0ZXMocmVzdC4uLikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "OrDuration",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "rest",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Duration"
                            }
                        ],
                        "Signature": "OrDuration(first any, rest ...any) time.Duration",
                        "Source": "ewoJcmV0dXJuIFYoZmlyc3QpLk9yRHVyYXRpb24ocmVzdC4uLikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "OrFloat",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "rest",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            }
                        ],
                        "Signature": "OrFloat(first any, rest ...any) float64",
                        "Source": "ewoJcmV0dXJuIFYoZmlyc3QpLk9yRmxvYXQocmVzdC4uLikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "OrInt",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "rest",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int64"
                            }
                        ],
                        "Signature": "OrInt(first any, rest ...any) int64",
                        "Source": "ewoJcmV0dXJuIFYoZmlyc3QpLk9ySW50KHJlc3QuLi4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "OrNInt",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "rest",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int"
                            }
                        ],
                        "Signature": "OrNInt(first any, rest ...any) int",
                        "Source": "ewoJcmV0dXJuIFYoZmlyc3QpLk9yTkludChyZXN0Li4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "OrString",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "rest",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "OrString(first any, rest ...any) string",
                        "Source": "ewoJcmV0dXJuIFYoZmlyc3QpLk9yU3RyaW5nKHJlc3QuLi4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "OrTime",
                        "Arguments": [
                            {
                                "Name": "first",
                                "Type": "any"
                            },
                            {
                                "Name": "rest",
                                "Type": "...any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Time"
                            }
                        ],
                        "Signature": "OrTime(first any, rest ...any) time.Time",
                        "Source": "ewoJcmV0dXJuIFYoZmlyc3QpLk9yVGltZShyZXN0Li4uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ParseSignatureString",
                        "Comment": "Parse the given function signature string and return the function name, input, and output arguments.\nExample: \"helloWorld(string) error\" would return an ident of \"helloWorld\", a 1-element type declaration\nrepresenting the \"string\" argument, and a 1-element returns array with the \"error\" return parameter.",
                        "Arguments": [
                            {
                                "Name": "signature",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Name": "ident",
                                "Type": "string"
                            },
                            {
                                "Name": "args",
                                "Type": "[]TypeDeclaration"
                            },
                            {
                                "Name": "returns",
                                "Type": "[]TypeDeclaration"
                            },
                            {
                                "Name": "perr",
                                "Type": "error"
                            }
                        ],
                        "Signature": "ParseSignatureString(signature string) (ident string, args []TypeDeclaration, returns []TypeDeclaration, perr error)",
                        "Source": "ewoJdmFyIGdyYW1tYXIgPSAmdHlwZXV0aWxGdW5jdGlvblNpZ25hdHVyZVNwZWN7QnVmZmVyOiBzaWduYXR1cmUsIFByZXR0eTogdHJ1ZX0KCWlmIGVyciA6PSBncmFtbWFyLkluaXQoKTsgZXJyICE9IG5pbCB7CgkJcGVyciA9IGVycgoJCXJldHVybgoJfQoJaWYgZXJyIDo9IGdyYW1tYXIuUGFyc2UoKTsgZXJyICE9IG5pbCB7CgkJcGVyciA9IGVycgoJCXJldHVybgoJfQoJdmFyIGRlY2xzID0gbWFrZShbXVR5cGVEZWNsYXJhdGlvbiwgMCkKCWZvciBfLCB0b2tlbiA6PSByYW5nZSBncmFtbWFyLlRva2VucygpIHsKCQlzd2l0Y2ggcnVsZSA6PSB0b2tlbi5wZWdSdWxlOyBydWxlIHsKCQljYXNlIHJ1bGVLV19GVU5DOgoJCQlpZGVudCA9IGAoYW5vbnltb3VzKWAKCQljYXNlIHJ1bGVJREVOVDoKCQkJaWRlbnQgPSBzaWduYXR1cmVbdG9rZW4uYmVnaW46dG9rZW4uZW5kXQoJCWNhc2UgcnVsZVNJR05BVFVSRToKCQkJYXJncyA9IG1ha2UoW11UeXBlRGVjbGFyYXRpb24sIGxlbihkZWNscykpCgkJCWNvcHkoYXJncywgZGVjbHMpCgkJCWRlY2xzID0gbWFrZShbXVR5cGVEZWNsYXJhdGlvbiwgMCkKCQljYXNlIHJ1bGVSRVRVUk5TOgoJCQlyZXR1cm5zID0gbWFrZShbXVR5cGVEZWNsYXJhdGlvbiwgbGVuKGRlY2xzKSkKCQkJY29weShyZXR1cm5zLCBkZWNscykKCQkJZGVjbHMgPSBuaWwKCQljYXNlIHJ1bGVEQVRBVFlQRToKCQkJZGVjbHMgPSBhcHBlbmQoZGVjbHMsIFR5cGVEZWNsYXJhdGlvbihzaWduYXR1cmVbdG9rZW4uYmVnaW46dG9rZW4uZW5kXSkpCgkJfQoJfQoJcmV0dXJuCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Pretty",
                        "Arguments": [
                            {
                                "Name": "pretty",
                                "Type": "bool"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": ""
                            }
                        ],
                        "Signature": "Pretty(pretty bool) ",
                        "Source": "ewoJcmV0dXJuIGZ1bmMocCAqdHlwZXV0aWxGdW5jdGlvblNpZ25hdHVyZVNwZWMpIGVycm9yIHsKCQlwLlByZXR0eSA9IHByZXR0eQoJCXJldHVybiBuaWwKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RegisterTypeHandler",
                        "Comment": "Register's a handler used for converting one type to another. Type are checked in the following\nmanner:  The input value's reflect.Type String() value is matched, falling back to its\nreflect.Kind String() value, finally checking for a special \"*\" value that matches any type.\nIf the handler function returns nil, its value replaces the input value.  If the special error\ntype PassthroughType is returned, the original value is returned unmodified.",
                        "Arguments": [
                            {
                                "Name": "handler",
                                "Type": "TypeConvertFunc"
                            },
                            {
                                "Name": "types",
                                "Type": "...string"
                            }
                        ],
                        "Signature": "RegisterTypeHandler(handler TypeConvertFunc, types ...string)",
                        "Source": "ewoJdXRpbHMuUmVnaXN0ZXJUeXBlSGFuZGxlcihoYW5kbGVyLCB0eXBlcy4uLikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ResolveValue",
                        "Comment": "Return the concrete value pointed to by a pointer type, or within an\ninterface type.  Allows functions receiving pointers to supported types\nto work with those types without doing reflection.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "ResolveValue(in any) any",
                        "Source": "ewoJaWYgaW5WLCBvayA6PSBpbi4oVmFyaWFudCk7IG9rIHsKCQlpbiA9IGluVi5WYWx1ZQoJfQoJcmV0dXJuIHV0aWxzLlJlc29sdmVWYWx1ZShpbikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SetValue",
                        "Comment": "Attempts to set the given reflect.Value to the given interface value",
                        "Arguments": [
                            {
                                "Name": "target",
                                "Type": "any"
                            },
                            {
                                "Name": "value",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "SetValue(target any, value any) error",
                        "Source": "ewoJdmFyIHRhcmdldFYsIHZhbHVlViwgb3JpZ2luYWxWIHJlZmxlY3QuVmFsdWUKCWlmIHRWLCBvayA6PSB0YXJnZXQuKHJlZmxlY3QuVmFsdWUpOyBvayB7CgkJdGFyZ2V0ViA9IHRWCgl9IGVsc2UgewoJCXRhcmdldFYgPSByZWZsZWN0LlZhbHVlT2YodGFyZ2V0KQoJCWlmIHRhcmdldFYuS2luZCgpID09IHJlZmxlY3QuU3RydWN0IHsKCQkJcmV0dXJuIGZtdC5FcnJvcmYoIk11c3QgcGFzcyBhIHBvaW50ZXIgdG8gYSBzdHJ1Y3QgaW5zdGFuY2UsIGdvdCAlVCIsIHRhcmdldCkKCQl9IGVsc2UgaWYgdGFyZ2V0Vi5LaW5kKCkgPT0gcmVmbGVjdC5QdHIgewoJCQl0YXJnZXRWID0gdGFyZ2V0Vi5FbGVtKCkKCQl9Cgl9CglpZiAhdGFyZ2V0Vi5Jc1ZhbGlkKCkgewoJCXJldHVybiBmbXQuRXJyb3JmKCJUYXJnZXQgJVQgaXMgbm90IHZhbGlkIiwgdGFyZ2V0KQoJfQoJaWYgdiwgZXJyIDo9IHV0aWxzLkNvbnZlcnRDdXN0b21UeXBlKHZhbHVlKTsgZXJyID09IG5pbCB7CgkJdmFsdWUgPSB2Cgl9IGVsc2UgaWYgZXJyICE9IHV0aWxzLlBhc3N0aHJvdWdoVHlwZSB7CgkJcmV0dXJuIGVycgoJfQoJaWYgdlYsIG9rIDo9IHZhbHVlLihyZWZsZWN0LlZhbHVlKTsgb2sgewoJCW9yaWdpbmFsViA9IHZWCgkJdmFsdWVWID0gdlYKCX0gZWxzZSB7CgkJb3JpZ2luYWxWID0gcmVmbGVjdC5WYWx1ZU9mKHZhbHVlKQoJCXZhbHVlViA9IHJlZmxlY3QuVmFsdWVPZihSZXNvbHZlVmFsdWUodmFsdWUpKQoJfQoJaWYgdmFsdWVWLklzVmFsaWQoKSB7CgkJdmFyIHRhcmdldFQgPSB0YXJnZXRWLlR5cGUoKQoJCXZhciB2YWx1ZVQgPSB2YWx1ZVYuVHlwZSgpCgkJaWYgdGFyZ2V0VC5LaW5kKCkgPT0gcmVmbGVjdC5TdHJpbmcgJiYgdmFsdWVWLkNhbkludGVyZmFjZSgpIHsKCQkJdmFsdWVWID0gcmVmbGVjdC5WYWx1ZU9mKGZtdC5TcHJpbnRmKCIldiIsIHZhbHVlVi5JbnRlcmZhY2UoKSkpCgkJCXZhbHVlVCA9IHZhbHVlVi5UeXBlKCkKCQkJaWYgIXZhbHVlVi5Jc1ZhbGlkKCkgewoJCQkJcmV0dXJuIGZtdC5FcnJvcmYoIkNvbnZlcnRpbmcgJVQgdG8gJXYgcHJvZHVjZWQgYW4gaW52YWxpZCB2YWx1ZSIsIHZhbHVlLCB0YXJnZXRUKQoJCQl9CgkJfQoJCWlmIHZhbHVlVC5Bc3NpZ25hYmxlVG8odGFyZ2V0VCkgewoJCQl0YXJnZXRWLlNldCh2YWx1ZVYpCgkJfSBlbHNlIGlmIHZhbHVlVC5Db252ZXJ0aWJsZVRvKHRhcmdldFQpIHsKCQkJdGFyZ2V0Vi5TZXQodmFsdWVWLkNvbnZlcnQodGFyZ2V0VCkpCgkJfSBlbHNlIGlmIHRhcmdldFYuS2luZCgpID09IHJlZmxlY3QuUHRyIHsKCQkJaWYgb3JpZ2luYWxWLktpbmQoKSA9PSByZWZsZWN0LlB0ciB7CgkJCQlyZXR1cm4gU2V0VmFsdWUodGFyZ2V0Viwgb3JpZ2luYWxWKQoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIGZtdC5FcnJvcmYoIlVuYWJsZSB0byBzZXQgdGFyZ2V0OiB2YWx1ZSBmb3IgdGFyZ2V0ICV2IG11c3QgYmUgZ2l2ZW4gYXMgYSBwb2ludGVyIiwgdGFyZ2V0VCkKCQkJfQoJCX0gZWxzZSB7CgkJCXN3aXRjaCBraW5kIDo9IHRhcmdldFYuS2luZCgpOyBraW5kIHsKCQkJY2FzZSByZWZsZWN0LlN0cnVjdDoKCQkJCWlmIGVtYmVkZGVkViA6PSB0YXJnZXRWLkZpZWxkQnlOYW1lKHZhbHVlVC5OYW1lKCkpOyBlbWJlZGRlZFYuSXNWYWxpZCgpIHsKCQkJCQlpZiBlcnIgOj0gU2V0VmFsdWUoZW1iZWRkZWRWLCB2YWx1ZSk7IGVyciA9PSBuaWwgewoJCQkJCQlyZXR1cm4gbmlsCgkJCQkJfQoJCQkJfQoJCQljYXNlIHJlZmxlY3QuQXJyYXksIHJlZmxlY3QuU2xpY2U6CgkJCQlpZiBJc0FycmF5KHZhbHVlKSB7CgkJCQkJdmFyIHZhbHVlQSA9IHV0aWxzLlNsaWNlaWZ5KHZhbHVlKQoJCQkJCXZhciByZXBsID0gdGFyZ2V0VgoJCQkJCWlmIHRhcmdldFYuTGVuKCkgPCBsZW4odmFsdWVBKSB7CgkJCQkJCXJlcGwgPSByZWZsZWN0Lk1ha2VTbGljZSh0YXJnZXRULCBsZW4odmFsdWVBKSwgbGVuKHZhbHVlQSkpCgkJCQkJfQoJCQkJCWZvciBpIDo9IDA7IGkgPCByZXBsLkxlbigpOyBpKysgewoJCQkJCQl2YXIgZWxlbSA9IHJlcGwuSW5kZXgoaSkKCQkJCQkJaWYgZXJyIDo9IFNldFZhbHVlKGVsZW0sIHZhbHVlQVtpXSk7IGVyciAhPSBuaWwgewoJCQkJCQkJcmV0dXJuIGZtdC5FcnJvcmYoImNhbm5vdCBzZXQgaW5kZXggJWQ6ICV2IiwgaSwgZXJyKQoJCQkJCQl9CgkJCQkJfQoJCQkJCXJldHVybiBTZXRWYWx1ZSh0YXJnZXRWLCByZXBsKQoJCQkJfQoJCQl9CgkJCXN3aXRjaCB2YWx1ZS4odHlwZSkgewoJCQljYXNlIHRpbWUuVGltZToKCQkJCXJldHVybiBTZXRWYWx1ZSh0YXJnZXQsIHZhbHVlLih0aW1lLlRpbWUpLlVuaXhOYW5vKCkpCgkJCWNhc2UgKnRpbWUuVGltZToKCQkJCWlmIHRtIDo9IHZhbHVlLigqdGltZS5UaW1lKTsgdG0gIT0gbmlsIHsKCQkJCQlyZXR1cm4gU2V0VmFsdWUodGFyZ2V0LCB0bS5Vbml4TmFubygpKQoJCQkJfQoJCQl9CgkJCXJldHVybiBmbXQuRXJyb3JmKCJVbmFibGUgdG8gc2V0IHRhcmdldDogJVQgaGFzIG5vIHBhdGggdG8gYmVjb21pbmcgJXYiLCB2YWx1ZSwgdGFyZ2V0VCkKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBmbXQuRXJyb3JmKCJVbmFibGUgdG8gc2V0IHRhcmdldCB0byB0aGUgZ2l2ZW4gJVQgdmFsdWUiLCB2YWx1ZSkKCX0KCXJldHVybiBuaWwKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Size",
                        "Arguments": [
                            {
                                "Name": "size",
                                "Type": "int"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": ""
                            }
                        ],
                        "Signature": "Size(size int) ",
                        "Source": "ewoJcmV0dXJuIGZ1bmMocCAqdHlwZXV0aWxGdW5jdGlvblNpZ25hdHVyZVNwZWMpIGVycm9yIHsKCQlwLnRva2VuczMyID0gdG9rZW5zMzJ7dHJlZTogbWFrZShbXXRva2VuMzIsIDAsIHNpemUpfQoJCXJldHVybiBuaWwKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Slice",
                        "Comment": "Package-level slice converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]Variant"
                            }
                        ],
                        "Signature": "Slice(in any) []Variant",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLlNsaWNlKCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Split",
                        "Comment": "Package-level string splitter.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "on",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "Split(in any, on string) []string",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLlNwbGl0KG9uKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "String",
                        "Comment": "Package-level string converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "String(in any) string",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLlN0cmluZygpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Strings",
                        "Comment": "Package-level string slice converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]string"
                            }
                        ],
                        "Signature": "Strings(in any) []string",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLlN0cmluZ3MoKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Time",
                        "Comment": "Package-level time converter",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Time"
                            }
                        ],
                        "Signature": "Time(in any) time.Time",
                        "Source": "ewoJcmV0dXJuIFYoaW4pLlRpbWUoKQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestFunctionArity",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestFunctionArity(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglpLCBvLCBlcnIgOj0gRnVuY3Rpb25Bcml0eShzdHJpbmdzLkNvbXBhcmUpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoMiwgaSkKCWFzc2VydC5FcXVhbCgxLCBvKQoJdmFyIGYwXzAgPSBmdW5jKCkgewoJfQoJaSwgbywgZXJyID0gRnVuY3Rpb25Bcml0eShmMF8wKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKDAsIGkpCglhc3NlcnQuRXF1YWwoMCwgbykKCXZhciBmMF8xID0gZnVuYygpIGVycm9yIHsKCQlyZXR1cm4gbmlsCgl9CglpLCBvLCBlcnIgPSBGdW5jdGlvbkFyaXR5KGYwXzEpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoMCwgaSkKCWFzc2VydC5FcXVhbCgxLCBvKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestFunctionMatchesSignature",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestFunctionMatchesSignature(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5Ob0Vycm9yKHQsIEZ1bmN0aW9uTWF0Y2hlc1NpZ25hdHVyZShmdW5jKCkgewoJfSwgYGZ1bmMoKWApKQoJcmVxdWlyZS5Ob0Vycm9yKHQsIEZ1bmN0aW9uTWF0Y2hlc1NpZ25hdHVyZShmdW5jKF8gc3RyaW5nKSB7Cgl9LCBgZnVuYyhzdHJpbmcpYCkpCglyZXF1aXJlLk5vRXJyb3IodCwgRnVuY3Rpb25NYXRjaGVzU2lnbmF0dXJlKGZ1bmMoXyBzdHJpbmcpIGVycm9yIHsKCQlyZXR1cm4gbmlsCgl9LCBgZnVuYyhzdHJpbmcpIGVycm9yYCkpCglyZXF1aXJlLk5vRXJyb3IodCwgRnVuY3Rpb25NYXRjaGVzU2lnbmF0dXJlKGZ1bmMoXyBzdHJpbmcpIGVycm9yIHsKCQlyZXR1cm4gbmlsCgl9LCBgZnVuYyhhbnkpIGFueWApKQoJcmVxdWlyZS5Ob0Vycm9yKHQsIEZ1bmN0aW9uTWF0Y2hlc1NpZ25hdHVyZShmdW5jKF8gc3RyaW5nKSAoaW50LCBlcnJvcikgewoJCXJldHVybiAwLCBuaWwKCX0sIGBmdW5jKHN0cmluZykgKGludCwgZXJyb3IpYCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestGenericCompare",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestGenericCompare(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5UcnVlKHQsIElzTGVzc1RoYW4oZmFsc2UsIHRydWUpKQoJcmVxdWlyZS5UcnVlKHQsIElzTGVzc1RoYW4oNSwgMTApKQoJcmVxdWlyZS5UcnVlKHQsIElzTGVzc1RoYW4oYGFwcGxlYCwgYGJhbmFuYWApKQoJcmVxdWlyZS5GYWxzZSh0LCBJc0xlc3NUaGFuKG5pbCwgbmlsKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNMZXNzVGhhbihgYCwgbmlsKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNMZXNzVGhhbigwLCAwKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNMZXNzVGhhbig0MiwgNDIpKQoJcmVxdWlyZS5GYWxzZSh0LCBJc0xlc3NUaGFuKDQyMCwgNjkpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsArray",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsArray(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRmFsc2UoSXNBcnJheShuaWwpKQoJdmFyIGEgW11zdHJpbmcKCWFzc2VydC5UcnVlKElzQXJyYXkoYSkpCglhc3NlcnQuVHJ1ZShJc0FycmF5KFtdc3RyaW5ne2AxYH0pKQoJYXNzZXJ0LlRydWUoSXNBcnJheSgmW11zdHJpbmd7YDFgfSkpCgl2YXIgYiBhbnkKCWIgPSBbXXN0cmluZ3tgMWB9Cglhc3NlcnQuVHJ1ZShJc0FycmF5KGIpKQoJYXNzZXJ0LlRydWUoSXNBcnJheSgmYikpCglhc3NlcnQuRmFsc2UoSXNBcnJheShgYCkpCglhc3NlcnQuRmFsc2UoSXNBcnJheShgMTIzYCkpCglhc3NlcnQuRmFsc2UoSXNBcnJheSgxMjMpKQoJYXNzZXJ0LkZhbHNlKElzQXJyYXkodHJ1ZSkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsDuration",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsDuration(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5GYWxzZSh0LCBJc0R1cmF0aW9uKDApKQoJcmVxdWlyZS5GYWxzZSh0LCBJc0R1cmF0aW9uKGAwYCkpCglyZXF1aXJlLkZhbHNlKHQsIElzRHVyYXRpb24oZmxvYXQ2NCgwKSkpCglyZXF1aXJlLkZhbHNlKHQsIElzRHVyYXRpb24oMSkpCglyZXF1aXJlLkZhbHNlKHQsIElzRHVyYXRpb24oYDFgKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNEdXJhdGlvbihmbG9hdDY0KDEpKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNEdXJhdGlvbihmYWxzZSkpCglyZXF1aXJlLkZhbHNlKHQsIElzRHVyYXRpb24odHJ1ZSkpCglyZXF1aXJlLkZhbHNlKHQsIElzRHVyYXRpb24oYGEgcG90YXRvYCkpCglyZXF1aXJlLlRydWUodCwgSXNEdXJhdGlvbihgMzBzYCkpCglyZXF1aXJlLlRydWUodCwgSXNEdXJhdGlvbihgMjBtc2ApKQoJcmVxdWlyZS5UcnVlKHQsIElzRHVyYXRpb24oYDVtYCkpCglyZXF1aXJlLkZhbHNlKHQsIElzRHVyYXRpb24oYDIwMDYtMDEtMDJgKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNEdXJhdGlvbihgYCkpCglyZXF1aXJlLkZhbHNlKHQsIElzRHVyYXRpb24obmlsKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsEmpty",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsEmpty(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgdGhpbmdzID0gbWFrZShbXVRoaW5nLCA0KQoJdmFyIHRoaW5nbWFwID0gbWFrZShtYXBbc3RyaW5nXVRoaW5nKQoJdmFyIHN0cmluZ21hcCA9IG1hcFtpbnRdc3RyaW5nezE6IGBgLCAyOiBgICAgIGAsIDM6ICJcdCJ9Cglhc3NlcnQuVHJ1ZShJc0VtcHR5KHRoaW5ncykpCglhc3NlcnQuVHJ1ZShJc0VtcHR5KGBgKSkKCWFzc2VydC5UcnVlKElzRW1wdHkoYCBgKSkKCWFzc2VydC5UcnVlKElzRW1wdHkoYCAgICAgYCkpCglhc3NlcnQuVHJ1ZShJc0VtcHR5KCJcdFxuICBcblx0IikpCglhc3NlcnQuVHJ1ZShJc0VtcHR5KHRoaW5nbWFwKSkKCWFzc2VydC5UcnVlKElzRW1wdHkoc3RyaW5nbWFwKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsFunction",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsFunction(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRmFsc2UoSXNGdW5jdGlvbihuaWwpKQoJYXNzZXJ0LkZhbHNlKElzRnVuY3Rpb24oMSkpCglhc3NlcnQuRmFsc2UoSXNGdW5jdGlvbih0cnVlKSkKCWFzc2VydC5GYWxzZShJc0Z1bmN0aW9uKGB0aHJlZWApKQoJYXNzZXJ0LlRydWUoSXNGdW5jdGlvbihmdW5jKCkgewoJfSkpCglhc3NlcnQuVHJ1ZShJc0Z1bmN0aW9uQXJpdHkoZnVuYygpIHsKCX0sIDAsIDApKQoJYXNzZXJ0LlRydWUoSXNGdW5jdGlvbkFyaXR5KGZ1bmMoKSB7Cgl9LCAwLCAtMSkpCglhc3NlcnQuVHJ1ZShJc0Z1bmN0aW9uQXJpdHkoZnVuYygpIHsKCX0sIC0xLCAwKSkKCWFzc2VydC5UcnVlKElzRnVuY3Rpb25Bcml0eShmdW5jKCkgewoJfSwgLTEsIC0xKSkKCWFzc2VydC5GYWxzZShJc0Z1bmN0aW9uQXJpdHkoZnVuYygpIHsKCX0sIDk5LCAwKSkKCWFzc2VydC5GYWxzZShJc0Z1bmN0aW9uQXJpdHkoZnVuYygpIHsKCX0sIDAsIDk5KSkKCWFzc2VydC5GYWxzZShJc0Z1bmN0aW9uQXJpdHkoZnVuYygpIHsKCX0sIDk5LCA5OSkpCglhc3NlcnQuVHJ1ZShJc0Z1bmN0aW9uKGZ1bmMoYW55KSB7Cgl9KSkKCWFzc2VydC5UcnVlKElzRnVuY3Rpb25Bcml0eShmdW5jKGFueSkgewoJfSwgMSwgMCkpCglhc3NlcnQuVHJ1ZShJc0Z1bmN0aW9uQXJpdHkoZnVuYyhhbnkpIHsKCX0sIDEsIC0xKSkKCWFzc2VydC5UcnVlKElzRnVuY3Rpb25Bcml0eShmdW5jKGFueSkgewoJfSwgLTEsIDApKQoJYXNzZXJ0LlRydWUoSXNGdW5jdGlvbkFyaXR5KGZ1bmMoYW55KSB7Cgl9LCAtMSwgLTEpKQoJYXNzZXJ0LkZhbHNlKElzRnVuY3Rpb25Bcml0eShmdW5jKGFueSkgewoJfSwgOTksIDApKQoJYXNzZXJ0LkZhbHNlKElzRnVuY3Rpb25Bcml0eShmdW5jKGFueSkgewoJfSwgMCwgOTkpKQoJYXNzZXJ0LkZhbHNlKElzRnVuY3Rpb25Bcml0eShmdW5jKGFueSkgewoJfSwgOTksIDk5KSkKCWFzc2VydC5UcnVlKElzRnVuY3Rpb24oZnVuYyhhbnkpIGVycm9yIHsKCQlyZXR1cm4gbmlsCgl9KSkKCWFzc2VydC5UcnVlKElzRnVuY3Rpb25Bcml0eShmdW5jKGFueSkgZXJyb3IgewoJCXJldHVybiBuaWwKCX0sIDEsIDEpKQoJYXNzZXJ0LlRydWUoSXNGdW5jdGlvbkFyaXR5KGZ1bmMoYW55KSBlcnJvciB7CgkJcmV0dXJuIG5pbAoJfSwgMSwgLTEpKQoJYXNzZXJ0LlRydWUoSXNGdW5jdGlvbkFyaXR5KGZ1bmMoYW55KSBlcnJvciB7CgkJcmV0dXJuIG5pbAoJfSwgLTEsIDEpKQoJYXNzZXJ0LlRydWUoSXNGdW5jdGlvbkFyaXR5KGZ1bmMoYW55KSBlcnJvciB7CgkJcmV0dXJuIG5pbAoJfSwgLTEsIC0xKSkKCWFzc2VydC5GYWxzZShJc0Z1bmN0aW9uQXJpdHkoZnVuYyhhbnkpIGVycm9yIHsKCQlyZXR1cm4gbmlsCgl9LCA5OSwgMSkpCglhc3NlcnQuRmFsc2UoSXNGdW5jdGlvbkFyaXR5KGZ1bmMoYW55KSBlcnJvciB7CgkJcmV0dXJuIG5pbAoJfSwgMCwgOTkpKQoJYXNzZXJ0LkZhbHNlKElzRnVuY3Rpb25Bcml0eShmdW5jKGFueSkgZXJyb3IgewoJCXJldHVybiBuaWwKCX0sIDk5LCA5OSkpCglhc3NlcnQuVHJ1ZShJc0Z1bmN0aW9uKGZ1bmMoKSBlcnJvciB7CgkJcmV0dXJuIG5pbAoJfSkpCglhc3NlcnQuVHJ1ZShJc0Z1bmN0aW9uQXJpdHkoZnVuYygpIGVycm9yIHsKCQlyZXR1cm4gbmlsCgl9LCAwLCAxKSkKCWFzc2VydC5UcnVlKElzRnVuY3Rpb25Bcml0eShmdW5jKCkgZXJyb3IgewoJCXJldHVybiBuaWwKCX0sIDAsIC0xKSkKCWFzc2VydC5UcnVlKElzRnVuY3Rpb25Bcml0eShmdW5jKCkgZXJyb3IgewoJCXJldHVybiBuaWwKCX0sIC0xLCAxKSkKCWFzc2VydC5UcnVlKElzRnVuY3Rpb25Bcml0eShmdW5jKCkgZXJyb3IgewoJCXJldHVybiBuaWwKCX0sIC0xLCAtMSkpCglhc3NlcnQuRmFsc2UoSXNGdW5jdGlvbkFyaXR5KGZ1bmMoKSBlcnJvciB7CgkJcmV0dXJuIG5pbAoJfSwgOTksIDApKQoJYXNzZXJ0LkZhbHNlKElzRnVuY3Rpb25Bcml0eShmdW5jKCkgZXJyb3IgewoJCXJldHVybiBuaWwKCX0sIDAsIDk5KSkKCWFzc2VydC5GYWxzZShJc0Z1bmN0aW9uQXJpdHkoZnVuYygpIGVycm9yIHsKCQlyZXR1cm4gbmlsCgl9LCA5OSwgOTkpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsNumeric",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsNumeric(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5UcnVlKHQsIElzTnVtZXJpYygwKSkKCXJlcXVpcmUuVHJ1ZSh0LCBJc051bWVyaWMoYDBgKSkKCXJlcXVpcmUuVHJ1ZSh0LCBJc051bWVyaWMoZmxvYXQ2NCgwKSkpCglyZXF1aXJlLlRydWUodCwgSXNOdW1lcmljKDEpKQoJcmVxdWlyZS5UcnVlKHQsIElzTnVtZXJpYyhgMWApKQoJcmVxdWlyZS5UcnVlKHQsIElzTnVtZXJpYyhmbG9hdDY0KDEpKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNOdW1lcmljKGZhbHNlKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNOdW1lcmljKHRydWUpKQoJcmVxdWlyZS5GYWxzZSh0LCBJc051bWVyaWModGltZS5Ob3coKSkpCglyZXF1aXJlLlRydWUodCwgSXNOdW1lcmljKHRpbWUuTm93KCkuVW5peCgpKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNOdW1lcmljKGBhIHBvdGF0b2ApKQoJcmVxdWlyZS5GYWxzZSh0LCBJc051bWVyaWMoYGApKQoJcmVxdWlyZS5GYWxzZSh0LCBJc051bWVyaWMobmlsKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsScalar",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsScalar(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuVHJ1ZShJc1NjYWxhcigxKSkKCWFzc2VydC5UcnVlKElzU2NhbGFyKHRydWUpKQoJYXNzZXJ0LlRydWUoSXNTY2FsYXIoMy4xNCkpCglhc3NlcnQuVHJ1ZShJc1NjYWxhcihgZm91cmApKQoJYXNzZXJ0LkZhbHNlKElzU2NhbGFyKFtdc3RyaW5ne2AxYH0pKQoJYXNzZXJ0LkZhbHNlKElzU2NhbGFyKG1hcFtzdHJpbmddc3RyaW5ne30pKQoJYXNzZXJ0LkZhbHNlKElzU2NhbGFyKG1ha2UoY2hhbiBzdHJpbmcpKSkKCWFzc2VydC5GYWxzZShJc1NjYWxhcih0aW1lLlRpbWV7fSkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsStruct",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsStruct(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRmFsc2UoSXNTdHJ1Y3QoMSkpCglhc3NlcnQuRmFsc2UoSXNTdHJ1Y3QodHJ1ZSkpCglhc3NlcnQuRmFsc2UoSXNTdHJ1Y3QoMy4xNCkpCglhc3NlcnQuRmFsc2UoSXNTdHJ1Y3QoYGZvdXJgKSkKCWFzc2VydC5GYWxzZShJc1N0cnVjdChbXXN0cmluZ3tgMWB9KSkKCWFzc2VydC5GYWxzZShJc1N0cnVjdChtYXBbc3RyaW5nXXN0cmluZ3t9KSkKCWFzc2VydC5GYWxzZShJc1N0cnVjdChtYWtlKGNoYW4gc3RyaW5nKSkpCglhc3NlcnQuVHJ1ZShJc1N0cnVjdCh0aW1lLlRpbWV7fSkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsTime",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsTime(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5UcnVlKHQsIElzVGltZSgwKSkKCXJlcXVpcmUuVHJ1ZSh0LCBJc1RpbWUoYDBgKSkKCXJlcXVpcmUuVHJ1ZSh0LCBJc1RpbWUoZmxvYXQ2NCgwKSkpCglyZXF1aXJlLlRydWUodCwgSXNUaW1lKDEpKQoJcmVxdWlyZS5UcnVlKHQsIElzVGltZShgMWApKQoJcmVxdWlyZS5UcnVlKHQsIElzVGltZShmbG9hdDY0KDEpKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNUaW1lKGZhbHNlKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNUaW1lKHRydWUpKQoJcmVxdWlyZS5UcnVlKHQsIElzVGltZSh0aW1lLk5vdygpKSkKCXJlcXVpcmUuVHJ1ZSh0LCBJc1RpbWUodGltZS5Ob3coKS5Vbml4KCkpKQoJcmVxdWlyZS5GYWxzZSh0LCBJc1RpbWUoYGEgcG90YXRvYCkpCglyZXF1aXJlLlRydWUodCwgSXNUaW1lKGBub3dgKSkKCXJlcXVpcmUuVHJ1ZSh0LCBJc1RpbWUoYDIwMDYtMDEtMDJgKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNUaW1lKGBgKSkKCXJlcXVpcmUuRmFsc2UodCwgSXNUaW1lKG5pbCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsZero",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsZero(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgdGhpbmcgVGhpbmcKCXZhciB0aGluZ3MgW11UaGluZwoJdmFyIG1hZGVUaGluZ3MgPSBtYWtlKFtdVGhpbmcsIDApCglhc3NlcnQuVHJ1ZShJc1plcm8obmlsKSkKCWFzc2VydC5UcnVlKElzWmVybygwKSkKCWFzc2VydC5UcnVlKElzWmVybygwLjApKQoJYXNzZXJ0LlRydWUoSXNaZXJvKGZhbHNlKSkKCWFzc2VydC5UcnVlKElzWmVybyhgYCkpCglhc3NlcnQuVHJ1ZShJc1plcm8odGhpbmcpKQoJYXNzZXJ0LlRydWUoSXNaZXJvKFRoaW5ne30pKQoJYXNzZXJ0LlRydWUoSXNaZXJvKHRoaW5ncykpCgl0aGluZ3MgPSBhcHBlbmQodGhpbmdzLCBUaGluZ3t9KQoJYXNzZXJ0LkZhbHNlKElzWmVybygxKSkKCWFzc2VydC5GYWxzZShJc1plcm8oMC4xKSkKCWFzc2VydC5GYWxzZShJc1plcm8odHJ1ZSkpCglhc3NlcnQuRmFsc2UoSXNaZXJvKGB2YWx1ZWApKQoJYXNzZXJ0LkZhbHNlKElzWmVybyhUaGluZ3tgdmFsdWVgLCB0cnVlfSkpCglhc3NlcnQuRmFsc2UoSXNaZXJvKCZUaGluZ3t9KSkKCWFzc2VydC5GYWxzZShJc1plcm8odGhpbmdzKSkKCWFzc2VydC5GYWxzZShJc1plcm8obWFkZVRoaW5ncykpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestNil",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestNil(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5UcnVlKHQsIE5pbCgpLklzTmlsKCkpCglyZXF1aXJlLlRydWUodCwgTmlsKCkuSXNaZXJvKCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestOrBool",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestOrBool(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5GYWxzZSh0LCBPckJvb2woZmFsc2UpKQoJcmVxdWlyZS5GYWxzZSh0LCBPckJvb2woMCkpCglyZXF1aXJlLkZhbHNlKHQsIE9yQm9vbChgMGApKQoJcmVxdWlyZS5GYWxzZSh0LCBPckJvb2woYGZhbHNlYCkpCglyZXF1aXJlLkZhbHNlKHQsIE9yQm9vbChgbm9gKSkKCXJlcXVpcmUuRmFsc2UodCwgT3JCb29sKGBvZmZgKSkKCXJlcXVpcmUuVHJ1ZSh0LCBPckJvb2wodHJ1ZSkpCglyZXF1aXJlLlRydWUodCwgT3JCb29sKGB0cnVlYCkpCglyZXF1aXJlLlRydWUodCwgT3JCb29sKDEpKQoJcmVxdWlyZS5UcnVlKHQsIE9yQm9vbChgMWApKQoJcmVxdWlyZS5UcnVlKHQsIE9yQm9vbChgeWVzYCkpCglyZXF1aXJlLlRydWUodCwgT3JCb29sKGBvbmApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestOrDuration",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestOrDuration(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5aZXJvKHQsIE9yRHVyYXRpb24oYGApKQoJcmVxdWlyZS5aZXJvKHQsIE9yRHVyYXRpb24oYGAsIGZhbHNlLCBuaWwpKQoJcmVxdWlyZS5FcXVhbCh0LCA0KnRpbWUuSG91ciwgT3JEdXJhdGlvbihgYCwgMCwgZmFsc2UsIGAwbnNgLCBgNGhgKSkKCXJlcXVpcmUuRXF1YWwodCwgMjQqdGltZS5Ib3VyLCBPckR1cmF0aW9uKGAxZGApKQoJcmVxdWlyZS5FcXVhbCh0LCA1KnRpbWUuTWludXRlKzMqdGltZS5TZWNvbmQsIE9yRHVyYXRpb24oYDVtM3NgLCBgMW0xOHNgKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestOrFloat",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestOrFloat(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5FcXVhbCh0LCBmbG9hdDY0KDQyKSwgT3JGbG9hdCg0MiwgOTYpKQoJcmVxdWlyZS5FcXVhbCh0LCBmbG9hdDY0KDQyKSwgT3JGbG9hdChgNDJgLCA5NikpCglyZXF1aXJlLkVxdWFsKHQsIGZsb2F0NjQoNDIpLCBPckZsb2F0KGBgLCBgMGAsIDQyLCA5NikpCglyZXF1aXJlLkVxdWFsKHQsIGZsb2F0NjQoNDIpLCBPckZsb2F0KDAsIGZhbHNlLCBgYCwgNDIsIDk2KSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestOrInt",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestOrInt(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5FcXVhbCh0LCBpbnQ2NCg0MiksIE9ySW50KDQyLCA5NikpCglyZXF1aXJlLkVxdWFsKHQsIGludDY0KDQyKSwgT3JJbnQoYDQyYCwgOTYpKQoJcmVxdWlyZS5FcXVhbCh0LCBpbnQ2NCg0MiksIE9ySW50KGBgLCBgMGAsIDQyLCA5NikpCglyZXF1aXJlLkVxdWFsKHQsIGludDY0KDQyKSwgT3JJbnQoMCwgZmFsc2UsIGBgLCA0MiwgOTYpKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestOrString",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestOrString(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5FcXVhbCh0LCBgYCwgT3JTdHJpbmcoYGApKQoJcmVxdWlyZS5FcXVhbCh0LCBgaGV5YCwgT3JTdHJpbmcoYGhleWApKQoJcmVxdWlyZS5FcXVhbCh0LCBgaGV5YCwgT3JTdHJpbmcoYGhleWAsIGBgLCBgYCkpCglyZXF1aXJlLkVxdWFsKHQsIGBoZXlgLCBPclN0cmluZyhgYCwgYGhleWAsIGBgKSkKCXJlcXVpcmUuRXF1YWwodCwgYGhleWAsIE9yU3RyaW5nKGBgLCBgYCwgYGhleWApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestOrTime",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestOrTime(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5UcnVlKHQsIE9yVGltZShgYCkuSXNaZXJvKCkpCglyZXF1aXJlLlRydWUodCwgT3JUaW1lKG5pbCwgYGAsIGZhbHNlLCBuaWwpLklzWmVybygpKQoJcmVxdWlyZS5GYWxzZSh0LCBPclRpbWUoYG5vd2ApLklzWmVybygpKQoJcmVxdWlyZS5FcXVhbCh0LCB0aW1lLlVuaXgoMCwgMCksIE9yVGltZSgwKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestParseSignatureString",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestParseSignatureString(t *testing.T)",
                        "Source": "ewoJdmFyIGlkZW50LCBhcmdzLCByZXR1cm5zLCBlcnIgPSBQYXJzZVNpZ25hdHVyZVN0cmluZyhgdGVzdEZ1bmMoc3RyLGJvb2wsICp0ZXN0Q3VzdG9tVHlwZSkgKGJvb2wsZXJyb3IpYCkKCXJlcXVpcmUuTm9FcnJvcih0LCBlcnIpCglyZXF1aXJlLkVxdWFsKHQsIGB0ZXN0RnVuY2AsIGlkZW50KQoJcmVxdWlyZS5MZW4odCwgYXJncywgMykKCWFyZ3NbMF0uSXNTYW1lVHlwZUFzKGBleGFtcGxlIHN0cmluZ2ApCglhcmdzWzFdLklzU2FtZVR5cGVBcyh0cnVlKQoJYXJnc1syXS5Jc1NhbWVUeXBlQXMobmV3KHRlc3RDdXN0b21UeXBlKSkKCXJlcXVpcmUuTGVuKHQsIHJldHVybnMsIDIpCglyZXR1cm5zWzBdLklzU2FtZVR5cGVBcyh0cnVlKQoJcmV0dXJuc1sxXS5Jc1NhbWVUeXBlQXMoZXJyb3JzLk5ldyhgdGVzdCBlcnJvcmApKQoJaWRlbnQsIGFyZ3MsIHJldHVybnMsIGVyciA9IFBhcnNlU2lnbmF0dXJlU3RyaW5nKGBmdW5jKClgKQoJcmVxdWlyZS5Ob0Vycm9yKHQsIGVycikKCXJlcXVpcmUuRXF1YWwodCwgYChhbm9ueW1vdXMpYCwgaWRlbnQpCglyZXF1aXJlLkxlbih0LCBhcmdzLCAwKQoJcmVxdWlyZS5MZW4odCwgcmV0dXJucywgMCkKCWlkZW50LCBhcmdzLCByZXR1cm5zLCBlcnIgPSBQYXJzZVNpZ25hdHVyZVN0cmluZyhgdGVzdEZ1bmMoKSBlcnJvcmApCglyZXF1aXJlLk5vRXJyb3IodCwgZXJyKQoJcmVxdWlyZS5FcXVhbCh0LCBgdGVzdEZ1bmNgLCBpZGVudCkKCXJlcXVpcmUuTGVuKHQsIGFyZ3MsIDApCglyZXF1aXJlLkxlbih0LCByZXR1cm5zLCAxKQoJcmV0dXJuc1swXS5Jc1NhbWVUeXBlQXMoZXJyb3JzLk5ldyhgdGVzdCBlcnJvcmApKQoJaWRlbnQsIGFyZ3MsIHJldHVybnMsIGVyciA9IFBhcnNlU2lnbmF0dXJlU3RyaW5nKGB0ZXN0RnVuYyhib29sKSAoZXJyb3IpYCkKCXJlcXVpcmUuTm9FcnJvcih0LCBlcnIpCglyZXF1aXJlLkVxdWFsKHQsIGB0ZXN0RnVuY2AsIGlkZW50KQoJcmVxdWlyZS5MZW4odCwgYXJncywgMSkKCWFyZ3NbMF0uSXNTYW1lVHlwZUFzKGZhbHNlKQoJcmVxdWlyZS5MZW4odCwgcmV0dXJucywgMSkKCXJldHVybnNbMF0uSXNTYW1lVHlwZUFzKGVycm9ycy5OZXcoYHRlc3QgZXJyb3JgKSkKfS8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSetValueInt",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSetValueInt(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaSBpbnQKCWFzc2VydC5Ob0Vycm9yKFNldFZhbHVlKCZpLCBpbnQoNDIpKSkKCWFzc2VydC5FcXVhbChpbnQoNDIpLCBpKQoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUoJmksIGludDgoNDIpKSkKCWFzc2VydC5FcXVhbChpbnQoNDIpLCBpKQoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUoJmksIGludDE2KDQyKSkpCglhc3NlcnQuRXF1YWwoaW50KDQyKSwgaSkKCWFzc2VydC5Ob0Vycm9yKFNldFZhbHVlKCZpLCBpbnQzMig0MikpKQoJYXNzZXJ0LkVxdWFsKGludCg0MiksIGkpCglhc3NlcnQuTm9FcnJvcihTZXRWYWx1ZSgmaSwgaW50NjQoNDIpKSkKCWFzc2VydC5FcXVhbChpbnQoNDIpLCBpKQoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUoJmksIHVpbnQoNDIpKSkKCWFzc2VydC5FcXVhbChpbnQoNDIpLCBpKQoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUoJmksIHVpbnQ4KDQyKSkpCglhc3NlcnQuRXF1YWwoaW50KDQyKSwgaSkKCWFzc2VydC5Ob0Vycm9yKFNldFZhbHVlKCZpLCB1aW50MTYoNDIpKSkKCWFzc2VydC5FcXVhbChpbnQoNDIpLCBpKQoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUoJmksIHVpbnQzMig0MikpKQoJYXNzZXJ0LkVxdWFsKGludCg0MiksIGkpCglhc3NlcnQuTm9FcnJvcihTZXRWYWx1ZSgmaSwgdWludDY0KDQyKSkpCglhc3NlcnQuRXF1YWwoaW50KDQyKSwgaSkKCXZhciBpOCBpbnQ4Cglhc3NlcnQuTm9FcnJvcihTZXRWYWx1ZSgmaTgsIGludCg0MikpKQoJYXNzZXJ0LkVxdWFsKGludDgoNDIpLCBpOCkKCWFzc2VydC5Ob0Vycm9yKFNldFZhbHVlKCZpOCwgaW50OCg0MikpKQoJYXNzZXJ0LkVxdWFsKGludDgoNDIpLCBpOCkKCWFzc2VydC5Ob0Vycm9yKFNldFZhbHVlKCZpOCwgaW50MTYoNDIpKSkKCWFzc2VydC5FcXVhbChpbnQ4KDQyKSwgaTgpCglhc3NlcnQuTm9FcnJvcihTZXRWYWx1ZSgmaTgsIGludDMyKDQyKSkpCglhc3NlcnQuRXF1YWwoaW50OCg0MiksIGk4KQoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUoJmk4LCBpbnQ2NCg0MikpKQoJYXNzZXJ0LkVxdWFsKGludDgoNDIpLCBpOCkKCWFzc2VydC5Ob0Vycm9yKFNldFZhbHVlKCZpOCwgdWludCg0MikpKQoJYXNzZXJ0LkVxdWFsKGludDgoNDIpLCBpOCkKCWFzc2VydC5Ob0Vycm9yKFNldFZhbHVlKCZpOCwgdWludDgoNDIpKSkKCWFzc2VydC5FcXVhbChpbnQ4KDQyKSwgaTgpCglhc3NlcnQuTm9FcnJvcihTZXRWYWx1ZSgmaTgsIHVpbnQxNig0MikpKQoJYXNzZXJ0LkVxdWFsKGludDgoNDIpLCBpOCkKCWFzc2VydC5Ob0Vycm9yKFNldFZhbHVlKCZpOCwgdWludDMyKDQyKSkpCglhc3NlcnQuRXF1YWwoaW50OCg0MiksIGk4KQoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUoJmk4LCB1aW50NjQoNDIpKSkKCWFzc2VydC5FcXVhbChpbnQ4KDQyKSwgaTgpCglhc3NlcnQuTm90TmlsKFNldFZhbHVlKHRpbWUuVGltZXt9LCB0aW1lLk5vdygpKSkKfS8vIElOVAovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCg==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSetValueSlice",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSetValueSlice(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgcyBbXXN0cmluZwoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUoJnMsIFtdc3RyaW5ne2BoZXlgfSkpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YGhleWB9LCBzKQoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUoJnMsIFtdc3RyaW5ne2B0aGVyZWB9KSkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgdGhlcmVgfSwgcykKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSetValueStruct",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSetValueStruct(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgdDEgPSAmdGVzdFNldHRhYmxle05hbWU6IGB0MWAsIFR5cGU6IFZhbHVlMn0KCWFzc2VydC5FcXVhbChWYWx1ZTIsIHQxLlR5cGUpCglhc3NlcnQuTm9FcnJvcihTZXRWYWx1ZShyZWZsZWN0LlZhbHVlT2YodDEpLkVsZW0oKS5GaWVsZCgwKSwgNDIpKQoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUocmVmbGVjdC5WYWx1ZU9mKHQxKS5FbGVtKCkuRmllbGQoMSksIFZhbHVlMykpCglhc3NlcnQuRXF1YWwoYDQyYCwgdDEuTmFtZSkKCWFzc2VydC5FcXVhbChWYWx1ZTMsIHQxLlR5cGUpCglhc3NlcnQuTm9FcnJvcihTZXRWYWx1ZShyZWZsZWN0LlZhbHVlT2YodDEpLkVsZW0oKS5GaWVsZCgxKSwgYHZhbHVlLTRgKSkKCWFzc2VydC5FcXVhbCh0ZXN0RW51bShgdmFsdWUtNGApLCB0MS5UeXBlKQoJdmFyIHRtID0gdGltZS5EYXRlKDIwMDksIHRpbWUuTm92ZW1iZXIsIDEwLCAyMywgMCwgMCwgMCwgdGltZS5VVEMpCglhc3NlcnQuTm9FcnJvcihTZXRWYWx1ZShyZWZsZWN0LlZhbHVlT2YodDEpLkVsZW0oKS5GaWVsZCgyKSwgdG0pKQoJYXNzZXJ0LlRydWUodDEuQ3JlYXRlZEF0LkVxdWFsKHRtKSkKCXZhciB0bUkgYW55Cgl0bUkgPSB0bQoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUocmVmbGVjdC5WYWx1ZU9mKHQxKS5FbGVtKCkuRmllbGQoMiksIHRtSSkpCglhc3NlcnQuVHJ1ZSh0MS5DcmVhdGVkQXQuRXF1YWwodG0pKQoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUocmVmbGVjdC5WYWx1ZU9mKHQxKS5FbGVtKCkuRmllbGQoMyksICZ0bSkpCglhc3NlcnQuVHJ1ZSh0MS5VcGRhdGVkQXQuRXF1YWwodG0pLCBmbXQuU3ByaW50ZigiJXYiLCB0MS5VcGRhdGVkQXQpKQoJYXNzZXJ0LkVycm9yKFNldFZhbHVlKHJlZmxlY3QuVmFsdWVPZih0MSkuRWxlbSgpLkZpZWxkKDMpLCB0bSkpCgl2YXIgc3QgPSBzdWJ0aW1le30KCWFzc2VydC5Ob0Vycm9yKFNldFZhbHVlKCZzdCwgdG0pKQoJYXNzZXJ0LlRydWUoc3QuVGltZS5FcXVhbCh0bSkpCgl0bSA9IHRpbWUuRGF0ZSgyMDA5LCB0aW1lLk5vdmVtYmVyLCAxMCwgMjMsIDAsIDAsIDAsIHRpbWUuVVRDKQoJYXNzZXJ0Lk5vRXJyb3IoU2V0VmFsdWUocmVmbGVjdC5WYWx1ZU9mKHQxKS5FbGVtKCkuRmllbGQoNSksIHRtKSkKCWFzc2VydC5FcXVhbCh0bS5Vbml4TmFubygpLCB0MS5DcmVhdGVkQXROYW5vKQp9Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCg==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestSlices",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestSlices(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5MZW4odCwgU2xpY2UobmlsKSwgMCkKCXJlcXVpcmUuTGVuKHQsIFNsaWNlKDEpLCAxKQoJcmVxdWlyZS5MZW4odCwgU2xpY2UoW11pbnR7MSwgMiwgM30pLCAzKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestVariant",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestVariant(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYHRlc3RgLCBWYXJpYW50e2B0ZXN0YH0uU3RyaW5nKCkpCglhc3NlcnQuVHJ1ZShWYXJpYW50e2BUcnVlYH0uQm9vbCgpKQoJYXNzZXJ0LlRydWUoVmFyaWFudHtgdHJ1ZWB9LkJvb2woKSkKCWFzc2VydC5UcnVlKFZhcmlhbnR7YFRSVUVgfS5Cb29sKCkpCglhc3NlcnQuVHJ1ZShWYXJpYW50e2AxYH0uQm9vbCgpKQoJYXNzZXJ0LlRydWUoVmFyaWFudHtgZGVubmlzYH0uQm9vbCgpKQoJYXNzZXJ0LlRydWUoVmFyaWFudHtgMC4wMDAwMDAwMDFgfS5Cb29sKCkpCglhc3NlcnQuRmFsc2UoVmFyaWFudHtgRmFsc2VgfS5Cb29sKCkpCglhc3NlcnQuRmFsc2UoVmFyaWFudHtgZmFsc2VgfS5Cb29sKCkpCglhc3NlcnQuRmFsc2UoVmFyaWFudHtgMGB9LkJvb2woKSkKCWFzc2VydC5GYWxzZShWYXJpYW50e2AwLjBgfS5Cb29sKCkpCglhc3NlcnQuRXF1YWwoaW50NjQoMSksIFZhcmlhbnR7MX0uSW50KCkpCglhc3NlcnQuRXF1YWwoaW50NjQoMSksIFZhcmlhbnR7MS45fS5JbnQoKSkKCWFzc2VydC5FcXVhbChmbG9hdDY0KDEuOSksIFZhcmlhbnR7MS45fS5GbG9hdCgpKQoJYXNzZXJ0LlRydWUodGltZS5Vbml4KDE1MDAwMDAwMDAsIDApLkVxdWFsKFZhcmlhbnR7MTUwMDAwMDAwMH0uVGltZSgpKSkKCWFzc2VydC5UcnVlKHRpbWUuVW5peCgxNTAwMDAwMDAwLCAwKS5FcXVhbChWYXJpYW50e2AxNTAwMDAwMDAwYH0uVGltZSgpKSkKCWFzc2VydC5UcnVlKHRpbWUuVW5peCgxNTAwMDAwMDAwLCAwKS5FcXVhbChWYXJpYW50e2AyMDE3LTA3LTE0VDAyOjQwOjAwWmB9LlRpbWUoKSkpCglhc3NlcnQuVHJ1ZSh0aW1lLlVuaXgoMTUwMDAwMDAwMCwgMCkuRXF1YWwoVmFyaWFudHtgMjAxNy0wNy0xNFQwMjo0MDowMC0wMDowMGB9LlRpbWUoKSkpCglhc3NlcnQuVHJ1ZSh0aW1lLlVuaXgoMTUwMDAwMDAwMCwgMCkuRXF1YWwoVmFyaWFudHtgMjAxNy0wNy0xM1QyMjo0MDowMC0wNDowMGB9LlRpbWUoKSkpCglhc3NlcnQuRXF1YWwoW11ieXRlezB4NzQsIDB4NjUsIDB4NzMsIDB4NzR9LCBWYXJpYW50e2B0ZXN0YH0uQnl0ZXMoKSkKCWFzc2VydC5FcXVhbChtYXBbVmFyaWFudF1WYXJpYW50e1YoYHRlc3RgKTogVigxKSwgVihgb3RoZXJgKTogVigyLjQpfSwgVihtYXBbc3RyaW5nXWFueXtgdGVzdGA6IDEsIGBvdGhlcmA6IDIuNH0pLk1hcCgpKQoJdHlwZSB2U3RydWN0T25lIHN0cnVjdCB7CgkJTmFtZSAgICBzdHJpbmcKCQlBZ2UgICAgIGludAoJCVBpICAgICAgZmxvYXQ2NAoJCWVuYWJsZWQgYm9vbAoJfQoJYXNzZXJ0LkVxdWFsKG1hcFtWYXJpYW50XVZhcmlhbnR7VihgTmFtZWApOiBWKGB0ZXN0YCksIFYoYEFnZWApOiBWKDQyKSwgVihgUGlgKTogVigzLjE0MTUpfSwgVih2U3RydWN0T25le05hbWU6IGB0ZXN0YCwgQWdlOiA0MiwgUGk6IDMuMTQxNSwgZW5hYmxlZDogdHJ1ZX0pLk1hcCgpKQoJYXNzZXJ0LkVxdWFsKG1hcFtWYXJpYW50XVZhcmlhbnR7VihgTmFtZWApOiBWKGB0ZXN0YCksIFYoYEFnZWApOiBWKDQyKSwgVihgUGlgKTogVigzLjE0MTUpfSwgVigmdlN0cnVjdE9uZXtOYW1lOiBgdGVzdGAsIEFnZTogNDIsIFBpOiAzLjE0MTUsIGVuYWJsZWQ6IHRydWV9KS5NYXAoKSkKCXR5cGUgdlN0cnVjdFRhZ2dlZCBzdHJ1Y3QgewoJCU5hbWUgICAgc3RyaW5nCgkJQWdlICAgICBpbnQgICAgIGB0ZXN0YXJvbzoiYWdlImAKCQlQaSAgICAgIGZsb2F0NjQgYHRlc3Rhcm9vOiJwaSxvbWl0ZW1wdHkiYAoJCWVuYWJsZWQgYm9vbAoJfQoJYXNzZXJ0LkVxdWFsKG1hcFtWYXJpYW50XVZhcmlhbnR7VihgTmFtZWApOiBWKGB0ZXN0YCksIFYoYGFnZWApOiBWKDQyKX0sIFYodlN0cnVjdFRhZ2dlZHtOYW1lOiBgdGVzdGAsIEFnZTogNDIsIGVuYWJsZWQ6IHRydWV9KS5NYXAoYHRlc3Rhcm9vYCkpCglhc3NlcnQuRXF1YWwobWFwW1ZhcmlhbnRdVmFyaWFudHtWKGBOYW1lYCk6IFYoYHRlc3RgKSwgVihgYWdlYCk6IFYoNDIpfSwgVigmdlN0cnVjdFRhZ2dlZHtOYW1lOiBgdGVzdGAsIEFnZTogNDIsIGVuYWJsZWQ6IHRydWV9KS5NYXAoYHRlc3Rhcm9vYCkpCglhc3NlcnQuRXF1YWwobWFwW1ZhcmlhbnRdVmFyaWFudHtWKGBOYW1lYCk6IFYoYHRlc3RgKSwgVihgQWdlYCk6IFYoNDIpLCBWKGBQaWApOiBWKGZsb2F0NjQoMCkpfSwgVih2U3RydWN0VGFnZ2Vke05hbWU6IGB0ZXN0YCwgQWdlOiA0MiwgZW5hYmxlZDogdHJ1ZX0pLk1hcCgpKQoJYXNzZXJ0LkVxdWFsKG1hcFtWYXJpYW50XVZhcmlhbnR7VihgTmFtZWApOiBWKGB0ZXN0YCksIFYoYEFnZWApOiBWKDQyKSwgVihgUGlgKTogVihmbG9hdDY0KDApKX0sIFYoJnZTdHJ1Y3RUYWdnZWR7TmFtZTogYHRlc3RgLCBBZ2U6IDQyLCBlbmFibGVkOiB0cnVlfSkuTWFwKCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestVariantAppend",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestVariantAppend(t *testing.T)",
                        "Source": "ewoJdmFyIHYgPSBWKGBoZWxsb2ApCglyZXF1aXJlLk5vRXJyb3IodCwgdi5BcHBlbmQoYHRoZXJlYCkpCglyZXF1aXJlLkVxdWFsKHQsIFtdc3RyaW5ne2BoZWxsb2AsIGB0aGVyZWB9LCB2LlN0cmluZ3MoKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestVariantIsFunction",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestVariantIsFunction(t *testing.T)",
                        "Source": "ewoJcmVxdWlyZS5GYWxzZSh0LCBWKG5pbCkuSXNGdW5jdGlvbigpKQoJcmVxdWlyZS5GYWxzZSh0LCBWKGZhbHNlKS5Jc0Z1bmN0aW9uKCkpCglyZXF1aXJlLkZhbHNlKHQsIFYobmlsKS5Jc0Z1bmN0aW9uKGBmdW5jKClgKSkKCXJlcXVpcmUuRmFsc2UodCwgVihmYWxzZSkuSXNGdW5jdGlvbihgZnVuYygpYCkpCglyZXF1aXJlLlRydWUodCwgVihmdW5jKCkgewoJfSkuSXNGdW5jdGlvbigpKQoJcmVxdWlyZS5UcnVlKHQsIFYoZnVuYygpIHsKCX0pLklzRnVuY3Rpb24oYGZ1bmMoKWApKQoJcmVxdWlyZS5UcnVlKHQsIFYoZnVuYyhfIHN0cmluZykgewoJfSkuSXNGdW5jdGlvbihgZnVuYyhzdHJpbmcpYCkpCglyZXF1aXJlLlRydWUodCwgVihmdW5jKF8gc3RyaW5nKSBlcnJvciB7CgkJcmV0dXJuIG5pbAoJfSkuSXNGdW5jdGlvbihgZnVuYyhzdHJpbmcpIGVycm9yYCkpCglyZXF1aXJlLlRydWUodCwgVihmdW5jKF8gc3RyaW5nKSBlcnJvciB7CgkJcmV0dXJuIG5pbAoJfSkuSXNGdW5jdGlvbihgZnVuYyhhbnkpIGFueWApKQoJcmVxdWlyZS5UcnVlKHQsIFYoZnVuYyhfIHN0cmluZykgKGludCwgZXJyb3IpIHsKCQlyZXR1cm4gMCwgbmlsCgl9KS5Jc0Z1bmN0aW9uKGBmdW5jKHN0cmluZykgKGludCwgZXJyb3IpYCkpCn0=",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "Thing": {
                        "Name": "Thing",
                        "MetaType": "struct",
                        "Fields": [
                            {
                                "Name": "Name",
                                "Type": "string"
                            },
                            {
                                "Name": "Value",
                                "Type": "any"
                            }
                        ],
                        "Source": "dHlwZSBUaGluZyBzdHJ1Y3QgewoJTmFtZSAgc3RyaW5nCglWYWx1ZSBhbnkKfQ=="
                    },
                    "TypeConvertFunc": {
                        "Name": "TypeConvertFunc",
                        "Source": "dHlwZSBUeXBlQ29udmVydEZ1bmMgPSB1dGlscy5UeXBlQ29udmVydEZ1bmM="
                    },
                    "TypeDeclaration": {
                        "Name": "TypeDeclaration",
                        "MetaType": "string",
                        "Methods": [
                            {
                                "Name": "IsSameTypeAs",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsSameTypeAs(value any) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "String",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            }
                        ],
                        "Source": "dHlwZSBUeXBlRGVjbGFyYXRpb24gc3RyaW5n"
                    },
                    "Variant": {
                        "Name": "Variant",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "Append",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "values",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Append(values ...any) error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Auto",
                                "Comment": "Return the value automatically converted to the appropriate type.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "Auto() any",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Bool",
                                "Comment": "Return true if the value can be interpreted as a boolean true value, or false otherwise.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "Bool() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Bytes",
                                "Comment": "Return the value at key as a byte slice.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    }
                                ],
                                "Signature": "Bytes() []byte",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Duration",
                                "Comment": "Return the value as a time.Duration if it can be interpreted as such, or zero otherwise.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "time.Duration"
                                    }
                                ],
                                "Signature": "Duration() time.Duration",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Err",
                                "Comment": "Return the value converted to an error, or nil if it is not an error.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Err() error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Float",
                                "Comment": "Return the value as a float if it can be interpreted as such, or 0 otherwise.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "float64"
                                    }
                                ],
                                "Signature": "Float() float64",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Int",
                                "Comment": "Return the value as an integer if it can be interpreted as such, or 0 otherwise. Float values\nwill be truncated to integers.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "int64"
                                    }
                                ],
                                "Signature": "Int() int64",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Interface",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "Interface() any",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsArray",
                                "Comment": "Return whether the value is an array/slice type.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsArray() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsDuration",
                                "Comment": "Return whether the value can be interpreted as a duration.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsDuration() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsFunction",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "signature",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsFunction(signature ...string) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsKind",
                                "Comment": "Return whether the value is of the given reflect.Kind",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "kind",
                                        "Type": "reflect.Kind"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsKind(kind reflect.Kind) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsLessThan",
                                "Comment": "IsLessThan reports whether the given value should sort before the current variant value, taking special\ncare to compare like types appropriately, such as detecting numbers and performing a numeric comparison,\nor detecting dates, times, and durations and comparing them temporally.",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "j",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsLessThan(j any) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsMap",
                                "Comment": "Return whether the value is a map type.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsMap() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsNil",
                                "Comment": "Returns whether the underlying value is nil.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsNil() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsNumeric",
                                "Comment": "Return whether the value can be interpreted as a real number.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsNumeric() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsScalar",
                                "Comment": "Return whether the value is a scalar type.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsScalar() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsTime",
                                "Comment": "Return whether the value can be interpreted as a time.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsTime() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "IsZero",
                                "Comment": "Returns whether the underlying value is a zero value.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsZero() bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Map",
                                "Comment": "Return the value as a map[Variant]Variant if it can be interpreted as such, or an empty map otherwise.\nIf the variant contains a struct, and a tagName is specified, the key names of the output map will be taken\nfrom the struct field's tag value, consistent with the rules used in encoding/json.",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "tagName",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "map[Variant]Variant"
                                    }
                                ],
                                "Signature": "Map(tagName ...string) map[Variant]Variant",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MapNative",
                                "Comment": "Return the value as a map[string]any if it can be interpreted as such, or an empty map otherwise.",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "tagName",
                                        "Type": "...string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "map[string]any"
                                    }
                                ],
                                "Signature": "MapNative(tagName ...string) map[string]any",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "MarshalJSON",
                                "Comment": "Satisfy the json.Marshaler interface",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "MarshalJSON() ([]byte, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NInt",
                                "Comment": "Return the value as a native integer if it can be interpreted as such, or 0 otherwise.\nFloat values will be truncated to integers.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "int"
                                    }
                                ],
                                "Signature": "NInt() int",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Or",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "or",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "Or(or ...any) any",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "OrAuto",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "or",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "OrAuto(or ...any) any",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "OrBool",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "or",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "OrBool(or ...any) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "OrBytes",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "or",
                                        "Type": "...[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "[]byte"
                                    }
                                ],
                                "Signature": "OrBytes(or ...[]byte) []byte",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "OrDuration",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "or",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "time.Duration"
                                    }
                                ],
                                "Signature": "OrDuration(or ...any) time.Duration",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "OrFloat",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "or",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "float64"
                                    }
                                ],
                                "Signature": "OrFloat(or ...any) float64",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "OrInt",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "or",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int64"
                                    }
                                ],
                                "Signature": "OrInt(or ...any) int64",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "OrNInt",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "or",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int"
                                    }
                                ],
                                "Signature": "OrNInt(or ...any) int",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "OrString",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "or",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "OrString(or ...any) string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "OrTime",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "or",
                                        "Type": "...any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "time.Time"
                                    }
                                ],
                                "Signature": "OrTime(or ...any) time.Time",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Slice",
                                "Comment": "Return the value as a slice of Variants. Scalar types will return a slice containing\na single Variant element representing the value.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]Variant"
                                    }
                                ],
                                "Signature": "Slice() []Variant",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Split",
                                "Comment": "Converts the value to a string, then splits on the given delimiter.",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "on",
                                        "Type": "string"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "[]string"
                                    }
                                ],
                                "Signature": "Split(on string) []string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "String",
                                "Comment": "Return the value as a string, or an empty string if the value could not be converted.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Strings",
                                "Comment": "Same as Slice(), but returns a []string.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "[]string"
                                    }
                                ],
                                "Signature": "Strings() []string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Time",
                                "Comment": "Return the value as a time.Time if it can be interpreted as such, or zero time otherwise.",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "time.Time"
                                    }
                                ],
                                "Signature": "Time() time.Time",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "V",
                                "Comment": "Shortcut for creating a Variant.",
                                "Arguments": [
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "Variant"
                                    }
                                ],
                                "Signature": "V(value any) Variant",
                                "Source": "ewoJaWYgdiwgb2sgOj0gdmFsdWUuKFZhcmlhbnQpOyBvayB7CgkJcmV0dXJuIHYKCX0gZWxzZSB7CgkJcmV0dXJuIFZhcmlhbnR7VmFsdWU6IHZhbHVlfQoJfQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "VV",
                                "Comment": "Returns a pointer to a variant.",
                                "Arguments": [
                                    {
                                        "Name": "value",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*Variant"
                                    }
                                ],
                                "Signature": "VV(value any) *Variant",
                                "Source": "ewoJdmFyIHYgPSBWKHZhbHVlKQoJcmV0dXJuICZ2Cn0=",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Nil",
                                "Comment": "Return a new Variant with a nil value.",
                                "Returns": [
                                    {
                                        "Type": "Variant"
                                    }
                                ],
                                "Signature": "Nil() Variant",
                                "Source": "ewoJcmV0dXJuIFYobmlsKQp9",
                                "IsPackageLevel": true
                            }
                        ],
                        "Fields": [
                            {
                                "Name": "Value",
                                "Type": "any"
                            }
                        ],
                        "Comment": "Represents an interface type with helper functions for making it easy to do\ntype conversions.",
                        "Source": "dHlwZSBWYXJpYW50IHN0cnVjdHsgVmFsdWUgYW55IH0gLy8gUmVwcmVzZW50cyBhbiBpbnRlcmZhY2UgdHlwZSB3aXRoIGhlbHBlciBmdW5jdGlvbnMgZm9yIG1ha2luZyBpdCBlYXN5IHRvIGRvCi8vIHR5cGUgY29udmVyc2lvbnMuCg=="
                    }
                }
            },
            {
                "Name": "utils",
                "CanonicalImportPath": "github.com/ghetzel/go-stockutil/utils",
                "ImportPath": "utils",
                "ParentPackage": "stockutil",
                "URL": "https://github.com/ghetzel/go-stockutil",
                "Synopsis": "",
                "MainFunction": false,
                "CommentWordCount": 355,
                "LineCount": 1527,
                "SourceLineCount": 1239,
                "FunctionCount": 46,
                "TypeCount": 4,
                "ConstantCount": 12,
                "VariableCount": 10,
                "Statistics": {
                    "Mean": 0.2632,
                    "StdDev": 0.4403,
                    "GeometricMean": 0,
                    "HarmonicMean": 0,
                    "Median": 0,
                    "Minimum": 0,
                    "Maximum": 1
                },
                "Files": [
                    {
                        "Name": "convert.go",
                        "Imports": [
                            {
                                "PackageName": "errors",
                                "Alias": "errors"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "regexp",
                                "Alias": "regexp"
                            },
                            {
                                "PackageName": "strconv",
                                "Alias": "strconv"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "unicode",
                                "Alias": "unicode"
                            },
                            {
                                "PackageName": "unicode/utf8",
                                "Alias": "utf8"
                            },
                            {
                                "PackageName": "github.com/ghetzel/go-stockutil/rxutil",
                                "Alias": "rxutil"
                            }
                        ],
                        "Size": 13746,
                        "LineCount": 608,
                        "SourceLineCount": 505,
                        "FunctionCount": 18,
                        "TypeCount": 2,
                        "ConstantCount": 9,
                        "VariableCount": 5
                    },
                    {
                        "Name": "convert_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 4057,
                        "LineCount": 131,
                        "SourceLineCount": 105,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "detect.go",
                        "Imports": [
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "strconv",
                                "Alias": "strconv"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            }
                        ],
                        "Size": 1992,
                        "LineCount": 121,
                        "SourceLineCount": 95,
                        "FunctionCount": 8,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "detect_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 3459,
                        "LineCount": 121,
                        "SourceLineCount": 107,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "io.go",
                        "Imports": [
                            {
                                "PackageName": "io",
                                "Alias": "io"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            }
                        ],
                        "Size": 2421,
                        "LineCount": 104,
                        "SourceLineCount": 72,
                        "FunctionCount": 12,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "reflect.go",
                        "Imports": [
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            }
                        ],
                        "Size": 1561,
                        "LineCount": 93,
                        "SourceLineCount": 73,
                        "FunctionCount": 3,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 2
                    },
                    {
                        "Name": "reflect_test.go",
                        "Imports": [
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 255,
                        "LineCount": 16,
                        "SourceLineCount": 11,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 0
                    },
                    {
                        "Name": "slice.go",
                        "Imports": [
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            }
                        ],
                        "Size": 2935,
                        "LineCount": 152,
                        "SourceLineCount": 126,
                        "FunctionCount": 2,
                        "TypeCount": 1,
                        "ConstantCount": 0,
                        "VariableCount": 2
                    },
                    {
                        "Name": "utils.go",
                        "Imports": [
                            {
                                "PackageName": "encoding/json",
                                "Alias": "json"
                            },
                            {
                                "PackageName": "fmt",
                                "Alias": "fmt"
                            },
                            {
                                "PackageName": "reflect",
                                "Alias": "reflect"
                            },
                            {
                                "PackageName": "strings",
                                "Alias": "strings"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/fatih/structs",
                                "Alias": "structs"
                            },
                            {
                                "PackageName": "github.com/hashicorp/go-multierror",
                                "Alias": "multierror"
                            },
                            {
                                "PackageName": "k8s.io/client-go/util/jsonpath",
                                "Alias": "jsonpath"
                            }
                        ],
                        "Size": 2854,
                        "LineCount": 127,
                        "SourceLineCount": 101,
                        "FunctionCount": 3,
                        "TypeCount": 0,
                        "ConstantCount": 0,
                        "VariableCount": 1
                    },
                    {
                        "Name": "utils_test.go",
                        "Imports": [
                            {
                                "PackageName": "testing",
                                "Alias": "testing"
                            },
                            {
                                "PackageName": "time",
                                "Alias": "time"
                            },
                            {
                                "PackageName": "github.com/ghetzel/testify/require",
                                "Alias": "require"
                            }
                        ],
                        "Size": 907,
                        "LineCount": 54,
                        "SourceLineCount": 44,
                        "FunctionCount": 0,
                        "TypeCount": 0,
                        "ConstantCount": 3,
                        "VariableCount": 0
                    }
                ],
                "Constants": [
                    {
                        "Name": "Boolean",
                        "Immutable": true
                    },
                    {
                        "Name": "Bytes",
                        "Immutable": true
                    },
                    {
                        "Name": "Float",
                        "Immutable": true
                    },
                    {
                        "Name": "Integer",
                        "Immutable": true
                    },
                    {
                        "Name": "Invalid",
                        "Type": "ConvertType",
                        "Immutable": true,
                        "Expression": "iota"
                    },
                    {
                        "Name": "Nil",
                        "Immutable": true
                    },
                    {
                        "Name": "String",
                        "Immutable": true
                    },
                    {
                        "Name": "Time",
                        "Immutable": true
                    },
                    {
                        "Name": "UserDefined",
                        "Immutable": true
                    },
                    {
                        "Name": "Value1",
                        "Type": "testEnum",
                        "Immutable": true,
                        "Expression": "iota"
                    },
                    {
                        "Name": "Value2",
                        "Immutable": true
                    },
                    {
                        "Name": "Value3",
                        "Immutable": true
                    }
                ],
                "Variables": [
                    {
                        "Name": "BooleanFalseValues",
                        "Expression": "[]string{`false`, `no`, `off`}"
                    },
                    {
                        "Name": "BooleanTrueValues",
                        "Expression": "[]string{`true`, `yes`, `on`}"
                    },
                    {
                        "Name": "CompoundTypes"
                    },
                    {
                        "Name": "EachChanMaxItems",
                        "Expression": "1048576"
                    },
                    {
                        "Name": "NilStrings"
                    },
                    {
                        "Name": "PassthroughType",
                        "Expression": "errors.New(`passthrough`)"
                    },
                    {
                        "Name": "ReferenceTime",
                        "Type": "time.Time"
                    },
                    {
                        "Name": "SliceTypes",
                        "Expression": "[]reflect.Kind{reflect.Slice, reflect.Array}"
                    },
                    {
                        "Name": "Stop",
                        "Expression": "fmt.Errorf(\"stop iterating\")"
                    },
                    {
                        "Name": "TimeFormats"
                    }
                ],
                "Functions": [
                    {
                        "Name": "AppendError",
                        "Comment": "Appends on error to another, allowing for operations that return multiple errors\nto remain compatible within a single-valued context.",
                        "Arguments": [
                            {
                                "Name": "base",
                                "Type": "error"
                            },
                            {
                                "Name": "err",
                                "Type": "error"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "AppendError(base error, err error) error",
                        "Source": "ewoJaWYgZXJyID09IG5pbCB7CgkJcmV0dXJuIGJhc2UKCX0gZWxzZSB7CgkJcmV0dXJuIG11bHRpZXJyb3IuQXBwZW5kKGJhc2UsIGVycikKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Autotype",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "Autotype(in any) any",
                        "Source": "ewoJXywgdmFsdWUgOj0gRGV0ZWN0KGluKQoJcmV0dXJuIHZhbHVlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertCustomType",
                        "Comment": "Returns the given value, converted according to any handlers set via RegisterTypeHandler.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertCustomType(in any) (any, error)",
                        "Source": "ewoJdmFyIGNvbnZlcnQgVHlwZUNvbnZlcnRGdW5jCgl2YXIgaW5WIHJlZmxlY3QuVmFsdWUKCWlmIHRWLCBvayA6PSBpbi4ocmVmbGVjdC5WYWx1ZSk7IG9rIHsKCQlpblYgPSB0VgoJfSBlbHNlIHsKCQlpblYgPSByZWZsZWN0LlZhbHVlT2YoaW4pCgl9CglpZiBpblYuSXNWYWxpZCgpIHsKCQlpZiBoYW5kbGVyLCBvayA6PSB0eXBlSGFuZGxlcnNbaW5WLlR5cGUoKS5TdHJpbmcoKV07IG9rIHsKCQkJY29udmVydCA9IGhhbmRsZXIKCQl9IGVsc2UgaWYgaGFuZGxlciwgb2sgOj0gdHlwZUhhbmRsZXJzW2luVi5LaW5kKCkuU3RyaW5nKCldOyBvayB7CgkJCWNvbnZlcnQgPSBoYW5kbGVyCgkJfSBlbHNlIGlmIGhhbmRsZXIsIG9rIDo9IHR5cGVIYW5kbGVyc1tgKmBdOyBvayB7CgkJCWNvbnZlcnQgPSBoYW5kbGVyCgkJfQoJCWlmIGNvbnZlcnQgIT0gbmlsIHsKCQkJaWYgb3V0LCBlcnIgOj0gY29udmVydChpbik7IGVyciA9PSBuaWwgewoJCQkJcmV0dXJuIG91dCwgbmlsCgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gbmlsLCBlcnIKCQkJfQoJCX0KCX0KCXJldHVybiBpbiwgUGFzc3Rocm91Z2hUeXBlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertHexToInteger",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int64"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertHexToInteger(in any) (int64, error)",
                        "Source": "ewoJaWYgSXNIZXhhZGVjaW1hbChpbikgewoJCWlmIGluUywgZXJyIDo9IFRvU3RyaW5nKGluKTsgZXJyID09IG5pbCB7CgkJCWluUyA9IHN0cmluZ3MuVG9Mb3dlcihpblMpCgkJCWluUyA9IHN0cmluZ3MuVHJpbVByZWZpeChpblMsIGAweGApCgkJCXJldHVybiBzdHJjb252LlBhcnNlSW50KGluUywgMTYsIDY0KQoJCX0gZWxzZSB7CgkJCXJldHVybiAwLCBlcnIKCQl9Cgl9IGVsc2UgewoJCXJldHVybiAwLCBmbXQuRXJyb3JmKCJpbnZhbGlkIGhleGFkZWNpbWFsIHZhbHVlICcldiciLCBpbikKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertTo",
                        "Arguments": [
                            {
                                "Name": "toType",
                                "Type": "ConvertType"
                            },
                            {
                                "Name": "inI",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertTo(toType ConvertType, inI any) (any, error)",
                        "Source": "ewoJdmFyIGluUyBzdHJpbmcKCXZhciBpblNlcnIgZXJyb3IKCWlmIGluViwgb2sgOj0gaW5JLihyZWZsZWN0LlZhbHVlKTsgb2sgewoJCWlmIGluVi5DYW5JbnRlcmZhY2UoKSB7CgkJCWluSSA9IGluVi5JbnRlcmZhY2UoKQoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoInJlZmxlY3QuVmFsdWUgZ2l2ZW4sIGJ1dCBjYW5ub3QgcmV0cmlldmUgaW50ZXJmYWNlIHZhbHVlIikKCQl9Cgl9CglpblMsIGluU2VyciA9IFRvU3RyaW5nKGluSSkKCXN3aXRjaCB0b1R5cGUgewoJY2FzZSBGbG9hdDoKCQlpZiBpblMgPT0gYGAgewoJCQlyZXR1cm4gZmxvYXQ2NCgwKSwgbmlsCgkJfSBlbHNlIGlmIHYsIG9rIDo9IGluSS4oZmxvYXQzMik7IG9rIHsKCQkJcmV0dXJuIGZsb2F0NjQodiksIG5pbAoJCX0gZWxzZSBpZiB2LCBvayA6PSBpbkkuKGZsb2F0NjQpOyBvayB7CgkJCXJldHVybiBmbG9hdDY0KHYpLCBuaWwKCQl9IGVsc2UgaWYgdiwgb2sgOj0gaW5JLihpbnQpOyBvayB7CgkJCXJldHVybiBmbG9hdDY0KHYpLCBuaWwKCQl9IGVsc2UgaWYgdiwgb2sgOj0gaW5JLihpbnQ4KTsgb2sgewoJCQlyZXR1cm4gZmxvYXQ2NCh2KSwgbmlsCgkJfSBlbHNlIGlmIHYsIG9rIDo9IGluSS4oaW50MTYpOyBvayB7CgkJCXJldHVybiBmbG9hdDY0KHYpLCBuaWwKCQl9IGVsc2UgaWYgdiwgb2sgOj0gaW5JLihpbnQzMik7IG9rIHsKCQkJcmV0dXJuIGZsb2F0NjQodiksIG5pbAoJCX0gZWxzZSBpZiB2LCBvayA6PSBpbkkuKGludDY0KTsgb2sgewoJCQlyZXR1cm4gZmxvYXQ2NCh2KSwgbmlsCgkJfSBlbHNlIGlmIHYsIG9rIDo9IGluSS4odWludCk7IG9rIHsKCQkJcmV0dXJuIGZsb2F0NjQodiksIG5pbAoJCX0gZWxzZSBpZiB2LCBvayA6PSBpbkkuKHVpbnQ4KTsgb2sgewoJCQlyZXR1cm4gZmxvYXQ2NCh2KSwgbmlsCgkJfSBlbHNlIGlmIHYsIG9rIDo9IGluSS4odWludDE2KTsgb2sgewoJCQlyZXR1cm4gZmxvYXQ2NCh2KSwgbmlsCgkJfSBlbHNlIGlmIHYsIG9rIDo9IGluSS4odWludDMyKTsgb2sgewoJCQlyZXR1cm4gZmxvYXQ2NCh2KSwgbmlsCgkJfSBlbHNlIGlmIHYsIG9rIDo9IGluSS4odWludDY0KTsgb2sgewoJCQlyZXR1cm4gZmxvYXQ2NCh2KSwgbmlsCgkJfSBlbHNlIGlmIElzSGV4YWRlY2ltYWwoaW5JKSB7CgkJCXYsIGVyciA6PSBDb252ZXJ0SGV4VG9JbnRlZ2VyKGluSSkKCQkJcmV0dXJuIGZsb2F0NjQodiksIGVycgoJCX0KCQlyZXR1cm4gc3RyY29udi5QYXJzZUZsb2F0KGluUywgNjQpCgljYXNlIEludGVnZXI6CgkJaWYgaW5UaW1lLCBvayA6PSBpbkkuKHRpbWUuVGltZSk7IG9rIHsKCQkJcmV0dXJuIGludDY0KGluVGltZS5Vbml4TmFubygpKSwgbmlsCgkJfSBlbHNlIGlmIGluUyA9PSBgYCB7CgkJCXJldHVybiBpbnQ2NCgwKSwgbmlsCgkJfSBlbHNlIGlmIGxheW91dCA6PSBEZXRlY3RUaW1lRm9ybWF0KGluUyk7IGxheW91dCAhPSBgYCAmJiBsYXlvdXQgIT0gYGVwb2NoYCB7CgkJCWlmIHRtLCBlcnIgOj0gdGltZS5QYXJzZShsYXlvdXQsIGluUyk7IGVyciA9PSBuaWwgewoJCQkJcmV0dXJuIHRtLlVuaXhOYW5vKCksIG5pbAoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCX0KCQl9IGVsc2UgaWYgSXNIZXhhZGVjaW1hbChpbkkpIHsKCQkJcmV0dXJuIENvbnZlcnRIZXhUb0ludGVnZXIoaW5JKQoJCX0KCQlpZiB2LCBvayA6PSBpbkkuKGludCk7IG9rIHsKCQkJcmV0dXJuIGludDY0KHYpLCBuaWwKCQl9IGVsc2UgaWYgdiwgb2sgOj0gaW5JLihpbnQ4KTsgb2sgewoJCQlyZXR1cm4gaW50NjQodiksIG5pbAoJCX0gZWxzZSBpZiB2LCBvayA6PSBpbkkuKGludDE2KTsgb2sgewoJCQlyZXR1cm4gaW50NjQodiksIG5pbAoJCX0gZWxzZSBpZiB2LCBvayA6PSBpbkkuKGludDMyKTsgb2sgewoJCQlyZXR1cm4gaW50NjQodiksIG5pbAoJCX0gZWxzZSBpZiB2LCBvayA6PSBpbkkuKGludDY0KTsgb2sgewoJCQlyZXR1cm4gaW50NjQodiksIG5pbAoJCX0gZWxzZSBpZiB2LCBvayA6PSBpbkkuKHVpbnQpOyBvayB7CgkJCXJldHVybiBpbnQ2NCh2KSwgbmlsCgkJfSBlbHNlIGlmIHYsIG9rIDo9IGluSS4odWludDgpOyBvayB7CgkJCXJldHVybiBpbnQ2NCh2KSwgbmlsCgkJfSBlbHNlIGlmIHYsIG9rIDo9IGluSS4odWludDE2KTsgb2sgewoJCQlyZXR1cm4gaW50NjQodiksIG5pbAoJCX0gZWxzZSBpZiB2LCBvayA6PSBpbkkuKHVpbnQzMik7IG9rIHsKCQkJcmV0dXJuIGludDY0KHYpLCBuaWwKCQl9IGVsc2UgaWYgdiwgb2sgOj0gaW5JLih1aW50NjQpOyBvayB7CgkJCXJldHVybiBpbnQ2NCh2KSwgbmlsCgkJfQoJCXJldHVybiBzdHJjb252LlBhcnNlSW50KGluUywgMTAsIDY0KQoJY2FzZSBCb29sZWFuOgoJCWlmIGluSSA9PSBuaWwgewoJCQlyZXR1cm4gZmFsc2UsIG5pbAoJCX0KCQlpZiBJc0Jvb2xlYW5UcnVlKGluUykgewoJCQlyZXR1cm4gdHJ1ZSwgbmlsCgkJfSBlbHNlIGlmIElzQm9vbGVhbkZhbHNlKGluUykgewoJCQlyZXR1cm4gZmFsc2UsIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkNhbm5vdCBjb252ZXJ0ICclcycgaW50byBhIGJvb2xlYW4gdmFsdWUiLCBpblMpCgkJfQoJY2FzZSBUaW1lOgoJCWlmIGluVGltZSwgb2sgOj0gaW5JLih0aW1lLlRpbWUpOyBvayB7CgkJCXJldHVybiBpblRpbWUsIG5pbAoJCX0KCQlpblMgPSBzdHJpbmdzLlRyaW0oc3RyaW5ncy5UcmltU3BhY2UoaW5TKSwgYCInYCkKCQlpZiBEZXRlY3RUaW1lRm9ybWF0KGluUykgPT0gYGVwb2NoYCB7CgkJCWlmIHYsIGVyciA6PSBzdHJjb252LlBhcnNlSW50KGluUywgMTAsIDY0KTsgZXJyID09IG5pbCB7CgkJCQlyZXR1cm4gdGltZS5Vbml4KHYsIDApLCBuaWwKCQkJfQoJCX0KCQlmb3IgXywgZm9ybWF0IDo9IHJhbmdlIFRpbWVGb3JtYXRzIHsKCQkJaWYgdG0sIGVyciA6PSB0aW1lLlBhcnNlKGZvcm1hdCwgc3RyaW5ncy5UcmltU3BhY2UoaW5TKSk7IGVyciA9PSBuaWwgewoJCQkJcmV0dXJuIHRtLCBuaWwKCQkJfQoJCX0KCQlzd2l0Y2ggaW5TIHsKCQljYXNlIGBub3dgOgoJCQlyZXR1cm4gdGltZS5Ob3coKSwgbmlsCgkJZGVmYXVsdDoKCQkJdmFyIHRtUyA9IHN0cmluZ3MuTWFwKGZ1bmMociBydW5lKSBydW5lIHsKCQkJCXN3aXRjaCByIHsKCQkJCWNhc2UgJy0nLCAnOicsICcgJywgJ1QnLCAnWic6CgkJCQkJcmV0dXJuICcwJwoJCQkJfQoJCQkJcmV0dXJuIHIKCQkJfSwgaW5TKQoJCQlpZiB2LCBlcnIgOj0gc3RyY29udi5QYXJzZUludCh0bVMsIDEwLCA2NCk7IGVyciA9PSBuaWwgJiYgdiA9PSAwIHsKCQkJCXJldHVybiB0aW1lLlRpbWV7fSwgbmlsCgkJCX0KCQkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiQ2Fubm90IGNvbnZlcnQgJyVzJyBpbnRvIGEgZGF0ZS90aW1lIHZhbHVlIiwgaW5TKQoJCX0KCWNhc2UgQnl0ZXM6CgkJaWYgaW5JID09IG5pbCB7CgkJCXJldHVybiBbIC8vIGhhbmRsZSB0aW1lIHplcm8gdmFsdWVzCgkJCV1ieXRle30sIG5pbAoJCX0gZWxzZSBpZiBpblIsIG9rIDo9IGluSS4oaW8uUmVhZGVyKTsgb2sgewoJCQlpZiBkYXRhLCBlcnIgOj0gaW8uUmVhZEFsbChpblIpOyBlcnIgPT0gbmlsIHsKCQkJCXJldHVybiBkYXRhLCBuaWwKCQkJfSBlbHNlIHsKCQkJCXJldHVybiBgYCwgZm10LkVycm9yZigiQ2Fubm90IGNvbnZlcnQgaW8uUmVhZGVyIHRvIFtdYnl0ZTogJXYiLCBlcnIpCgkJCX0KCQl9IGVsc2UgaWYgaW5CLCBvayA6PSBpbkkuKFtdYnl0ZSk7IG9rIHsKCQkJcmV0dXJuIGluQiwgbmlsCgkJfSBlbHNlIGlmIGluQiwgb2sgOj0gaW5JLihbXXVpbnQ4KTsgb2sgewoJCQl2YXIgb3V0QiA9IG1ha2UoW11ieXRlLCBsZW4oaW5CKSkKCQkJZm9yIGksIHYgOj0gcmFuZ2UgaW5CIHsKCQkJCW91dEJbaV0gPSBieXRlKHYpCgkJCX0KCQkJcmV0dXJuIG91dEIsIG5pbAoJCX0gZWxzZSBpZiBJc0tpbmQoaW5JLCByZWZsZWN0LlNsaWNlLCByZWZsZWN0LkFycmF5KSB7CgkJCXZhciBvdXRCID0gbWFrZShbXWJ5dGUsIDApCgkJCWlmIGVyciA6PSBTbGljZUVhY2goaW5JLCBmdW5jKGkgaW50LCB2YWx1ZSBhbnkpIGVycm9yIHsKCQkJCWlmIGJiLCBlcnIgOj0gQ29udmVydFRvSW50ZWdlcih2YWx1ZSk7IGVyciA9PSBuaWwgewoJCQkJCW91dEIgPSBhcHBlbmQob3V0QiwgYnl0ZShiYikpCgkJCQkJcmV0dXJuIG5pbAoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm4gZXJyCgkJCQl9CgkJCX0pOyBlcnIgPT0gbmlsIHsKCQkJCXJldHVybiBvdXRCLCBuaWwKCQkJfSBlbHNlIHsKCQkJCXJldHVybiBuaWwsIGVycgoJCQl9CgkJfSBlbHNlIGlmIGluU2VyciA9PSBuaWwgewoJCQlyZXR1cm4gW11ieXRlKGluUyksIGluU2VycgoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGluU2VycgoJCX0KCWNhc2UgU3RyaW5nOgoJCWlmIGluSSA9PSBuaWwgewoJCQlyZXR1cm4gYGAsIG5pbAoJCX0gZWxzZSBpZiBpblIsIG9rIDo9IGluSS4oaW8uUmVhZGVyKTsgb2sgewoJCQlpZiBkYXRhLCBlcnIgOj0gaW8uUmVhZEFsbChpblIpOyBlcnIgPT0gbmlsIHsKCQkJCXJldHVybiBzdHJpbmcoZGF0YSksIG5pbAoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIGBgLCBmbXQuRXJyb3JmKCJDYW5ub3QgY29udmVydCBpby5SZWFkZXIgdG8gc3RyaW5nOiAldiIsIGVycikKCQkJfQoJCX0gZWxzZSBpZiBpbkIsIG9rIDo9IGluSS4oW11ieXRlKTsgb2sgewoJCQlyZXR1cm4gc3RyaW5nKGluQiksIG5pbAoJCX0gZWxzZSBpZiBpblNyLCBvayA6PSBpbkkuKGZtdC5TdHJpbmdlcik7IG9rIHsKCQkJcmV0dXJuIGluU3IuU3RyaW5nKCksIG5pbAoJCX0gZWxzZSBpZiBpblYgOj0gcmVmbGVjdC5WYWx1ZU9mKGluSSk7IGluVi5LaW5kKCkgPT0gcmVmbGVjdC5QdHIgewoJCQlpblMsIGluU2VyciA9IFRvU3RyaW5nKGluVi5FbGVtKCkpCgkJfQoJCXJldHVybiBpblMsIGluU2VycgoJZGVmYXVsdDoKCQlyZXR1cm4gaW5JLCBuaWwKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertToBool",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertToBool(in any) (bool, error)",
                        "Source": "ewoJaWYgdiwgZXJyIDo9IENvbnZlcnRUbyhCb29sZWFuLCBpbik7IGVyciA9PSBuaWwgewoJCXJldHVybiB2Lihib29sKSwgbmlsCgl9IGVsc2UgewoJCXJldHVybiBmYWxzZSwgZXJyCgl9Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertToBytes",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertToBytes(in any) ([]byte, error)",
                        "Source": "ewoJaWYgdiwgZXJyIDo9IENvbnZlcnRUbyhCeXRlcywgaW4pOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gdi4oW11ieXRlKSwgbmlsCgl9IGVsc2UgewoJCXJldHVybiBuaWwsIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertToFloat",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "float64"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertToFloat(in any) (float64, error)",
                        "Source": "ewoJaWYgdiwgZXJyIDo9IENvbnZlcnRUbyhGbG9hdCwgaW4pOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gdi4oZmxvYXQ2NCksIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gZmxvYXQ2NCgwLjApLCBlcnIKCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertToInteger",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "int64"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertToInteger(in any) (int64, error)",
                        "Source": "ewoJaWYgdiwgZXJyIDo9IENvbnZlcnRUbyhJbnRlZ2VyLCBpbik7IGVyciA9PSBuaWwgewoJCXJldHVybiB2LihpbnQ2NCksIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gaW50NjQoMCksIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertToString",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertToString(in any) (string, error)",
                        "Source": "ewoJaWYgdiwgZXJyIDo9IENvbnZlcnRUbyhTdHJpbmcsIGluKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIHYuKHN0cmluZyksIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gYGAsIGVycgoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ConvertToTime",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Time"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ConvertToTime(in any) (time.Time, error)",
                        "Source": "ewoJc3dpdGNoIGluLih0eXBlKSB7CgljYXNlIHRpbWUuVGltZToKCQlyZXR1cm4gaW4uKHRpbWUuVGltZSksIG5pbAoJZGVmYXVsdDoKCQlpZiB2LCBlcnIgOj0gQ29udmVydFRvKFRpbWUsIGluKTsgZXJyID09IG5pbCB7CgkJCXJldHVybiB2Lih0aW1lLlRpbWUpLCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gdGltZS5UaW1le30sIGVycgoJCX0KCX0KfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "DetectTimeFormat",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            }
                        ],
                        "Signature": "DetectTimeFormat(in string) string",
                        "Source": "ewoJaWYgSXNJbnRlZ2VyKGluKSB7CgkJcmV0dXJuIGBlcG9jaGAKCX0KCWZvciBfLCBsYXlvdXQgOj0gcmFuZ2UgVGltZUZvcm1hdHMgewoJCWlmIF8sIGVyciA6PSB0aW1lLlBhcnNlKGxheW91dCwgaW4pOyBlcnIgPT0gbmlsIHsKCQkJcmV0dXJuIGxheW91dAoJCX0KCX0KCXJldHVybiBgYAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "GenericMarshalJSON",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "extraData",
                                "Type": "...map[string]any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]byte"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "GenericMarshalJSON(in any, extraData ...map[string]any) ([]byte, error)",
                        "Source": "ewoJdmFyIHN2YWwgPSBzdHJ1Y3RzLk5ldyhpbikKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQpGaWVsZExvb3A6Cglmb3IgXywgZmllbGQgOj0gcmFuZ2Ugc3ZhbC5GaWVsZHMoKSB7CgkJaWYgZmllbGQuSXNFeHBvcnRlZCgpIHsKCQkJdmFyIGtleSA9IGZpZWxkLk5hbWUoKQoJCQl2YXIgdmFsdWUgPSBmaWVsZC5WYWx1ZSgpCgkJCWlmIHZUaW1lLCBvayA6PSB2YWx1ZS4odGltZS5UaW1lKTsgb2sgewoJCQkJaWYgdlRpbWUuSXNaZXJvKCkgewoJCQkJCXZhbHVlID0gbmlsCgkJCQl9IGVsc2UgewoJCQkJCXZhbHVlID0gdlRpbWUuRm9ybWF0KHRpbWUuUkZDMzMzOU5hbm8pCgkJCQl9CgkJCX0gZWxzZSBpZiBfLCBvayA6PSB2YWx1ZS4oZm10LlN0cmluZ2VyKTsgb2sgewoJCQkJdmFsdWUgPSBmbXQuU3ByaW50ZigiJXYiLCB2YWx1ZSkKCQkJfQoJCQlpZiBwYXJ0cyA6PSBzdHJpbmdzLlNwbGl0KGZpZWxkLlRhZyhganNvbmApLCBgLGApOyBsZW4ocGFydHMpID4gMCB7CgkJCQlpZiBwYXJ0c1swXSAhPSBgYCB7CgkJCQkJa2V5ID0gcGFydHNbMF0KCQkJCX0KCQkJCWlmIGxlbihwYXJ0cykgPiAxIHsKCQkJCQlmb3IgXywgZmxhZyA6PSByYW5nZSBwYXJ0c1sxOl0gewoJCQkJCQlzd2l0Y2ggZmxhZyB7CgkJCQkJCWNhc2UgYG9taXRlbXB0eWA6CgkJCQkJCQlpZiBmaWVsZC5Jc1plcm8oKSB7CgkJCQkJCQkJY29udGludWUgRmllbGRMb29wCgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCQkJb3V0cHV0W2tleV0gPSB2YWx1ZQoJCX0KCX0KCWlmIGxlbihleHRyYURhdGEpID4gMCAmJiBsZW4oZXh0cmFEYXRhWzBdKSA+IDAgewoJCWZvciBrLCB2IDo9IHJhbmdlIGV4dHJhRGF0YVswXSB7CgkJCW91dHB1dFtrXSA9IHYKCQl9Cgl9CglyZXR1cm4ganNvbi5NYXJzaGFsKG91dHB1dCkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsBoolean",
                        "Arguments": [
                            {
                                "Name": "inI",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsBoolean(inI any) bool",
                        "Source": "ewoJaWYgaW4sIGVyciA6PSBUb1N0cmluZyhpbkkpOyBlcnIgPT0gbmlsIHsKCQlpbiA9IHN0cmluZ3MuVG9Mb3dlcihpbikKCQlyZXR1cm4gKElzQm9vbGVhblRydWUoaW4pIHx8IElzQm9vbGVhbkZhbHNlKGluKSkKCX0KCXJldHVybiBmYWxzZQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsBooleanFalse",
                        "Arguments": [
                            {
                                "Name": "inI",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsBooleanFalse(inI any) bool",
                        "Source": "ewoJaWYgaW4sIGVyciA6PSBUb1N0cmluZyhpbkkpOyBlcnIgPT0gbmlsIHsKCQlpbiA9IHN0cmluZ3MuVG9Mb3dlcihpbikKCQlmb3IgXywgdmFsIDo9IHJhbmdlIEJvb2xlYW5GYWxzZVZhbHVlcyB7CgkJCWlmIGluID09IHZhbCB7CgkJCQlyZXR1cm4gdHJ1ZQoJCQl9CgkJfQoJfQoJcmV0dXJuIGZhbHNlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsBooleanTrue",
                        "Arguments": [
                            {
                                "Name": "inI",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsBooleanTrue(inI any) bool",
                        "Source": "ewoJaWYgaW4sIGVyciA6PSBUb1N0cmluZyhpbkkpOyBlcnIgPT0gbmlsIHsKCQlpbiA9IHN0cmluZ3MuVG9Mb3dlcihpbikKCQlmb3IgXywgdmFsIDo9IHJhbmdlIEJvb2xlYW5UcnVlVmFsdWVzIHsKCQkJaWYgaW4gPT0gdmFsIHsKCQkJCXJldHVybiB0cnVlCgkJCX0KCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsFloat",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsFloat(in any) bool",
                        "Source": "ewoJdmFyIGluViA9IHJlZmxlY3QuVmFsdWVPZihpbikKCXN3aXRjaCBpblYuS2luZCgpIHsKCWNhc2UgcmVmbGVjdC5GbG9hdDMyLCByZWZsZWN0LkZsb2F0NjQ6CgkJcmV0dXJuIHRydWUKCWRlZmF1bHQ6CgkJaWYgYXNTdHIsIGVyciA6PSBUb1N0cmluZyhpbik7IGVyciA9PSBuaWwgewoJCQlpZiBfLCBlcnIgOj0gc3RyY29udi5QYXJzZUZsb2F0KGFzU3RyLCA2NCk7IGVyciA9PSBuaWwgewoJCQkJcmV0dXJuIHRydWUKCQkJfQoJCX0KCX0KCXJldHVybiBmYWxzZQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsHexadecimal",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsHexadecimal(in any) bool",
                        "Source": "ewoJaWYgaW5TLCBlcnIgOj0gVG9TdHJpbmcoaW4pOyBlcnIgPT0gbmlsIHsKCQlpblMgPSBzdHJpbmdzLlRvTG93ZXIoaW5TKQoJCWlmIHN0cmluZ3MuSGFzUHJlZml4KGluUywgYDB4YCkgewoJCQlpblMgPSBzdHJpbmdzLlRyaW1QcmVmaXgoaW5TLCBgMHhgKQoJCX0gZWxzZSB7CgkJCXJldHVybiBmYWxzZQoJCX0KCQlmb3IgXywgciA6PSByYW5nZSBpblMgewoJCQlpZiByID49ICcwJyAmJiByIDw9ICc5JyB8fCByID49ICdhJyAmJiByIDw9ICdmJyB7CgkJCQljb250aW51ZQoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIGZhbHNlCgkJCX0KCQl9Cgl9IGVsc2UgewoJCXJldHVybiBmYWxzZQoJfQoJcmV0dXJuIHRydWUKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsInteger",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsInteger(in any) bool",
                        "Source": "ewoJdmFyIGluViA9IHJlZmxlY3QuVmFsdWVPZihpbikKCXN3aXRjaCBpblYuS2luZCgpIHsKCWNhc2UgcmVmbGVjdC5JbnQsIHJlZmxlY3QuSW50OCwgcmVmbGVjdC5JbnQxNiwgcmVmbGVjdC5JbnQzMiwgcmVmbGVjdC5JbnQ2NCwgcmVmbGVjdC5VaW50LCByZWZsZWN0LlVpbnQ4LCByZWZsZWN0LlVpbnQxNiwgcmVmbGVjdC5VaW50MzIsIHJlZmxlY3QuVWludDY0LCByZWZsZWN0LlVpbnRwdHI6CgkJcmV0dXJuIHRydWUKCWRlZmF1bHQ6CgkJaWYgYXNTdHIsIGVyciA6PSBUb1N0cmluZyhpbik7IGVyciA9PSBuaWwgewoJCQlpZiBfLCBlcnIgOj0gc3RyY29udi5BdG9pKGFzU3RyKTsgZXJyID09IG5pbCB7CgkJCQlyZXR1cm4gdHJ1ZQoJCQl9CgkJfQoJfQoJcmV0dXJuIGZhbHNlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsKind",
                        "Comment": "Dectect whether the concrete underlying value of the given input is one or more\nKinds of value.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            },
                            {
                                "Name": "kinds",
                                "Type": "...reflect.Kind"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsKind(in any, kinds ...reflect.Kind) bool",
                        "Source": "ewoJdmFyIGluVCByZWZsZWN0LlR5cGUKCWlmIHYsIG9rIDo9IGluLihyZWZsZWN0LlZhbHVlKTsgb2sgJiYgdi5Jc1ZhbGlkKCkgewoJCWluVCA9IHYuVHlwZSgpCgl9IGVsc2UgaWYgdiwgb2sgOj0gaW4uKHJlZmxlY3QuVHlwZSk7IG9rIHsKCQlpblQgPSB2Cgl9IGVsc2UgewoJCWluID0gUmVzb2x2ZVZhbHVlKGluKQoJCWluVCA9IHJlZmxlY3QuVHlwZU9mKGluKQoJfQoJaWYgaW5UID09IG5pbCB7CgkJcmV0dXJuIGZhbHNlCgl9Cglmb3IgXywgayA6PSByYW5nZSBraW5kcyB7CgkJaWYgaW5ULktpbmQoKSA9PSBrIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsNumeric",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsNumeric(in any) bool",
                        "Source": "ewoJcmV0dXJuIElzRmxvYXQoaW4pCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsTime",
                        "Arguments": [
                            {
                                "Name": "inI",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsTime(inI any) bool",
                        "Source": "ewoJaWYgaW4sIGVyciA6PSBUb1N0cmluZyhpbkkpOyBlcnIgPT0gbmlsIHsKCQlpZiBmIDo9IERldGVjdFRpbWVGb3JtYXQoaW4pOyBmICE9IGBgICYmIGYgIT0gYGVwb2NoYCB7CgkJCXJldHVybiB0cnVlCgkJfQoJfQoJcmV0dXJuIGZhbHNlCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "IsZero",
                        "Comment": "Returns whether the given value represents the underlying type's zero value",
                        "Arguments": [
                            {
                                "Name": "value",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "bool"
                            }
                        ],
                        "Signature": "IsZero(value any) bool",
                        "Source": "ewoJaWYgdmFsdWUgPT0gbmlsIHsKCQlyZXR1cm4gdHJ1ZQoJfSBlbHNlIGlmIHZhbHVlViwgb2sgOj0gdmFsdWUuKHJlZmxlY3QuVmFsdWUpOyBvayAmJiB2YWx1ZVYuSXNWYWxpZCgpIHsKCQlpZiB2YWx1ZVYuQ2FuSW50ZXJmYWNlKCkgewoJCQl2YWx1ZSA9IHZhbHVlVi5JbnRlcmZhY2UoKQoJCX0KCX0KCXJldHVybiByZWZsZWN0LkRlZXBFcXVhbCh2YWx1ZSwgcmVmbGVjdC5aZXJvKHJlZmxlY3QuVHlwZU9mKHZhbHVlKSkuSW50ZXJmYWNlKCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "JSONPath",
                        "Comment": "Performs a JSONPath query against the given object and returns the results.\nJSONPath description, syntax, and examples are available at http://goessner.net/articles/JsonPath/.",
                        "Arguments": [
                            {
                                "Name": "data",
                                "Type": "any"
                            },
                            {
                                "Name": "query",
                                "Type": "string"
                            },
                            {
                                "Name": "autowrap",
                                "Type": "bool"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "JSONPath(data any, query string, autowrap bool) (any, error)",
                        "Source": "ewoJaWYgcmVmbGVjdC5UeXBlT2YoZGF0YSkuS2luZCgpID09IHJlZmxlY3QuTWFwICYmIHF1ZXJ5ICE9IGBgIHsKCQlmb3IgXywgbGluZSA6PSByYW5nZSBzdHJpbmdzLlNwbGl0KHF1ZXJ5LCAiXG4iKSB7CgkJCWxpbmUgPSBzdHJpbmdzLlRyaW1TcGFjZShsaW5lKQoJCQlpZiBsaW5lID09IGBgIHsKCQkJCWNvbnRpbnVlCgkJCX0gZWxzZSBpZiBhdXRvd3JhcCB7CgkJCQlsaW5lID0gc3RyaW5ncy5UcmltUHJlZml4KGxpbmUsIGB7YCkKCQkJCWxpbmUgPSBzdHJpbmdzLlRyaW1TdWZmaXgobGluZSwgYH1gKQoJCQkJbGluZSA9IGB7YCArIGxpbmUgKyBgfWAKCQkJfQoJCQl2YXIganAgPSBqc29ucGF0aC5OZXcoYGApLkFsbG93TWlzc2luZ0tleXModHJ1ZSkKCQkJaWYgZXJyIDo9IGpwLlBhcnNlKGxpbmUpOyBlcnIgPT0gbmlsIHsKCQkJCXZhciB2YWx1ZXMgW11hbnkKCQkJCWlmIHJlc3VsdHMsIGVyciA6PSBqcC5GaW5kUmVzdWx0cyhkYXRhKTsgZXJyID09IG5pbCB7CgkJCQkJZm9yIF8sIHBhaXIgOj0gcmFuZ2UgcmVzdWx0cyB7CgkJCQkJCWZvciBfLCBwIDo9IHJhbmdlIHBhaXIgewoJCQkJCQkJaWYgcC5Jc1ZhbGlkKCkgJiYgcC5DYW5JbnRlcmZhY2UoKSB7CgkJCQkJCQkJdmFsdWVzID0gYXBwZW5kKHZhbHVlcywgcC5JbnRlcmZhY2UoKSkKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCQl9CgkJCQlzd2l0Y2ggbGVuKHZhbHVlcykgewoJCQkJY2FzZSAwOgoJCQkJCWRhdGEgPSBuaWwKCQkJCWNhc2UgMToKCQkJCQlkYXRhID0gdmFsdWVzWzBdCgkJCQlkZWZhdWx0OgoJCQkJCWRhdGEgPSB2YWx1ZXMKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCXJldHVybiBuaWwsIGVycgoJCQl9CgkJfQoJfQoJcmV0dXJuIGRhdGEsIG5pbAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ParseDuration",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "string"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "time.Duration"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ParseDuration(in string) (time.Duration, error)",
                        "Source": "ewoJaWYgaW4gPT0gYGAgewoJCXJldHVybiAwLCBuaWwKCX0KCXZhciBpIGludAoJdmFyIHRvdGFsSG91cnMgaW50CglpbiA9IHN0cmluZ3MuTWFwKGZ1bmMociBydW5lKSBydW5lIHsKCQlpZiB1bmljb2RlLklzU3BhY2UocikgewoJCQlyZXR1cm4gLTEKCQl9CgkJcmV0dXJuIHIKCX0sIGluKQoJZm9yIHsKCQlpKysKCQlpZiBtYXRjaCA6PSByeHV0aWwuTWF0Y2gocnhFeHRlbmRlZER1cmF0aW9ucywgaW4pOyBtYXRjaCAhPSBuaWwgewoJCQlpZiBudW0sIGVyciA6PSBDb252ZXJ0VG9JbnRlZ2VyKG1hdGNoLkdyb3VwKGBudW1iZXJgKSk7IGVyciA9PSBuaWwgewoJCQkJdmFyIGhvdXJzIGludAoJCQkJc3dpdGNoIHN0cmluZ3MuVG9Mb3dlcihtYXRjaC5Hcm91cChgc3VmZml4YCkpIHsKCQkJCWNhc2UgYHllYXJgLCBgeWVhcnNgLCBgeWA6CgkJCQkJaG91cnMgPSA4NzYwCgkJCQljYXNlIGB3ZWVrYCwgYHdlZWtzYCwgYHdrYCwgYHdrc2AsIGB3YDoKCQkJCQlob3VycyA9IDE2OAoJCQkJY2FzZSBgZGF5YCwgYGRheXNgLCBgZGA6CgkJCQkJaG91cnMgPSAyNAoJCQkJY2FzZSBgaG91cmAsIGBob3Vyc2AsIGBocmAsIGBocnNgLCBgaGA6CgkJCQkJaG91cnMgPSAxCgkJCQljYXNlIGBtaW51dGVgLCBgbWludXRlc2AsIGBtaW5gOgoJCQkJCWluID0gbWF0Y2guUmVwbGFjZUdyb3VwKGBzdWZmaXhgLCBgbWApCgkJCQlkZWZhdWx0OgoJCQkJCWJyZWFrCgkJCQl9CgkJCQlpZiBob3VycyA+IDAgewoJCQkJCWluID0gbWF0Y2guUmVwbGFjZUdyb3VwKDEsIGBgKQoJCQkJfQoJCQkJdG90YWxIb3VycyArPSBpbnQobnVtKSAqIGhvdXJzCgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gMCwgZm10LkVycm9yZigiSW52YWxpZCBudW1iZXI6ICV2IiwgZXJyKQoJCQl9CgkJfSBlbHNlIHsKCQkJYnJlYWsKCQl9CgkJaWYgaSA+PSBkdXJhdGlvbk1heE1hdGNoZXMgewoJCQlicmVhawoJCX0KCX0KCWlmIHRvdGFsSG91cnMgPiAwIHsKCQlpbiA9IGZtdC5TcHJpbnRmKCIlZGglcyIsIHRvdGFsSG91cnMsIGluKQoJfQoJcmV0dXJuIHRpbWUuUGFyc2VEdXJhdGlvbihpbikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "RegisterTypeHandler",
                        "Comment": "Register's a handler used for converting one type to another. Type are checked in the following\nmanner:  The input value's reflect.Type String() value is matched, falling back to its\nreflect.Kind String() value, finally checking for a special \"*\" value that matches any type.\nIf the handler function returns nil, its value replaces the input value.  If the special error\ntype PassthroughType is returned, the original value is returned unmodified.",
                        "Arguments": [
                            {
                                "Name": "handler",
                                "Type": "TypeConvertFunc"
                            },
                            {
                                "Name": "types",
                                "Type": "...string"
                            }
                        ],
                        "Signature": "RegisterTypeHandler(handler TypeConvertFunc, types ...string)",
                        "Source": "ewoJZm9yIF8sIHQgOj0gcmFuZ2UgdHlwZXMgewoJCWlmIHQgIT0gYGAgewoJCQl0eXBlSGFuZGxlcnNbdF0gPSBoYW5kbGVyCgkJfQoJfQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ResolveValue",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "any"
                            }
                        ],
                        "Signature": "ResolveValue(in any) any",
                        "Source": "ewoJdmFyIGluViByZWZsZWN0LlZhbHVlCglpZiB2Viwgb2sgOj0gaW4uKHJlZmxlY3QuVmFsdWUpOyBvayB7CgkJaW5WID0gdlYKCX0gZWxzZSB7CgkJaW5WID0gcmVmbGVjdC5WYWx1ZU9mKGluKQoJfQoJaWYgaW5WLklzVmFsaWQoKSB7CgkJaWYgaW5UIDo9IGluVi5UeXBlKCk7IGluVCA9PSBuaWwgewoJCQlyZXR1cm4gbmlsCgkJfQoJCXN3aXRjaCBpblYuS2luZCgpIHsKCQljYXNlIHJlZmxlY3QuUHRyLCByZWZsZWN0LkludGVyZmFjZToKCQkJcmV0dXJuIFJlc29sdmVWYWx1ZShpblYuRWxlbSgpKQoJCX0KCQlpbiA9IGluVi5JbnRlcmZhY2UoKQoJfQoJcmV0dXJuIGluCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "SliceEach",
                        "Comment": "Iterate through each element of the given array, slice or channel; calling\niterFn exactly once for each element.  Otherwise, call iterFn one time\nwith the given input as the argument.",
                        "Arguments": [
                            {
                                "Name": "slice",
                                "Type": "any"
                            },
                            {
                                "Name": "iterFn",
                                "Type": "IterationFunc"
                            },
                            {
                                "Name": "preserve",
                                "Type": "...reflect.Kind"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "SliceEach(slice any, iterFn IterationFunc, preserve ...reflect.Kind) error",
                        "Source": "ewoJaWYgaXRlckZuID09IG5pbCB7CgkJcmV0dXJuIG5pbAoJfQoJc2xpY2UgPSBSZXNvbHZlVmFsdWUoc2xpY2UpCglpZiBpblQgOj0gcmVmbGVjdC5UeXBlT2Yoc2xpY2UpOyBpblQgIT0gbmlsIHsKCQlzd2l0Y2ggaW5ULktpbmQoKSB7CgkJY2FzZSByZWZsZWN0LlNsaWNlLCByZWZsZWN0LkFycmF5OgoJCQl2YXIgc2xpY2VWID0gcmVmbGVjdC5WYWx1ZU9mKHNsaWNlKQoJCQlmb3IgaSA6PSAwOyBpIDwgc2xpY2VWLkxlbigpOyBpKysgewoJCQkJaWYgZXJyIDo9IGl0ZXJGbihpLCBzbGljZVYuSW5kZXgoaSkuSW50ZXJmYWNlKCkpOyBlcnIgIT0gbmlsIHsKCQkJCQlpZiBlcnIgPT0gU3RvcCB7CgkJCQkJCXJldHVybiBuaWwKCQkJCQl9IGVsc2UgewoJCQkJCQlyZXR1cm4gZXJyCgkJCQkJfQoJCQkJfQoJCQl9CgkJY2FzZSByZWZsZWN0Lk1hcDoKCQkJZm9yIF8sIHAgOj0gcmFuZ2UgcHJlc2VydmUgewoJCQkJaWYgcCA9PSByZWZsZWN0Lk1hcCB7CgkJCQkJaWYgZXJyIDo9IGl0ZXJGbigwLCBzbGljZSk7IGVyciAhPSBuaWwgewoJCQkJCQlpZiBlcnIgPT0gU3RvcCB7CgkJCQkJCQlyZXR1cm4gbmlsCgkJCQkJCX0gZWxzZSB7CgkJCQkJCQlyZXR1cm4gZXJyCgkJCQkJCX0KCQkJCQl9IGVsc2UgewoJCQkJCQlyZXR1cm4gbmlsCgkJCQkJfQoJCQkJfQoJCQl9CgkJCXZhciBtYXBWID0gcmVmbGVjdC5WYWx1ZU9mKHNsaWNlKQoJCQlmb3IgaSwga2V5IDo9IHJhbmdlIG1hcFYuTWFwS2V5cygpIHsKCQkJCWlmIHZhbHVlViA6PSBtYXBWLk1hcEluZGV4KGtleSk7IHZhbHVlVi5Jc1ZhbGlkKCkgJiYgdmFsdWVWLkNhbkludGVyZmFjZSgpIHsKCQkJCQlpZiBlcnIgOj0gaXRlckZuKGksIHZhbHVlVi5JbnRlcmZhY2UoKSk7IGVyciAhPSBuaWwgewoJCQkJCQlpZiBlcnIgPT0gU3RvcCB7CgkJCQkJCQlyZXR1cm4gbmlsCgkJCQkJCX0gZWxzZSB7CgkJCQkJCQlyZXR1cm4gZXJyCgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCQljYXNlIHJlZmxlY3QuU3RydWN0OgoJCQlmb3IgXywgcCA6PSByYW5nZSBwcmVzZXJ2ZSB7CgkJCQlpZiBwID09IHJlZmxlY3QuU3RydWN0IHsKCQkJCQlpZiBlcnIgOj0gaXRlckZuKDAsIHNsaWNlKTsgZXJyICE9IG5pbCB7CgkJCQkJCWlmIGVyciA9PSBTdG9wIHsKCQkJCQkJCXJldHVybiBuaWwKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCXJldHVybiBlcnIKCQkJCQkJfQoJCQkJCX0gZWxzZSB7CgkJCQkJCXJldHVybiBuaWwKCQkJCQl9CgkJCQl9CgkJCX0KCQkJdmFyIHN0cnVjdFYgPSByZWZsZWN0LlZhbHVlT2Yoc2xpY2UpCgkJCWZvciBpIDo9IDA7IGkgPCBzdHJ1Y3RWLlR5cGUoKS5OdW1GaWVsZCgpOyBpKysgewoJCQkJdmFyIGZpZWxkID0gc3RydWN0Vi5UeXBlKCkuRmllbGQoaSkKCQkJCWlmIGZpZWxkLk5hbWUgIT0gYGAgewoJCQkJCWlmIHZhbHVlViA6PSBzdHJ1Y3RWLkZpZWxkKGkpOyB2YWx1ZVYuSXNWYWxpZCgpICYmIHZhbHVlVi5DYW5JbnRlcmZhY2UoKSB7CgkJCQkJCWlmIGVyciA6PSBpdGVyRm4oaSwgdmFsdWVWLkludGVyZmFjZSgpKTsgZXJyICE9IG5pbCB7CgkJCQkJCQlpZiBlcnIgPT0gU3RvcCB7CgkJCQkJCQkJcmV0dXJuIG5pbAoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQlyZXR1cm4gZXJyCgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCQljYXNlIHJlZmxlY3QuQ2hhbjoKCQkJdmFyIHNsaWNlQyA9IHJlZmxlY3QuVmFsdWVPZihzbGljZSkKCQkJdmFyIGkgaW50CgkJCWZvciB7CgkJCQlpZiBpdGVtLCBvayA6PSBzbGljZUMuUmVjdigpOyBvayB7CgkJCQkJaWYgaXRlbS5Jc1ZhbGlkKCkgJiYgaXRlbS5DYW5JbnRlcmZhY2UoKSB7CgkJCQkJCWlmIGVyciA6PSBpdGVyRm4oaSwgaXRlbS5JbnRlcmZhY2UoKSk7IGVyciAhPSBuaWwgewoJCQkJCQkJaWYgZXJyID09IFN0b3AgewoJCQkJCQkJCXJldHVybiBuaWwKCQkJCQkJCX0gZWxzZSB7CgkJCQkJCQkJcmV0dXJuIGVycgoJCQkJCQkJfQoJCQkJCQl9IGVsc2UgewoJCQkJCQkJaSsrCgkJCQkJCX0KCQkJCQl9CgkJCQl9IGVsc2UgaWYgaSA+PSBFYWNoQ2hhbk1heEl0ZW1zIHsKCQkJCQlicmVhawoJCQkJfSBlbHNlIHsKCQkJCQlicmVhawoJCQkJfQoJCQl9CgkJZGVmYXVsdDoKCQkJaWYgZXJyIDo9IGl0ZXJGbigwLCBzbGljZSk7IGVyciAhPSBuaWwgewoJCQkJaWYgZXJyID09IFN0b3AgewoJCQkJCXJldHVybiBuaWwKCQkJCX0gZWxzZSB7CgkJCQkJcmV0dXJuIGVycgoJCQkJfQoJCQl9CgkJfQoJfQoJcmV0dXJuIG5pbAp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "Sliceify",
                        "Comment": "Takes some input value and returns it as a slice.",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "[]any"
                            }
                        ],
                        "Signature": "Sliceify(in any) []any",
                        "Source": "ewoJaWYgaW4gPT0gbmlsIHsKCQlyZXR1cm4gbmlsCgl9Cgl2YXIgb3V0ID0gbWFrZShbXWFueSwgMCkKCVNsaWNlRWFjaChpbiwgZnVuYyhfIGludCwgdiBhbnkpIGVycm9yIHsKCQlvdXQgPSBhcHBlbmQob3V0LCB2KQoJCXJldHVybiBuaWwKCX0pCglyZXR1cm4gb3V0Cn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "ToString",
                        "Arguments": [
                            {
                                "Name": "in",
                                "Type": "any"
                            }
                        ],
                        "Returns": [
                            {
                                "Type": "string"
                            },
                            {
                                "Type": "error"
                            }
                        ],
                        "Signature": "ToString(in any) (string, error)",
                        "Source": "ewoJaWYgaW4gPT0gbmlsIHsKCQlyZXR1cm4gYGAsIG5pbAoJfSBlbHNlIGlmIGVyciwgb2sgOj0gaW4uKGVycm9yKTsgb2sgewoJCXJldHVybiBlcnIuRXJyb3IoKSwgbmlsCgl9IGVsc2UgaWYgcywgb2sgOj0gaW4uKGZtdC5TdHJpbmdlcik7IG9rIHsKCQlyZXR1cm4gcy5TdHJpbmcoKSwgbmlsCgl9Cgl2YXIgYXNCeXRlcyBbXWJ5dGUKCWlmIHU4LCBvayA6PSBpbi4oW111aW50OCk7IG9rIHsKCQlhc0J5dGVzID0gW11ieXRlKHU4KQoJfSBlbHNlIGlmIGIsIG9rIDo9IGluLihbXWJ5dGUpOyBvayB7CgkJYXNCeXRlcyA9IGIKCX0gZWxzZSBpZiByLCBvayA6PSBpbi4oW11ydW5lKTsgb2sgewoJCXJldHVybiBzdHJpbmcociksIG5pbAoJfQoJaWYgbGVuKGFzQnl0ZXMpID4gMCB7CgkJaWYgb3V0IDo9IHN0cmluZyhhc0J5dGVzKTsgdXRmOC5WYWxpZFN0cmluZyhvdXQpIHsKCQkJcmV0dXJuIG91dCwgbmlsCgkJfSBlbHNlIHsKCQkJcmV0dXJuIGBgLCBmbXQuRXJyb3JmKCJHaXZlbiAlVCBpcyBub3QgYSB2YWxpZCBVVEYtOCBzdHJpbmciLCBpbikKCQl9Cgl9CglpZiBpblQgOj0gcmVmbGVjdC5UeXBlT2YoaW4pOyBpblQgIT0gbmlsIHsKCQlzd2l0Y2ggaW5ULktpbmQoKSB7CgkJY2FzZSByZWZsZWN0LkZsb2F0MzI6CgkJCXJldHVybiBzdHJjb252LkZvcm1hdEZsb2F0KHJlZmxlY3QuVmFsdWVPZihpbikuRmxvYXQoKSwgJ2YnLCAtMSwgMzIpLCBuaWwKCQljYXNlIHJlZmxlY3QuRmxvYXQ2NDoKCQkJcmV0dXJuIHN0cmNvbnYuRm9ybWF0RmxvYXQocmVmbGVjdC5WYWx1ZU9mKGluKS5GbG9hdCgpLCAnZicsIC0xLCA2NCksIG5pbAoJCWNhc2UgcmVmbGVjdC5Cb29sOgoJCQlyZXR1cm4gc3RyY29udi5Gb3JtYXRCb29sKGluLihib29sKSksIG5pbAoJCWNhc2UgcmVmbGVjdC5TdHJpbmc6CgkJCWlmIGluU3RyLCBvayA6PSBpbi4oc3RyaW5nKTsgb2sgewoJCQkJcmV0dXJuIGluU3RyLCBuaWwKCQkJfQoJCX0KCQlpZiAhSXNLaW5kKGluLCBDb21wb3VuZFR5cGVzLi4uKSB7CgkJCXJldHVybiBmbXQuU3ByaW50ZigiJXYiLCBpbiksIG5pbAoJCX0KCX0KCXJldHVybiBgYCwgZm10LkVycm9yZigiVW5hYmxlIHRvIGNvbnZlcnQgdHlwZSAnJVQnIHRvIHN0cmluZyIsIGluKQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Tests": [
                    {
                        "Name": "TestConvertToInteger",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestConvertToInteger(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaSBpbnQ2NAoJdmFyIGVyciBlcnJvcgoJaSwgZXJyID0gQ29udmVydFRvSW50ZWdlcihgYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbFZhbHVlcygwLCBpKQoJaSwgZXJyID0gQ29udmVydFRvSW50ZWdlcihgMGApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMCwgaSkKCWksIGVyciA9IENvbnZlcnRUb0ludGVnZXIoYDEyM2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMTIzLCBpKQoJaSwgZXJyID0gQ29udmVydFRvSW50ZWdlcihgMHgwYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbFZhbHVlcygwLCBpKQoJaSwgZXJyID0gQ29udmVydFRvSW50ZWdlcihgMHgxYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbFZhbHVlcygxLCBpKQoJaSwgZXJyID0gQ29udmVydFRvSW50ZWdlcihgMHhBYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbFZhbHVlcygxMCwgaSkKCWksIGVyciA9IENvbnZlcnRUb0ludGVnZXIoYDB4RmApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMTUsIGkpCglpLCBlcnIgPSBDb252ZXJ0VG9JbnRlZ2VyKGAweDEwYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbFZhbHVlcygxNiwgaSkKCWksIGVyciA9IENvbnZlcnRUb0ludGVnZXIoYDB4R2ApCglhc3NlcnQuTm90TmlsKGVycikKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestConvertTypeSpecificity",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestConvertTypeSpecificity(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRmFsc2UoTmlsLklzU3VwZXJzZXRPZihOaWwpKQoJYXNzZXJ0LkZhbHNlKE5pbC5Jc1N1cGVyc2V0T2YoQnl0ZXMpKQoJYXNzZXJ0LkZhbHNlKE5pbC5Jc1N1cGVyc2V0T2YoU3RyaW5nKSkKCWFzc2VydC5GYWxzZShOaWwuSXNTdXBlcnNldE9mKEZsb2F0KSkKCWFzc2VydC5GYWxzZShOaWwuSXNTdXBlcnNldE9mKEludGVnZXIpKQoJYXNzZXJ0LkZhbHNlKE5pbC5Jc1N1cGVyc2V0T2YoVGltZSkpCglhc3NlcnQuRmFsc2UoTmlsLklzU3VwZXJzZXRPZihCb29sZWFuKSkKCWFzc2VydC5GYWxzZShCeXRlcy5Jc1N1cGVyc2V0T2YoQnl0ZXMpKQoJYXNzZXJ0LlRydWUoQnl0ZXMuSXNTdXBlcnNldE9mKFN0cmluZykpCglhc3NlcnQuVHJ1ZShCeXRlcy5Jc1N1cGVyc2V0T2YoRmxvYXQpKQoJYXNzZXJ0LlRydWUoQnl0ZXMuSXNTdXBlcnNldE9mKEludGVnZXIpKQoJYXNzZXJ0LlRydWUoQnl0ZXMuSXNTdXBlcnNldE9mKFRpbWUpKQoJYXNzZXJ0LlRydWUoQnl0ZXMuSXNTdXBlcnNldE9mKEJvb2xlYW4pKQoJYXNzZXJ0LlRydWUoQnl0ZXMuSXNTdXBlcnNldE9mKE5pbCkpCglhc3NlcnQuRmFsc2UoU3RyaW5nLklzU3VwZXJzZXRPZihCeXRlcykpCglhc3NlcnQuRmFsc2UoU3RyaW5nLklzU3VwZXJzZXRPZihTdHJpbmcpKQoJYXNzZXJ0LlRydWUoU3RyaW5nLklzU3VwZXJzZXRPZihGbG9hdCkpCglhc3NlcnQuVHJ1ZShTdHJpbmcuSXNTdXBlcnNldE9mKEludGVnZXIpKQoJYXNzZXJ0LlRydWUoU3RyaW5nLklzU3VwZXJzZXRPZihUaW1lKSkKCWFzc2VydC5UcnVlKFN0cmluZy5Jc1N1cGVyc2V0T2YoQm9vbGVhbikpCglhc3NlcnQuVHJ1ZShTdHJpbmcuSXNTdXBlcnNldE9mKE5pbCkpCglhc3NlcnQuRmFsc2UoRmxvYXQuSXNTdXBlcnNldE9mKEJ5dGVzKSkKCWFzc2VydC5GYWxzZShGbG9hdC5Jc1N1cGVyc2V0T2YoU3RyaW5nKSkKCWFzc2VydC5GYWxzZShGbG9hdC5Jc1N1cGVyc2V0T2YoRmxvYXQpKQoJYXNzZXJ0LlRydWUoRmxvYXQuSXNTdXBlcnNldE9mKEludGVnZXIpKQoJYXNzZXJ0LlRydWUoRmxvYXQuSXNTdXBlcnNldE9mKFRpbWUpKQoJYXNzZXJ0LlRydWUoRmxvYXQuSXNTdXBlcnNldE9mKEJvb2xlYW4pKQoJYXNzZXJ0LlRydWUoRmxvYXQuSXNTdXBlcnNldE9mKE5pbCkpCglhc3NlcnQuRmFsc2UoSW50ZWdlci5Jc1N1cGVyc2V0T2YoQnl0ZXMpKQoJYXNzZXJ0LkZhbHNlKEludGVnZXIuSXNTdXBlcnNldE9mKFN0cmluZykpCglhc3NlcnQuRmFsc2UoSW50ZWdlci5Jc1N1cGVyc2V0T2YoRmxvYXQpKQoJYXNzZXJ0LkZhbHNlKEludGVnZXIuSXNTdXBlcnNldE9mKEludGVnZXIpKQoJYXNzZXJ0LlRydWUoSW50ZWdlci5Jc1N1cGVyc2V0T2YoVGltZSkpCglhc3NlcnQuVHJ1ZShJbnRlZ2VyLklzU3VwZXJzZXRPZihCb29sZWFuKSkKCWFzc2VydC5UcnVlKEludGVnZXIuSXNTdXBlcnNldE9mKE5pbCkpCn0=",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestDetectConvertType",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestDetectConvertType(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoTmlsLCBEZXRlY3RDb252ZXJ0VHlwZShuaWwpKQoJYXNzZXJ0LkVxdWFsKE5pbCwgRGV0ZWN0Q29udmVydFR5cGUoYGApKQoJYXNzZXJ0LkVxdWFsKFN0cmluZywgRGV0ZWN0Q29udmVydFR5cGUoYDA3NzUzYCkpCglhc3NlcnQuRXF1YWwoU3RyaW5nLCBEZXRlY3RDb252ZXJ0VHlwZShgdGVzdGApKQoJYXNzZXJ0LkVxdWFsKFRpbWUsIERldGVjdENvbnZlcnRUeXBlKGAyMDE1LTA1LTAxIDAwOjE1OjE2YCkpCglhc3NlcnQuRXF1YWwoVGltZSwgRGV0ZWN0Q29udmVydFR5cGUoYEZyaSBNYXkgMSAwMDoxNToxNiBVVEMgMjAxNWApKQoJYXNzZXJ0LkVxdWFsKFRpbWUsIERldGVjdENvbnZlcnRUeXBlKGBGcmkgTWF5IDAxIDAwOjE1OjE2ICswMDAwIDIwMTVgKSkKCWFzc2VydC5FcXVhbChUaW1lLCBEZXRlY3RDb252ZXJ0VHlwZShgMDEgTWF5IDE1IDAwOjE1IFVUQ2ApKQoJYXNzZXJ0LkVxdWFsKFRpbWUsIERldGVjdENvbnZlcnRUeXBlKGAwMSBNYXkgMTUgMDA6MTUgKzAwMDBgKSkKCWFzc2VydC5FcXVhbChUaW1lLCBEZXRlY3RDb252ZXJ0VHlwZShgRnJpZGF5LCAwMS1NYXktMTUgMDA6MTU6MTYgVVRDYCkpCglhc3NlcnQuRXF1YWwoVGltZSwgRGV0ZWN0Q29udmVydFR5cGUoYDIwMDMtMDYtMDhUMTE6NTZgKSkKCWFzc2VydC5FcXVhbChUaW1lLCBEZXRlY3RDb252ZXJ0VHlwZShgMjAwMy0wNi0wOFQxMTo1NjozNmApKQoJYXNzZXJ0LkVxdWFsKFRpbWUsIERldGVjdENvbnZlcnRUeXBlKGAyMDAzLTA2LTA4IDExOjU2YCkpCglhc3NlcnQuRXF1YWwoVGltZSwgRGV0ZWN0Q29udmVydFR5cGUoYDIwMDMtMDYtMDggMTE6NTY6MzZgKSkKCWFzc2VydC5FcXVhbChJbnRlZ2VyLCBEZXRlY3RDb252ZXJ0VHlwZShgMTEzNjIzOTQ0NWApKQoJYXNzZXJ0LkVxdWFsKEludGVnZXIsIERldGVjdENvbnZlcnRUeXBlKGAxMTM2MjM5NDQ1MDAwYCkpCglhc3NlcnQuRXF1YWwoSW50ZWdlciwgRGV0ZWN0Q29udmVydFR5cGUoYDExMzYyMzk0NDUwMDAwMDBgKSkKCWFzc2VydC5FcXVhbChJbnRlZ2VyLCBEZXRlY3RDb252ZXJ0VHlwZShgMGApKQoJYXNzZXJ0LkVxdWFsKEludGVnZXIsIERldGVjdENvbnZlcnRUeXBlKGAxYCkpCglhc3NlcnQuRXF1YWwoSW50ZWdlciwgRGV0ZWN0Q29udmVydFR5cGUoYDE3NzUzYCkpCglhc3NlcnQuRXF1YWwoSW50ZWdlciwgRGV0ZWN0Q29udmVydFR5cGUoYDB4ZGVhZGJlZWZgKSkKCWFzc2VydC5FcXVhbChJbnRlZ2VyLCBEZXRlY3RDb252ZXJ0VHlwZShgMHhERUFEQkVFRmApKQoJYXNzZXJ0LkVxdWFsKFN0cmluZywgRGV0ZWN0Q29udmVydFR5cGUoYGRlYWRiZWVmYCkpCglhc3NlcnQuRXF1YWwoU3RyaW5nLCBEZXRlY3RDb252ZXJ0VHlwZShgREVBREJFRUZgKSkKCWFzc2VydC5FcXVhbChGbG9hdCwgRGV0ZWN0Q29udmVydFR5cGUoYDAuMGApKQoJYXNzZXJ0LkVxdWFsKEZsb2F0LCBEZXRlY3RDb252ZXJ0VHlwZShgMy4xNDE1YCkpCglhc3NlcnQuRXF1YWwoRmxvYXQsIERldGVjdENvbnZlcnRUeXBlKGAzLjAwMDFgKSkKCWFzc2VydC5FcXVhbChGbG9hdCwgRGV0ZWN0Q29udmVydFR5cGUoYDMuMTAwMGApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestGenericMarshalJSON",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestGenericMarshalJSON(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglkYXRhLCBlcnIgOj0gR2VuZXJpY01hcnNoYWxKU09OKCZ0ZXN0TWFyc2hhbHtOYW1lOiBgdGVzdGAsIENyZWF0ZWRBdDogdGltZS5EYXRlKDIwMDksIHRpbWUuTm92ZW1iZXIsIDEwLCAyMywgMCwgMCwgMCwgdGltZS5VVEMpLCBUaGluZzogVmFsdWUyfSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgeyJDcmVhdGVkQXQiOiIyMDA5LTExLTEwVDIzOjAwOjAwWiIsImVudW0iOiJ2YWx1ZS0yIiwibmFtZSI6InRlc3QifWAsIHN0cmluZyhkYXRhKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsFloat",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsFloat(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRmFsc2UoSXNGbG9hdChuaWwpKQoJYXNzZXJ0LkZhbHNlKElzRmxvYXQoYGApKQoJYXNzZXJ0LkZhbHNlKElzRmxvYXQoYCBgKSkKCWFzc2VydC5GYWxzZShJc0Zsb2F0KGAgMCBgKSkKCWFzc2VydC5GYWxzZShJc0Zsb2F0KGAxIGApKQoJYXNzZXJ0LkZhbHNlKElzRmxvYXQoYG9idmlvdXNseSBub3QgYSBudW1iZXJgKSkKCWFzc2VydC5UcnVlKElzRmxvYXQoYDMuMTRgKSkKCWFzc2VydC5UcnVlKElzRmxvYXQoMy4xNCkpCglhc3NlcnQuVHJ1ZShJc0Zsb2F0KDApKQoJYXNzZXJ0LlRydWUoSXNGbG9hdCgxKSkKCWFzc2VydC5UcnVlKElzRmxvYXQoYDBgKSkKCWFzc2VydC5UcnVlKElzRmxvYXQoYDFgKSkKfQ==",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsHexadecimal",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsHexadecimal(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChuaWwpKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYGApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYCBgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGAgMCBgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGAxIGApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYG9idmlvdXNseSBub3QgYSBudW1iZXJgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGAzLjE0YCkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbCgzLjE0KSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKDApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoMSkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChgMGApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYDFgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKDB4MCkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbCgweDEpKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoMHhBKSkKCWFzc2VydC5UcnVlKElzSGV4YWRlY2ltYWwoYDB4MGApKQoJYXNzZXJ0LlRydWUoSXNIZXhhZGVjaW1hbChgMHgxYCkpCglhc3NlcnQuVHJ1ZShJc0hleGFkZWNpbWFsKGAweDJgKSkKCWFzc2VydC5UcnVlKElzSGV4YWRlY2ltYWwoYDB4M2ApKQoJYXNzZXJ0LlRydWUoSXNIZXhhZGVjaW1hbChgMHg0YCkpCglhc3NlcnQuVHJ1ZShJc0hleGFkZWNpbWFsKGAweDVgKSkKCWFzc2VydC5UcnVlKElzSGV4YWRlY2ltYWwoYDB4NmApKQoJYXNzZXJ0LlRydWUoSXNIZXhhZGVjaW1hbChgMHg3YCkpCglhc3NlcnQuVHJ1ZShJc0hleGFkZWNpbWFsKGAweDhgKSkKCWFzc2VydC5UcnVlKElzSGV4YWRlY2ltYWwoYDB4OWApKQoJYXNzZXJ0LlRydWUoSXNIZXhhZGVjaW1hbChgMHhBYCkpCglhc3NlcnQuVHJ1ZShJc0hleGFkZWNpbWFsKGAweEJgKSkKCWFzc2VydC5UcnVlKElzSGV4YWRlY2ltYWwoYDB4Q2ApKQoJYXNzZXJ0LlRydWUoSXNIZXhhZGVjaW1hbChgMHhEYCkpCglhc3NlcnQuVHJ1ZShJc0hleGFkZWNpbWFsKGAweEVgKSkKCWFzc2VydC5UcnVlKElzSGV4YWRlY2ltYWwoYDB4RmApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYDB4R2ApKQoJYXNzZXJ0LlRydWUoSXNIZXhhZGVjaW1hbChgMHhhYCkpCglhc3NlcnQuVHJ1ZShJc0hleGFkZWNpbWFsKGAweGJgKSkKCWFzc2VydC5UcnVlKElzSGV4YWRlY2ltYWwoYDB4Y2ApKQoJYXNzZXJ0LlRydWUoSXNIZXhhZGVjaW1hbChgMHhkYCkpCglhc3NlcnQuVHJ1ZShJc0hleGFkZWNpbWFsKGAweGVgKSkKCWFzc2VydC5UcnVlKElzSGV4YWRlY2ltYWwoYDB4ZmApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYDB4Z2ApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYDBgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGAxYCkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChgMmApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYDNgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGA0YCkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChgNWApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYDZgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGA3YCkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChgOGApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYDlgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGBBYCkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChgQmApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYENgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGBEYCkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChgRWApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYEZgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGBHYCkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChgYWApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYGJgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGBjYCkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChgZGApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYGVgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGBmYCkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChgZ2ApKQoJYXNzZXJ0LkZhbHNlKElzSGV4YWRlY2ltYWwoYGRFYURiRWVGYCkpCglhc3NlcnQuVHJ1ZShJc0hleGFkZWNpbWFsKGAweGRFYURiRWVGYCkpCglhc3NlcnQuRmFsc2UoSXNIZXhhZGVjaW1hbChgREVBREJFRUZgKSkKCWFzc2VydC5UcnVlKElzSGV4YWRlY2ltYWwoYDB4REVBREJFRUZgKSkKCWFzc2VydC5GYWxzZShJc0hleGFkZWNpbWFsKGBkZWFkYmVlZmApKQoJYXNzZXJ0LlRydWUoSXNIZXhhZGVjaW1hbChgMHhkZWFkYmVlZmApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsInteger",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsInteger(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRmFsc2UoSXNJbnRlZ2VyKG5pbCkpCglhc3NlcnQuRmFsc2UoSXNJbnRlZ2VyKGBgKSkKCWFzc2VydC5GYWxzZShJc0ludGVnZXIoYCBgKSkKCWFzc2VydC5GYWxzZShJc0ludGVnZXIoYCAwIGApKQoJYXNzZXJ0LkZhbHNlKElzSW50ZWdlcihgb2J2aW91c2x5IG5vdCBhIG51bWJlcmApKQoJYXNzZXJ0LkZhbHNlKElzSW50ZWdlcihgMSBgKSkKCWFzc2VydC5GYWxzZShJc0ludGVnZXIoYDMuMTRgKSkKCWFzc2VydC5GYWxzZShJc0ludGVnZXIoMy4xNCkpCglhc3NlcnQuVHJ1ZShJc0ludGVnZXIoMCkpCglhc3NlcnQuVHJ1ZShJc0ludGVnZXIoMSkpCglhc3NlcnQuVHJ1ZShJc0ludGVnZXIoYDBgKSkKCWFzc2VydC5UcnVlKElzSW50ZWdlcihgMWApKQp9",
                        "IsPackageLevel": true
                    },
                    {
                        "Name": "TestIsKind",
                        "Arguments": [
                            {
                                "Name": "t",
                                "Type": "*testing.T"
                            }
                        ],
                        "Signature": "TestIsKind(t *testing.T)",
                        "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRmFsc2UoSXNLaW5kKG5pbCwgcmVmbGVjdC5TdHJpbmcpKQoJYXNzZXJ0LkZhbHNlKElzS2luZChyZWZsZWN0LlZhbHVlT2YobmlsKSwgcmVmbGVjdC5TdHJpbmcpKQp9",
                        "IsPackageLevel": true
                    }
                ],
                "Types": {
                    "ConvertType": {
                        "Name": "ConvertType",
                        "MetaType": "int",
                        "Methods": [
                            {
                                "Name": "IsSupersetOf",
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "other",
                                        "Type": "ConvertType"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "bool"
                                    }
                                ],
                                "Signature": "IsSupersetOf(other ConvertType) bool",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "String",
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "string"
                                    }
                                ],
                                "Signature": "String() string",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Detect",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "ConvertType"
                                    },
                                    {
                                        "Type": "any"
                                    }
                                ],
                                "Signature": "Detect(in any) (ConvertType, any)",
                                "Source": "ewoJaWYgdiwgZXJyIDo9IENvbnZlcnRDdXN0b21UeXBlKGluKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIFVzZXJEZWZpbmVkLCB2Cgl9IGVsc2UgaWYgZXJyICE9IFBhc3N0aHJvdWdoVHlwZSB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9CglpZiBpbiA9PSBuaWwgewoJCXJldHVybiBOaWwsIG5pbAoJfQoJaWYgSXNUaW1lKGluKSB7CgkJaWYgdiwgZXJyIDo9IENvbnZlcnRUbyhUaW1lLCBpbik7IGVyciA9PSBuaWwgewoJCQlyZXR1cm4gVGltZSwgdgoJCX0KCX0KCWlmIHZTdHIsIG9rIDo9IGluLihzdHJpbmcpOyBvayB7CgkJaWYgcnhMZWFkaW5nWmVyb2VzLk1hdGNoU3RyaW5nKHZTdHIpIHsKCQkJcmV0dXJuIFN0cmluZywgdlN0cgoJCX0KCQlmb3IgXywgbmlsU3RyIDo9IHJhbmdlIE5pbFN0cmluZ3MgewoJCQlpZiB2U3RyID09IG5pbFN0ciB7CgkJCQlyZXR1cm4gTmlsLCBuaWwKCQkJfQoJCX0KCX0KCWZvciBfLCBjdHlwZSA6PSByYW5nZSBbXUNvbnZlcnRUeXBle0Jvb2xlYW4sIEludGVnZXIsIEZsb2F0LCBTdHJpbmd9IHsKCQlpZiB2YWx1ZSwgZXJyIDo9IENvbnZlcnRUbyhjdHlwZSwgaW4pOyBlcnIgPT0gbmlsIHsKCQkJcmV0dXJuIGN0eXBlLCB2YWx1ZQoJCX0KCX0KCXJldHVybiBJbnZhbGlkLCBpbgp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "DetectConvertType",
                                "Arguments": [
                                    {
                                        "Name": "in",
                                        "Type": "any"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "ConvertType"
                                    }
                                ],
                                "Signature": "DetectConvertType(in any) ConvertType",
                                "Source": "ewoJY3R5cGUsIF8gOj0gRGV0ZWN0KGluKQoJcmV0dXJuIGN0eXBlCn0=",
                                "IsPackageLevel": true
                            }
                        ],
                        "Source": "dHlwZSBDb252ZXJ0VHlwZSBpbnQ="
                    },
                    "IterationFunc": {
                        "Name": "IterationFunc",
                        "Source": "dHlwZSBJdGVyYXRpb25GdW5jIGZ1bmMoaSBpbnQsIHZhbHVlIGFueSkgZXJyb3I="
                    },
                    "TimedReadCloser": {
                        "Name": "TimedReadCloser",
                        "MetaType": "struct",
                        "Methods": [
                            {
                                "Name": "BytesRead",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "int64"
                                    }
                                ],
                                "Signature": "BytesRead() int64",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Close",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Name": "err",
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Close() err error",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "CloseDuration",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "time.Duration"
                                    }
                                ],
                                "Signature": "CloseDuration() time.Duration",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Duration",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "time.Duration"
                                    }
                                ],
                                "Signature": "Duration() time.Duration",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "LastReadAt",
                                "Comment": "Return the time of the last call to Read()",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "time.Time"
                                    }
                                ],
                                "Signature": "LastReadAt() time.Time",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "NewTimedReadCloser",
                                "Arguments": [
                                    {
                                        "Name": "rc",
                                        "Type": "io.ReadCloser"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "*TimedReadCloser"
                                    }
                                ],
                                "Signature": "NewTimedReadCloser(rc io.ReadCloser) *TimedReadCloser",
                                "Source": "ewoJcmV0dXJuICZUaW1lZFJlYWRDbG9zZXJ7cmM6IHJjfQp9",
                                "IsPackageLevel": true
                            },
                            {
                                "Name": "Read",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "b",
                                        "Type": "[]byte"
                                    }
                                ],
                                "Returns": [
                                    {
                                        "Type": "int"
                                    },
                                    {
                                        "Type": "error"
                                    }
                                ],
                                "Signature": "Read(b []byte) (int, error)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "ReadDuration",
                                "Comment": "Return a running duration of how long reading has been happening.  Updated on\nevery call to Read().",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "time.Duration"
                                    }
                                ],
                                "Signature": "ReadDuration() time.Duration",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "Reset",
                                "Comment": "Reset the internal counters to zero.  Useful after calling SetReadCloser().",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Signature": "Reset()",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SetReadCloser",
                                "Comment": "Set the underlying io.ReadCloser.  Does not call Reset(), so multiple ReadClosers\ncan be cumulitively tracked.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Arguments": [
                                    {
                                        "Name": "rc",
                                        "Type": "io.ReadCloser"
                                    }
                                ],
                                "Signature": "SetReadCloser(rc io.ReadCloser)",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "SinceLastRead",
                                "Comment": "Return the duration of time since the last Read() occurred.",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "time.Duration"
                                    }
                                ],
                                "Signature": "SinceLastRead() time.Duration",
                                "IsPackageLevel": false
                            },
                            {
                                "Name": "StartedAt",
                                "Comment": "Return the time of the first call to Read().",
                                "PointerReceiver": true,
                                "ReceiverName": "self",
                                "Returns": [
                                    {
                                        "Type": "time.Time"
                                    }
                                ],
                                "Signature": "StartedAt() time.Time",
                                "IsPackageLevel": false
                            }
                        ],
                        "Comment": "A TimedReadCloser wraps an io.ReadCloser, keeping track of how long actually\nreading from and closing the ReadCloser took, as well as how many bytes were read.\n\nMeasurement starts from the first call to Read(), and ends when Close() is called.",
                        "Source": "dHlwZSBUaW1lZFJlYWRDbG9zZXIgc3RydWN0IHsKCn0vLyBBIFRpbWVkUmVhZENsb3NlciB3cmFwcyBhbiBpby5SZWFkQ2xvc2VyLCBrZWVwaW5nIHRyYWNrIG9mIGhvdyBsb25nIGFjdHVhbGx5Ci8vIHJlYWRpbmcgZnJvbSBhbmQgY2xvc2luZyB0aGUgUmVhZENsb3NlciB0b29rLCBhcyB3ZWxsIGFzIGhvdyBtYW55IGJ5dGVzIHdlcmUgcmVhZC4KLy8KLy8gTWVhc3VyZW1lbnQgc3RhcnRzIGZyb20gdGhlIGZpcnN0IGNhbGwgdG8gUmVhZCgpLCBhbmQgZW5kcyB3aGVuIENsb3NlKCkgaXMgY2FsbGVkLgoK",
                        "HasUnexportedFields": true
                    },
                    "TypeConvertFunc": {
                        "Name": "TypeConvertFunc",
                        "Source": "dHlwZSBUeXBlQ29udmVydEZ1bmMgZnVuYyhpbiBhbnkpIChhbnksIGVycm9yKQ=="
                    }
                }
            }
        ]
    }
}
