{
    "Name": "sliceutil",
    "CanonicalImportPath": "github.com/ghetzel/go-stockutil/sliceutil",
    "ImportPath": "sliceutil",
    "ParentPackage": "stockutil",
    "URL": "https://github.com/ghetzel/go-stockutil",
    "Synopsis": "Utilities for converting, manipulating, and iterating over slices\n",
    "MainFunction": false,
    "CommentWordCount": 745,
    "LineCount": 1020,
    "SourceLineCount": 761,
    "FunctionCount": 32,
    "TypeCount": 4,
    "ConstantCount": 0,
    "VariableCount": 3,
    "Statistics": {
        "Mean": 0.8943,
        "StdDev": 0.2818,
        "GeometricMean": 0,
        "HarmonicMean": 0,
        "Median": 1,
        "Minimum": 0,
        "Maximum": 1
    },
    "Files": [
        {
            "Name": "sliceutil.go",
            "Imports": [
                {
                    "PackageName": "reflect",
                    "Alias": "reflect"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/utils",
                    "Alias": "utils"
                },
                {
                    "PackageName": "github.com/juliangruber/go-intersect",
                    "Alias": "go-intersect"
                }
            ],
            "Size": 11608,
            "LineCount": 486,
            "SourceLineCount": 333,
            "FunctionCount": 32,
            "TypeCount": 4,
            "ConstantCount": 0,
            "VariableCount": 3
        },
        {
            "Name": "sliceutil_test.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/alecthomas/assert",
                    "Alias": "assert"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 13446,
            "LineCount": 534,
            "SourceLineCount": 428,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        }
    ],
    "Variables": [
        {
            "Name": "RelaxedEqualityCompare"
        },
        {
            "Name": "Stop",
            "Expression": "utils.Stop"
        },
        {
            "Name": "StrictEqualityCompare"
        }
    ],
    "Functions": [
        {
            "Name": "Append",
            "Comment": "Returns a copy of the given slicified value with the given additional values appended.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                },
                {
                    "Name": "values",
                    "Type": "...interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]interface{}"
                }
            ],
            "Signature": "Append(in interface{}, values ...interface{}) []interface{}",
            "Source": "ewoJcmV0dXJuIGFwcGVuZChTbGljZWlmeShpbiksIHZhbHVlcy4uLikKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "At",
            "Comment": "Returns the element in the given indexable value at the given index.  If the\nindex is present, the second return value will be true.  If the index is not\npresent, or the given input is not indexable, the second return value will be\nfalse.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                },
                {
                    "Name": "index",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "interface{}"
                },
                {
                    "Type": "bool"
                }
            ],
            "Signature": "At(in interface{}, index int) (interface{}, bool)",
            "Source": "ewoJaW4gPSB0eXBldXRpbC5SZXNvbHZlVmFsdWUoaW4pCglpZiB0eXBldXRpbC5Jc0tpbmQoaW4sIHJlZmxlY3QuQXJyYXksIHJlZmxlY3QuU2xpY2UsIHJlZmxlY3QuU3RyaW5nKSB7CgkJaW5WIDo9IHJlZmxlY3QuVmFsdWVPZihpbikKCQlpZiBpbmRleCA8IGluVi5MZW4oKSB7CgkJCXJldHVybiBpblYuSW5kZXgoaW5kZXgpLkludGVyZmFjZSgpLCB0cnVlCgkJfQoJfQoJcmV0dXJuIG5pbCwgZmFsc2UKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Autotype",
            "Comment": "Returns a copy of the given slice with each element's value passed to stringutil.Autotype",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]interface{}"
                }
            ],
            "Signature": "Autotype(in interface{}) []interface{}",
            "Source": "ewoJdmFyIG91dCBbXWludGVyZmFjZXt9CglFYWNoKGluLCBmdW5jKGkgaW50LCB2IGludGVyZmFjZXt9KSBlcnJvciB7CgkJb3V0ID0gYXBwZW5kKG91dCwgc3RyaW5ndXRpbC5BdXRvdHlwZSh2KSkKCQlyZXR1cm4gbmlsCgl9KQoJcmV0dXJuIG91dAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Chunks",
            "Comment": "Divide the given slice into chunks of (at most) a given length",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                },
                {
                    "Name": "size",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "[][]interface{}"
                }
            ],
            "Signature": "Chunks(in interface{}, size int) [][]interface{}",
            "Source": "ewoJaWYgIXR5cGV1dGlsLklzQXJyYXkoaW4pIHsKCQlyZXR1cm4gbmlsCgl9CglvdXRwdXQgOj0gbWFrZShbXVtdaW50ZXJmYWNle30sIDApCgljdXJyZW50IDo9IG1ha2UoW11pbnRlcmZhY2V7fSwgMCkKCUVhY2goaW4sIGZ1bmMoaSBpbnQsIHYgaW50ZXJmYWNle30pIGVycm9yIHsKCQlpZiBpID4gMCAmJiBpJXNpemUgPT0gMCB7CgkJCW91dHB1dCA9IGFwcGVuZChvdXRwdXQsIGN1cnJlbnQpCgkJCWN1cnJlbnQgPSBuaWwKCQl9CgkJY3VycmVudCA9IGFwcGVuZChjdXJyZW50LCB2KQoJCXJldHVybiBuaWwKCX0pCglpZiBsZW4oY3VycmVudCkgPiAwIHsKCQlvdXRwdXQgPSBhcHBlbmQob3V0cHV0LCBjdXJyZW50KQoJfQoJcmV0dXJuIG91dHB1dAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Compact",
            "Comment": "Removes all elements from the given interface slice that are \"empty\", which is\ndefined as being nil, a nil or zero-length array, chan, map, slice, or string.\n\nThe zero values of any other type are not considered empty and will remain in\nthe return value.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]interface{}"
                }
            ],
            "Signature": "Compact(in interface{}) []interface{}",
            "Source": "ewoJaWYgaW4gPT0gbmlsIHsKCQlyZXR1cm4gbmlsCgl9CglydiA6PSBtYWtlKFtdaW50ZXJmYWNle30sIDApCglmb3IgXywgdiA6PSByYW5nZSBTbGljZWlmeShpbikgewoJCWlmIHYgIT0gbmlsIHsKCQkJdlYgOj0gcmVmbGVjdC5WYWx1ZU9mKHYpCgkJCXN3aXRjaCB2Vi5LaW5kKCkgewoJCQljYXNlIHJlZmxlY3QuQXJyYXksIHJlZmxlY3QuQ2hhbiwgcmVmbGVjdC5NYXAsIHJlZmxlY3QuU2xpY2UsIHJlZmxlY3QuU3RyaW5nOgoJCQkJaWYgdlYuTGVuKCkgPiAwIHsKCQkJCQlydiA9IGFwcGVuZChydiwgdikKCQkJCX0KCQkJZGVmYXVsdDoKCQkJCXJ2ID0gYXBwZW5kKHJ2LCB2KQoJCQl9CgkJfQoJfQoJcmV0dXJuIHJ2Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "CompactString",
            "Comment": "Removes all zero-length strings from the given string slice, returning a new\nslice with the values removed.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "[]string"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "CompactString(in []string) []string",
            "Source": "ewoJaWYgaW4gPT0gbmlsIHsKCQlyZXR1cm4gbmlsCgl9CglydiA6PSBtYWtlKFtdc3RyaW5nLCAwKQoJZm9yIF8sIHYgOj0gcmFuZ2UgaW4gewoJCWlmIHYgIT0gYGAgewoJCQlydiA9IGFwcGVuZChydiwgdikKCQl9Cgl9CglyZXR1cm4gcnYKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Contains",
            "Comment": "Return whether the given slice contains the given value.  If a comparator is provided, it will\nbe used to compare the elements.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                },
                {
                    "Name": "value",
                    "Type": "interface{}"
                },
                {
                    "Name": "comparators",
                    "Type": "...CompareFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "Contains(in interface{}, value interface{}, comparators ...CompareFunc) bool",
            "Source": "ewoJaWYgbGVuKGNvbXBhcmF0b3JzKSA9PSAwIHsKCQljb21wYXJhdG9ycyA9IFtdQ29tcGFyZUZ1bmN7U3RyaWN0RXF1YWxpdHlDb21wYXJlfQoJfQoJY29tcGFyYXRvciA6PSBjb21wYXJhdG9yc1swXQoJaWYgaW5WIDo9IHJlZmxlY3QuVmFsdWVPZihpbik7IGluVi5Jc1ZhbGlkKCkgewoJCWZvciBpIDo9IDA7IGkgPCBpblYuTGVuKCk7IGkrKyB7CgkJCWlmIGN1cnJlbnQgOj0gaW5WLkluZGV4KGkpOyBjdXJyZW50LklzVmFsaWQoKSB7CgkJCQlpZiBjb21wYXJhdG9yKGksIHZhbHVlLCBjdXJyZW50LkludGVyZmFjZSgpKSB7CgkJCQkJcmV0dXJuIHRydWUKCQkJCX0KCQkJfQoJCX0KCX0KCXJldHVybiBmYWxzZQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ContainsAllStrings",
            "Comment": "Returns whether the given string slice contains all of the following strings.",
            "Arguments": [
                {
                    "Name": "list",
                    "Type": "[]string"
                },
                {
                    "Name": "elems",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "ContainsAllStrings(list []string, elems ...string) bool",
            "Source": "ewoJZm9yIF8sIGUgOj0gcmFuZ2UgZWxlbXMgewoJCWlmICFDb250YWluc1N0cmluZyhsaXN0LCBlKSB7CgkJCXJldHVybiBmYWxzZQoJCX0KCX0KCXJldHVybiB0cnVlCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ContainsAnyString",
            "Comment": "Returns whether the given string slice contains any of the following strings.",
            "Arguments": [
                {
                    "Name": "list",
                    "Type": "[]string"
                },
                {
                    "Name": "elems",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "ContainsAnyString(list []string, elems ...string) bool",
            "Source": "ewoJZm9yIF8sIGUgOj0gcmFuZ2UgZWxlbXMgewoJCWlmIENvbnRhaW5zU3RyaW5nKGxpc3QsIGUpIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "ContainsString",
            "Comment": "Returns whether the given string slice contains a given string.",
            "Arguments": [
                {
                    "Name": "list",
                    "Type": "[]string"
                },
                {
                    "Name": "elem",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "ContainsString(list []string, elem string) bool",
            "Source": "ewoJZm9yIF8sIHQgOj0gcmFuZ2UgbGlzdCB7CgkJaWYgdCA9PSBlbGVtIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Difference",
            "Comment": "Return the slice that results from removing elements in second from the first.",
            "Arguments": [
                {
                    "Name": "first",
                    "Type": "interface{}"
                },
                {
                    "Name": "second",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]interface{}"
                }
            ],
            "Signature": "Difference(first interface{}, second interface{}) []interface{}",
            "Source": "ewoJdmFyIGRpZmYgPSBtYWtlKG1hcFtpbnRlcmZhY2V7fV1ib29sKQoJdmFyIG91dCA9IG1ha2UoW11pbnRlcmZhY2V7fSwgMCkKCXZhciBhUyA9IFNsaWNlaWZ5KGZpcnN0KQoJdmFyIGJTID0gU2xpY2VpZnkoc2Vjb25kKQoJaWYgbGVuKGFTKSA9PSAwIHsKCQlyZXR1cm4gb3V0Cgl9IGVsc2UgaWYgbGVuKGJTKSA9PSAwIHsKCQlyZXR1cm4gYVMKCX0KCWZvciBfLCBpdGVtIDo9IHJhbmdlIGJTIHsKCQlkaWZmW2l0ZW1dID0gdHJ1ZQoJfQoJZm9yIF8sIGl0ZW0gOj0gcmFuZ2UgYVMgewoJCWlmIF8sIG9rIDo9IGRpZmZbaXRlbV07ICFvayB7CgkJCW91dCA9IGFwcGVuZChvdXQsIGl0ZW0pCgkJfQoJfQoJcmV0dXJuIG91dAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Each",
            "Comment": "Iterate through each element of the given array or slice, calling\niterFn exactly once for each element.  Otherwise, call iterFn one time\nwith the given input as the argument.",
            "Arguments": [
                {
                    "Name": "slice",
                    "Type": "interface{}"
                },
                {
                    "Name": "iterFn",
                    "Type": "IterationFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "Each(slice interface{}, iterFn IterationFunc) error",
            "Source": "ewoJcmV0dXJuIHV0aWxzLlNsaWNlRWFjaChzbGljZSwgaXRlckZuKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "First",
            "Comment": "Returns the first element from the given slice, array or string; or nil.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "interface{}"
                }
            ],
            "Signature": "First(in interface{}) interface{}",
            "Source": "ewoJcmV0dXJuIEdldChpbiwgMCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "FirstNonZero",
            "Comment": "Returns the first element in the given inputs that is not that type's zero value.  All input values\nare flattened into a single array, so variadic elements can contain scalar or array values.",
            "Arguments": [
                {
                    "Name": "inputs",
                    "Type": "...interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "interface{}"
                }
            ],
            "Signature": "FirstNonZero(inputs ...interface{}) interface{}",
            "Source": "ewoJZm9yIF8sIHYgOj0gcmFuZ2UgRmxhdHRlbihpbnB1dHMpIHsKCQlpZiAhdHlwZXV0aWwuSXNaZXJvKHYpIHsKCQkJcmV0dXJuIHYKCQl9Cgl9CglyZXR1cm4gbmlsCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Flatten",
            "Comment": "Returns the given slice as a single-level flattened array.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]interface{}"
                }
            ],
            "Signature": "Flatten(in interface{}) []interface{}",
            "Source": "ewoJdmFyIG91dCA9IG1ha2UoW11pbnRlcmZhY2V7fSwgMCkKCUVhY2goaW4sIGZ1bmMoXyBpbnQsIHZhbHVlIGludGVyZmFjZXt9KSBlcnJvciB7CgkJaWYgdHlwZXV0aWwuSXNBcnJheSh2YWx1ZSkgewoJCQlvdXQgPSBhcHBlbmQob3V0LCBGbGF0dGVuKHZhbHVlKS4uLikKCQl9IGVsc2UgewoJCQlvdXQgPSBhcHBlbmQob3V0LCB2YWx1ZSkKCQl9CgkJcmV0dXJuIG5pbAoJfSkKCXJldHVybiBvdXQKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Get",
            "Comment": "Returns the nth element from the given slice, array or string; or nil.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                },
                {
                    "Name": "index",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "interface{}"
                }
            ],
            "Signature": "Get(in interface{}, index int) interface{}",
            "Source": "ewoJaWYgdiwgb2sgOj0gQXQoaW4sIGluZGV4KTsgb2sgewoJCXJldHVybiB2Cgl9IGVsc2UgewoJCXJldHVybiBuaWwKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Intersect",
            "Comment": "Return the intersection of two slices.",
            "Arguments": [
                {
                    "Name": "a",
                    "Type": "interface{}"
                },
                {
                    "Name": "b",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]interface{}"
                }
            ],
            "Signature": "Intersect(a interface{}, b interface{}) []interface{}",
            "Source": "ewoJcmV0dXJuIFNsaWNlaWZ5KGludGVyc2VjdC5TaW1wbGUoYSwgYikpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "IntersectStrings",
            "Comment": "Return the intersection of two string slices.",
            "Arguments": [
                {
                    "Name": "a",
                    "Type": "[]string"
                },
                {
                    "Name": "b",
                    "Type": "[]string"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "IntersectStrings(a []string, b []string) []string",
            "Source": "ewoJaWYgbGVuKGEpID09IDAgfHwgbGVuKGIpID09IDAgewoJCXJldHVybiBtYWtlKFtdc3RyaW5nLCAwKQoJfQoJcmV0dXJuIFN0cmluZ2lmeShpbnRlcnNlY3QuU2ltcGxlKGEsIGIpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Last",
            "Comment": "Returns the last element from the given slice, array or string; or nil.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "interface{}"
                }
            ],
            "Signature": "Last(in interface{}) interface{}",
            "Source": "ewoJaWYgTGVuKGluKSA9PSAwIHsKCQlyZXR1cm4gbmlsCgl9CglyZXR1cm4gR2V0KGluLCBMZW4oaW4pLTEpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Len",
            "Comment": "Returns the length of the given slice, array, or string.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "int"
                }
            ],
            "Signature": "Len(in interface{}) int",
            "Source": "ewoJaW4gPSB0eXBldXRpbC5SZXNvbHZlVmFsdWUoaW4pCglpZiB0eXBldXRpbC5Jc0tpbmQoaW4sIHJlZmxlY3QuQXJyYXksIHJlZmxlY3QuU2xpY2UsIHJlZmxlY3QuU3RyaW5nKSB7CgkJaW5WIDo9IHJlZmxlY3QuVmFsdWVPZihpbikKCQlyZXR1cm4gaW5WLkxlbigpCgl9CglyZXR1cm4gMAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Map",
            "Comment": "Returns a copy of the given slice with each element modified by the a given function.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                },
                {
                    "Name": "fn",
                    "Type": "MapFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "[]interface{}"
                }
            ],
            "Signature": "Map(in interface{}, fn MapFunc) []interface{}",
            "Source": "ewoJdmFyIG91dCBbXWludGVyZmFjZXt9CglFYWNoKGluLCBmdW5jKGkgaW50LCB2IGludGVyZmFjZXt9KSBlcnJvciB7CgkJb3V0ID0gYXBwZW5kKG91dCwgZm4oaSwgdikpCgkJcmV0dXJuIG5pbAoJfSkKCXJldHVybiBvdXQKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "MapString",
            "Comment": "Returns a copy of the given slice with each element modified by the a given function, then\nconverted to a string.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                },
                {
                    "Name": "fn",
                    "Type": "MapStringFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "MapString(in interface{}, fn MapStringFunc) []string",
            "Source": "ewoJb3V0IDo9IFN0cmluZ2lmeShpbikKCWZvciBpLCBlbCA6PSByYW5nZSBvdXQgewoJCW91dFtpXSA9IGZuKGksIGVsKQoJfQoJcmV0dXJuIG91dAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Or",
            "Comment": "Returns the first item that is not the zero value for that value's type.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "...interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "interface{}"
                }
            ],
            "Signature": "Or(in ...interface{}) interface{}",
            "Source": "ewoJZm9yIF8sIHYgOj0gcmFuZ2UgQ29tcGFjdChpbikgewoJCWlmIHYgIT0gcmVmbGVjdC5aZXJvKHJlZmxlY3QuVHlwZU9mKHYpKS5JbnRlcmZhY2UoKSB7CgkJCXJldHVybiB2CgkJfQoJfQoJcmV0dXJuIG5pbAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "OrString",
            "Comment": "Returns the first item that is not a zero-length string.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "OrString(in ...string) string",
            "Source": "ewoJaWYgdiA6PSBDb21wYWN0U3RyaW5nKGluKTsgbGVuKHYpID4gMCB7CgkJcmV0dXJuIHZbMF0KCX0gZWxzZSB7CgkJcmV0dXJuIGBgCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Rest",
            "Comment": "Returns the all but the first element from the given slice, array or string; or nil.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]interface{}"
                }
            ],
            "Signature": "Rest(in interface{}) []interface{}",
            "Source": "ewoJaWYgdHlwZXV0aWwuSXNLaW5kKGluLCByZWZsZWN0LkFycmF5LCByZWZsZWN0LlNsaWNlLCByZWZsZWN0LlN0cmluZykgewoJCWluViA6PSByZWZsZWN0LlZhbHVlT2YoaW4pCgkJbCA6PSBpblYuTGVuKCkKCQlzd2l0Y2ggbCB7CgkJY2FzZSAwLCAxOgoJCQlyZXR1cm4gbmlsCgkJZGVmYXVsdDoKCQkJb3V0IDo9IG1ha2UoW11pbnRlcmZhY2V7fSwgbC0xKQoJCQlmb3IgaSA6PSAxOyBpIDwgbDsgaSsrIHsKCQkJCWVsZW1WIDo9IGluVi5JbmRleChpKQoJCQkJaWYgZWxlbVYuQ2FuSW50ZXJmYWNlKCkgewoJCQkJCW91dFtpLTFdID0gZWxlbVYuSW50ZXJmYWNlKCkKCQkJCX0KCQkJfQoJCQlyZXR1cm4gb3V0CgkJfQoJfQoJcmV0dXJuIG5pbAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Slice",
            "Comment": "Returns a new slice with only the specified subset of items included.  In addition to the\nnormal slice index rules in Golang, negative indices are also supported.  If a negative index is\ngiven for the from and/or to values, the index will be treated as being relative to the end of the\ngiven slice. For example:\n\n\tSlice([]interface{}{1,2,3,4,5}, -5, -1)  // returns []interface{}{1, 2, 3, 4, 5}\n\tSlice([]interface{}{1,2,3,4,5}, -2, -1)  // returns []interface{}{4, 5}\n\tSlice([]interface{}{1,2,3,4,5}, -1, -1)  // returns []interface{}{5}\n\tSlice([]interface{}{1,2,3,4,5}, -4, -2)  // returns []interface{}{2, 3, 4}",
            "Arguments": [
                {
                    "Name": "slice",
                    "Type": "interface{}"
                },
                {
                    "Name": "from",
                    "Type": "int"
                },
                {
                    "Name": "to",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "[]interface{}"
                }
            ],
            "Signature": "Slice(slice interface{}, from int, to int) []interface{}",
            "Source": "ewoJc2xpY2VTIDo9IFNsaWNlaWZ5KHNsaWNlKQoJaWYgZnJvbSA8IDAgewoJCWZyb20gPSBsZW4oc2xpY2VTKSArIGZyb20KCX0KCWlmIGZyb20gPiBsZW4oc2xpY2VTKSB7CgkJcmV0dXJuIG1ha2UoW11pbnRlcmZhY2V7fSwgMCkKCX0gZWxzZSBpZiBmcm9tIDwgMCB7CgkJZnJvbSA9IDAKCX0KCWlmIHRvID4gbGVuKHNsaWNlUykgewoJCXRvID0gbGVuKHNsaWNlUykKCX0gZWxzZSBpZiB0byA8IDAgewoJCXRvID0gbGVuKHNsaWNlUykgKyB0byArIDEKCX0KCWlmIChmcm9tID49IDAgJiYgZnJvbSA8IGxlbihzbGljZVMpKSAmJiAodG8gPj0gZnJvbSAmJiB0byA8PSBsZW4oc2xpY2VTKSkgewoJCXJldHVybiBzbGljZVNbZnJvbTp0b10KCX0gZWxzZSB7CgkJcmV0dXJuIG1ha2UoW11pbnRlcmZhY2V7fSwgMCkKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Sliceify",
            "Comment": "Takes some input value and returns it as a slice.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]interface{}"
                }
            ],
            "Signature": "Sliceify(in interface{}) []interface{}",
            "Source": "ewoJcmV0dXJuIHV0aWxzLlNsaWNlaWZ5KGluKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "StringSlice",
            "Comment": "Same as slice, but returns strings.",
            "Arguments": [
                {
                    "Name": "slice",
                    "Type": "interface{}"
                },
                {
                    "Name": "from",
                    "Type": "int"
                },
                {
                    "Name": "to",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "StringSlice(slice interface{}, from int, to int) []string",
            "Source": "ewoJcmV0dXJuIFN0cmluZ2lmeShTbGljZShzbGljZSwgZnJvbSwgdG8pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Stringify",
            "Comment": "Converts all elements of the given interface slice to strings using the \"%v\"\nformat string via the fmt package.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "Stringify(in interface{}) []string",
            "Source": "ewoJaWYgYXJyIDo9IFNsaWNlaWZ5KGluKTsgbGVuKGFycikgPiAwIHsKCQlvdXQgOj0gbWFrZShbXXN0cmluZywgbGVuKGFycikpCgkJZm9yIGksIGl0ZW0gOj0gcmFuZ2UgYXJyIHsKCQkJb3V0W2ldID0gdHlwZXV0aWwuU3RyaW5nKGl0ZW0pCgkJfQoJCXJldHVybiBvdXQKCX0gZWxzZSB7CgkJcmV0dXJuIG5pbAoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TrimSpace",
            "Comment": "Trims the whitespace from each element in the given array.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "TrimSpace(in interface{}) []string",
            "Source": "ewoJcmV0dXJuIE1hcFN0cmluZyhpbiwgZnVuYyhfIGludCwgZWwgc3RyaW5nKSBzdHJpbmcgewoJCXJldHVybiBzdHJpbmdzLlRyaW1TcGFjZShlbCkKCX0pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Unique",
            "Comment": "Returns a new slice with only unique elements from the given interface included.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]interface{}"
                }
            ],
            "Signature": "Unique(in interface{}) []interface{}",
            "Source": "ewoJcmV0dXJuIHVuaXF1ZShpbiwgU3RyaWN0RXF1YWxpdHlDb21wYXJlKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "UniqueStrings",
            "Comment": "Returns a new slice with only unique string elements from the given interface included.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "UniqueStrings(in interface{}) []string",
            "Source": "ewoJcmV0dXJuIFN0cmluZ2lmeShVbmlxdWUoaW4pKQp9",
            "IsPackageLevel": true
        }
    ],
    "Tests": [
        {
            "Name": "TestAt",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestAt(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgaW50ZXJmYWNle30KCXZhciBvdXQgaW50ZXJmYWNle30KCXZhciBvayBib29sCglpbnB1dCA9IFtdaW50ezEsIDMsIDV9CglvdXQsIG9rID0gQXQoaW5wdXQsIDApCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbCgxLCBvdXQpCglvdXQsIG9rID0gQXQoaW5wdXQsIDEpCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbCgzLCBvdXQpCglvdXQsIG9rID0gQXQoaW5wdXQsIDIpCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbCg1LCBvdXQpCglvdXQsIG9rID0gQXQoaW5wdXQsIDk5OTk5KQoJYXNzZXJ0LkZhbHNlKG9rKQoJYXNzZXJ0Lk5pbChvdXQpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestChunks",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestChunks(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglpbnB1dCA6PSBbXWludHsxLCAzLCA1LCA3LCA5LCAxMSwgMTMsIDE1LCAxNywgMTksIDIxLCAyM30KCWFzc2VydC5FcXVhbChbXVtdaW50ZXJmYWNle317W11pbnRlcmZhY2V7fXsxfSwgW11pbnRlcmZhY2V7fXszfSwgW11pbnRlcmZhY2V7fXs1fSwgW11pbnRlcmZhY2V7fXs3fSwgW11pbnRlcmZhY2V7fXs5fSwgW11pbnRlcmZhY2V7fXsxMX0sIFtdaW50ZXJmYWNle317MTN9LCBbXWludGVyZmFjZXt9ezE1fSwgW11pbnRlcmZhY2V7fXsxN30sIFtdaW50ZXJmYWNle317MTl9LCBbXWludGVyZmFjZXt9ezIxfSwgW11pbnRlcmZhY2V7fXsyM319LCBDaHVua3MoaW5wdXQsIDEpKQoJYXNzZXJ0LkVxdWFsKFtdW11pbnRlcmZhY2V7fXtbXWludGVyZmFjZXt9ezEsIDN9LCBbXWludGVyZmFjZXt9ezUsIDd9LCBbXWludGVyZmFjZXt9ezksIDExfSwgW11pbnRlcmZhY2V7fXsxMywgMTV9LCBbXWludGVyZmFjZXt9ezE3LCAxOX0sIFtdaW50ZXJmYWNle317MjEsIDIzfX0sIENodW5rcyhpbnB1dCwgMikpCglhc3NlcnQuRXF1YWwoW11bXWludGVyZmFjZXt9e1tdaW50ZXJmYWNle317MSwgMywgNX0sIFtdaW50ZXJmYWNle317NywgOSwgMTF9LCBbXWludGVyZmFjZXt9ezEzLCAxNSwgMTd9LCBbXWludGVyZmFjZXt9ezE5LCAyMSwgMjN9fSwgQ2h1bmtzKGlucHV0LCAzKSkKCWFzc2VydC5FcXVhbChbXVtdaW50ZXJmYWNle317W11pbnRlcmZhY2V7fXsxLCAzLCA1LCA3LCA5LCAxMSwgMTMsIDE1LCAxNywgMTksIDIxLCAyM319LCBDaHVua3MoaW5wdXQsIDEwMDApKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCompact",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCompact(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKENvbXBhY3QobmlsKSkKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9ezAsIDEsIDIsIDN9LCBDb21wYWN0KFtdaW50ZXJmYWNle317MCwgMSwgMiwgM30pKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317MSwgMywgNX0sIENvbXBhY3QoW11pbnRlcmZhY2V7fXtuaWwsIDEsIG5pbCwgMywgbmlsLCA1fSkpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXtgb25lYCwgYHRocmVlYCwgYCBgLCBgZml2ZWB9LCBDb21wYWN0KFtdaW50ZXJmYWNle317YG9uZWAsIGBgLCBgdGhyZWVgLCBgYCwgYCBgLCBgZml2ZWB9KSkKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e1tdaW50ezEsIDIsIDN9fSwgQ29tcGFjdChbXWludGVyZmFjZXt9e25pbCwgW11zdHJpbmd7fSwgW11pbnR7MSwgMiwgM30sIG1hcFtzdHJpbmddYm9vbHt9fSkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCompactString",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCompactString(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKENvbXBhY3RTdHJpbmcobmlsKSkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgb25lYCwgYHRocmVlYCwgYGZpdmVgfSwgQ29tcGFjdFN0cmluZyhbXXN0cmluZ3tgb25lYCwgYHRocmVlYCwgYGZpdmVgfSkpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YG9uZWAsIGB0aHJlZWAsIGAgYCwgYGZpdmVgfSwgQ29tcGFjdFN0cmluZyhbXXN0cmluZ3tgb25lYCwgYGAsIGB0aHJlZWAsIGBgLCBgIGAsIGBmaXZlYH0pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestContains",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestContains(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgaW50ZXJmYWNle30KCWlucHV0ID0gW11pbnR7MSwgMywgNX0KCWFzc2VydC5UcnVlKENvbnRhaW5zKGlucHV0LCAxKSkKCWFzc2VydC5UcnVlKENvbnRhaW5zKGlucHV0LCAzKSkKCWFzc2VydC5UcnVlKENvbnRhaW5zKGlucHV0LCA1KSkKCWFzc2VydC5GYWxzZShDb250YWlucyhpbnB1dCwgLTEpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKGlucHV0LCAyKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhpbnB1dCwgLTMpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKGlucHV0LCA0KSkKCWFzc2VydC5GYWxzZShDb250YWlucyhpbnB1dCwgLTUpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKFtdaW50e30sIDEpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKFtdaW50e30sIDIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKFtdaW50e30sIDApKQoJaW5wdXQgPSBbXXN0cmluZ3sib25lIiwgInRocmVlIiwgImZpdmUifQoJYXNzZXJ0LlRydWUoQ29udGFpbnMoaW5wdXQsICJvbmUiKSkKCWFzc2VydC5UcnVlKENvbnRhaW5zKGlucHV0LCAidGhyZWUiKSkKCWFzc2VydC5UcnVlKENvbnRhaW5zKGlucHV0LCAiZml2ZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKGlucHV0LCAiT25lIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoaW5wdXQsICJ0d28iKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhpbnB1dCwgIlRocmVlIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoaW5wdXQsICJmb3VyIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoaW5wdXQsICJGaXZlIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoW11zdHJpbmd7fSwgIm9uZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKFtdc3RyaW5ne30sICJ0d28iKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhbXXN0cmluZ3t9LCAiIikpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestContainsAllStrings",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestContainsAllStrings(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglpbnB1dCA6PSBbXXN0cmluZ3sib25lIiwgInRocmVlIiwgImZpdmUifQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0LCAib25lIikpCglhc3NlcnQuVHJ1ZShDb250YWluc0FsbFN0cmluZ3MoaW5wdXQsICJ0aHJlZSIpKQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0LCAiZml2ZSIpKQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0LCAib25lIiwgInRocmVlIikpCglhc3NlcnQuVHJ1ZShDb250YWluc0FsbFN0cmluZ3MoaW5wdXQsICJvbmUiLCAiZml2ZSIpKQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0LCAib25lIiwgInRocmVlIiwgImZpdmUiKSkKCWFzc2VydC5GYWxzZShDb250YWluc0FsbFN0cmluZ3MoaW5wdXQsICJvbmUiLCAiZm91ciIpKQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestContainsAnyString",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestContainsAnyString(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglpbnB1dCA6PSBbXXN0cmluZ3sib25lIiwgInRocmVlIiwgImZpdmUifQoJYW55IDo9IFtdc3RyaW5neyJvbmUiLCAidHdvIiwgImZvdXIifQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbnlTdHJpbmcoaW5wdXQsIGFueS4uLikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNBbnlTdHJpbmcoaW5wdXQpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zQW55U3RyaW5nKFtdc3RyaW5ne30sICJvbmUiKSkKCWFzc2VydC5GYWxzZShDb250YWluc0FueVN0cmluZyhbXXN0cmluZ3t9LCAidHdvIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNBbnlTdHJpbmcoW11zdHJpbmd7fSwgIiIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zQW55U3RyaW5nKGlucHV0LCBbXXN0cmluZ3sic2l4IiwgInNldmVuIn0uLi4pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestContainsString",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestContainsString(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglpbnB1dCA6PSBbXXN0cmluZ3sib25lIiwgInRocmVlIiwgImZpdmUifQoJYXNzZXJ0LlRydWUoQ29udGFpbnNTdHJpbmcoaW5wdXQsICJvbmUiKSkKCWFzc2VydC5UcnVlKENvbnRhaW5zU3RyaW5nKGlucHV0LCAidGhyZWUiKSkKCWFzc2VydC5UcnVlKENvbnRhaW5zU3RyaW5nKGlucHV0LCAiZml2ZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zU3RyaW5nKGlucHV0LCAiT25lIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNTdHJpbmcoaW5wdXQsICJ0d28iKSkKCWFzc2VydC5GYWxzZShDb250YWluc1N0cmluZyhpbnB1dCwgIlRocmVlIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNTdHJpbmcoaW5wdXQsICJmb3VyIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNTdHJpbmcoaW5wdXQsICJGaXZlIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNTdHJpbmcoW11zdHJpbmd7fSwgIm9uZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zU3RyaW5nKFtdc3RyaW5ne30sICJ0d28iKSkKCWFzc2VydC5GYWxzZShDb250YWluc1N0cmluZyhbXXN0cmluZ3t9LCAiIikpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDifference",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDifference(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRW1wdHkoRGlmZmVyZW5jZShuaWwsIG5pbCkpCglhc3NlcnQuRW1wdHkoRGlmZmVyZW5jZShuaWwsIFtdc3RyaW5ne2BhYCwgYGNgLCBgZWB9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBEaWZmZXJlbmNlKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBuaWwpKQoJYXNzZXJ0LkVsZW1lbnRzTWF0Y2goW11pbnRlcmZhY2V7fXtgYWB9LCBEaWZmZXJlbmNlKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBbXXN0cmluZ3tgYmAsIGBjYH0pKQoJYXNzZXJ0LkVsZW1lbnRzTWF0Y2goW11zdHJpbmd7YGFgLCBgYmAsIGBjYH0sIERpZmZlcmVuY2UoW11zdHJpbmd7YGFgLCBgYmAsIGBjYH0sIFtdc3RyaW5ne2B4YCwgYHlgLCBgemB9KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestEach",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestEach(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIHRlc3RTdHJ1Y3Qgc3RydWN0IHsKCQlOYW1lICBzdHJpbmcKCQlIZWxsbyBib29sCgkJdW5leCAgc3RyaW5nCgl9Cglhc3NlcnQuTmlsKEVhY2gobmlsLCBuaWwpKQoJYXNzZXJ0Lk5pbChFYWNoKFtdc3RyaW5ne2BvbmVgLCBgdHdvYCwgYHRocmVlYH0sIGZ1bmMoaSBpbnQsIHYgaW50ZXJmYWNle30pIGVycm9yIHsKCQlyZXR1cm4gU3RvcAoJfSkpCgljb3VudCA6PSAwCglhc3NlcnQuTmlsKEVhY2goW11zdHJpbmd7YG9uZWAsIGB0d29gLCBgdGhyZWVgfSwgZnVuYyhpIGludCwgdiBpbnRlcmZhY2V7fSkgZXJyb3IgewoJCWlmIHYuKHN0cmluZykgPT0gYHR3b2AgewoJCQlyZXR1cm4gU3RvcAoJCX0gZWxzZSB7CgkJCWNvdW50ICs9IDEKCQkJcmV0dXJuIG5pbAoJCX0KCX0pKQoJdmFsdWVzIDo9IFtdaW50ZXJmYWNle317fQoJYXNzZXJ0Lk5pbChFYWNoKG1hcFtzdHJpbmddc3RyaW5ne2BvbmVgOiBgZmlyc3RgLCBgdHdvYDogYHNlY29uZGAsIGB0aHJlZWA6IGB0aGlyZGB9LCBmdW5jKGkgaW50LCB2IGludGVyZmFjZXt9KSBlcnJvciB7CgkJdmFsdWVzID0gYXBwZW5kKHZhbHVlcywgdikKCQlyZXR1cm4gbmlsCgl9KSkKCXZhbHVlcyA9IFtdaW50ZXJmYWNle317fQoJYXNzZXJ0Lk5pbChFYWNoKCZ0ZXN0U3RydWN0e05hbWU6IGB0ZXN0YCwgSGVsbG86IHRydWUsIHVuZXg6IGBzaG91bGQgbm90IHNlZSBtZWB9LCBmdW5jKGkgaW50LCB2IGludGVyZmFjZXt9KSBlcnJvciB7CgkJdmFsdWVzID0gYXBwZW5kKHZhbHVlcywgdikKCQlyZXR1cm4gbmlsCgl9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKFtdaW50ZXJmYWNle317YHRlc3RgLCB0cnVlfSwgdmFsdWVzKQoJdmFsY2hhbiA6PSBtYWtlKGNoYW4gc3RyaW5nKQoJZ28gZnVuYygpIHsKCQlkZWZlciBjbG9zZSh2YWxjaGFuKQoJCWZvciBpIDo9IDA7IGkgPCAzOyBpKysgewoJCQl2YWxjaGFuIDwtIGZtdC5TcHJpbnRmKCJ2YWx1ZSVkIiwgaSkKCQl9Cgl9KCkKCXZhbHVlc1MgOj0gbWFrZShbXXN0cmluZywgMCkKCWFzc2VydC5OaWwoRWFjaCh2YWxjaGFuLCBmdW5jKGkgaW50LCB2IGludGVyZmFjZXt9KSBlcnJvciB7CgkJdmFsdWVzUyA9IGFwcGVuZCh2YWx1ZXNTLCBmbXQuU3ByaW50ZigiJXYiLCB2KSkKCQlyZXR1cm4gbmlsCgl9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKFtdc3RyaW5ne2B2YWx1ZTBgLCBgdmFsdWUxYCwgYHZhbHVlMmB9LCB2YWx1ZXNTKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFirst",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFirst(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgaW50ZXJmYWNle30KCWFzc2VydC5OaWwoRmlyc3QobmlsKSkKCWFzc2VydC5OaWwoRmlyc3QoaW5wdXQpKQoJaW5wdXQgPSBbXWludHt9Cglhc3NlcnQuTmlsKEZpcnN0KGlucHV0KSkKCWlucHV0ID0gW11pbnR7MSwgMywgNX0KCWFzc2VydC5FcXVhbCgxLCBGaXJzdChpbnB1dCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFirstNonZero",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFirstNonZero(t *testing.T)",
            "Source": "ewoJYXNzZXJ0Lk5pbCh0LCBGaXJzdE5vblplcm8oKSkKCWFzc2VydC5FcXVhbCh0LCA0MiwgRmlyc3ROb25aZXJvKDQyKSkKCWFzc2VydC5FcXVhbCh0LCA0MiwgRmlyc3ROb25aZXJvKGBgLCAwLCBmYWxzZSwgNDIsIGZhbHNlLCB0cnVlLCA5NikpCglhc3NlcnQuRXF1YWwodCwgOCwgRmlyc3ROb25aZXJvKFtdaW50ezAsIDAsIDB9LCA4LCBbXWludHs2OX0pKQoJYXNzZXJ0LkVxdWFsKHQsIDg0LCBGaXJzdE5vblplcm8oW11pbnR7MCwgMCwgMH0sIDAsIFtdaW50ezg0fSkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFlatten",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFlatten(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXtgb25lYCwgYHR3b2AsIGB0aHJlZWB9LCBGbGF0dGVuKFtdc3RyaW5ne2BvbmVgLCBgdHdvYCwgYHRocmVlYH0pKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317YG9uZWAsIGB0d29gLCBgdGhyZWVgfSwgRmxhdHRlbihbXWludGVyZmFjZXt9e1tdc3RyaW5ne2BvbmVgLCBgdHdvYH0sIGB0aHJlZWB9KSkKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2BvbmVgLCBgdHdvYCwgYHRocmVlYH0sIEZsYXR0ZW4oW11pbnRlcmZhY2V7fXtbXXN0cmluZ3tgb25lYH0sIFtdc3RyaW5ne2B0d29gfSwgW11zdHJpbmd7YHRocmVlYH19KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestGet",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestGet(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgaW50ZXJmYWNle30KCWlucHV0ID0gW11pbnR7MSwgMywgNX0KCWFzc2VydC5FcXVhbCgxLCBHZXQoaW5wdXQsIDApKQoJYXNzZXJ0LkVxdWFsKDMsIEdldChpbnB1dCwgMSkpCglhc3NlcnQuRXF1YWwoNSwgR2V0KGlucHV0LCAyKSkKCWFzc2VydC5OaWwoR2V0KGlucHV0LCA5OTk5OSkpCglhc3NlcnQuTmlsKEdldChuaWwsIDApKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestIntersect",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestIntersect(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRW1wdHkoSW50ZXJzZWN0U3RyaW5ncyhuaWwsIG5pbCkpCglhc3NlcnQuRW1wdHkoSW50ZXJzZWN0U3RyaW5ncyhbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgbmlsKSkKCWFzc2VydC5FbXB0eShJbnRlcnNlY3RTdHJpbmdzKG5pbCwgW11zdHJpbmd7YGFgLCBgY2AsIGBlYH0pKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BhYCwgYGNgfSwgSW50ZXJzZWN0U3RyaW5ncyhbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgW11zdHJpbmd7YGFgLCBgY2AsIGBlYH0pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestLast",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestLast(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgaW50ZXJmYWNle30KCWFzc2VydC5OaWwoTGFzdChuaWwpKQoJYXNzZXJ0Lk5pbChMYXN0KGlucHV0KSkKCWlucHV0ID0gW11pbnR7fQoJYXNzZXJ0Lk5pbChMYXN0KGlucHV0KSkKCWlucHV0ID0gW11pbnR7MSwgMywgNX0KCWFzc2VydC5FcXVhbCg1LCBMYXN0KGlucHV0KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestLen",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestLen(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgaW50ZXJmYWNle30KCWFzc2VydC5aZXJvKExlbihuaWwpKQoJYXNzZXJ0Llplcm8oTGVuKGlucHV0KSkKCWlucHV0ID0gW11pbnR7MSwgMywgNX0KCWFzc2VydC5FcXVhbCgzLCBMZW4oaW5wdXQpKQoJYXNzZXJ0LkVxdWFsKDMsIExlbihgMTIzYCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMap",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMap(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXsxMCwgMjAsIDMwfSwgTWFwKFtdaW50ezEsIDIsIDN9LCBmdW5jKF8gaW50LCB2IGludGVyZmFjZXt9KSBpbnRlcmZhY2V7fSB7CgkJcmV0dXJuIHYuKGludCkgKiAxMAoJfSkpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXt0cnVlLCBmYWxzZSwgdHJ1ZX0sIE1hcChbXWJvb2x7ZmFsc2UsIHRydWUsIGZhbHNlfSwgZnVuYyhfIGludCwgdiBpbnRlcmZhY2V7fSkgaW50ZXJmYWNle30gewoJCXJldHVybiAhdi4oYm9vbCkKCX0pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMapString",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMapString(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YDEtMXRob3VzYW5kYCwgYDItMXRob3VzYW5kYCwgYDMtMXRob3VzYW5kYH0sIE1hcFN0cmluZyhbXWludHsxLCAyLCAzfSwgZnVuYyhfIGludCwgdiBzdHJpbmcpIHN0cmluZyB7CgkJcmV0dXJuIHYgKyBgLTF0aG91c2FuZGAKCX0pKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BmaXJzdGAsIGB0aGlyZGAsIGBmaWZ0aGB9LCBDb21wYWN0U3RyaW5nKE1hcFN0cmluZyhbXXN0cmluZ3tgZmlyc3RgLCBgc2Vjb25kYCwgYHRoaXJkYCwgYGZvdXJ0aGAsIGBmaWZ0aGB9LCBmdW5jKF8gaW50LCB2IHN0cmluZykgc3RyaW5nIHsKCQlzd2l0Y2ggdiB7CgkJY2FzZSBgc2Vjb25kYCwgYGZvdXJ0aGA6CgkJCXJldHVybiBgYAoJCWRlZmF1bHQ6CgkJCXJldHVybiB2CgkJfQoJfSkpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestOr",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestOr(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKE9yKCkpCglhc3NlcnQuTmlsKE9yKG5pbCkpCglhc3NlcnQuRXF1YWwoMSwgT3IoMCwgMSwgMCwgMiwgMCwgMywgNCwgNSwgNikpCglhc3NlcnQuRXF1YWwodHJ1ZSwgT3IoZmFsc2UsIGZhbHNlLCB0cnVlKSkKCWFzc2VydC5FcXVhbChgb25lYCwgT3IoYG9uZWApKQoJYXNzZXJ0LkVxdWFsKDQuMCwgT3IobmlsLCBgYCwgZmFsc2UsIDAsIDQuMCkpCglhc3NlcnQuTmlsKE9yKGZhbHNlLCBmYWxzZSwgZmFsc2UpKQoJYXNzZXJ0Lk5pbChPcigwLCAwLCAwKSkKCWFzc2VydC5FcXVhbChgdGhyZWVgLCBPcihgYCwgYGAsIGB0aHJlZWApKQoJdHlwZSB0ZXN0U3RydWN0IHN0cnVjdHsgbmFtZSBzdHJpbmcgfQoJYXNzZXJ0LkVxdWFsKHRlc3RTdHJ1Y3R7YHRocmVlYH0sIE9yKHRlc3RTdHJ1Y3R7fSwgdGVzdFN0cnVjdHt9LCB0ZXN0U3RydWN0e2B0aHJlZWB9KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestOrString",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestOrString(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGAsIE9yU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYGAsIE9yU3RyaW5nKGBgKSkKCWFzc2VydC5FcXVhbChgb25lYCwgT3JTdHJpbmcoYG9uZWApKQoJYXNzZXJ0LkVxdWFsKGB0d29gLCBPclN0cmluZyhgYCwgYHR3b2AsIGBgLCBgdGhyZWVgKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRest",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRest(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgaW50ZXJmYWNle30KCWFzc2VydC5OaWwoUmVzdChuaWwpKQoJYXNzZXJ0Lk5pbChSZXN0KGlucHV0KSkKCWlucHV0ID0gW11pbnR7MX0KCWFzc2VydC5OaWwoUmVzdChpbnB1dCkpCglpbnB1dCA9IFtdaW50ezEsIDMsIDV9Cglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXszLCA1fSwgUmVzdChpbnB1dCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestSlice",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestSlice(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglpbiA6PSBbXWludGVyZmFjZXt9ezEsIDIsIDMsIDQsIDV9Cglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXt9LCBTbGljZShpbiwgOTksIC0xKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9ezF9LCBTbGljZShpbiwgMCwgMSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXsxLCAyfSwgU2xpY2UoaW4sIDAsIDIpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdaW50ZXJmYWNle317MSwgMiwgMywgNH0sIFNsaWNlKGluLCAwLCA0KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9ezMsIDR9LCBTbGljZShpbiwgMiwgNCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXszLCA0fSwgU2xpY2UoaW4sIDIsIDQpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdaW50ZXJmYWNle317NCwgNX0sIFNsaWNlKGluLCAtMiwgLTEpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdaW50ZXJmYWNle317MSwgMiwgMywgNCwgNX0sIFNsaWNlKGluLCAtNSwgLTEpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdaW50ZXJmYWNle317MiwgMywgNH0sIFNsaWNlKGluLCAtNCwgLTIpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdaW50ZXJmYWNle317fSwgU2xpY2UoaW4sIC02LCAtNikpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXsxfSwgU2xpY2UoaW4sIC01LCAtNSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXsyfSwgU2xpY2UoaW4sIC00LCAtNCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXszfSwgU2xpY2UoaW4sIC0zLCAtMykpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXs0fSwgU2xpY2UoaW4sIC0yLCAtMikpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXs1fSwgU2xpY2UoaW4sIC0xLCAtMSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXsxfSwgU2xpY2UoaW4sIDAsIDEpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdaW50ZXJmYWNle317Mn0sIFNsaWNlKGluLCAxLCAyKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9ezN9LCBTbGljZShpbiwgMiwgMykpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXs0fSwgU2xpY2UoaW4sIDMsIDQpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdaW50ZXJmYWNle317NX0sIFNsaWNlKGluLCA0LCA1KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9e30sIFNsaWNlKGluLCA1LCA2KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9ezEsIDIsIDMsIDQsIDV9LCBTbGljZShpbiwgLTEwMCwgLTEpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdaW50ZXJmYWNle317MSwgMiwgMywgNH0sIFNsaWNlKGluLCAtMTAwLCAtMikpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXsxLCAyLCAzfSwgU2xpY2UoaW4sIC0xMDAsIC0zKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9ezEsIDJ9LCBTbGljZShpbiwgLTEwMCwgLTQpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdaW50ZXJmYWNle317MX0sIFNsaWNlKGluLCAtMTAwLCAtNSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXt9LCBTbGljZShpbiwgLTEwMCwgLTYpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdaW50ZXJmYWNle317MiwgMywgNCwgNX0sIFNsaWNlKGluLCAxLCAtMSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXsyLCAzLCA0fSwgU2xpY2UoaW4sIDEsIC0yKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9ezIsIDN9LCBTbGljZShpbiwgMSwgLTMpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdaW50ZXJmYWNle317Mn0sIFNsaWNlKGluLCAxLCAtNCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXt9LCBTbGljZShpbiwgMSwgLTUpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdaW50ZXJmYWNle317fSwgU2xpY2UoaW4sIDEsIC02KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestStringify",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestStringify(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKFN0cmluZ2lmeShuaWwpKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2AwYCwgYDFgLCBgMmB9LCBTdHJpbmdpZnkoW11pbnRlcmZhY2V7fXswLCAxLCAyfSkpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YDAuNWAsIGAwLjU1YCwgYDAuNTU1YCwgYDAuNTU1MDAxYH0sIFN0cmluZ2lmeShbXWludGVyZmFjZXt9ezAuNSwgMC41NSwgMC41NTUwMCwgMC41NTUwMDF9KSkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgdHJ1ZWAsIGB0cnVlYCwgYGZhbHNlYH0sIFN0cmluZ2lmeShbXWludGVyZmFjZXt9e3RydWUsIHRydWUsIGZhbHNlfSkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestTrimSpace",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestTrimSpace(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKFRyaW1TcGFjZShuaWwpKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BhYWFgLCBgYmJiYCwgYGNjY2B9LCBUcmltU3BhY2UoW11zdHJpbmd7YGFhYWAsIGAgICBiYmIgYCwgYCBjY2MgICAgYH0pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestUnique",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestUnique(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXtgb25lYCwgYHR3b2AsIGB0aHJlZWB9LCBVbmlxdWUoW11zdHJpbmd7YG9uZWAsIGBvbmVgLCBgdHdvYCwgYHRocmVlYH0pKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317MSwgMiwgM30sIFVuaXF1ZShbXWludHsxLCAyLCAyLCAzfSkpCglhc3NlcnQuTm90RXF1YWwoW11pbnRlcmZhY2V7fXsxLCAyLCAzfSwgVW5pcXVlKFtdaW50NjR7MSwgMiwgMiwgM30pKQp9",
            "IsPackageLevel": true
        }
    ],
    "Types": {
        "CompareFunc": {
            "Name": "CompareFunc",
            "Source": "dHlwZSBDb21wYXJlRnVuYyBmdW5jKGkgaW50LCBmaXJzdCBpbnRlcmZhY2V7fSwgc2Vjb25kIGludGVyZmFjZXt9KSBib29sIC8vIHt9Cg=="
        },
        "IterationFunc": {
            "Name": "IterationFunc",
            "Source": "dHlwZSBJdGVyYXRpb25GdW5jID0gdXRpbHMuSXRlcmF0aW9uRnVuYw=="
        },
        "MapFunc": {
            "Name": "MapFunc",
            "Source": "dHlwZSBNYXBGdW5jIGZ1bmMoaSBpbnQsIHZhbHVlIGludGVyZmFjZXt9KSBpbnRlcmZhY2V7fQ=="
        },
        "MapStringFunc": {
            "Name": "MapStringFunc",
            "Source": "dHlwZSBNYXBTdHJpbmdGdW5jIGZ1bmMoaSBpbnQsIHZhbHVlIHN0cmluZykgc3RyaW5n"
        }
    }
}
