{
    "Name": "sliceutil",
    "CanonicalImportPath": "github.com/ghetzel/go-stockutil/sliceutil",
    "ImportPath": "sliceutil",
    "ParentPackage": "stockutil",
    "URL": "https://github.com/ghetzel/go-stockutil",
    "Synopsis": "Utilities for converting, manipulating, and iterating over slices\n",
    "MainFunction": false,
    "CommentWordCount": 764,
    "LineCount": 1063,
    "SourceLineCount": 794,
    "FunctionCount": 34,
    "TypeCount": 4,
    "ConstantCount": 0,
    "VariableCount": 3,
    "Statistics": {
        "Mean": 0.9,
        "StdDev": 0.2751,
        "GeometricMean": 0,
        "HarmonicMean": 0,
        "Median": 1,
        "Minimum": 0,
        "Maximum": 1
    },
    "Files": [
        {
            "Name": "sliceutil.go",
            "Imports": [
                {
                    "PackageName": "reflect",
                    "Alias": "reflect"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/utils",
                    "Alias": "utils"
                },
                {
                    "PackageName": "github.com/juliangruber/go-intersect",
                    "Alias": "go-intersect"
                }
            ],
            "Size": 11552,
            "LineCount": 507,
            "SourceLineCount": 346,
            "FunctionCount": 34,
            "TypeCount": 4,
            "ConstantCount": 0,
            "VariableCount": 3
        },
        {
            "Name": "sliceutil_test.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/alecthomas/assert",
                    "Alias": "assert"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 14013,
            "LineCount": 556,
            "SourceLineCount": 448,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        }
    ],
    "Variables": [
        {
            "Name": "RelaxedEqualityCompare"
        },
        {
            "Name": "Stop",
            "Expression": "utils.Stop"
        },
        {
            "Name": "StrictEqualityCompare"
        }
    ],
    "Functions": [
        {
            "Name": "Append",
            "Comment": "Returns a copy of the given slicified value with the given additional values appended.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                },
                {
                    "Name": "values",
                    "Type": "...any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Append(in any, values ...any) []any",
            "Source": "ewoJcmV0dXJuIGFwcGVuZChTbGljZWlmeShpbiksIHZhbHVlcy4uLikKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "At",
            "Comment": "Returns the element in the given indexable value at the given index.  If the\nindex is present, the second return value will be true.  If the index is not\npresent, or the given input is not indexable, the second return value will be\nfalse.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                },
                {
                    "Name": "index",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "any"
                },
                {
                    "Type": "bool"
                }
            ],
            "Signature": "At(in any, index int) (any, bool)",
            "Source": "ewoJaW4gPSB0eXBldXRpbC5SZXNvbHZlVmFsdWUoaW4pCglpZiB0eXBldXRpbC5Jc0tpbmQoaW4sIHJlZmxlY3QuQXJyYXksIHJlZmxlY3QuU2xpY2UsIHJlZmxlY3QuU3RyaW5nKSB7CgkJdmFyIGluViA9IHJlZmxlY3QuVmFsdWVPZihpbikKCQlpZiBpbmRleCA8IGluVi5MZW4oKSB7CgkJCXJldHVybiBpblYuSW5kZXgoaW5kZXgpLkludGVyZmFjZSgpLCB0cnVlCgkJfQoJfQoJcmV0dXJuIG5pbCwgZmFsc2UKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Autotype",
            "Comment": "Returns a copy of the given slice with each element's value passed to stringutil.Autotype",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Autotype(in any) []any",
            "Source": "ewoJdmFyIG91dCBbXWFueQoJRWFjaChpbiwgZnVuYyhpIGludCwgdiBhbnkpIGVycm9yIHsKCQlvdXQgPSBhcHBlbmQob3V0LCBzdHJpbmd1dGlsLkF1dG90eXBlKHYpKQoJCXJldHVybiBuaWwKCX0pCglyZXR1cm4gb3V0Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Chunks",
            "Comment": "Divide the given slice into chunks of (at most) a given length",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                },
                {
                    "Name": "size",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "[][]any"
                }
            ],
            "Signature": "Chunks(in any, size int) [][]any",
            "Source": "ewoJaWYgIXR5cGV1dGlsLklzQXJyYXkoaW4pIHsKCQlyZXR1cm4gbmlsCgl9Cgl2YXIgb3V0cHV0ID0gbWFrZShbXVtdYW55LCAwKQoJdmFyIGN1cnJlbnQgPSBtYWtlKFtdYW55LCAwKQoJRWFjaChpbiwgZnVuYyhpIGludCwgdiBhbnkpIGVycm9yIHsKCQlpZiBpID4gMCAmJiBpJXNpemUgPT0gMCB7CgkJCW91dHB1dCA9IGFwcGVuZChvdXRwdXQsIGN1cnJlbnQpCgkJCWN1cnJlbnQgPSBuaWwKCQl9CgkJY3VycmVudCA9IGFwcGVuZChjdXJyZW50LCB2KQoJCXJldHVybiBuaWwKCX0pCglpZiBsZW4oY3VycmVudCkgPiAwIHsKCQlvdXRwdXQgPSBhcHBlbmQob3V0cHV0LCBjdXJyZW50KQoJfQoJcmV0dXJuIG91dHB1dAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Compact",
            "Comment": "Removes all elements from the given interface slice that are \"empty\", which is\ndefined as being nil, a nil or zero-length array, chan, map, slice, or string.\n\nThe zero values of any other type are not considered empty and will remain in\nthe return value.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Compact(in any) []any",
            "Source": "ewoJaWYgaW4gPT0gbmlsIHsKCQlyZXR1cm4gbmlsCgl9Cgl2YXIgcnYgPSBtYWtlKFtdYW55LCAwKQoJZm9yIF8sIHYgOj0gcmFuZ2UgU2xpY2VpZnkoaW4pIHsKCQlpZiB2ICE9IG5pbCB7CgkJCXZhciB2ViA9IHJlZmxlY3QuVmFsdWVPZih2KQoJCQlzd2l0Y2ggdlYuS2luZCgpIHsKCQkJY2FzZSByZWZsZWN0LkFycmF5LCByZWZsZWN0LkNoYW4sIHJlZmxlY3QuTWFwLCByZWZsZWN0LlNsaWNlLCByZWZsZWN0LlN0cmluZzoKCQkJCWlmIHZWLkxlbigpID4gMCB7CgkJCQkJcnYgPSBhcHBlbmQocnYsIHYpCgkJCQl9CgkJCWRlZmF1bHQ6CgkJCQlydiA9IGFwcGVuZChydiwgdikKCQkJfQoJCX0KCX0KCXJldHVybiBydgp9",
            "IsPackageLevel": true
        },
        {
            "Name": "CompactString",
            "Comment": "Removes all zero-length strings from the given string slice, returning a new\nslice with the values removed.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "[]string"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "CompactString(in []string) []string",
            "Source": "ewoJaWYgaW4gPT0gbmlsIHsKCQlyZXR1cm4gbmlsCgl9Cgl2YXIgcnYgPSBtYWtlKFtdc3RyaW5nLCAwKQoJZm9yIF8sIHYgOj0gcmFuZ2UgaW4gewoJCWlmIHYgIT0gYGAgewoJCQlydiA9IGFwcGVuZChydiwgdikKCQl9Cgl9CglyZXR1cm4gcnYKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Contains",
            "Comment": "Return whether the given slice contains the given value.  If a comparator is provided, it will\nbe used to compare the elements.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                },
                {
                    "Name": "value",
                    "Type": "any"
                },
                {
                    "Name": "comparators",
                    "Type": "...CompareFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "Contains(in any, value any, comparators ...CompareFunc) bool",
            "Source": "ewoJaWYgbGVuKGNvbXBhcmF0b3JzKSA9PSAwIHsKCQljb21wYXJhdG9ycyA9IFtdQ29tcGFyZUZ1bmN7U3RyaWN0RXF1YWxpdHlDb21wYXJlfQoJfQoJdmFyIGNvbXBhcmF0b3IgPSBjb21wYXJhdG9yc1swXQoJaWYgaW5WIDo9IHJlZmxlY3QuVmFsdWVPZihpbik7IGluVi5Jc1ZhbGlkKCkgewoJCWZvciBpIDo9IDA7IGkgPCBpblYuTGVuKCk7IGkrKyB7CgkJCWlmIGN1cnJlbnQgOj0gaW5WLkluZGV4KGkpOyBjdXJyZW50LklzVmFsaWQoKSB7CgkJCQlpZiBjb21wYXJhdG9yKGksIHZhbHVlLCBjdXJyZW50LkludGVyZmFjZSgpKSB7CgkJCQkJcmV0dXJuIHRydWUKCQkJCX0KCQkJfQoJCX0KCX0KCXJldHVybiBmYWxzZQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ContainsAllStrings",
            "Comment": "Returns whether the given string slice contains all of the following strings.",
            "Arguments": [
                {
                    "Name": "list",
                    "Type": "[]string"
                },
                {
                    "Name": "elems",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "ContainsAllStrings(list []string, elems ...string) bool",
            "Source": "ewoJZm9yIF8sIGUgOj0gcmFuZ2UgZWxlbXMgewoJCWlmICFDb250YWluc1N0cmluZyhsaXN0LCBlKSB7CgkJCXJldHVybiBmYWxzZQoJCX0KCX0KCXJldHVybiB0cnVlCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ContainsAnyString",
            "Comment": "Returns whether the given string slice contains any of the following strings.",
            "Arguments": [
                {
                    "Name": "list",
                    "Type": "[]string"
                },
                {
                    "Name": "elems",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "ContainsAnyString(list []string, elems ...string) bool",
            "Source": "ewoJZm9yIF8sIGUgOj0gcmFuZ2UgZWxlbXMgewoJCWlmIENvbnRhaW5zU3RyaW5nKGxpc3QsIGUpIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "ContainsString",
            "Comment": "Returns whether the given string slice contains a given string.",
            "Arguments": [
                {
                    "Name": "list",
                    "Type": "[]string"
                },
                {
                    "Name": "elem",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "ContainsString(list []string, elem string) bool",
            "Source": "ewoJZm9yIF8sIHQgOj0gcmFuZ2UgbGlzdCB7CgkJaWYgdCA9PSBlbGVtIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Difference",
            "Comment": "Return the slice that results from removing elements in second from the first.",
            "Arguments": [
                {
                    "Name": "first",
                    "Type": "any"
                },
                {
                    "Name": "second",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Difference(first any, second any) []any",
            "Source": "ewoJdmFyIGRpZmYgPSBtYWtlKG1hcFthbnldYm9vbCkKCXZhciBvdXQgPSBtYWtlKFtdYW55LCAwKQoJdmFyIGFTID0gU2xpY2VpZnkoZmlyc3QpCgl2YXIgYlMgPSBTbGljZWlmeShzZWNvbmQpCglpZiBsZW4oYVMpID09IDAgewoJCXJldHVybiBvdXQKCX0gZWxzZSBpZiBsZW4oYlMpID09IDAgewoJCXJldHVybiBhUwoJfQoJZm9yIF8sIGl0ZW0gOj0gcmFuZ2UgYlMgewoJCWRpZmZbaXRlbV0gPSB0cnVlCgl9Cglmb3IgXywgaXRlbSA6PSByYW5nZSBhUyB7CgkJaWYgXywgb2sgOj0gZGlmZltpdGVtXTsgIW9rIHsKCQkJb3V0ID0gYXBwZW5kKG91dCwgaXRlbSkKCQl9Cgl9CglyZXR1cm4gb3V0Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Each",
            "Comment": "Iterate through each element of the given array or slice, calling\niterFn exactly once for each element.  Otherwise, call iterFn one time\nwith the given input as the argument.",
            "Arguments": [
                {
                    "Name": "slice",
                    "Type": "any"
                },
                {
                    "Name": "iterFn",
                    "Type": "IterationFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "Each(slice any, iterFn IterationFunc) error",
            "Source": "ewoJcmV0dXJuIHV0aWxzLlNsaWNlRWFjaChzbGljZSwgaXRlckZuKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "First",
            "Comment": "Returns the first element from the given slice, array or string; or nil.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "any"
                }
            ],
            "Signature": "First(in any) any",
            "Source": "ewoJcmV0dXJuIEdldChpbiwgMCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "FirstNonZero",
            "Comment": "Returns the first element in the given inputs that is not that type's zero value.  All input values\nare flattened into a single array, so variadic elements can contain scalar or array values.",
            "Arguments": [
                {
                    "Name": "inputs",
                    "Type": "...any"
                }
            ],
            "Returns": [
                {
                    "Type": "any"
                }
            ],
            "Signature": "FirstNonZero(inputs ...any) any",
            "Source": "ewoJZm9yIF8sIHYgOj0gcmFuZ2UgRmxhdHRlbihpbnB1dHMpIHsKCQlpZiAhdHlwZXV0aWwuSXNaZXJvKHYpIHsKCQkJcmV0dXJuIHYKCQl9Cgl9CglyZXR1cm4gbmlsCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Flatten",
            "Comment": "Returns the given slice as a single-level flattened array.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Flatten(in any) []any",
            "Source": "ewoJdmFyIG91dCA9IG1ha2UoW11hbnksIDApCglFYWNoKGluLCBmdW5jKF8gaW50LCB2YWx1ZSBhbnkpIGVycm9yIHsKCQlpZiB0eXBldXRpbC5Jc0FycmF5KHZhbHVlKSB7CgkJCW91dCA9IGFwcGVuZChvdXQsIEZsYXR0ZW4odmFsdWUpLi4uKQoJCX0gZWxzZSB7CgkJCW91dCA9IGFwcGVuZChvdXQsIHZhbHVlKQoJCX0KCQlyZXR1cm4gbmlsCgl9KQoJcmV0dXJuIG91dAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Get",
            "Comment": "Returns the nth element from the given slice, array or string; or nil.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                },
                {
                    "Name": "index",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "any"
                }
            ],
            "Signature": "Get(in any, index int) any",
            "Source": "ewoJaWYgdiwgb2sgOj0gQXQoaW4sIGluZGV4KTsgb2sgewoJCXJldHVybiB2Cgl9IGVsc2UgewoJCXJldHVybiBuaWwKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Intersect",
            "Comment": "Return the intersection of two slices.",
            "Arguments": [
                {
                    "Name": "a",
                    "Type": "any"
                },
                {
                    "Name": "b",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Intersect(a any, b any) []any",
            "Source": "ewoJcmV0dXJuIFNsaWNlaWZ5KGludGVyc2VjdC5TaW1wbGUoYSwgYikpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "IntersectStrings",
            "Comment": "Return the intersection of two string slices.",
            "Arguments": [
                {
                    "Name": "a",
                    "Type": "[]string"
                },
                {
                    "Name": "b",
                    "Type": "[]string"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "IntersectStrings(a []string, b []string) []string",
            "Source": "ewoJaWYgbGVuKGEpID09IDAgfHwgbGVuKGIpID09IDAgewoJCXJldHVybiBtYWtlKFtdc3RyaW5nLCAwKQoJfQoJcmV0dXJuIFN0cmluZ2lmeShpbnRlcnNlY3QuU2ltcGxlKGEsIGIpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Last",
            "Comment": "Returns the last element from the given slice, array or string; or nil.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "any"
                }
            ],
            "Signature": "Last(in any) any",
            "Source": "ewoJaWYgTGVuKGluKSA9PSAwIHsKCQlyZXR1cm4gbmlsCgl9CglyZXR1cm4gR2V0KGluLCBMZW4oaW4pLTEpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Len",
            "Comment": "Returns the length of the given slice, array, or string.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "int"
                }
            ],
            "Signature": "Len(in any) int",
            "Source": "ewoJaW4gPSB0eXBldXRpbC5SZXNvbHZlVmFsdWUoaW4pCglpZiB0eXBldXRpbC5Jc0tpbmQoaW4sIHJlZmxlY3QuQXJyYXksIHJlZmxlY3QuU2xpY2UsIHJlZmxlY3QuU3RyaW5nKSB7CgkJdmFyIGluViA9IHJlZmxlY3QuVmFsdWVPZihpbikKCQlyZXR1cm4gaW5WLkxlbigpCgl9CglyZXR1cm4gMAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Map",
            "Comment": "Returns a copy of the given slice with each element modified by the a given function.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                },
                {
                    "Name": "fn",
                    "Type": "MapFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Map(in any, fn MapFunc) []any",
            "Source": "ewoJdmFyIG91dCBbXWFueQoJRWFjaChpbiwgZnVuYyhpIGludCwgdiBhbnkpIGVycm9yIHsKCQlvdXQgPSBhcHBlbmQob3V0LCBmbihpLCB2KSkKCQlyZXR1cm4gbmlsCgl9KQoJcmV0dXJuIG91dAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "MapString",
            "Comment": "Returns a copy of the given slice with each element modified by the a given function, then\nconverted to a string.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                },
                {
                    "Name": "fn",
                    "Type": "MapStringFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "MapString(in any, fn MapStringFunc) []string",
            "Source": "ewoJdmFyIG91dCA9IFN0cmluZ2lmeShpbikKCWZvciBpLCBlbCA6PSByYW5nZSBvdXQgewoJCW91dFtpXSA9IGZuKGksIGVsKQoJfQoJcmV0dXJuIG91dAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Or",
            "Comment": "Returns the first item that is not the zero value for that value's type.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "...any"
                }
            ],
            "Returns": [
                {
                    "Type": "any"
                }
            ],
            "Signature": "Or(in ...any) any",
            "Source": "ewoJZm9yIF8sIHYgOj0gcmFuZ2UgQ29tcGFjdChpbikgewoJCWlmIHYgIT0gcmVmbGVjdC5aZXJvKHJlZmxlY3QuVHlwZU9mKHYpKS5JbnRlcmZhY2UoKSB7CgkJCXJldHVybiB2CgkJfQoJfQoJcmV0dXJuIG5pbAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "OrString",
            "Comment": "Returns the first item that is not a zero-length string.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "OrString(in ...string) string",
            "Source": "ewoJaWYgdiA6PSBDb21wYWN0U3RyaW5nKGluKTsgbGVuKHYpID4gMCB7CgkJcmV0dXJuIHZbMF0KCX0gZWxzZSB7CgkJcmV0dXJuIGBgCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Rest",
            "Comment": "Returns the all but the first element from the given slice, array or string; or nil.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Rest(in any) []any",
            "Source": "ewoJaWYgdHlwZXV0aWwuSXNLaW5kKGluLCByZWZsZWN0LkFycmF5LCByZWZsZWN0LlNsaWNlLCByZWZsZWN0LlN0cmluZykgewoJCXZhciBpblYgPSByZWZsZWN0LlZhbHVlT2YoaW4pCgkJdmFyIGwgPSBpblYuTGVuKCkKCQlzd2l0Y2ggbCB7CgkJY2FzZSAwLCAxOgoJCQlyZXR1cm4gbmlsCgkJZGVmYXVsdDoKCQkJdmFyIG91dCA9IG1ha2UoW11hbnksIGwtMSkKCQkJZm9yIGkgOj0gMTsgaSA8IGw7IGkrKyB7CgkJCQl2YXIgZWxlbVYgPSBpblYuSW5kZXgoaSkKCQkJCWlmIGVsZW1WLkNhbkludGVyZmFjZSgpIHsKCQkJCQlvdXRbaS0xXSA9IGVsZW1WLkludGVyZmFjZSgpCgkJCQl9CgkJCX0KCQkJcmV0dXJuIG91dAoJCX0KCX0KCXJldHVybiBuaWwKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Slice",
            "Comment": "Returns a new slice with only the specified subset of items included.  In addition to the\nnormal slice index rules in Golang, negative indices are also supported.  If a negative index is\ngiven for the from and/or to values, the index will be treated as being relative to the end of the\ngiven slice. For example:\n\n\tSlice([]any{1,2,3,4,5}, -5, -1)  // returns []any{1, 2, 3, 4, 5}\n\tSlice([]any{1,2,3,4,5}, -2, -1)  // returns []any{4, 5}\n\tSlice([]any{1,2,3,4,5}, -1, -1)  // returns []any{5}\n\tSlice([]any{1,2,3,4,5}, -4, -2)  // returns []any{2, 3, 4}",
            "Arguments": [
                {
                    "Name": "slice",
                    "Type": "any"
                },
                {
                    "Name": "from",
                    "Type": "int"
                },
                {
                    "Name": "to",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Slice(slice any, from int, to int) []any",
            "Source": "ewoJdmFyIHNsaWNlUyA9IFNsaWNlaWZ5KHNsaWNlKQoJaWYgZnJvbSA8IDAgewoJCWZyb20gPSBsZW4oc2xpY2VTKSArIGZyb20KCX0KCWlmIGZyb20gPiBsZW4oc2xpY2VTKSB7CgkJcmV0dXJuIG1ha2UoW11hbnksIDApCgl9IGVsc2UgaWYgZnJvbSA8IDAgewoJCWZyb20gPSAwCgl9CglpZiB0byA+IGxlbihzbGljZVMpIHsKCQl0byA9IGxlbihzbGljZVMpCgl9IGVsc2UgaWYgdG8gPCAwIHsKCQl0byA9IGxlbihzbGljZVMpICsgdG8gKyAxCgl9CglpZiAoZnJvbSA+PSAwICYmIGZyb20gPCBsZW4oc2xpY2VTKSkgJiYgKHRvID49IGZyb20gJiYgdG8gPD0gbGVuKHNsaWNlUykpIHsKCQlyZXR1cm4gc2xpY2VTW2Zyb206dG9dCgl9IGVsc2UgewoJCXJldHVybiBtYWtlKFtdYW55LCAwKQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Sliceify",
            "Comment": "Takes some input value and returns it as a slice.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Sliceify(in any) []any",
            "Source": "ewoJcmV0dXJuIHV0aWxzLlNsaWNlaWZ5KGluKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "SplitCompact",
            "Comment": "Splits the given string by a delimiter, then eliminates any zero-length items.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "string"
                },
                {
                    "Name": "delimiter",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Name": "out",
                    "Type": "[]string"
                }
            ],
            "Signature": "SplitCompact(in string, delimiter string) out []string",
            "Source": "ewoJb3V0ID0gc3RyaW5ncy5TcGxpdChpbiwgZGVsaW1pdGVyKQoJb3V0ID0gQ29tcGFjdFN0cmluZyhvdXQpCglyZXR1cm4KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "SplitTrimSpaceCompact",
            "Comment": "Splits the given string by a delimiter, trims the space around each item,\nthen eliminates any zero-length results.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "string"
                },
                {
                    "Name": "delimiter",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Name": "out",
                    "Type": "[]string"
                }
            ],
            "Signature": "SplitTrimSpaceCompact(in string, delimiter string) out []string",
            "Source": "ewoJb3V0ID0gc3RyaW5ncy5TcGxpdChpbiwgZGVsaW1pdGVyKQoJZm9yIGksIHYgOj0gcmFuZ2Ugb3V0IHsKCQlvdXRbaV0gPSBzdHJpbmdzLlRyaW1TcGFjZSh2KQoJfQoJb3V0ID0gQ29tcGFjdFN0cmluZyhvdXQpCglyZXR1cm4KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "StringSlice",
            "Comment": "Same as slice, but returns strings.",
            "Arguments": [
                {
                    "Name": "slice",
                    "Type": "any"
                },
                {
                    "Name": "from",
                    "Type": "int"
                },
                {
                    "Name": "to",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "StringSlice(slice any, from int, to int) []string",
            "Source": "ewoJcmV0dXJuIFN0cmluZ2lmeShTbGljZShzbGljZSwgZnJvbSwgdG8pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Stringify",
            "Comment": "Converts all elements of the given interface slice to strings using the \"%v\"\nformat string via the fmt package.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "Stringify(in any) []string",
            "Source": "ewoJaWYgYXJyIDo9IFNsaWNlaWZ5KGluKTsgbGVuKGFycikgPiAwIHsKCQl2YXIgb3V0ID0gbWFrZShbXXN0cmluZywgbGVuKGFycikpCgkJZm9yIGksIGl0ZW0gOj0gcmFuZ2UgYXJyIHsKCQkJb3V0W2ldID0gdHlwZXV0aWwuU3RyaW5nKGl0ZW0pCgkJfQoJCXJldHVybiBvdXQKCX0gZWxzZSB7CgkJcmV0dXJuIG5pbAoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TrimSpace",
            "Comment": "Trims the whitespace from each element in the given array.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "TrimSpace(in any) []string",
            "Source": "ewoJcmV0dXJuIE1hcFN0cmluZyhpbiwgZnVuYyhfIGludCwgZWwgc3RyaW5nKSBzdHJpbmcgewoJCXJldHVybiBzdHJpbmdzLlRyaW1TcGFjZShlbCkKCX0pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Unique",
            "Comment": "Returns a new slice with only unique elements from the given interface included.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Unique(in any) []any",
            "Source": "ewoJcmV0dXJuIHVuaXF1ZShpbiwgU3RyaWN0RXF1YWxpdHlDb21wYXJlKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "UniqueStrings",
            "Comment": "Returns a new slice with only unique string elements from the given interface included.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "UniqueStrings(in any) []string",
            "Source": "ewoJcmV0dXJuIFN0cmluZ2lmeShVbmlxdWUoaW4pKQp9",
            "IsPackageLevel": true
        }
    ],
    "Tests": [
        {
            "Name": "TestAt",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestAt(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55Cgl2YXIgb3V0IGFueQoJdmFyIG9rIGJvb2wKCWlucHV0ID0gW11pbnR7MSwgMywgNX0KCW91dCwgb2sgPSBBdChpbnB1dCwgMCkKCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKDEsIG91dCkKCW91dCwgb2sgPSBBdChpbnB1dCwgMSkKCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKDMsIG91dCkKCW91dCwgb2sgPSBBdChpbnB1dCwgMikKCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKDUsIG91dCkKCW91dCwgb2sgPSBBdChpbnB1dCwgOTk5OTkpCglhc3NlcnQuRmFsc2Uob2spCglhc3NlcnQuTmlsKG91dCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestChunks",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestChunks(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBbXWludHsxLCAzLCA1LCA3LCA5LCAxMSwgMTMsIDE1LCAxNywgMTksIDIxLCAyM30KCWFzc2VydC5FcXVhbChbXVtdYW55e1tdYW55ezF9LCBbXWFueXszfSwgW11hbnl7NX0sIFtdYW55ezd9LCBbXWFueXs5fSwgW11hbnl7MTF9LCBbXWFueXsxM30sIFtdYW55ezE1fSwgW11hbnl7MTd9LCBbXWFueXsxOX0sIFtdYW55ezIxfSwgW11hbnl7MjN9fSwgQ2h1bmtzKGlucHV0LCAxKSkKCWFzc2VydC5FcXVhbChbXVtdYW55e1tdYW55ezEsIDN9LCBbXWFueXs1LCA3fSwgW11hbnl7OSwgMTF9LCBbXWFueXsxMywgMTV9LCBbXWFueXsxNywgMTl9LCBbXWFueXsyMSwgMjN9fSwgQ2h1bmtzKGlucHV0LCAyKSkKCWFzc2VydC5FcXVhbChbXVtdYW55e1tdYW55ezEsIDMsIDV9LCBbXWFueXs3LCA5LCAxMX0sIFtdYW55ezEzLCAxNSwgMTd9LCBbXWFueXsxOSwgMjEsIDIzfX0sIENodW5rcyhpbnB1dCwgMykpCglhc3NlcnQuRXF1YWwoW11bXWFueXtbXWFueXsxLCAzLCA1LCA3LCA5LCAxMSwgMTMsIDE1LCAxNywgMTksIDIxLCAyM319LCBDaHVua3MoaW5wdXQsIDEwMDApKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCompact",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCompact(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKENvbXBhY3QobmlsKSkKCWFzc2VydC5FcXVhbChbXWFueXswLCAxLCAyLCAzfSwgQ29tcGFjdChbXWFueXswLCAxLCAyLCAzfSkpCglhc3NlcnQuRXF1YWwoW11hbnl7MSwgMywgNX0sIENvbXBhY3QoW11hbnl7bmlsLCAxLCBuaWwsIDMsIG5pbCwgNX0pKQoJYXNzZXJ0LkVxdWFsKFtdYW55e2BvbmVgLCBgdGhyZWVgLCBgIGAsIGBmaXZlYH0sIENvbXBhY3QoW11hbnl7YG9uZWAsIGBgLCBgdGhyZWVgLCBgYCwgYCBgLCBgZml2ZWB9KSkKCWFzc2VydC5FcXVhbChbXWFueXtbXWludHsxLCAyLCAzfX0sIENvbXBhY3QoW11hbnl7bmlsLCBbXXN0cmluZ3t9LCBbXWludHsxLCAyLCAzfSwgbWFwW3N0cmluZ11ib29se319KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCompactString",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCompactString(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKENvbXBhY3RTdHJpbmcobmlsKSkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgb25lYCwgYHRocmVlYCwgYGZpdmVgfSwgQ29tcGFjdFN0cmluZyhbXXN0cmluZ3tgb25lYCwgYHRocmVlYCwgYGZpdmVgfSkpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YG9uZWAsIGB0aHJlZWAsIGAgYCwgYGZpdmVgfSwgQ29tcGFjdFN0cmluZyhbXXN0cmluZ3tgb25lYCwgYGAsIGB0aHJlZWAsIGBgLCBgIGAsIGBmaXZlYH0pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestContains",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestContains(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55CglpbnB1dCA9IFtdaW50ezEsIDMsIDV9Cglhc3NlcnQuVHJ1ZShDb250YWlucyhpbnB1dCwgMSkpCglhc3NlcnQuVHJ1ZShDb250YWlucyhpbnB1dCwgMykpCglhc3NlcnQuVHJ1ZShDb250YWlucyhpbnB1dCwgNSkpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoaW5wdXQsIC0xKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhpbnB1dCwgMikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoaW5wdXQsIC0zKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhpbnB1dCwgNCkpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoaW5wdXQsIC01KSkKCWFzc2VydC5GYWxzZShDb250YWlucyhbXWludHt9LCAxKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhbXWludHt9LCAyKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhbXWludHt9LCAwKSkKCWlucHV0ID0gW11zdHJpbmd7Im9uZSIsICJ0aHJlZSIsICJmaXZlIn0KCWFzc2VydC5UcnVlKENvbnRhaW5zKGlucHV0LCAib25lIikpCglhc3NlcnQuVHJ1ZShDb250YWlucyhpbnB1dCwgInRocmVlIikpCglhc3NlcnQuVHJ1ZShDb250YWlucyhpbnB1dCwgImZpdmUiKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhpbnB1dCwgIk9uZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKGlucHV0LCAidHdvIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoaW5wdXQsICJUaHJlZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKGlucHV0LCAiZm91ciIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKGlucHV0LCAiRml2ZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zKFtdc3RyaW5ne30sICJvbmUiKSkKCWFzc2VydC5GYWxzZShDb250YWlucyhbXXN0cmluZ3t9LCAidHdvIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnMoW11zdHJpbmd7fSwgIiIpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestContainsAllStrings",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestContainsAllStrings(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBbXXN0cmluZ3sib25lIiwgInRocmVlIiwgImZpdmUifQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0LCAib25lIikpCglhc3NlcnQuVHJ1ZShDb250YWluc0FsbFN0cmluZ3MoaW5wdXQsICJ0aHJlZSIpKQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0LCAiZml2ZSIpKQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0LCAib25lIiwgInRocmVlIikpCglhc3NlcnQuVHJ1ZShDb250YWluc0FsbFN0cmluZ3MoaW5wdXQsICJvbmUiLCAiZml2ZSIpKQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0LCAib25lIiwgInRocmVlIiwgImZpdmUiKSkKCWFzc2VydC5GYWxzZShDb250YWluc0FsbFN0cmluZ3MoaW5wdXQsICJvbmUiLCAiZm91ciIpKQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbGxTdHJpbmdzKGlucHV0KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestContainsAnyString",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestContainsAnyString(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBbXXN0cmluZ3sib25lIiwgInRocmVlIiwgImZpdmUifQoJdmFyIGFueSA9IFtdc3RyaW5neyJvbmUiLCAidHdvIiwgImZvdXIifQoJYXNzZXJ0LlRydWUoQ29udGFpbnNBbnlTdHJpbmcoaW5wdXQsIGFueS4uLikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNBbnlTdHJpbmcoaW5wdXQpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zQW55U3RyaW5nKFtdc3RyaW5ne30sICJvbmUiKSkKCWFzc2VydC5GYWxzZShDb250YWluc0FueVN0cmluZyhbXXN0cmluZ3t9LCAidHdvIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNBbnlTdHJpbmcoW11zdHJpbmd7fSwgIiIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zQW55U3RyaW5nKGlucHV0LCBbXXN0cmluZ3sic2l4IiwgInNldmVuIn0uLi4pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestContainsString",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestContainsString(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBbXXN0cmluZ3sib25lIiwgInRocmVlIiwgImZpdmUifQoJYXNzZXJ0LlRydWUoQ29udGFpbnNTdHJpbmcoaW5wdXQsICJvbmUiKSkKCWFzc2VydC5UcnVlKENvbnRhaW5zU3RyaW5nKGlucHV0LCAidGhyZWUiKSkKCWFzc2VydC5UcnVlKENvbnRhaW5zU3RyaW5nKGlucHV0LCAiZml2ZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zU3RyaW5nKGlucHV0LCAiT25lIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNTdHJpbmcoaW5wdXQsICJ0d28iKSkKCWFzc2VydC5GYWxzZShDb250YWluc1N0cmluZyhpbnB1dCwgIlRocmVlIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNTdHJpbmcoaW5wdXQsICJmb3VyIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNTdHJpbmcoaW5wdXQsICJGaXZlIikpCglhc3NlcnQuRmFsc2UoQ29udGFpbnNTdHJpbmcoW11zdHJpbmd7fSwgIm9uZSIpKQoJYXNzZXJ0LkZhbHNlKENvbnRhaW5zU3RyaW5nKFtdc3RyaW5ne30sICJ0d28iKSkKCWFzc2VydC5GYWxzZShDb250YWluc1N0cmluZyhbXXN0cmluZ3t9LCAiIikpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDifference",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDifference(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRW1wdHkoRGlmZmVyZW5jZShuaWwsIG5pbCkpCglhc3NlcnQuRW1wdHkoRGlmZmVyZW5jZShuaWwsIFtdc3RyaW5ne2BhYCwgYGNgLCBgZWB9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBEaWZmZXJlbmNlKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBuaWwpKQoJYXNzZXJ0LkVsZW1lbnRzTWF0Y2goW11hbnl7YGFgfSwgRGlmZmVyZW5jZShbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgW11zdHJpbmd7YGJgLCBgY2B9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBEaWZmZXJlbmNlKFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBbXXN0cmluZ3tgeGAsIGB5YCwgYHpgfSkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestEach",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestEach(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIHRlc3RTdHJ1Y3Qgc3RydWN0IHsKCQlOYW1lICBzdHJpbmcKCQlIZWxsbyBib29sCgkJdW5leCAgc3RyaW5nCgl9Cglhc3NlcnQuTmlsKEVhY2gobmlsLCBuaWwpKQoJYXNzZXJ0Lk5pbChFYWNoKFtdc3RyaW5ne2BvbmVgLCBgdHdvYCwgYHRocmVlYH0sIGZ1bmMoaSBpbnQsIHYgYW55KSBlcnJvciB7CgkJcmV0dXJuIFN0b3AKCX0pKQoJdmFyIGNvdW50ID0gMAoJYXNzZXJ0Lk5pbChFYWNoKFtdc3RyaW5ne2BvbmVgLCBgdHdvYCwgYHRocmVlYH0sIGZ1bmMoaSBpbnQsIHYgYW55KSBlcnJvciB7CgkJaWYgdi4oc3RyaW5nKSA9PSBgdHdvYCB7CgkJCXJldHVybiBTdG9wCgkJfSBlbHNlIHsKCQkJY291bnQgKz0gMQoJCQlyZXR1cm4gbmlsCgkJfQoJfSkpCgl2YXIgdmFsdWVzID0gW11hbnl7fQoJYXNzZXJ0Lk5pbChFYWNoKG1hcFtzdHJpbmddc3RyaW5ne2BvbmVgOiBgZmlyc3RgLCBgdHdvYDogYHNlY29uZGAsIGB0aHJlZWA6IGB0aGlyZGB9LCBmdW5jKGkgaW50LCB2IGFueSkgZXJyb3IgewoJCXZhbHVlcyA9IGFwcGVuZCh2YWx1ZXMsIHYpCgkJcmV0dXJuIG5pbAoJfSkpCgl2YWx1ZXMgPSBbXWFueXt9Cglhc3NlcnQuTmlsKEVhY2goJnRlc3RTdHJ1Y3R7TmFtZTogYHRlc3RgLCBIZWxsbzogdHJ1ZSwgdW5leDogYHNob3VsZCBub3Qgc2VlIG1lYH0sIGZ1bmMoaSBpbnQsIHYgYW55KSBlcnJvciB7CgkJdmFsdWVzID0gYXBwZW5kKHZhbHVlcywgdikKCQlyZXR1cm4gbmlsCgl9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKFtdYW55e2B0ZXN0YCwgdHJ1ZX0sIHZhbHVlcykKCXZhciB2YWxjaGFuID0gbWFrZShjaGFuIHN0cmluZykKCWdvIGZ1bmMoKSB7CgkJZGVmZXIgY2xvc2UodmFsY2hhbikKCQlmb3IgaSA6PSAwOyBpIDwgMzsgaSsrIHsKCQkJdmFsY2hhbiA8LSBmbXQuU3ByaW50ZigidmFsdWUlZCIsIGkpCgkJfQoJfSgpCgl2YXIgdmFsdWVzUyA9IG1ha2UoWyAvLyB0ZXN0IEVhY2gtaW5nIG92ZXIgYSBjaGFubmVsCgldc3RyaW5nLCAwKQoJYXNzZXJ0Lk5pbChFYWNoKHZhbGNoYW4sIGZ1bmMoaSBpbnQsIHYgYW55KSBlcnJvciB7CgkJdmFsdWVzUyA9IGFwcGVuZCh2YWx1ZXNTLCBmbXQuU3ByaW50ZigiJXYiLCB2KSkKCQlyZXR1cm4gbmlsCgl9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKFtdc3RyaW5ne2B2YWx1ZTBgLCBgdmFsdWUxYCwgYHZhbHVlMmB9LCB2YWx1ZXNTKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFirst",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFirst(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55Cglhc3NlcnQuTmlsKEZpcnN0KG5pbCkpCglhc3NlcnQuTmlsKEZpcnN0KGlucHV0KSkKCWlucHV0ID0gW11pbnR7fQoJYXNzZXJ0Lk5pbChGaXJzdChpbnB1dCkpCglpbnB1dCA9IFtdaW50ezEsIDMsIDV9Cglhc3NlcnQuRXF1YWwoMSwgRmlyc3QoaW5wdXQpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFirstNonZero",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFirstNonZero(t *testing.T)",
            "Source": "ewoJYXNzZXJ0Lk5pbCh0LCBGaXJzdE5vblplcm8oKSkKCWFzc2VydC5FcXVhbCh0LCA0MiwgRmlyc3ROb25aZXJvKDQyKSkKCWFzc2VydC5FcXVhbCh0LCA0MiwgRmlyc3ROb25aZXJvKGBgLCAwLCBmYWxzZSwgNDIsIGZhbHNlLCB0cnVlLCA5NikpCglhc3NlcnQuRXF1YWwodCwgOCwgRmlyc3ROb25aZXJvKFtdaW50ezAsIDAsIDB9LCA4LCBbXWludHs2OX0pKQoJYXNzZXJ0LkVxdWFsKHQsIDg0LCBGaXJzdE5vblplcm8oW11pbnR7MCwgMCwgMH0sIDAsIFtdaW50ezg0fSkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFlatten",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFlatten(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11hbnl7YG9uZWAsIGB0d29gLCBgdGhyZWVgfSwgRmxhdHRlbihbXXN0cmluZ3tgb25lYCwgYHR3b2AsIGB0aHJlZWB9KSkKCWFzc2VydC5FcXVhbChbXWFueXtgb25lYCwgYHR3b2AsIGB0aHJlZWB9LCBGbGF0dGVuKFtdYW55e1tdc3RyaW5ne2BvbmVgLCBgdHdvYH0sIGB0aHJlZWB9KSkKCWFzc2VydC5FcXVhbChbXWFueXtgb25lYCwgYHR3b2AsIGB0aHJlZWB9LCBGbGF0dGVuKFtdYW55e1tdc3RyaW5ne2BvbmVgfSwgW11zdHJpbmd7YHR3b2B9LCBbXXN0cmluZ3tgdGhyZWVgfX0pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestGet",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestGet(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55CglpbnB1dCA9IFtdaW50ezEsIDMsIDV9Cglhc3NlcnQuRXF1YWwoMSwgR2V0KGlucHV0LCAwKSkKCWFzc2VydC5FcXVhbCgzLCBHZXQoaW5wdXQsIDEpKQoJYXNzZXJ0LkVxdWFsKDUsIEdldChpbnB1dCwgMikpCglhc3NlcnQuTmlsKEdldChpbnB1dCwgOTk5OTkpKQoJYXNzZXJ0Lk5pbChHZXQobmlsLCAwKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestIntersect",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestIntersect(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRW1wdHkoSW50ZXJzZWN0U3RyaW5ncyhuaWwsIG5pbCkpCglhc3NlcnQuRW1wdHkoSW50ZXJzZWN0U3RyaW5ncyhbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgbmlsKSkKCWFzc2VydC5FbXB0eShJbnRlcnNlY3RTdHJpbmdzKG5pbCwgW11zdHJpbmd7YGFgLCBgY2AsIGBlYH0pKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BhYCwgYGNgfSwgSW50ZXJzZWN0U3RyaW5ncyhbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgW11zdHJpbmd7YGFgLCBgY2AsIGBlYH0pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestLast",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestLast(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55Cglhc3NlcnQuTmlsKExhc3QobmlsKSkKCWFzc2VydC5OaWwoTGFzdChpbnB1dCkpCglpbnB1dCA9IFtdaW50e30KCWFzc2VydC5OaWwoTGFzdChpbnB1dCkpCglpbnB1dCA9IFtdaW50ezEsIDMsIDV9Cglhc3NlcnQuRXF1YWwoNSwgTGFzdChpbnB1dCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestLen",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestLen(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55Cglhc3NlcnQuWmVybyhMZW4obmlsKSkKCWFzc2VydC5aZXJvKExlbihpbnB1dCkpCglpbnB1dCA9IFtdaW50ezEsIDMsIDV9Cglhc3NlcnQuRXF1YWwoMywgTGVuKGlucHV0KSkKCWFzc2VydC5FcXVhbCgzLCBMZW4oYDEyM2ApKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMap",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMap(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11hbnl7MTAsIDIwLCAzMH0sIE1hcChbXWludHsxLCAyLCAzfSwgZnVuYyhfIGludCwgdiBhbnkpIGFueSB7CgkJcmV0dXJuIHYuKGludCkgKiAxMAoJfSkpCglhc3NlcnQuRXF1YWwoW11hbnl7dHJ1ZSwgZmFsc2UsIHRydWV9LCBNYXAoW11ib29se2ZhbHNlLCB0cnVlLCBmYWxzZX0sIGZ1bmMoXyBpbnQsIHYgYW55KSBhbnkgewoJCXJldHVybiAhdi4oYm9vbCkKCX0pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMapString",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMapString(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YDEtMXRob3VzYW5kYCwgYDItMXRob3VzYW5kYCwgYDMtMXRob3VzYW5kYH0sIE1hcFN0cmluZyhbXWludHsxLCAyLCAzfSwgZnVuYyhfIGludCwgdiBzdHJpbmcpIHN0cmluZyB7CgkJcmV0dXJuIHYgKyBgLTF0aG91c2FuZGAKCX0pKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BmaXJzdGAsIGB0aGlyZGAsIGBmaWZ0aGB9LCBDb21wYWN0U3RyaW5nKE1hcFN0cmluZyhbXXN0cmluZ3tgZmlyc3RgLCBgc2Vjb25kYCwgYHRoaXJkYCwgYGZvdXJ0aGAsIGBmaWZ0aGB9LCBmdW5jKF8gaW50LCB2IHN0cmluZykgc3RyaW5nIHsKCQlzd2l0Y2ggdiB7CgkJY2FzZSBgc2Vjb25kYCwgYGZvdXJ0aGA6CgkJCXJldHVybiBgYAoJCWRlZmF1bHQ6CgkJCXJldHVybiB2CgkJfQoJfSkpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestOr",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestOr(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKE9yKCkpCglhc3NlcnQuTmlsKE9yKG5pbCkpCglhc3NlcnQuRXF1YWwoMSwgT3IoMCwgMSwgMCwgMiwgMCwgMywgNCwgNSwgNikpCglhc3NlcnQuRXF1YWwodHJ1ZSwgT3IoZmFsc2UsIGZhbHNlLCB0cnVlKSkKCWFzc2VydC5FcXVhbChgb25lYCwgT3IoYG9uZWApKQoJYXNzZXJ0LkVxdWFsKDQuMCwgT3IobmlsLCBgYCwgZmFsc2UsIDAsIDQuMCkpCglhc3NlcnQuTmlsKE9yKGZhbHNlLCBmYWxzZSwgZmFsc2UpKQoJYXNzZXJ0Lk5pbChPcigwLCAwLCAwKSkKCWFzc2VydC5FcXVhbChgdGhyZWVgLCBPcihgYCwgYGAsIGB0aHJlZWApKQoJdHlwZSB0ZXN0U3RydWN0IHN0cnVjdHsgbmFtZSBzdHJpbmcgfQoJYXNzZXJ0LkVxdWFsKHRlc3RTdHJ1Y3R7YHRocmVlYH0sIE9yKHRlc3RTdHJ1Y3R7fSwgdGVzdFN0cnVjdHt9LCB0ZXN0U3RydWN0e2B0aHJlZWB9KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestOrString",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestOrString(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGAsIE9yU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYGAsIE9yU3RyaW5nKGBgKSkKCWFzc2VydC5FcXVhbChgb25lYCwgT3JTdHJpbmcoYG9uZWApKQoJYXNzZXJ0LkVxdWFsKGB0d29gLCBPclN0cmluZyhgYCwgYHR3b2AsIGBgLCBgdGhyZWVgKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRest",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRest(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55Cglhc3NlcnQuTmlsKFJlc3QobmlsKSkKCWFzc2VydC5OaWwoUmVzdChpbnB1dCkpCglpbnB1dCA9IFtdaW50ezF9Cglhc3NlcnQuTmlsKFJlc3QoaW5wdXQpKQoJaW5wdXQgPSBbXWludHsxLCAzLCA1fQoJYXNzZXJ0LkVxdWFsKFtdYW55ezMsIDV9LCBSZXN0KGlucHV0KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestSlice",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestSlice(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW4gPSBbXWFueXsxLCAyLCAzLCA0LCA1fQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55e30sIFNsaWNlKGluLCA5OSwgLTEpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55ezF9LCBTbGljZShpbiwgMCwgMSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MSwgMn0sIFNsaWNlKGluLCAwLCAyKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXsxLCAyLCAzLCA0fSwgU2xpY2UoaW4sIDAsIDQpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55ezMsIDR9LCBTbGljZShpbiwgMiwgNCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MywgNH0sIFNsaWNlKGluLCAyLCA0KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXs0LCA1fSwgU2xpY2UoaW4sIC0yLCAtMSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MSwgMiwgMywgNCwgNX0sIFNsaWNlKGluLCAtNSwgLTEpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55ezIsIDMsIDR9LCBTbGljZShpbiwgLTQsIC0yKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXt9LCBTbGljZShpbiwgLTYsIC02KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXsxfSwgU2xpY2UoaW4sIC01LCAtNSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7Mn0sIFNsaWNlKGluLCAtNCwgLTQpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55ezN9LCBTbGljZShpbiwgLTMsIC0zKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXs0fSwgU2xpY2UoaW4sIC0yLCAtMikpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7NX0sIFNsaWNlKGluLCAtMSwgLTEpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55ezF9LCBTbGljZShpbiwgMCwgMSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7Mn0sIFNsaWNlKGluLCAxLCAyKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXszfSwgU2xpY2UoaW4sIDIsIDMpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55ezR9LCBTbGljZShpbiwgMywgNCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7NX0sIFNsaWNlKGluLCA0LCA1KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXt9LCBTbGljZShpbiwgNSwgNikpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MSwgMiwgMywgNCwgNX0sIFNsaWNlKGluLCAtMTAwLCAtMSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MSwgMiwgMywgNH0sIFNsaWNlKGluLCAtMTAwLCAtMikpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MSwgMiwgM30sIFNsaWNlKGluLCAtMTAwLCAtMykpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MSwgMn0sIFNsaWNlKGluLCAtMTAwLCAtNCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7MX0sIFNsaWNlKGluLCAtMTAwLCAtNSkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7fSwgU2xpY2UoaW4sIC0xMDAsIC02KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXsyLCAzLCA0LCA1fSwgU2xpY2UoaW4sIDEsIC0xKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXsyLCAzLCA0fSwgU2xpY2UoaW4sIDEsIC0yKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXsyLCAzfSwgU2xpY2UoaW4sIDEsIC0zKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXsyfSwgU2xpY2UoaW4sIDEsIC00KSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXt9LCBTbGljZShpbiwgMSwgLTUpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55e30sIFNsaWNlKGluLCAxLCAtNikpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestSplitCompact",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestSplitCompact(t *testing.T)",
            "Source": "ewoJYXNzZXJ0LkVxdWFsKHQsIFtdc3RyaW5ne30sIFNwbGl0Q29tcGFjdChgYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgIGB9LCBTcGxpdENvbXBhY3QoYCBgLCBgLGApKQoJYXNzZXJ0LkVxdWFsKHQsIFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBTcGxpdENvbXBhY3QoYGEsYixjYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgIGEgYCwgYCAgYiAgYCwgYCAgIGMgICBgfSwgU3BsaXRDb21wYWN0KGAgYSAsICBiICAsICAgYyAgIGAsIGAsYCkpCglhc3NlcnQuRXF1YWwodCwgW11zdHJpbmd7YGFgLCBgYmAsIGBjYH0sIFNwbGl0Q29tcGFjdChgYSwsYixjYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgU3BsaXRDb21wYWN0KGBhLCxiLGMsYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgU3BsaXRDb21wYWN0KGAsLCxhLCwsYiwsLCwsYywsLGAsIGAsYCkpCglhc3NlcnQuRXF1YWwodCwgW11zdHJpbmd7YGFgLCBgYmAsIGBjYH0sIFNwbGl0Q29tcGFjdChgYSwsLGIsLCwsLGNgLCBgLGApKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestSplitTrimSpaceCompact",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestSplitTrimSpaceCompact(t *testing.T)",
            "Source": "ewoJYXNzZXJ0LkVxdWFsKHQsIFtdc3RyaW5ne30sIFNwbGl0VHJpbVNwYWNlQ29tcGFjdChgYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3t9LCBTcGxpdFRyaW1TcGFjZUNvbXBhY3QoYCBgLCBgLGApKQoJYXNzZXJ0LkVxdWFsKHQsIFtdc3RyaW5ne2BhYCwgYGJgLCBgY2B9LCBTcGxpdFRyaW1TcGFjZUNvbXBhY3QoYGEsYixjYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgU3BsaXRUcmltU3BhY2VDb21wYWN0KGAgYSAsICBiICAsICAgYyAgIGAsIGAsYCkpCglhc3NlcnQuRXF1YWwodCwgW11zdHJpbmd7YGFgLCBgYmAsIGBjYH0sIFNwbGl0VHJpbVNwYWNlQ29tcGFjdChgYSwsYixjYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgU3BsaXRUcmltU3BhY2VDb21wYWN0KGBhLCxiLGMsYCwgYCxgKSkKCWFzc2VydC5FcXVhbCh0LCBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgU3BsaXRUcmltU3BhY2VDb21wYWN0KGAsLCxhLCwsYiwsLCwsYywsLGAsIGAsYCkpCglhc3NlcnQuRXF1YWwodCwgW11zdHJpbmd7YGFgLCBgYmAsIGBjYH0sIFNwbGl0VHJpbVNwYWNlQ29tcGFjdChgYSwsLGIsLCwsLGNgLCBgLGApKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestStringify",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestStringify(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKFN0cmluZ2lmeShuaWwpKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2AwYCwgYDFgLCBgMmB9LCBTdHJpbmdpZnkoW11hbnl7MCwgMSwgMn0pKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2AwLjVgLCBgMC41NWAsIGAwLjU1NWAsIGAwLjU1NTAwMWB9LCBTdHJpbmdpZnkoW11hbnl7MC41LCAwLjU1LCAwLjU1NTAwLCAwLjU1NTAwMX0pKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2B0cnVlYCwgYHRydWVgLCBgZmFsc2VgfSwgU3RyaW5naWZ5KFtdYW55e3RydWUsIHRydWUsIGZhbHNlfSkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestTrimSpace",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestTrimSpace(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKFRyaW1TcGFjZShuaWwpKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BhYWFgLCBgYmJiYCwgYGNjY2B9LCBUcmltU3BhY2UoW11zdHJpbmd7YGFhYWAsIGAgICBiYmIgYCwgYCBjY2MgICAgYH0pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestUnique",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestUnique(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoW11hbnl7YG9uZWAsIGB0d29gLCBgdGhyZWVgfSwgVW5pcXVlKFtdc3RyaW5ne2BvbmVgLCBgb25lYCwgYHR3b2AsIGB0aHJlZWB9KSkKCWFzc2VydC5FcXVhbChbXWFueXsxLCAyLCAzfSwgVW5pcXVlKFtdaW50ezEsIDIsIDIsIDN9KSkKCWFzc2VydC5Ob3RFcXVhbChbXWFueXsxLCAyLCAzfSwgVW5pcXVlKFtdaW50NjR7MSwgMiwgMiwgM30pKQp9",
            "IsPackageLevel": true
        }
    ],
    "Types": {
        "CompareFunc": {
            "Name": "CompareFunc",
            "Source": "dHlwZSBDb21wYXJlRnVuYyBmdW5jKGkgaW50LCBmaXJzdCBhbnksIHNlY29uZCBhbnkpIGJvb2wgLy8ge30K"
        },
        "IterationFunc": {
            "Name": "IterationFunc",
            "Source": "dHlwZSBJdGVyYXRpb25GdW5jID0gdXRpbHMuSXRlcmF0aW9uRnVuYw=="
        },
        "MapFunc": {
            "Name": "MapFunc",
            "Source": "dHlwZSBNYXBGdW5jIGZ1bmMoaSBpbnQsIHZhbHVlIGFueSkgYW55"
        },
        "MapStringFunc": {
            "Name": "MapStringFunc",
            "Source": "dHlwZSBNYXBTdHJpbmdGdW5jIGZ1bmMoaSBpbnQsIHZhbHVlIHN0cmluZykgc3RyaW5n"
        }
    }
}
