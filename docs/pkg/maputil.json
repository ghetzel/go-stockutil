{
    "Name": "maputil",
    "CanonicalImportPath": "github.com/ghetzel/go-stockutil/maputil",
    "ImportPath": "maputil",
    "ParentPackage": "stockutil",
    "URL": "https://github.com/ghetzel/go-stockutil",
    "Synopsis": "Utilities for converting, manipulating, and iterating over maps\n",
    "MainFunction": false,
    "CommentWordCount": 1475,
    "LineCount": 4653,
    "SourceLineCount": 3562,
    "FunctionCount": 84,
    "TypeCount": 14,
    "ConstantCount": 1,
    "VariableCount": 4,
    "Statistics": {
        "Mean": 0.5853,
        "StdDev": 0.4778,
        "GeometricMean": 0,
        "HarmonicMean": 0,
        "Median": 0.95,
        "Minimum": 0,
        "Maximum": 1
    },
    "Files": [
        {
            "Name": "001_maputil_setters_test.go",
            "Imports": [
                {
                    "PackageName": "encoding/json",
                    "Alias": "_"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 5746,
            "LineCount": 274,
            "SourceLineCount": 217,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "002_maputil_getters_test.go",
            "Imports": [
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 5150,
            "LineCount": 191,
            "SourceLineCount": 146,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "003_maputil_diffuse_test.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 3568,
            "LineCount": 178,
            "SourceLineCount": 124,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "004_maputil_diffuse_typed_test.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 5080,
            "LineCount": 207,
            "SourceLineCount": 158,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "005_maputil_coalesce_test.go",
            "Imports": [
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                }
            ],
            "Size": 3611,
            "LineCount": 149,
            "SourceLineCount": 111,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "006_maputil_coalesce_typed_test.go",
            "Imports": [
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 3430,
            "LineCount": 145,
            "SourceLineCount": 109,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "007_maputil_general_test.go",
            "Imports": [
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "sync",
                    "Alias": "sync"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 8398,
            "LineCount": 386,
            "SourceLineCount": 304,
            "FunctionCount": 0,
            "TypeCount": 3,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "008_maputil_walk_test.go",
            "Imports": [
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 5796,
            "LineCount": 253,
            "SourceLineCount": 194,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "009_maputil_pluck_test.go",
            "Imports": [
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 2549,
            "LineCount": 160,
            "SourceLineCount": 147,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "010_maputil_merge_test.go",
            "Imports": [
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 4038,
            "LineCount": 181,
            "SourceLineCount": 127,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "m.go",
            "Imports": [
                {
                    "PackageName": "encoding/json",
                    "Alias": "json"
                },
                {
                    "PackageName": "encoding/xml",
                    "Alias": "xml"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "net/url",
                    "Alias": "url"
                },
                {
                    "PackageName": "sort",
                    "Alias": "sort"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "sync",
                    "Alias": "sync"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/utils",
                    "Alias": "utilutil"
                }
            ],
            "Size": 15931,
            "LineCount": 683,
            "SourceLineCount": 493,
            "FunctionCount": 46,
            "TypeCount": 6,
            "ConstantCount": 0,
            "VariableCount": 2
        },
        {
            "Name": "m_test.go",
            "Imports": [
                {
                    "PackageName": "encoding/json",
                    "Alias": "json"
                },
                {
                    "PackageName": "encoding/xml",
                    "Alias": "xml"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "net/url",
                    "Alias": "url"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/alecthomas/assert",
                    "Alias": "assert"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 12159,
            "LineCount": 455,
            "SourceLineCount": 373,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "maputil.go",
            "Imports": [
                {
                    "PackageName": "errors",
                    "Alias": "errors"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "reflect",
                    "Alias": "reflect"
                },
                {
                    "PackageName": "regexp",
                    "Alias": "regexp"
                },
                {
                    "PackageName": "sort",
                    "Alias": "sort"
                },
                {
                    "PackageName": "strconv",
                    "Alias": "strconv"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "sync",
                    "Alias": "sync"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/rxutil",
                    "Alias": "rxutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/utils",
                    "Alias": "utils"
                },
                {
                    "PackageName": "github.com/mitchellh/mapstructure",
                    "Alias": "mapstructure"
                }
            ],
            "Size": 27441,
            "LineCount": 1091,
            "SourceLineCount": 801,
            "FunctionCount": 38,
            "TypeCount": 5,
            "ConstantCount": 1,
            "VariableCount": 2
        },
        {
            "Name": "maputil_test.go",
            "Imports": [
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/rxutil",
                    "Alias": "rxutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/timeutil",
                    "Alias": "timeutil"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/assert",
                    "Alias": "assert"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 7025,
            "LineCount": 300,
            "SourceLineCount": 258,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        }
    ],
    "Constants": [
        {
            "Name": "AppendValues",
            "Type": "MergeOption",
            "Immutable": true,
            "Expression": "iota"
        }
    ],
    "Variables": [
        {
            "Name": "MapXmlRootTagName",
            "Expression": "`data`",
            "Value": "data"
        },
        {
            "Name": "MapXmlStructTagName",
            "Expression": "`xml`",
            "Value": "xml"
        },
        {
            "Name": "SkipDescendants",
            "Expression": "errors.New(\"skip descendants\")"
        },
        {
            "Name": "UnmarshalStructTag",
            "Type": "string",
            "Expression": "`maputil`",
            "Value": "maputil"
        }
    ],
    "Functions": [
        {
            "Name": "Append",
            "Arguments": [
                {
                    "Name": "maps",
                    "Type": "...map[string]any"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                }
            ],
            "Signature": "Append(maps ...map[string]any) map[string]any",
            "Source": "ewoJdmFyIG91dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglmb3IgXywgbWFwViA6PSByYW5nZSBtYXBzIHsKCQlmb3IgaywgdiA6PSByYW5nZSBtYXBWIHsKCQkJb3V0W2tdID0gdgoJCX0KCX0KCXJldHVybiBvdXQKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Apply",
            "Comment": "Recursively walk the given map, calling the ApplyFunc for each leaf value.  If the second\nreturn value from the function is true, that value in the struct will be replaced with the first\nreturn value.  If false, the value will be left as-is.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                },
                {
                    "Name": "fn",
                    "Type": "ApplyFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                }
            ],
            "Signature": "Apply(input any, fn ApplyFunc) map[string]any",
            "Source": "ewoJcmV0dXJuIGFwcGx5KGZhbHNlLCBpbnB1dCwgZm4pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ApplyStruct",
            "Comment": "The same as Apply(), but will descend into structs.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                },
                {
                    "Name": "fn",
                    "Type": "ApplyFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                }
            ],
            "Signature": "ApplyStruct(input any, fn ApplyFunc) map[string]any",
            "Source": "ewoJcmV0dXJuIGFwcGx5KHRydWUsIGlucHV0LCBmbikKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Autotype",
            "Comment": "Recursively walk the given map, performing automatic type conversion on all leaf nodes.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                }
            ],
            "Signature": "Autotype(input any) map[string]any",
            "Source": "ewoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpZiBlcnIgOj0gV2FsayhpbnB1dCwgZnVuYyh2YWx1ZSBhbnksIHBhdGggW11zdHJpbmcsIGlzTGVhZiBib29sKSBlcnJvciB7CgkJaWYgdmFsdWVWYXIsIG9rIDo9IHZhbHVlLih0eXBldXRpbC5WYXJpYW50KTsgb2sgewoJCQl2YWx1ZSA9IHZhbHVlVmFyLkF1dG8oKQoJCQlpZiAhdHlwZXV0aWwuSXNFbXB0eSh2YWx1ZSkgewoJCQkJRGVlcFNldChvdXRwdXQsIHBhdGgsIHZhbHVlKQoJCQl9CgkJCXJldHVybiBTa2lwRGVzY2VuZGFudHMKCQl9IGVsc2UgaWYgaXNMZWFmIHsKCQkJaWYgIXR5cGV1dGlsLklzRW1wdHkodmFsdWUpIHsKCQkJCURlZXBTZXQob3V0cHV0LCBwYXRoLCBzdHJpbmd1dGlsLkF1dG90eXBlKHZhbHVlKSkKCQkJfQoJCX0KCQlyZXR1cm4gbmlsCgl9KTsgZXJyICE9IG5pbCB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9CglyZXR1cm4gb3V0cHV0Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "CoalesceMap",
            "Comment": "Take a deeply-nested map and return a flat (non-nested) map with keys whose intermediate tiers are joined with fieldJoiner",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "map[string]any"
                },
                {
                    "Name": "fieldJoiner",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "CoalesceMap(data map[string]any, fieldJoiner string) (map[string]any, error)",
            "Source": "ewoJcmV0dXJuIGRlZXBHZXRWYWx1ZXMoW11zdHJpbmd7fSwgZmllbGRKb2luZXIsIGRhdGEpLCBuaWwKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "CoalesceMapTyped",
            "Comment": "Take a deeply-nested map and return a flat (non-nested) map with keys whose intermediate tiers are joined with fieldJoiner\nAdditionally, values will be converted to strings and keys will be prefixed with the datatype of the value",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "map[string]any"
                },
                {
                    "Name": "fieldJoiner",
                    "Type": "string"
                },
                {
                    "Name": "typePrefixSeparator",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                },
                {
                    "Type": "[]error"
                }
            ],
            "Signature": "CoalesceMapTyped(data map[string]any, fieldJoiner string, typePrefixSeparator string) (map[string]any, []error)",
            "Source": "ewoJdmFyIGVycnMgPSBtYWtlKFtdZXJyb3IsIDApCgl2YXIgcnYgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJZm9yIGssIHYgOj0gcmFuZ2UgZGVlcEdldFZhbHVlcyhbXXN0cmluZ3t9LCBmaWVsZEpvaW5lciwgZGF0YSkgewoJCWlmIHN0cmluZ1ZhbCwgZXJyIDo9IHN0cmluZ3V0aWwuVG9TdHJpbmcodik7IGVyciA9PSBuaWwgewoJCQlydltwcmVwYXJlQ29hbGVzY2VkS2V5KGssIHYsIHR5cGVQcmVmaXhTZXBhcmF0b3IpXSA9IHN0cmluZ1ZhbAoJCX0gZWxzZSB7CgkJCWVycnMgPSBhcHBlbmQoZXJycywgZXJyKQoJCX0KCX0KCXJldHVybiBydiwgZXJycwp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Compact",
            "Comment": "Recursively remove all zero and empty values from the given map.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "map[string]any"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "Compact(input map[string]any) (map[string]any, error)",
            "Source": "ewoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpZiBlcnIgOj0gV2FsayhpbnB1dCwgZnVuYyh2YWx1ZSBhbnksIHBhdGggW11zdHJpbmcsIGlzTGVhZiBib29sKSBlcnJvciB7CgkJaWYgIXR5cGV1dGlsLklzRW1wdHkodmFsdWUpIHsKCQkJaWYgdHlwZXV0aWwuSXNBcnJheSh2YWx1ZSkgewoJCQkJRGVlcFNldChvdXRwdXQsIHBhdGgsIHZhbHVlKQoJCQkJcmV0dXJuIFNraXBEZXNjZW5kYW50cwoJCQl9IGVsc2UgaWYgaXNMZWFmIHsKCQkJCURlZXBTZXQob3V0cHV0LCBwYXRoLCB2YWx1ZSkKCQkJfQoJCX0KCQlyZXR1cm4gbmlsCgl9KTsgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9CglyZXR1cm4gb3V0cHV0LCBuaWwKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "DeepCopy",
            "Comment": "Perform a deep copy of the given map.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                }
            ],
            "Signature": "DeepCopy(input any) map[string]any",
            "Source": "ewoJcmV0dXJuIGFwcGx5KGZhbHNlLCBpbnB1dCwgbmlsKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "DeepCopyStruct",
            "Comment": "Perform a deep copy of the given map or struct, returning a map.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                }
            ],
            "Signature": "DeepCopyStruct(input any) map[string]any",
            "Source": "ewoJcmV0dXJuIGFwcGx5KHRydWUsIGlucHV0LCBuaWwpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "DeepGet",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "any"
                },
                {
                    "Name": "path",
                    "Type": "[]string"
                },
                {
                    "Name": "fallbacks",
                    "Type": "...any"
                }
            ],
            "Returns": [
                {
                    "Type": "any"
                }
            ],
            "Signature": "DeepGet(data any, path []string, fallbacks ...any) any",
            "Source": "ewoJdmFyIGN1cnJlbnQgPSB0eXBldXRpbC5SZXNvbHZlVmFsdWUoZGF0YSkKCWlmIGxlbihmYWxsYmFja3MpID09IDAgewoJCWZhbGxiYWNrcyA9IFtdYW55e25pbH0KCX0KCXZhciBmYWxsYmFjayA9IGZhbGxiYWNrc1swXQoJZm9yIGkgOj0gMDsgaSA8IGxlbihwYXRoKTsgaSsrIHsKCQl2YXIgcGFydCA9IHBhdGhbaV0KCQl2YXIgZFZhbHVlID0gcmVmbGVjdC5WYWx1ZU9mKGN1cnJlbnQpCgkJaWYgIWRWYWx1ZS5Jc1ZhbGlkKCkgewoJCQlyZXR1cm4gZmFsbGJhY2sKCQl9CgkJdmFyIGRUeXBlID0gZFZhbHVlLlR5cGUoKQoJCXN3aXRjaCBkVHlwZS5LaW5kKCkgewoJCWNhc2UgcmVmbGVjdC5JbnRlcmZhY2UsIHJlZmxlY3QuUHRyOgoJCQlkVHlwZSA9IGRUeXBlLkVsZW0oKQoJCX0KCQlzd2l0Y2ggZFR5cGUuS2luZCgpIHsKCQljYXNlIHJlZmxlY3QuU2xpY2UsIHJlZmxlY3QuQXJyYXk6CgkJCWlmIHN0cmluZ3V0aWwuSXNJbnRlZ2VyKHBhcnQpIHsKCQkJCWlmIHBhcnRJbmRleCwgZXJyIDo9IHN0cmNvbnYuQXRvaShwYXJ0KTsgZXJyID09IG5pbCB7CgkJCQkJaWYgcGFydEluZGV4IDwgZFZhbHVlLkxlbigpIHsKCQkJCQkJaWYgdmFsdWUgOj0gZFZhbHVlLkluZGV4KHBhcnRJbmRleCkuSW50ZXJmYWNlKCk7IHZhbHVlICE9IG5pbCB7CgkJCQkJCQljdXJyZW50ID0gdmFsdWUKCQkJCQkJCWNvbnRpbnVlCgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0gZWxzZSBpZiBwYXJ0ID09IGAqYCB7CgkJCQl2YXIgc3ViaXRlbXMgPSBtYWtlKFtdYW55LCBkVmFsdWUuTGVuKCkpCgkJCQlmb3IgaiA6PSAwOyBqIDwgZFZhbHVlLkxlbigpOyBqKysgewoJCQkJCWlmIHZhbHVlIDo9IGRWYWx1ZS5JbmRleChqKS5JbnRlcmZhY2UoKTsgdmFsdWUgIT0gbmlsIHsKCQkJCQkJaWYgaSsxIDwgbGVuKHBhdGgpIHsKCQkJCQkJCXN1Yml0ZW1zW2pdID0gRGVlcEdldCh2YWx1ZSwgcGF0aFsoaSsxKTpdLCBmYWxsYmFja3MuLi4pCgkJCQkJCX0gZWxzZSB7CgkJCQkJCQlzdWJpdGVtc1tqXSA9IHZhbHVlCgkJCQkJCX0KCQkJCQl9IGVsc2UgewoJCQkJCQlzdWJpdGVtc1tqXSA9IGZhbGxiYWNrCgkJCQkJfQoJCQkJfQoJCQkJcmV0dXJuIHN1Yml0ZW1zCgkJCX0KCQkJcmV0dXJuIGZhbGxiYWNrCgkJY2FzZSByZWZsZWN0Lk1hcDoKCQkJaWYgbWFwVmFsdWUgOj0gZFZhbHVlLk1hcEluZGV4KHJlZmxlY3QuVmFsdWVPZihwYXJ0KSk7IG1hcFZhbHVlLklzVmFsaWQoKSB7CgkJCQljdXJyZW50ID0gbWFwVmFsdWUuSW50ZXJmYWNlKCkKCQkJfSBlbHNlIHsKCQkJCXJldHVybiBmYWxsYmFjawoJCQl9CgkJY2FzZSByZWZsZWN0LlN0cnVjdDoKCQkJaWYgZFZhbHVlLlR5cGUoKS5LaW5kKCkgPT0gcmVmbGVjdC5QdHIgewoJCQkJZFZhbHVlID0gZFZhbHVlLkVsZW0oKQoJCQl9CgkJCWlmIHN0cnVjdEZpZWxkIDo9IGRWYWx1ZS5GaWVsZEJ5TmFtZShwYXJ0KTsgc3RydWN0RmllbGQuSXNWYWxpZCgpICYmIHN0cnVjdEZpZWxkLkNhbkludGVyZmFjZSgpIHsKCQkJCWN1cnJlbnQgPSBzdHJ1Y3RGaWVsZC5JbnRlcmZhY2UoKQoJCQkJY29udGludWUKCQkJfQoJCWRlZmF1bHQ6CgkJCXJldHVybiBmYWxsYmFjawoJCX0KCX0KCXJldHVybiBjdXJyZW50Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "DeepGetBool",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "any"
                },
                {
                    "Name": "path",
                    "Type": "[]string"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "DeepGetBool(data any, path []string) bool",
            "Source": "ewoJdmFyIHZJID0gRGVlcEdldChkYXRhLCBwYXRoLCBmYWxzZSkKCWlmIHYsIG9rIDo9IHZJLihib29sKTsgb2sgJiYgdiB7CgkJcmV0dXJuIHRydWUKCX0KCXJldHVybiBmYWxzZQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "DeepGetString",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "any"
                },
                {
                    "Name": "path",
                    "Type": "[]string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "DeepGetString(data any, path []string) string",
            "Source": "ewoJaWYgdiwgZXJyIDo9IHN0cmluZ3V0aWwuVG9TdHJpbmcoRGVlcEdldChkYXRhLCBwYXRoKSk7IGVyciA9PSBuaWwgewoJCXJldHVybiB2Cgl9CglyZXR1cm4gYGAKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "DeepJoin",
            "Comment": "Join the given map, using innerJoiner to join keys and values, and outerJoiner to join the resulting key-value lines.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                },
                {
                    "Name": "innerJoiner",
                    "Type": "string"
                },
                {
                    "Name": "outerJoiner",
                    "Type": "string"
                },
                {
                    "Name": "nestedSeparator",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "DeepJoin(input any, innerJoiner string, outerJoiner string, nestedSeparator string) string",
            "Source": "ewoJdmFyIHBhcnRzID0gbWFrZShbXXN0cmluZywgMCkKCVdhbGsoaW5wdXQsIGZ1bmModmFsdWUgYW55LCBwYXRoIFtdc3RyaW5nLCBpc0xlYWYgYm9vbCkgZXJyb3IgewoJCWlmIGlzTGVhZiB7CgkJCXBhcnRzID0gYXBwZW5kKHBhcnRzLCBzdHJpbmdzLkpvaW4ocGF0aCwgbmVzdGVkU2VwYXJhdG9yKStpbm5lckpvaW5lcitzdHJpbmd1dGlsLk11c3RTdHJpbmcodmFsdWUpKQoJCX0KCQlyZXR1cm4gbmlsCgl9KQoJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0cywgb3V0ZXJKb2luZXIpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "DeepSet",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "any"
                },
                {
                    "Name": "path",
                    "Type": "[]string"
                },
                {
                    "Name": "value",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "any"
                }
            ],
            "Signature": "DeepSet(data any, path []string, value any) any",
            "Source": "ewoJaWYgbGVuKHBhdGgpID09IDAgewoJCXJldHVybiBkYXRhCgl9Cgl2YXIgZmlyc3QgPSBwYXRoWzBdCgl2YXIgcmVzdCA9IG1ha2UoW11zdHJpbmcsIDApCglpZiBsZW4ocGF0aCkgPiAxIHsKCQlyZXN0ID0gcGF0aFsxOl0KCX0KCWlmIGxlbihyZXN0KSA9PSAwIHsKCQlpZiB0eXBldXRpbC5Jc0FycmF5KGRhdGEpIHsKCQkJdmFyIGRhdGFBcnJheSA9IHNsaWNldXRpbC5TbGljZWlmeShkYXRhKQoJCQlpZiBjdXJJbmRleCA6PSBpbnQodHlwZXV0aWwuSW50KGZpcnN0KSk7IHR5cGV1dGlsLklzSW50ZWdlcihmaXJzdCkgewoJCQkJaWYgY3VySW5kZXggPj0gbGVuKGRhdGFBcnJheSkgewoJCQkJCWZvciBhZGQgOj0gbGVuKGRhdGFBcnJheSk7IGFkZCA8PSBjdXJJbmRleDsgYWRkKysgewoJCQkJCQlkYXRhQXJyYXkgPSBhcHBlbmQoZGF0YUFycmF5LCBuaWwpCgkJCQkJfQoJCQkJfQoJCQkJaWYgY3VySW5kZXggPCBsZW4oZGF0YUFycmF5KSB7CgkJCQkJZGF0YUFycmF5W2N1ckluZGV4XSA9IHZhbHVlCgkJCQkJcmV0dXJuIGRhdGFBcnJheQoJCQkJfQoJCQl9CgkJfSBlbHNlIGlmIHR5cGV1dGlsLklzTWFwKGRhdGEpIHsKCQkJaWYgZXJyIDo9IFNldChkYXRhLCBmaXJzdCwgdmFsdWUpOyBlcnIgPT0gbmlsIHsKCQkJCXJldHVybiBkYXRhCgkJCX0KCQl9IGVsc2UgaWYgdHlwZXV0aWwuSXNTdHJ1Y3QoZGF0YSkgewoJCQlpZiBkViA6PSByZWZsZWN0LlZhbHVlT2YoZGF0YSk7IGRWLktpbmQoKSA9PSByZWZsZWN0LlB0ciB7CgkJCQlpZiBkRSA6PSBkVi5FbGVtKCk7IGRFLktpbmQoKSA9PSByZWZsZWN0LlN0cnVjdCB7CgkJCQkJZFYgPSBkRQoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm4gZGF0YQoJCQkJfQoJCQkJdmFyIGRUID0gZFYuVHlwZSgpCgkJCQlmb3IgaSA6PSAwOyBpIDwgZFQuTnVtRmllbGQoKTsgaSsrIHsKCQkJCQlpZiBmVCA6PSBkVC5GaWVsZChpKTsgZlQuTmFtZSA9PSBmaXJzdCB7CgkJCQkJCWlmIGZWIDo9IGRWLkZpZWxkKGkpOyBmVi5Jc1ZhbGlkKCkgJiYgZlYuQ2FuU2V0KCkgewoJCQkJCQkJdHlwZXV0aWwuU2V0VmFsdWUoZFYuRmllbGQoaSksIHZhbHVlKQoJCQkJCQl9CgkJCQkJCWJyZWFrCgkJCQkJfQoJCQkJfQoJCQl9CgkJCXJldHVybiBkYXRhCgkJfQoJfSBlbHNlIHsKCQlpZiB0eXBldXRpbC5Jc0ludGVnZXIocmVzdFswXSkgewoJCQlpZiB0eXBldXRpbC5Jc01hcChkYXRhKSB7CgkJCQl2YXIgY3VyVmFsID0gR2V0KGRhdGEsIGZpcnN0KQoJCQkJaWYgdHlwZXV0aWwuSXNBcnJheShjdXJWYWwpIHsKCQkJCQljdXJWYWwgPSBzbGljZXV0aWwuU2xpY2VpZnkoY3VyVmFsKQoJCQkJfSBlbHNlIHsKCQkJCQljdXJWYWwgPSBtYWtlKFsgLy8gIGlzIHRoZSB2YWx1ZSBhdCBgZmlyc3QnIGluIHRoZSBtYXAgaXNuJ3QgcHJlc2VudCBvciBpc24ndCBhbiBhcnJheSwgY3JlYXRlIGl0CgkJCQkJXWFueSwgMCkKCQkJCQlTZXQoZGF0YSwgZmlyc3QsIGN1clZhbCkKCQkJCX0KCQkJCWlmIGVyciA6PSBTZXQoZGF0YSwgZmlyc3QsIERlZXBTZXQoY3VyVmFsLCByZXN0LCB2YWx1ZSkpOyBlcnIgPT0gbmlsIHsKCQkJCQlyZXR1cm4gZGF0YQoJCQkJfQoJCQl9CgkJfSBlbHNlIHsKCQkJaWYgdHlwZXV0aWwuSXNBcnJheShkYXRhKSB7CgkJCQl2YXIgZGF0YUFycmF5ID0gc2xpY2V1dGlsLlNsaWNlaWZ5KGRhdGEpCgkJCQlpZiBjdXJJbmRleCA6PSBpbnQodHlwZXV0aWwuSW50KGZpcnN0KSk7IHR5cGV1dGlsLklzSW50ZWdlcihmaXJzdCkgewoJCQkJCWlmIGN1ckluZGV4ID49IGxlbihkYXRhQXJyYXkpIHsKCQkJCQkJZm9yIGFkZCA6PSBsZW4oZGF0YUFycmF5KTsgYWRkIDw9IGN1ckluZGV4OyBhZGQrKyB7CgkJCQkJCQlkYXRhQXJyYXkgPSBhcHBlbmQoZGF0YUFycmF5LCBtYWtlKG1hcFtzdHJpbmddYW55KSkKCQkJCQkJfQoJCQkJCX0KCQkJCQlpZiBjdXJJbmRleCA8IGxlbihkYXRhQXJyYXkpIHsKCQkJCQkJZGF0YUFycmF5W2N1ckluZGV4XSA9IERlZXBTZXQoZGF0YUFycmF5W2N1ckluZGV4XSwgcmVzdCwgdmFsdWUpCgkJCQkJCXJldHVybiBkYXRhQXJyYXkKCQkJCQl9CgkJCQl9CgkJCX0gZWxzZSBpZiBkYXRhTWFwLCBvayA6PSBkYXRhLihtYXBbc3RyaW5nXWFueSk7IG9rIHsKCQkJCXZhciBjdXJWYWwsIF8gPSBkYXRhTWFwW2ZpcnN0XQoJCQkJaWYgIXR5cGV1dGlsLklzTWFwKGN1clZhbCkgewoJCQkJCWRhdGFNYXBbZmlyc3RdID0gbWFrZShtYXAgLy8gIGhhbmRsZSBnb29kIG9sZCBmYXNoaW9uZWQgbWFwcy1vZi1tYXBzCgkJCQkJLy8gIGlzIHRoZSB2YWx1ZSBhdCAnZmlyc3QnIGluIHRoZSBtYXAgaXNuJ3QgcHJlc2VudCBvciBpc24ndCBhIG1hcCwgY3JlYXRlIGl0CgkJCQkJW3N0cmluZ11hbnkpCgkJCQkJY3VyVmFsLCBfID0gZGF0YU1hcFtmaXJzdF0KCQkJCX0KCQkJCWRhdGFNYXBbZmlyc3RdID0gRGVlcFNldChkYXRhTWFwW2ZpcnN0XSwgcmVzdCwgdmFsdWUpCgkJCQlyZXR1cm4gZGF0YU1hcAoJCQl9CgkJfQoJfQoJcmV0dXJuIGRhdGEKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Delete",
            "Comment": "Delete a key to a given value in the given map.",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "any"
                },
                {
                    "Name": "key",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "Delete(data any, key any) error",
            "Source": "ewoJcmV0dXJuIFNldChkYXRhLCBrZXksIGRlbGV0ZVZhbHVlKHRydWUpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "DiffuseMap",
            "Comment": "Take a flat (non-nested) map keyed with fields joined on fieldJoiner and return a\ndeeply-nested map",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "map[string]any"
                },
                {
                    "Name": "fieldJoiner",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "DiffuseMap(data map[string]any, fieldJoiner string) (map[string]any, error)",
            "Source": "ewoJcnYsIF8gOj0gRGlmZnVzZU1hcFR5cGVkKGRhdGEsIGZpZWxkSm9pbmVyLCAiIikKCXJldHVybiBydiwgbmlsCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "DiffuseMapTyped",
            "Comment": "Take a flat (non-nested) map keyed with fields joined on fieldJoiner and return a\ndeeply-nested map",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "map[string]any"
                },
                {
                    "Name": "fieldJoiner",
                    "Type": "string"
                },
                {
                    "Name": "typePrefixSeparator",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                },
                {
                    "Type": "[]error"
                }
            ],
            "Signature": "DiffuseMapTyped(data map[string]any, fieldJoiner string, typePrefixSeparator string) (map[string]any, []error)",
            "Source": "ewoJdmFyIGVycnMgPSBtYWtlKFtdZXJyb3IsIDApCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBkYXRhS2V5cyA9IFN0cmluZ0tleXMoZGF0YSkKCXNvcnQuU3RyaW5ncyhkYXRhS2V5cykKCWZvciBfLCBrZXkgOj0gLy8gIGdldCB0aGUgbGlzdCBvZiBrZXlzIGFuZCBzb3J0IHRoZW0gYmVjYXVzZSBvcmRlciBpbiBhIG1hcCBpcyB1bmRlZmluZWQKCXJhbmdlIGRhdGFLZXlzIHsKCQl2YXIga2V5UGFydHMgW11zdHJpbmcKCQl2YXIgdmFsdWUsIF8gPSBkYXRhW2tleV0KCQlpZiB0eXBlUHJlZml4U2VwYXJhdG9yICE9ICIiIHsKCQkJdmFyIHR5cGVOYW1lIHN0cmluZwoJCQl0eXBlTmFtZSwga2V5ID0gc3RyaW5ndXRpbC5TcGxpdFBhaXJUcmFpbGluZyhrZXksIHR5cGVQcmVmaXhTZXBhcmF0b3IpCgkJCWlmIHR5cGVOYW1lID09IGBgIHsKCQkJCXR5cGVOYW1lID0gYHN0cmAKCQkJfQoJCQlpZiB2LCBlcnIgOj0gY29lcmNlSW50b1R5cGUodmFsdWUsIHR5cGVOYW1lKTsgZXJyID09IG5pbCB7CgkJCQl2YWx1ZSA9IHYKCQkJfSBlbHNlIHsKCQkJCWVycnMgPSBhcHBlbmQoZXJycywgZXJyKQoJCQl9CgkJfQoJCWtleVBhcnRzID0gc3RyaW5ncy5TcGxpdChrZXksIGZpZWxkSm9pbmVyKQoJCW91dHB1dCA9IERlZXBTZXQob3V0cHV0LCBrZXlQYXJ0cywgdmFsdWUpLihtYXBbc3RyaW5nXWFueSkKCX0KCXJldHVybiBvdXRwdXQsIGVycnMKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Fprintf",
            "Comment": "Same as Sprintf, but writes output to the given writer.",
            "Arguments": [
                {
                    "Name": "w",
                    "Type": "io.Writer"
                },
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "data",
                    "Type": "...any"
                }
            ],
            "Signature": "Fprintf(w io.Writer, format string, data ...any)",
            "Source": "ewoJZm10LkZwcmludCh3LCBTcHJpbnRmKGZvcm1hdCwgZGF0YS4uLikpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Get",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "any"
                },
                {
                    "Name": "key",
                    "Type": "string"
                },
                {
                    "Name": "fallback",
                    "Type": "...any"
                }
            ],
            "Returns": [
                {
                    "Type": "any"
                }
            ],
            "Signature": "Get(data any, key string, fallback ...any) any",
            "Source": "ewoJZGF0YSA9IHR5cGV1dGlsLlJlc29sdmVWYWx1ZShkYXRhKQoJaWYgdHlwZXV0aWwuSXNLaW5kKGRhdGEsIHJlZmxlY3QuTWFwKSB7CgkJdmFyIGRhdGFWID0gcmVmbGVjdC5WYWx1ZU9mKGRhdGEpCgkJaWYgdmFsdWVWIDo9IGRhdGFWLk1hcEluZGV4KHJlZmxlY3QuVmFsdWVPZihrZXkpKTsgdmFsdWVWLklzVmFsaWQoKSB7CgkJCWlmIHZhbHVlSSA6PSB2YWx1ZVYuSW50ZXJmYWNlKCk7ICF0eXBldXRpbC5Jc1plcm8odmFsdWVJKSB7CgkJCQlyZXR1cm4gdmFsdWVJCgkJCX0KCQl9Cgl9CglpZiBsZW4oZmFsbGJhY2spID4gMCB7CgkJcmV0dXJuIGZhbGxiYWNrWzBdCgl9IGVsc2UgewoJCXJldHVybiBuaWwKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "JSONPath",
            "Comment": "Performs a JSONPath query against the given object and returns the results.\nJSONPath description, syntax, and examples are available at http://goessner.net/articles/JsonPath/.",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "any"
                },
                {
                    "Name": "query",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "any"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "JSONPath(data any, query string) (any, error)",
            "Source": "ewoJcmV0dXJuIHV0aWxzLkpTT05QYXRoKGRhdGEsIHF1ZXJ5LCB0cnVlKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Join",
            "Comment": "Join the given map, using innerJoiner to join keys and values, and outerJoiner to join the resulting key-value lines.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                },
                {
                    "Name": "innerJoiner",
                    "Type": "string"
                },
                {
                    "Name": "outerJoiner",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "Join(input any, innerJoiner string, outerJoiner string) string",
            "Source": "ewoJcmV0dXJuIERlZXBKb2luKGlucHV0LCBpbm5lckpvaW5lciwgb3V0ZXJKb2luZXIsIGAuYCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Keys",
            "Comment": "Return an interface slice of the keys of the given map.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Keys(input any) []any",
            "Source": "ewoJdmFyIGtleXMgPSBtYWtlKFtdYW55LCAwKQoJdmFyIHJpbnB1dCA9IHR5cGV1dGlsLlJlc29sdmVWYWx1ZShpbnB1dCkKCWlmIHJpbnB1dCA9PSBuaWwgewoJCXJldHVybiBrZXlzCgl9Cgl2YXIgaW5wdXRWID0gcmVmbGVjdC5WYWx1ZU9mKHJpbnB1dCkKCWlmIGlucHV0Vi5LaW5kKCkgPT0gcmVmbGVjdC5NYXAgewoJCXZhciBrZXlzViA9IGlucHV0Vi5NYXBLZXlzKCkKCQlmb3IgXywga2V5ViA6PSByYW5nZSBrZXlzViB7CgkJCWtleXMgPSBhcHBlbmQoa2V5cywga2V5VikKCQl9Cgl9IGVsc2UgaWYgc3luY01hcCwgb2sgOj0gaW5wdXQuKCpzeW5jLk1hcCk7IG9rIHsKCQlzeW5jTWFwLlJhbmdlKGZ1bmMoa2V5IGFueSwgXyBhbnkpIGJvb2wgewoJCQlrZXlzID0gYXBwZW5kKGtleXMsIGtleSkKCQkJcmV0dXJuIHRydWUKCQl9KQoJfQoJcmV0dXJuIGtleXMKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "MapValues",
            "Comment": "Return the values from the given map.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "MapValues(input any) []any",
            "Source": "ewoJdmFyIHZhbHVlcyA9IG1ha2UoW11hbnksIDApCgl2YXIgaW5wdXRWID0gcmVmbGVjdC5WYWx1ZU9mKGlucHV0KQoJc3dpdGNoIGlucHV0Vi5LaW5kKCkgewoJY2FzZSByZWZsZWN0Lk1hcDoKCQlmb3IgXywgbWFwS2V5ViA6PSByYW5nZSBpbnB1dFYuTWFwS2V5cygpIHsKCQkJaWYgbWFwViA6PSBpbnB1dFYuTWFwSW5kZXgobWFwS2V5Vik7IG1hcFYuSXNWYWxpZCgpICYmIG1hcFYuQ2FuSW50ZXJmYWNlKCkgewoJCQkJdmFsdWVzID0gYXBwZW5kKHZhbHVlcywgbWFwVi5JbnRlcmZhY2UoKSkKCQkJfQoJCX0KCX0KCXJldHVybiB2YWx1ZXMKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Merge",
            "Comment": "Recursively merge the contents of the second map into the first one and return the result.",
            "Arguments": [
                {
                    "Name": "first",
                    "Type": "any"
                },
                {
                    "Name": "second",
                    "Type": "any"
                },
                {
                    "Name": "options",
                    "Type": "...MergeOption"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "Merge(first any, second any, options ...MergeOption) (map[string]any, error)",
            "Source": "ewoJaWYgZmlyc3QgIT0gbmlsICYmICF0eXBldXRpbC5Jc0tpbmQoZmlyc3QsIHJlZmxlY3QuTWFwKSB7CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIG1hcCwgZ290ICVUIiwgZmlyc3QpCgl9CglpZiBzZWNvbmQgIT0gbmlsICYmICF0eXBldXRpbC5Jc0tpbmQoc2Vjb25kLCByZWZsZWN0Lk1hcCkgewoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoInNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGEgbWFwLCBnb3QgJVQiLCBzZWNvbmQpCgl9Cgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCWlmIGVyciA6PSBXYWxrKGZpcnN0LCBmdW5jKHZhbHVlIGFueSwgcGF0aCBbXXN0cmluZywgaXNMZWFmIGJvb2wpIGVycm9yIHsKCQlpZiBpc0xlYWYgewoJCQlEZWVwU2V0KG91dHB1dCwgcGF0aCwgdmFsdWUpCgkJfQoJCXJldHVybiBuaWwKCX0pOyBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCWlmIGVyciA6PSBXYWxrKHNlY29uZCwgZnVuYyh2YWx1ZSBhbnksIHBhdGggW11zdHJpbmcsIGlzTGVhZiBib29sKSBlcnJvciB7CgkJaWYgaXNMZWFmIHsKCQkJaWYgdmFsdWUgIT0gbmlsIHsKCQkJCWlmIGN1cnJlbnRWYWx1ZSA6PSBEZWVwR2V0KG91dHB1dCwgcGF0aCwgbmlsKTsgY3VycmVudFZhbHVlID09IG5pbCB7CgkJCQkJRGVlcFNldChvdXRwdXQsIHBhdGgsIHZhbHVlKQoJCQkJfSBlbHNlIHsKCQkJCQl2YXIgY3VycmVudFYgPSByZWZsZWN0LlZhbHVlT2YoY3VycmVudFZhbHVlKQoJCQkJCXN3aXRjaCBjdXJyZW50Vi5UeXBlKCkuS2luZCgpIHsKCQkJCQljYXNlIHJlZmxlY3QuU2xpY2UsIHJlZmxlY3QuQXJyYXk6CgkJCQkJCXZhciBuZXdQYXRoID0gYXBwZW5kKHBhdGgsIGZtdC5TcHJpbnRmKCIlZCIsIGN1cnJlbnRWLkxlbigpKSkKCQkJCQkJRGVlcFNldChvdXRwdXQsIG5ld1BhdGgsIHZhbHVlKQoJCQkJCWRlZmF1bHQ6CgkJCQkJCWlmIE1lcmdlT3B0aW9ucyhvcHRpb25zKS5IYXMoQXBwZW5kVmFsdWVzKSB7CgkJCQkJCQlEZWVwU2V0KG91dHB1dCwgcGF0aCwgW11hbnl7Y3VycmVudFZhbHVlLCB2YWx1ZX0pCgkJCQkJCX0gZWxzZSB7CgkJCQkJCQlEZWVwU2V0KG91dHB1dCwgcGF0aCwgdmFsdWUpCgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgkJcmV0dXJuIG5pbAoJfSk7IGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoJcmV0dXJuIG91dHB1dCwgbmlsCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Pluck",
            "Arguments": [
                {
                    "Name": "sliceOfMaps",
                    "Type": "any"
                },
                {
                    "Name": "key",
                    "Type": "[]string"
                }
            ],
            "Returns": [
                {
                    "Type": "[]any"
                }
            ],
            "Signature": "Pluck(sliceOfMaps any, key []string) []any",
            "Source": "ewoJdmFyIHJ2ID0gbWFrZShbXWFueSwgMCkKCWlmIHNsaWNlT2ZNYXBzID09IG5pbCB7CgkJcmV0dXJuIHJ2Cgl9CglXYWxrU3RydWN0KHNsaWNlT2ZNYXBzLCBmdW5jKHZhbHVlIGFueSwgcGF0aCBbXXN0cmluZywgaXNMZWFmIGJvb2wpIGVycm9yIHsKCQlpZiBpc0xlYWYgJiYgbGVuKHBhdGgpID4gMSB7CgkJCXZhciBzaG91bGRJbmNsdWRlIGJvb2wKCQkJZm9yIGksIF8gOj0gcmFuZ2UgcGF0aCB7CgkJCQlpZiBpID09IDAgewoJCQkJCWNvbnRpbnVlCgkJCQl9IGVsc2UgaWYgKGkgLSAxKSA8IGxlbihrZXkpIHsKCQkJCQlpZiBrZXlbaS0xXSA9PSBgKmAgfHwgcGF0aFtpXSA9PSBrZXlbaS0xXSB7CgkJCQkJCXNob3VsZEluY2x1ZGUgPSB0cnVlCgkJCQkJCWNvbnRpbnVlCgkJCQkJfSBlbHNlIHsKCQkJCQkJc2hvdWxkSW5jbHVkZSA9IGZhbHNlCgkJCQkJCWJyZWFrCgkJCQkJfQoJCQkJfQoJCQl9CgkJCWlmIHNob3VsZEluY2x1ZGUgewoJCQkJcnYgPSBhcHBlbmQocnYsIHZhbHVlKQoJCQl9CgkJfQoJCXJldHVybiBuaWwKCX0pCglyZXR1cm4gcnYKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Printf",
            "Comment": "Same as Sprintf, but prints its output to standard output.",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "data",
                    "Type": "...any"
                }
            ],
            "Signature": "Printf(format string, data ...any)",
            "Source": "ewoJZm10LlByaW50KFNwcmludGYoZm9ybWF0LCBkYXRhLi4uKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Set",
            "Comment": "Set a key to a given value in the given map, reflect.Map Value, or slice/array.",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "any"
                },
                {
                    "Name": "key",
                    "Type": "any"
                },
                {
                    "Name": "value",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "Set(data any, key any, value any) error",
            "Source": "ewoJdmFyIGRhdGFNIHJlZmxlY3QuVmFsdWUKCXZhciBpc0RlbGV0ZSBib29sCglpZiBfLCBvayA6PSB2YWx1ZS4oZGVsZXRlVmFsdWUpOyBvayB7CgkJaXNEZWxldGUgPSB0cnVlCgl9CglpZiB2LCBvayA6PSBkYXRhLihyZWZsZWN0LlZhbHVlKTsgb2sgewoJCWRhdGFNID0gdgoJfSBlbHNlIHsKCQlkYXRhTSA9IHJlZmxlY3QuVmFsdWVPZihkYXRhKQoJfQoJaWYgYXNNYXAsIG9rIDo9IGRhdGEuKG1hcFtzdHJpbmddYW55KTsgb2sgewoJCWlmIGlzRGVsZXRlIHsKCQkJZGVsZXRlKGFzTWFwLCB0eXBldXRpbC5TdHJpbmcoa2V5KSkKCQl9IGVsc2UgewoJCQlhc01hcFt0eXBldXRpbC5TdHJpbmcoa2V5KV0gPSB2YWx1ZQoJCX0KCQlyZXR1cm4gbmlsCgl9IGVsc2UgaWYgZGF0YU0uQ2FuSW50ZXJmYWNlKCkgewoJCWlmIGFzTWFwLCBvayA6PSBkYXRhTS5JbnRlcmZhY2UoKS4obWFwW3N0cmluZ11hbnkpOyBvayB7CgkJCWlmIGlzRGVsZXRlIHsKCQkJCWRlbGV0ZShhc01hcCwgdHlwZXV0aWwuU3RyaW5nKGtleSkpCgkJCX0gZWxzZSB7CgkJCQlhc01hcFt0eXBldXRpbC5TdHJpbmcoa2V5KV0gPSB2YWx1ZQoJCQl9CgkJCXJldHVybiBuaWwKCQl9Cgl9Cglzd2l0Y2ggZGF0YU0uS2luZCgpIHsKCWNhc2UgcmVmbGVjdC5NYXA6CgkJaWYgaXNEZWxldGUgewoJCQlkYXRhTS5TZXRNYXBJbmRleChyZWZsZWN0LlZhbHVlT2Yoa2V5KSwgcmVmbGVjdC5WYWx1ZXt9KQoJCX0gZWxzZSB7CgkJCWRhdGFNLlNldE1hcEluZGV4KHJlZmxlY3QuVmFsdWVPZihrZXkpLCByZWZsZWN0LlZhbHVlT2YodmFsdWUpKQoJCX0KCWNhc2UgcmVmbGVjdC5TbGljZSwgcmVmbGVjdC5BcnJheToKCQlpZiBpc0RlbGV0ZSB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJBcnJheSBpdGVtIGRlbGV0aW9uIG5vdCBpbXBsZW1lbnRlZCIpCgkJfSBlbHNlIGlmIHR5cGV1dGlsLklzSW50ZWdlcihrZXkpIHsKCQkJZGF0YU0uSW5kZXgoaW50KHR5cGV1dGlsLkludChrZXkpKSkKCQl9IGVsc2UgewoJCQlyZXR1cm4gZm10LkVycm9yZigiY2Fubm90IHNldCBub24taW50ZWdlciBhcnJheSBpbmRleCAlcSIsIGtleSkKCQl9Cgl9CglyZXR1cm4gbmlsCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "SliceOfMaps",
            "Comment": "Convert the given value to a slice using typeutil.Slice, then return each element as a Map.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Name": "maps",
                    "Type": "[]*Map"
                }
            ],
            "Signature": "SliceOfMaps(input any) maps []*Map",
            "Source": "ewoJZm9yIF8sIHYgOj0gcmFuZ2UgdHlwZXV0aWwuU2xpY2UoaW5wdXQpIHsKCQltYXBzID0gYXBwZW5kKG1hcHMsIE0odikpCgl9CglyZXR1cm4KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Split",
            "Comment": "Split the given string, first on outerJoiner to form key-value lines, then each line on innerJoiner.\nPopulates a map and returns the result.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "string"
                },
                {
                    "Name": "innerJoiner",
                    "Type": "string"
                },
                {
                    "Name": "outerJoiner",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]any"
                }
            ],
            "Signature": "Split(input string, innerJoiner string, outerJoiner string) map[string]any",
            "Source": "ewoJdmFyIHJ2ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBwYWlycyA9IHN0cmluZ3MuU3BsaXQoaW5wdXQsIG91dGVySm9pbmVyKQoJZm9yIF8sIHBhaXIgOj0gcmFuZ2UgcGFpcnMgewoJCXZhciBrdiA9IHN0cmluZ3MuU3BsaXROKHBhaXIsIGlubmVySm9pbmVyLCAyKQoJCWlmIGxlbihrdikgPT0gMiB7CgkJCXJ2W2t2WzBdXSA9IGt2WzFdCgkJfQoJfQoJcmV0dXJuIHJ2Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Sprintf",
            "Comment": "Format the given string in the same manner as fmt.Sprintf, except data items that are\nmaps or Map objects will be expanded using special patterns in the format string. Deeply-nested\nmap values can be referenced using a format string \"${path.to.value}\".  Missing keys will return\nan empty string, or a fallback value may be provided like so: \"${path.to.value|fallback}\".\nThe value may also specify a standard fmt.Sprintf pattern with \"${path.to.value:%02d}\" (or\n\"${path.to.value|fallback:%02d}\" for fallback values.)  Finally, a special case for time.Time values\nallows for the format string to be passed to time.Format: \"${path.to.time:%January 2, 2006 (3:04pm)}\".",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "data",
                    "Type": "...any"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "Sprintf(format string, data ...any) string",
            "Source": "ewoJdmFyIHBhcmFtcyBbXWFueQpNYXRjaExvb3A6Cglmb3IgewoJCXZhciBtID0gcnh1dGlsLk1hdGNoKHJ4TWFwRm10LCBmb3JtYXQpCgkJaWYgbSA9PSBuaWwgewoJCQlicmVhawoJCX0KCQl2YXIgY2FwcyA9IG0uTmFtZWRDYXB0dXJlcygpCgkJdmFyIHBsYWNlaG9sZGVyID0gY2Fwc1tgZm10YF0KCQlpZiBwbGFjZWhvbGRlciA9PSBgYCB7CgkJCXBsYWNlaG9sZGVyID0gYCV2YAoJCX0KCQlmb3IgXywgZCA6PSByYW5nZSBkYXRhIHsKCQkJdmFyIGRtID0gTShkKQoJCQlpZiB0bSwgb2sgOj0gZG0uR2V0KGNhcHNbYGtleWBdKS5WYWx1ZS4odGltZS5UaW1lKTsgb2sgewoJCQkJdmFyIHRtZm10ID0gc3RyaW5ncy5UcmltUHJlZml4KHBsYWNlaG9sZGVyLCBgJWApCgkJCQlpZiB0bWZtdCA9PSBgdmAgewoJCQkJCXRtZm10ID0gdGltZS5SRkMzMzM5CgkJCQl9CgkJCQlwYXJhbXMgPSBhcHBlbmQocGFyYW1zLCB0bS5Gb3JtYXQodG1mbXQpKQoJCQkJZm9ybWF0ID0gbS5SZXBsYWNlR3JvdXAoMSwgYCVzYCkKCQkJCWNvbnRpbnVlIE1hdGNoTG9vcAoJCQl9IGVsc2UgaWYgdiA6PSBkbS5TdHJpbmcoY2Fwc1tga2V5YF0pOyB2ICE9IGBgIHsKCQkJCXBhcmFtcyA9IGFwcGVuZChwYXJhbXMsIHYpCgkJCQlmb3JtYXQgPSBtLlJlcGxhY2VHcm91cCgxLCBwbGFjZWhvbGRlcikKCQkJCWNvbnRpbnVlIE1hdGNoTG9vcAoJCQl9CgkJfQoJCXBhcmFtcyA9IGFwcGVuZChwYXJhbXMsIGNhcHNbYGZhbGxiYWNrYF0pCgkJZm9ybWF0ID0gbS5SZXBsYWNlR3JvdXAoMSwgcGxhY2Vob2xkZXIpCgl9CglyZXR1cm4gZm10LlNwcmludGYoZm9ybWF0LCBwYXJhbXMuLi4pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "StringKeys",
            "Comment": "Return a slice of strings representing the keys of the given map.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "StringKeys(input any) []string",
            "Source": "ewoJdmFyIGtleXMgPSBzbGljZXV0aWwuU3RyaW5naWZ5KEtleXMoaW5wdXQpKQoJc29ydC5TdHJpbmdzKGtleXMpCglyZXR1cm4ga2V5cwp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Stringify",
            "Comment": "Take the input map and convert all values to strings.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "map[string]any"
                }
            ],
            "Returns": [
                {
                    "Type": "map[string]string"
                }
            ],
            "Signature": "Stringify(input map[string]any) map[string]string",
            "Source": "ewoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11zdHJpbmcpCglmb3IgaywgdiA6PSByYW5nZSBpbnB1dCB7CgkJaWYgc3RyLCBlcnIgOj0gc3RyaW5ndXRpbC5Ub1N0cmluZyh2KTsgZXJyID09IG5pbCB7CgkJCW91dHB1dFtrXSA9IHN0cgoJCX0gZWxzZSB7CgkJCW91dHB1dFtrXSA9IGZtdC5TcHJpbnRmKCIhI0VSUjwldj4iLCBlcnIpCgkJfQoJfQoJcmV0dXJuIG91dHB1dAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "StructFromMap",
            "Comment": "Same as TaggedStructFromMapFunc, but no value conversion and uses the \"maputil\" struct tag.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "map[string]any"
                },
                {
                    "Name": "populate",
                    "Type": "any"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "StructFromMap(input map[string]any, populate any) error",
            "Source": "ewoJcmV0dXJuIFRhZ2dlZFN0cnVjdEZyb21NYXAoaW5wdXQsIHBvcHVsYXRlLCBgYCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TaggedStructFromMap",
            "Comment": "Same as TaggedStructFromMapFunc, but does not perform any value conversion.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                },
                {
                    "Name": "populate",
                    "Type": "any"
                },
                {
                    "Name": "tagname",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "TaggedStructFromMap(input any, populate any, tagname string) error",
            "Source": "ewoJcmV0dXJuIFRhZ2dlZFN0cnVjdEZyb21NYXBGdW5jKGlucHV0LCBwb3B1bGF0ZSwgdGFnbmFtZSwgbmlsKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TaggedStructFromMapFunc",
            "Comment": "Take an input map, and populate the struct instance pointed to by \"populate\".  Use the values of the tagname tag\nto inform which map keys should be used to fill struct fields, and if a Conversion function is given, that\nfunction will be used to allow values to be converted in preparation for becoming struct field values.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                },
                {
                    "Name": "populate",
                    "Type": "any"
                },
                {
                    "Name": "tagname",
                    "Type": "string"
                },
                {
                    "Name": "converter",
                    "Type": "ConversionFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "TaggedStructFromMapFunc(input any, populate any, tagname string, converter ConversionFunc) error",
            "Source": "ewoJaWYgdGFnbmFtZSA9PSBgYCB7CgkJdGFnbmFtZSA9IFVubWFyc2hhbFN0cnVjdFRhZwoJfQoJaWYgY29udmVydGVyID09IG5pbCB7CgkJY29udmVydGVyID0gZnVuYyhzb3VyY2UgcmVmbGVjdC5UeXBlLCB0YXJnZXQgcmVmbGVjdC5UeXBlLCBkYXRhIGFueSkgKGFueSwgZXJyb3IpIHsKCQkJaWYgdGFyZ2V0LktpbmQoKSA9PSByZWZsZWN0LlN0cmluZyB7CgkJCQlyZXR1cm4gc3RyaW5ndXRpbC5Db252ZXJ0VG9TdHJpbmcoZGF0YSkKCQkJfQoJCQlpZiB0YXJnZXQuU3RyaW5nKCkgPT0gYHRpbWUuVGltZWAgfHwgdXRpbHMuSXNUaW1lKGRhdGEpIHsKCQkJCXJldHVybiBzdHJpbmd1dGlsLkNvbnZlcnRUb1RpbWUoZGF0YSkKCQkJfQoJCQlyZXR1cm4gZGF0YSwgbmlsCgkJfQoJfQoJaWYgcG9wdWxhdGVWLCBvayA6PSBwb3B1bGF0ZS4ocmVmbGVjdC5WYWx1ZSk7IG9rIHsKCQlpZiBwb3B1bGF0ZVYuSXNWYWxpZCgpICYmIHBvcHVsYXRlVi5DYW5JbnRlcmZhY2UoKSB7CgkJCXBvcHVsYXRlID0gcG9wdWxhdGVWLkludGVyZmFjZSgpCgkJfSBlbHNlIHsKCQkJcmV0dXJuIGZtdC5FcnJvcmYoIkRlc3RpbmF0aW9uIHZhbHVlIGlzIGludmFsaWQgb3IgdW5zZXR0YWJsZSIpCgkJfQoJfQoJdmFyIG1ldGEgPSBuZXcobWFwc3RydWN0dXJlLk1ldGFkYXRhKQoJaWYgZGVjb2RlciwgZXJyIDo9IG1hcHN0cnVjdHVyZS5OZXdEZWNvZGVyKCZtYXBzdHJ1Y3R1cmUuRGVjb2RlckNvbmZpZ3tSZXN1bHQ6IHBvcHVsYXRlLCBUYWdOYW1lOiB0YWduYW1lLCBEZWNvZGVIb29rOiBjb252ZXJ0ZXIsIFdlYWtseVR5cGVkSW5wdXQ6IHRydWUsIE1ldGFkYXRhOiBtZXRhfSk7IGVyciA9PSBuaWwgewoJCWlmIGVyciA6PSBkZWNvZGVyLkRlY29kZShpbnB1dCk7IGVyciAhPSBuaWwgewoJCQlyZXR1cm4gZm10LkVycm9yZigibWFwdXRpbDogJXYiLCBlcnIpCgkJfQoJCWZvciBfLCBmaWVsZCA6PSByYW5nZSBzbGljZXV0aWwuVW5pcXVlU3RyaW5ncyhtZXRhLlVudXNlZCkgewoJCQl2YXIga2V5ID0gc3RyaW5ncy5TcGxpdChmaWVsZCwgYC5gKQoJCQl2YXIgc3JjID0gRGVlcEdldChpbnB1dCwga2V5KQoJCQlpZiB1dGlscy5Jc1RpbWUoc3JjKSB7CgkJCQlEZWVwU2V0KHBvcHVsYXRlLCBrZXksIHR5cGV1dGlsLlRpbWUoc3JjKSkKCQkJfSBlbHNlIGlmIHR5cGV1dGlsLklzTWFwKHNyYykgfHwgdHlwZXV0aWwuSXNTdHJ1Y3Qoc3JjKSB7CgkJCQlmb3Iga3YgOj0gcmFuZ2UgTShzcmMpLkl0ZXIoKSB7CgkJCQkJRGVlcFNldChwb3B1bGF0ZSwgYXBwZW5kKGtleSwga3YuSyksIGt2LlZhbHVlKQoJCQkJfQoJCQl9CgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gZXJyCgl9CglyZXR1cm4gbmlsCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Walk",
            "Comment": "Recursively walk through the given map, calling walkFn for each intermediate and leaf value.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                },
                {
                    "Name": "walkFn",
                    "Type": "WalkFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "Walk(input any, walkFn WalkFunc) error",
            "Source": "ewoJcmV0dXJuIHdhbGtHZW5lcmljKGlucHV0LCBuaWwsIHdhbGtGbiwgZmFsc2UsIG5pbCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "WalkStruct",
            "Comment": "Recursively walk through the given map, calling walkFn for each intermediate and leaf value.\nThis form behaves identically to Walk(), except that it will also recurse into structs, calling\nwalkFn for all intermediate structs and fields.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "any"
                },
                {
                    "Name": "walkFn",
                    "Type": "WalkFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "WalkStruct(input any, walkFn WalkFunc) error",
            "Source": "ewoJcmV0dXJuIHdhbGtHZW5lcmljKGlucHV0LCBuaWwsIHdhbGtGbiwgdHJ1ZSwgbmlsKQp9",
            "IsPackageLevel": true
        }
    ],
    "Examples": [
        {
            "Name": "ExamplePrintf_deeplyNestedKeys",
            "Label": "DeeplyNestedKeys",
            "For": "Printf",
            "Signature": "ExamplePrintf_deeplyNestedKeys()",
            "Source": "ewoJUHJpbnRmKCJIZWxsbyAke2RldGFpbHMuMC52YWx1ZXxndWVzdH0hIFlvdXIgSVAgaXM6ICR7ZGV0YWlscy4xLnZhbHVlfCh1bmtub3duKX0iLCBtYXBbc3RyaW5nXWFueXtgZGV0YWlsc2A6IFtdbWFwW3N0cmluZ11hbnl7e2BrZXlgOiBgdXNlcm5hbWVgLCBgdmFsdWVgOiBgZnJpZW5kYH0sIHtga2V5YDogYGlwYWRkcmVzc2AsIGB2YWx1ZWA6IGAxMjcuMC4wLjFgfX19KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ExamplePrintf_suppliedWithData",
            "Label": "SuppliedWithData",
            "For": "Printf",
            "Signature": "ExamplePrintf_suppliedWithData()",
            "Source": "ewoJUHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0fSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pfSIsIG1hcFtzdHJpbmddYW55e2B1c2VybmFtZWA6IGBmcmllbmRgLCBgaXBhZGRyZXNzYDogYDEyNy4wLjAuMWB9KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ExamplePrintf_usingDefaultValues",
            "Label": "UsingDefaultValues",
            "For": "Printf",
            "Signature": "ExamplePrintf_usingDefaultValues()",
            "Source": "ewoJUHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0fSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pfSIpCn0=",
            "IsPackageLevel": true
        }
    ],
    "Tests": [
        {
            "Name": "TestApply",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestApply(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YGFgOiAxMCwgYGJgOiAyMCwgYGNgOiAzMH0sIEFwcGx5KG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGJgOiAyLCBgY2A6IDN9LCBmdW5jKF8gW11zdHJpbmcsIHZhbHVlIGFueSkgKGFueSwgYm9vbCkgewoJCXJldHVybiB2YWx1ZS4oaW50KSAqIDEwLCB0cnVlCgl9KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCoalesceArrayWithNestedMap",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCoalesceArrayWithNestedMap(t *testing.T)",
            "Source": "ewoJdmFyIGVyciBlcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG51bWJlcnMgPSBtYWtlKFtdYW55LCAwKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCBtYXBbc3RyaW5nXWFueXsibmFtZSI6ICJ0ZXN0IiwgImNvdW50IjogMn0pCgludW1iZXJzID0gYXBwZW5kKG51bWJlcnMsIG1hcFtzdHJpbmddYW55eyJuYW1lIjogInRlc3QyIiwgImNvdW50IjogNH0pCgludW1iZXJzID0gYXBwZW5kKG51bWJlcnMsIG1hcFtzdHJpbmddYW55eyJuYW1lIjogInRlc3QzIiwgImNvdW50IjogOH0pCglpbnB1dFsibnVtYmVycyJdID0gbnVtYmVycwoJaWYgb3V0cHV0LCBlcnIgPSBDb2FsZXNjZU1hcChpbnB1dCwgIi4iKTsgZXJyICE9IG5pbCB7CgkJdC5FcnJvcmYoIiVzXG4iLCBlcnIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbIm51bWJlcnMuMC5uYW1lIl07ICFvayB8fCB2ICE9ICJ0ZXN0IiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4wLm5hbWUiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJudW1iZXJzLjAuY291bnQiXTsgIW9rIHx8IHYgIT0gMiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4wLmNvdW50IikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsibnVtYmVycy4xLm5hbWUiXTsgIW9rIHx8IHYgIT0gInRlc3QyIiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4xLm5hbWUiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJudW1iZXJzLjEuY291bnQiXTsgIW9rIHx8IHYgIT0gNCB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4xLmNvdW50IikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsibnVtYmVycy4yLm5hbWUiXTsgIW9rIHx8IHYgIT0gInRlc3QzIiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4yLm5hbWUiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJudW1iZXJzLjIuY291bnQiXTsgIW9rIHx8IHYgIT0gOCB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4yLmNvdW50IikKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCoalesceMultiTierScalar",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCoalesceMultiTierScalar(t *testing.T)",
            "Source": "ewoJdmFyIGVyciBlcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJaW5wdXRbImlkIl0gPSAidG9wIgoJaW5wdXRbIm5lc3RlZCJdID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCWlucHV0WyJuZXN0ZWQiXS4obWFwW3N0cmluZ11hbnkpWyJkYXRhIl0gPSB0cnVlCglpbnB1dFsibmVzdGVkIl0uKG1hcFtzdHJpbmddYW55KVsidmFsdWUiXSA9IDQuOQoJaW5wdXRbIm5lc3RlZCJdLihtYXBbc3RyaW5nXWFueSlbImF3ZXNvbWUiXSA9ICJ2ZXJ5IHllcyIKCWlmIG91dHB1dCwgZXJyID0gQ29hbGVzY2VNYXAoaW5wdXQsICIuIik7IGVyciAhPSBuaWwgewoJCXQuRXJyb3JmKCIlc1xuIiwgZXJyKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJpZCJdOyAhb2sgfHwgdiAhPSAidG9wIiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAiaWQiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJuZXN0ZWQuZGF0YSJdOyAhb2sgfHwgdiAhPSB0cnVlIHsKCQl0LkVycm9yZigiSW5jb3JyZWN0IHZhbHVlICclcycgZm9yIGtleSAlcyIsIHYsICJuZXN0ZWQuZGF0YSIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbIm5lc3RlZC52YWx1ZSJdOyAhb2sgfHwgdiAhPSA0LjkgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgIm5lc3RlZC52YWx1ZSIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbIm5lc3RlZC5hd2Vzb21lIl07ICFvayB8fCB2ICE9ICJ2ZXJ5IHllcyIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgIm5lc3RlZC5hd2Vzb21lIikKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCoalesceOneTierScalar",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCoalesceOneTierScalar(t *testing.T)",
            "Source": "ewoJdmFyIGVyciBlcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJaW5wdXRbImlkIl0gPSAidGVzdCIKCWlucHV0WyJlbmFibGVkIl0gPSB0cnVlCglpbnB1dFsiZmxvYXQiXSA9IDIuNwoJaWYgb3V0cHV0LCBlcnIgPSBDb2FsZXNjZU1hcChpbnB1dCwgIi4iKTsgZXJyICE9IG5pbCB7CgkJdC5FcnJvcmYoIiVzXG4iLCBlcnIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbImlkIl07ICFvayB8fCB2ICE9ICJ0ZXN0IiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAiaWQiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJlbmFibGVkIl07ICFvayB8fCB2ICE9IHRydWUgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImVuYWJsZWQiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJmbG9hdCJdOyAhb2sgfHwgdiAhPSAyLjcgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImZsb2F0IikKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCoalesceTopLevelArray",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCoalesceTopLevelArray(t *testing.T)",
            "Source": "ewoJdmFyIGVyciBlcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG51bWJlcnMgPSBtYWtlKFtdYW55LCAwKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCAxKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCAyKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCAzKQoJaW5wdXRbIm51bWJlcnMiXSA9IG51bWJlcnMKCWlmIG91dHB1dCwgZXJyID0gQ29hbGVzY2VNYXAoaW5wdXQsICIuIik7IGVyciAhPSBuaWwgewoJCXQuRXJyb3JmKCIlc1xuIiwgZXJyKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJudW1iZXJzLjAiXTsgIW9rIHx8IHYgIT0gMSB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAibnVtYmVycy4wIikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsibnVtYmVycy4xIl07ICFvayB8fCB2ICE9IDIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgIm51bWJlcnMuMSIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbIm51bWJlcnMuMiJdOyAhb2sgfHwgdiAhPSAzIHsKCQl0LkVycm9yZigiSW5jb3JyZWN0IHZhbHVlICclcycgZm9yIGtleSAlcyIsIHYsICJudW1iZXJzLjIiKQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCoalesceTypedArrayWithNestedMap",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCoalesceTypedArrayWithNestedMap(t *testing.T)",
            "Source": "ewoJdmFyIGVycnMgW11lcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG51bWJlcnMgPSBtYWtlKFtdYW55LCAwKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCBtYXBbc3RyaW5nXWFueXsibmFtZSI6ICJ0ZXN0IiwgImNvdW50IjogMn0pCgludW1iZXJzID0gYXBwZW5kKG51bWJlcnMsIG1hcFtzdHJpbmddYW55eyJuYW1lIjogInRlc3QyIiwgImNvdW50IjogNH0pCgludW1iZXJzID0gYXBwZW5kKG51bWJlcnMsIG1hcFtzdHJpbmddYW55eyJuYW1lIjogInRlc3QzIiwgImNvdW50IjogOH0pCglpbnB1dFsibnVtYmVycyJdID0gbnVtYmVycwoJaWYgb3V0cHV0LCBlcnJzID0gQ29hbGVzY2VNYXBUeXBlZChpbnB1dCwgIi4iLCAiOiIpOyBsZW4oZXJycykgPiAwIHsKCQlmb3IgXywgZXJyIDo9IHJhbmdlIGVycnMgewoJCQl0LkVycm9yZigiJXNcbiIsIGVycikKCQl9Cgl9CglpZiB2LCBvayA6PSBvdXRwdXRbInN0cjpudW1iZXJzLjAubmFtZSJdOyAhb2sgfHwgdiAhPSAidGVzdCIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgIm51bWJlcnMuMC5uYW1lIikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsiaW50Om51bWJlcnMuMC5jb3VudCJdOyAhb2sgfHwgdiAhPSAiMiIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImludDpudW1iZXJzLjAuY291bnQiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJzdHI6bnVtYmVycy4xLm5hbWUiXTsgIW9rIHx8IHYgIT0gInRlc3QyIiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAic3RyOm51bWJlcnMuMS5uYW1lIikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsiaW50Om51bWJlcnMuMS5jb3VudCJdOyAhb2sgfHwgdiAhPSAiNCIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImludDpudW1iZXJzLjEuY291bnQiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJzdHI6bnVtYmVycy4yLm5hbWUiXTsgIW9rIHx8IHYgIT0gInRlc3QzIiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAic3RyOm51bWJlcnMuMi5uYW1lIikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsiaW50Om51bWJlcnMuMi5jb3VudCJdOyAhb2sgfHwgdiAhPSAiOCIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImludDpudW1iZXJzLjIuY291bnQiKQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCoalesceTypedMultiTierScalar",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCoalesceTypedMultiTierScalar(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJycyBbXWVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaWQiXSA9ICJ0b3AiCglpbnB1dFsibmVzdGVkIl0gPSBtYXBbc3RyaW5nXWFueXtgZGF0YWA6IHRydWUsIGB2YWx1ZWA6IDQuOSwgYGF3ZXNvbWVgOiAidmVyeSB5ZXMifQoJaWYgb3V0cHV0LCBlcnJzID0gQ29hbGVzY2VNYXBUeXBlZChpbnB1dCwgIl9fIiwgInwiKTsgbGVuKGVycnMpID4gMCB7CgkJZm9yIF8sIGVyciA6PSByYW5nZSBlcnJzIHsKCQkJdC5FcnJvcmYoIiVzXG4iLCBlcnIpCgkJfQoJfQoJYXNzZXJ0LkVxdWFsKGB0b3BgLCBvdXRwdXRbYHN0cnxpZGBdKQoJYXNzZXJ0LkVxdWFsKGB0cnVlYCwgb3V0cHV0W2Bib29sfG5lc3RlZF9fZGF0YWBdKQoJYXNzZXJ0LkVxdWFsKGA0LjlgLCBvdXRwdXRbYGZsb2F0fG5lc3RlZF9fdmFsdWVgXSkKCWFzc2VydC5FcXVhbChgdmVyeSB5ZXNgLCBvdXRwdXRbYHN0cnxuZXN0ZWRfX2F3ZXNvbWVgXSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCoalesceTypedOneTierScalar",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCoalesceTypedOneTierScalar(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJycyBbXWVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaWQiXSA9ICJ0ZXN0IgoJaW5wdXRbImVuYWJsZWQiXSA9IHRydWUKCWlucHV0WyJmbG9hdCJdID0gMi43CglpZiBvdXRwdXQsIGVycnMgPSBDb2FsZXNjZU1hcFR5cGVkKGlucHV0LCAiLiIsICI6Iik7IGxlbihlcnJzKSA+IDAgewoJCWZvciBfLCBlcnIgOj0gcmFuZ2UgZXJycyB7CgkJCXQuRXJyb3JmKCIlc1xuIiwgZXJyKQoJCX0KCX0KCWFzc2VydC5FcXVhbChgdGVzdGAsIG91dHB1dFtgc3RyOmlkYF0pCglhc3NlcnQuRXF1YWwoYHRydWVgLCBvdXRwdXRbYGJvb2w6ZW5hYmxlZGBdKQoJYXNzZXJ0LkVxdWFsKGAyLjdgLCBvdXRwdXRbYGZsb2F0OmZsb2F0YF0pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCoalesceTypedTopLevelArray",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCoalesceTypedTopLevelArray(t *testing.T)",
            "Source": "ewoJdmFyIGVycnMgW11lcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG51bWJlcnMgPSBtYWtlKFtdYW55LCAwKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCAxKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCAyKQoJbnVtYmVycyA9IGFwcGVuZChudW1iZXJzLCAzKQoJaW5wdXRbIm51bWJlcnMiXSA9IG51bWJlcnMKCWlmIG91dHB1dCwgZXJycyA9IENvYWxlc2NlTWFwVHlwZWQoaW5wdXQsICIuIiwgIjoiKTsgbGVuKGVycnMpID4gMCB7CgkJZm9yIF8sIGVyciA6PSByYW5nZSBlcnJzIHsKCQkJdC5FcnJvcmYoIiVzXG4iLCBlcnIpCgkJfQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJpbnQ6bnVtYmVycy4wIl07ICFvayB8fCB2ICE9ICIxIiB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAiaW50Om51bWJlcnMuMCIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbImludDpudW1iZXJzLjEiXTsgIW9rIHx8IHYgIT0gIjIiIHsKCQl0LkVycm9yZigiSW5jb3JyZWN0IHZhbHVlICclcycgZm9yIGtleSAlcyIsIHYsICJpbnQ6bnVtYmVycy4xIikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsiaW50Om51bWJlcnMuMiJdOyAhb2sgfHwgdiAhPSAiMyIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImludDpudW1iZXJzLjIiKQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepGetArrayElement",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepGetArrayElement(t *testing.T)",
            "Source": "ewoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCWlucHV0ID0gRGVlcFNldChpbnB1dCwgW11zdHJpbmd7InRhZ3MiLCAiMCJ9LCAiYmFzZSIpLihtYXBbc3RyaW5nXWFueSkKCWlucHV0ID0gRGVlcFNldChpbnB1dCwgW11zdHJpbmd7InRhZ3MiLCAiMSJ9LCAib3RoZXIiKS4obWFwW3N0cmluZ11hbnkpCglpZiB2IDo9IERlZXBHZXQoaW5wdXQsIFtdc3RyaW5neyJ0YWdzIiwgIjAifSwgbmlsKTsgdiAhPSAiYmFzZSIgewoJCXQuRXJyb3JmKCIlc1xuIiwgdikKCX0KCWlmIHYgOj0gRGVlcEdldChpbnB1dCwgW11zdHJpbmd7InRhZ3MiLCAiMSJ9LCBuaWwpOyB2ICE9ICJvdGhlciIgewoJCXQuRXJyb3JmKCIlc1xuIiwgdikKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepGetBool",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepGetBool(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgYW55CglpbnB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dCA9IERlZXBTZXQoaW5wdXQsIFtdc3RyaW5neyJkZWVwbHkiLCAibmVzdGVkIiwgInZhbHVlIn0sIHRydWUpCglpbnB1dCA9IERlZXBTZXQoaW5wdXQsIFtdc3RyaW5neyJkZWVwbHkiLCAibmVzdGVkIiwgInRoaW5nIn0sICJub3BlIikKCWFzc2VydC5UcnVlKERlZXBHZXRCb29sKGlucHV0LCBbXXN0cmluZ3siZGVlcGx5IiwgIm5lc3RlZCIsICJ2YWx1ZSJ9KSkKCWFzc2VydC5GYWxzZShEZWVwR2V0Qm9vbChpbnB1dCwgW11zdHJpbmd7ImRlZXBseSIsICJuZXN0ZWQiLCAib3RoZXIifSkpCglhc3NlcnQuRmFsc2UoRGVlcEdldEJvb2woaW5wdXQsIFtdc3RyaW5neyJkZWVwbHkiLCAibmVzdGVkIiwgIm5vcGUifSkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepGetMapInMap",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepGetMapInMap(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW4gPSBtYXBbc3RyaW5nXWFueXtgb2tgOiB0cnVlLCBgYWx3YXlzYDogbWFwW3N0cmluZ11hbnl7YGZpbmlzaGluZ2A6IG1hcFtzdHJpbmddYW55e2BlYWNoX290aGVyc2A6IGBzZW50ZW5jZXNgfX19Cglhc3NlcnQuRXF1YWwoYHNlbnRlbmNlc2AsIERlZXBHZXQoaW4sIFtdc3RyaW5ne2BhbHdheXNgLCBgZmluaXNoaW5nYCwgYGVhY2hfb3RoZXJzYH0pKQoJYXNzZXJ0Lk5pbChEZWVwR2V0KGluLCBbXXN0cmluZ3tgYWx3YXlzYCwgYGZpbmlzaGluZ2AsIGBlYWNoX290aGVyc2AsIGBzYW5kd2ljaGVzYH0pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepGetMapKeyInArray",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepGetMapKeyInArray(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJaW5wdXQgPSBEZWVwU2V0KGlucHV0LCBbXXN0cmluZ3siZGV2aWNlcyIsICIwIiwgIm5hbWUifSwgImxvIikuKG1hcFtzdHJpbmddYW55KQoJaW5wdXQgPSBEZWVwU2V0KGlucHV0LCBbXXN0cmluZ3siZGV2aWNlcyIsICIxIiwgIm5hbWUifSwgImV0aDAiKS4obWFwW3N0cmluZ11hbnkpCglhc3NlcnQuRXF1YWwoYGxvYCwgRGVlcEdldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMCIsICJuYW1lIn0sIG5pbCkpCglhc3NlcnQuRXF1YWwoYGV0aDBgLCBEZWVwR2V0KGlucHV0LCBbXXN0cmluZ3siZGV2aWNlcyIsICIxIiwgIm5hbWUifSwgbmlsKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepGetMapKeyInDeepArray",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepGetMapKeyInDeepArray(t *testing.T)",
            "Source": "ewoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCWlucHV0ID0gRGVlcFNldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMCIsICJzd2l0Y2giLCAicGVlcnMiLCAiMCJ9LCAiMC4wLjAuMCIpLihtYXBbc3RyaW5nXWFueSkKCWlucHV0ID0gRGVlcFNldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMCIsICJzd2l0Y2giLCAicGVlcnMiLCAiMSJ9LCAiMC4wLjEuMSIpLihtYXBbc3RyaW5nXWFueSkKCWlucHV0ID0gRGVlcFNldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMSIsICJzd2l0Y2giLCAicGVlcnMiLCAiMCJ9LCAiMS4xLjAuMCIpLihtYXBbc3RyaW5nXWFueSkKCWlucHV0ID0gRGVlcFNldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMSIsICJzd2l0Y2giLCAicGVlcnMiLCAiMSJ9LCAiMS4xLjEuMSIpLihtYXBbc3RyaW5nXWFueSkKCWlmIHYgOj0gRGVlcEdldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMCIsICJzd2l0Y2giLCAicGVlcnMiLCAiMCJ9LCBuaWwpOyB2ICE9ICIwLjAuMC4wIiB7CgkJdC5FcnJvcmYoIiVzXG4iLCB2KQoJfQoJaWYgdiA6PSBEZWVwR2V0KGlucHV0LCBbXXN0cmluZ3siZGV2aWNlcyIsICIwIiwgInN3aXRjaCIsICJwZWVycyIsICIxIn0sIG5pbCk7IHYgIT0gIjAuMC4xLjEiIHsKCQl0LkVycm9yZigiJXNcbiIsIHYpCgl9CglpZiB2IDo9IERlZXBHZXQoaW5wdXQsIFtdc3RyaW5neyJkZXZpY2VzIiwgIjEiLCAic3dpdGNoIiwgInBlZXJzIiwgIjAifSwgbmlsKTsgdiAhPSAiMS4xLjAuMCIgewoJCXQuRXJyb3JmKCIlc1xuIiwgdikKCX0KCWlmIHYgOj0gRGVlcEdldChpbnB1dCwgW11zdHJpbmd7ImRldmljZXMiLCAiMSIsICJzd2l0Y2giLCAicGVlcnMiLCAiMSJ9LCBuaWwpOyB2ICE9ICIxLjEuMS4xIiB7CgkJdC5FcnJvcmYoIiVzXG4iLCB2KQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepGetNestedArrayElements",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepGetNestedArrayElements(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYXBbc3RyaW5nXWFueXtgaW50ZXJmYWNlc2A6IFtdc3RyaW5ne2BsbzBgLCBgZW4xYCwgYHdsYW4wYH19Cglhc3NlcnQuRXF1YWxWYWx1ZXMoW11hbnl7YGxvMGAsIGBlbjFgLCBgd2xhbjBgfSwgRGVlcEdldChpbnB1dCwgW11zdHJpbmd7YGludGVyZmFjZXNgLCBgKmB9KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepGetNestedArrayOfMaps",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepGetNestedArrayOfMaps(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYXBbc3RyaW5nXWFueXtgaW50ZXJmYWNlc2A6IFtdbWFwW3N0cmluZ11hbnl7e2BuYW1lYDogYGxvMGAsIGB0eXBlYDogYGxvb3BiYWNrYH0sIHtgbmFtZWA6IGBlbjFgLCBgdHlwZWA6IGBldGhlcm5ldGB9LCB7YG5hbWVgOiBgd2xhbjBgLCBgdHlwZWA6IGBldGhlcm5ldGAsIGB3aXJlbGVzc2A6IHRydWV9fX0KCWFzc2VydC5FcXVhbFZhbHVlcyhbXWFueXtgbG9vcGJhY2tgLCBgZXRoZXJuZXRgLCBgZXRoZXJuZXRgfSwgRGVlcEdldChpbnB1dCwgW11zdHJpbmd7YGludGVyZmFjZXNgLCBgKmAsIGB0eXBlYH0pKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKFtdYW55e2ZhbHNlLCBmYWxzZSwgdHJ1ZX0sIERlZXBHZXQoaW5wdXQsIFtdc3RyaW5ne2BpbnRlcmZhY2VzYCwgYCpgLCBgd2lyZWxlc3NgfSwgZmFsc2UpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepGetScalar",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepGetScalar(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJaW5wdXQgPSBEZWVwU2V0KGlucHV0LCBbXXN0cmluZ3siZGVlcGx5IiwgIm5lc3RlZCIsICJ2YWx1ZSJ9LCAxLjQpLihtYXBbc3RyaW5nXWFueSkKCWFzc2VydC5Ob3ROaWwoRGVlcEdldChpbnB1dCwgW11zdHJpbmd7ImRlZXBseSIsICJuZXN0ZWQiLCAidmFsdWUifSwgbmlsKSkKCWFzc2VydC5FcXVhbCh0cnVlLCBEZWVwR2V0KGlucHV0LCBbXXN0cmluZ3siZGVlcGx5IiwgIm5lc3RlZCIsICJ2YWx1ZTIifSwgdHJ1ZSkpCglhc3NlcnQuRXF1YWwoYGZhbGxiYWNrYCwgRGVlcEdldChpbnB1dCwgW11zdHJpbmd7ImRlZXBseSIsICJuZXN0ZWQiLCAidmFsdWUyIn0sICJmYWxsYmFjayIpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepSetArray",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepSetArray(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciB0ZXN0VmFsdWVzID0gW11zdHJpbmd7ImZpcnN0IiwgInNlY29uZCJ9Cglmb3IgaSwgdHYgOj0gcmFuZ2UgdGVzdFZhbHVlcyB7CgkJb3V0cHV0ID0gRGVlcFNldChvdXRwdXQsIFtdc3RyaW5neyJ0b3AtYXJyYXkiLCBmbXQuU3ByaW50KGkpfSwgdHYpLihtYXBbc3RyaW5nXWFueSkKCX0KCXRvcEFycmF5LCBvayA6PSBvdXRwdXRbInRvcC1hcnJheSJdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FbGVtZW50c01hdGNoKHRlc3RWYWx1ZXMsIHRvcEFycmF5KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepSetArrayIndices",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepSetArrayIndices(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYXBbc3RyaW5nXWFueXtgdGhpbmdzYDogbWFwW3N0cmluZ11hbnl7YHR5cGUxYDogW11zdHJpbmd7YGZpcnN0YCwgYHNlY29uZGAsIGB0aGlyZGB9LCBgdHlwZTJgOiBbXXN0cmluZ3tgZmlyc3RgLCBgc2Vjb25kYCwgYHRoaXJkYH0sIGB0eXBlM2A6IFtdYW55e21hcFtzdHJpbmddYW55e2BuYW1lYDogYGZpcnN0YCwgYGluZGV4YDogMH0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYGZpcnN0YCwgYGluZGV4YDogMX0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYGZpcnN0YCwgYGluZGV4YDogMn19fX0KCXZhciBvdXRwdXQgPSBEZWVwU2V0KGlucHV0LCBbXXN0cmluZ3tgdGhpbmdzYCwgYHR5cGUxYCwgYDBgfSwgYEZpcnN0YCkKCURlZXBTZXQob3V0cHV0LCBbXXN0cmluZ3tgdGhpbmdzYCwgYHR5cGUxYCwgYDJgfSwgYFRoaXJkYCkKCURlZXBTZXQob3V0cHV0LCBbXXN0cmluZ3tgdGhpbmdzYCwgYHR5cGUyYCwgYDFgfSwgYFNlY29uZGApCglEZWVwU2V0KG91dHB1dCwgW11zdHJpbmd7YHRoaW5nc2AsIGB0eXBlMmAsIGAyYH0sIG5pbCkKCURlZXBTZXQob3V0cHV0LCBbXXN0cmluZ3tgdGhpbmdzYCwgYHR5cGUyYCwgYDNgfSwgYHRoaXJkYCkKCURlZXBTZXQob3V0cHV0LCBbXXN0cmluZ3tgdGhpbmdzYCwgYHR5cGUzYCwgYDBgLCBgaW5kZXhgfSwgbWFwW3N0cmluZ11hbnl7YG51bWA6IDB9KQoJRGVlcFNldChvdXRwdXQsIFtdc3RyaW5ne2B0aGluZ3NgLCBgdHlwZTNgLCBgMWAsIGBpbmRleGB9LCBtYXBbc3RyaW5nXWFueXtgbnVtYDogMX0pCglEZWVwU2V0KG91dHB1dCwgW11zdHJpbmd7YHRoaW5nc2AsIGB0eXBlM2AsIGAyYCwgYGluZGV4YH0sIG1hcFtzdHJpbmddYW55e2BudW1gOiAyfSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgdGhpbmdzYDogbWFwW3N0cmluZ11hbnl7YHR5cGUxYDogW11hbnl7YEZpcnN0YCwgYHNlY29uZGAsIGBUaGlyZGB9LCBgdHlwZTJgOiBbXWFueXtgZmlyc3RgLCBgU2Vjb25kYCwgbmlsLCBgdGhpcmRgfSwgYHR5cGUzYDogW11hbnl7bWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgZmlyc3RgLCBgaW5kZXhgOiBtYXBbc3RyaW5nXWFueXtgbnVtYDogMH19LCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBmaXJzdGAsIGBpbmRleGA6IG1hcFtzdHJpbmddYW55e2BudW1gOiAxfX0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYGZpcnN0YCwgYGluZGV4YDogbWFwW3N0cmluZ11hbnl7YG51bWA6IDJ9fX19fSwgb3V0cHV0KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepSetBool",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepSetBool(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciB0ZXN0VmFsdWUgPSB0cnVlCglvdXRwdXQgPSBEZWVwU2V0KG91dHB1dCwgW11zdHJpbmd7ImJvb2wifSwgdGVzdFZhbHVlKS4obWFwW3N0cmluZ11hbnkpCgl2YWx1ZSwgb2sgOj0gb3V0cHV0WyJib29sIl0KCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKHRlc3RWYWx1ZSwgdmFsdWUpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepSetNestedMapCreation",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepSetNestedMapCreation(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCW91dHB1dCA9IERlZXBTZXQob3V0cHV0LCBbXXN0cmluZ3siZGVlcGx5IiwgIm5lc3RlZCIsICJtYXAifSwgdHJ1ZSkuKG1hcFtzdHJpbmddYW55KQoJb3V0cHV0ID0gRGVlcFNldChvdXRwdXQsIFtdc3RyaW5neyJkZWVwbHkiLCAibmVzdGVkIiwgImNvdW50In0sIDIpLihtYXBbc3RyaW5nXWFueSkKCWRlZXBseSwgb2sgOj0gb3V0cHV0WyJkZWVwbHkiXQoJYXNzZXJ0LlRydWUob2spCgl2YXIgZGVlcGx5TWFwID0gZGVlcGx5LihtYXBbc3RyaW5nXWFueSkKCW5lc3RlZCwgb2sgOj0gZGVlcGx5TWFwWyJuZXN0ZWQiXQoJYXNzZXJ0LlRydWUob2spCgl2YXIgbmVzdGVkTWFwID0gbmVzdGVkLihtYXBbc3RyaW5nXWFueSkKCV8sIG9rID0gbmVzdGVkTWFwWyJtYXAiXQoJYXNzZXJ0LlRydWUob2spCglfLCBvayA9IG5lc3RlZE1hcFsiY291bnQiXQoJYXNzZXJ0LlRydWUob2spCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepSetNothing",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepSetNothing(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCW91dHB1dCA9IERlZXBTZXQob3V0cHV0LCBbXXN0cmluZ3t9LCAieWF5IikuKG1hcFtzdHJpbmddYW55KQoJYXNzZXJ0LkVtcHR5KG91dHB1dCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepSetReplace",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepSetReplace(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFwW3N0cmluZ11hbnl7YHRoaXNgOiBtYXBbc3RyaW5nXWFueXtgdGVzdGA6IGAxYH19CglEZWVwU2V0KG91dHB1dCwgW11zdHJpbmd7InRoaXMiLCAidGVzdCJ9LCBgMmApCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YHRoaXNgOiBtYXBbc3RyaW5nXWFueXtgdGVzdGA6IGAyYH19LCBvdXRwdXQpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepSetString",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepSetString(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciB0ZXN0VmFsdWUgPSAidGVzdC1zdHJpbmciCglvdXRwdXQgPSBEZWVwU2V0KG91dHB1dCwgW11zdHJpbmd7InN0ciJ9LCB0ZXN0VmFsdWUpLihtYXBbc3RyaW5nXWFueSkKCXZhbHVlLCBvayA6PSBvdXRwdXRbInN0ciJdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbCh0ZXN0VmFsdWUsIHZhbHVlKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepSetStructField",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepSetStructField(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIHRlc3RTdHJ1Y3REZWVwU2V0IHN0cnVjdCB7CgkJU3RyaW5nIHN0cmluZwoJCUludCAgICBpbnQKCQlGbG9hdCAgZmxvYXQ2NAoJCUJvb2wgICBib29sCgl9Cgl2YXIgaW5zdGFuY2UgdGVzdFN0cnVjdERlZXBTZXQKCURlZXBTZXQoJmluc3RhbmNlLCBbXXN0cmluZ3siU3RyaW5nIn0sIGBIZWxsb2ApCglEZWVwU2V0KCZpbnN0YW5jZSwgW11zdHJpbmd7IkludCJ9LCAxMjMpCglEZWVwU2V0KCZpbnN0YW5jZSwgW11zdHJpbmd7IkZsb2F0In0sIDMuMTQpCglEZWVwU2V0KCZpbnN0YW5jZSwgW11zdHJpbmd7IkJvb2wifSwgdHJ1ZSkKCWFzc2VydC5FcXVhbChgSGVsbG9gLCBpbnN0YW5jZS5TdHJpbmcpCglhc3NlcnQuRXF1YWwoMTIzLCBpbnN0YW5jZS5JbnQpCglhc3NlcnQuRXF1YWwoMy4xNCwgaW5zdGFuY2UuRmxvYXQpCglhc3NlcnQuVHJ1ZShpbnN0YW5jZS5Cb29sKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDeepStructs",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDeepStructs(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW4gPSAmbWFwVGVzdFN0cnVjdHtOYW1lOiBgdG9wbGV2ZWxgLCBOZXN0ZWRQOiAmbWFwVGVzdFN1YnN0cnVjdHtOYW1lOiBgb25lLXB0cmAsIFZhbHVlOiB0cnVlfSwgTmVzdGVkOiBtYXBUZXN0U3Vic3RydWN0e05hbWU6IGBvbmUtdmFsdWVgLCBWYWx1ZTogMy4xNH19Cglhc3NlcnQuRXF1YWwoYHRvcGxldmVsYCwgRGVlcEdldChpbiwgW11zdHJpbmd7YE5hbWVgfSkpCglhc3NlcnQuRXF1YWwoYG9uZS1wdHJgLCBEZWVwR2V0KGluLCBbXXN0cmluZ3tgTmVzdGVkUGAsIGBOYW1lYH0pKQoJYXNzZXJ0LkVxdWFsKHRydWUsIERlZXBHZXQoaW4sIFtdc3RyaW5ne2BOZXN0ZWRQYCwgYFZhbHVlYH0pKQoJYXNzZXJ0LkVxdWFsKGBvbmUtdmFsdWVgLCBEZWVwR2V0KGluLCBbXXN0cmluZ3tgTmVzdGVkYCwgYE5hbWVgfSkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgzLjE0KSwgRGVlcEdldChpbiwgW11zdHJpbmd7YE5lc3RlZGAsIGBWYWx1ZWB9KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDelete",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDelete(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW4gPSBtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogMiwgYGNgOiAzfQoJYXNzZXJ0Lk5vRXJyb3IoRGVsZXRlKGluLCBgYmApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGNgOiAzfSwgaW4pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDiffuseMap",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDiffuseMap(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0cHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCW91dHB1dFsibmFtZSJdID0gInRlc3QudGhpbmcubmFtZSIKCW91dHB1dFsiZW5hYmxlZCJdID0gdHJ1ZQoJb3V0cHV0WyJjb29sLmJlYW5zIl0gPSAieWVwIgoJb3V0cHV0WyJ0YWdzLjAiXSA9ICJiYXNlIgoJb3V0cHV0WyJ0YWdzLjEiXSA9ICJvdGhlciIKCW91dHB1dFsidGFncy4yIl0gPSAibW9yZSIKCW91dHB1dFsidGFncy4zIl0gPSAic3RpbGwtbW9yZSIKCW91dHB1dFsiZGV2aWNlcy4wLm5hbWUiXSA9ICJsbyIKCW91dHB1dFsiZGV2aWNlcy4xLm5hbWUiXSA9ICJldGgwIgoJb3V0cHV0WyJkZXZpY2VzLjEucGVlcnMuMCJdID0gIjAuMC4wLjAiCglvdXRwdXRbImRldmljZXMuMS5wZWVycy4xIl0gPSAiMS4xLjEuMSIKCW91dHB1dFsiZGV2aWNlcy4xLnBlZXJzLjIiXSA9ICIyLjIuMi4yIgoJb3V0cHV0WyJkZXZpY2VzLjEuc3dpdGNoLjAubmFtZSJdID0gImFhOmJiOmNjOmRkOmVlOmZmIgoJb3V0cHV0WyJkZXZpY2VzLjEuc3dpdGNoLjAuaXAiXSA9ICIxMTEuMjIyLjAuMSIKCW91dHB1dFsiZGV2aWNlcy4xLnN3aXRjaC4xLm5hbWUiXSA9ICJjYzpkZDplZTpmZjpiYjpkZCIKCW91dHB1dFsiZGV2aWNlcy4xLnN3aXRjaC4xLmlwIl0gPSAiMTExLjIyMi4wLjIiCglvdXRwdXQsIGVyciA6PSBEaWZmdXNlTWFwKG91dHB1dCwgIi4iKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJdiwgXyA6PSBvdXRwdXRbIm5hbWUiXQoJYXNzZXJ0LkVxdWFsKCJ0ZXN0LnRoaW5nLm5hbWUiLCB2KQoJdiwgXyA9IG91dHB1dFsiZW5hYmxlZCJdCglhc3NlcnQuRXF1YWwodHJ1ZSwgdikKCXYsIG9rIDo9IG91dHB1dFsidGFncyJdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5MZW4odiwgNCkKCXZhciB2QXJyYXkgPSB2LihbXWFueSkKCWFzc2VydC5FcXVhbCgiYmFzZSIsIHZBcnJheVswXSkKCWFzc2VydC5FcXVhbCgib3RoZXIiLCB2QXJyYXlbMV0pCglhc3NlcnQuRXF1YWwoIm1vcmUiLCB2QXJyYXlbMl0pCglhc3NlcnQuRXF1YWwoInN0aWxsLW1vcmUiLCB2QXJyYXlbM10pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDiffuseMultiTierComplex",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDiffuseMultiTierComplex(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyIGVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaXRlbXMuMC5uYW1lIl0gPSAiRmlyc3QiCglpbnB1dFsiaXRlbXMuMC5hZ2UiXSA9IDU0CglpbnB1dFsiaXRlbXMuMS5uYW1lIl0gPSAiU2Vjb25kIgoJaW5wdXRbIml0ZW1zLjEuYWdlIl0gPSA3NwoJaW5wdXRbIml0ZW1zLjIubmFtZSJdID0gIlRoaXJkIgoJaW5wdXRbIml0ZW1zLjIuYWdlIl0gPSA4MgoJb3V0cHV0LCBlcnIgPSBEaWZmdXNlTWFwKGlucHV0LCAiLiIpCglhc3NlcnQuTm9FcnJvcihlcnIpCglpX2l0ZW1zLCBvayA6PSBvdXRwdXRbIml0ZW1zIl0KCWFzc2VydC5UcnVlKG9rKQoJdmFyIGl0ZW1zID0gaV9pdGVtcy4oW11hbnkpCglhc3NlcnQuTGVuKGl0ZW1zLCAzKQoJZm9yIGl0ZW1faWQsIG9iaiA6PSByYW5nZSBpdGVtcyB7CgkJZm9yIGssIHYgOj0gcmFuZ2UgTShvYmopLk1hcE5hdGl2ZSgpIHsKCQkJaW5WYWx1ZSwgb2sgOj0gaW5wdXRbZm10LlNwcmludGYoIml0ZW1zLiVkLiVzIiwgaXRlbV9pZCwgayldCgkJCWFzc2VydC5UcnVlKG9rKQoJCQlhc3NlcnQuRXF1YWwodiwgaW5WYWx1ZSkKCQl9Cgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDiffuseMultiTierMixed",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDiffuseMultiTierMixed(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyIGVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaXRlbXMuMC50YWdzIl0gPSBbXXN0cmluZ3siYmFzZSIsICJvdGhlciJ9CglpbnB1dFsiaXRlbXMuMS50YWdzIl0gPSBbXXN0cmluZ3sidGhpbmciLCAic3RpbGwtb3RoZXIiLCAibW9yZS1vdGhlciJ9CglpbnB1dFsiaXRlbXMuMi50YWdzIl0gPSBbXXN0cmluZ3sibGFzdCJ9CglvdXRwdXQsIGVyciA9IERpZmZ1c2VNYXAoaW5wdXQsICIuIikKCWFzc2VydC5Ob0Vycm9yKGVycikKCWlfaXRlbXMsIG9rIDo9IG91dHB1dFsiaXRlbXMiXQoJYXNzZXJ0LlRydWUob2spCgl2YXIgaXRlbXMgPSBpX2l0ZW1zLihbXWFueSkKCWFzc2VydC5MZW4oaXRlbXMsIDMpCglmb3IgaXRlbV9pZCwgb2JqIDo9IHJhbmdlIGl0ZW1zIHsKCQlmb3IgaywgdiA6PSByYW5nZSBNKG9iaikuTWFwTmF0aXZlKCkgewoJCQl2YXIgdkFyeSA9IHNsaWNldXRpbC5TdHJpbmdpZnkodikKCQkJaW5WYWx1ZSwgb2sgOj0gaW5wdXRbZm10LlNwcmludGYoIml0ZW1zLiVkLiVzIiwgaXRlbV9pZCwgayldCgkJCWFzc2VydC5UcnVlKG9rKQoJCQl2YXIgaW5WYWx1ZUFyeSA9IGluVmFsdWUuKFtdc3RyaW5nKQoJCQlmb3IgaSwgdkFyeVYgOj0gcmFuZ2UgdkFyeSB7CgkJCQlhc3NlcnQuRXF1YWwoaW5WYWx1ZUFyeVtpXSwgdkFyeVYpCgkJCX0KCQl9Cgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDiffuseMultiTierScalar",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDiffuseMultiTierScalar(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyIGVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaXRlbXMuMCJdID0gNTQKCWlucHV0WyJpdGVtcy4xIl0gPSA3NwoJaW5wdXRbIml0ZW1zLjIiXSA9IDgyCglvdXRwdXQsIGVyciA9IERpZmZ1c2VNYXAoaW5wdXQsICIuIikKCWFzc2VydC5Ob0Vycm9yKGVycikKCWlfaXRlbXMsIG9rIDo9IG91dHB1dFsiaXRlbXMiXQoJYXNzZXJ0LlRydWUob2spCgl2YXIgaXRlbXMgPSBpX2l0ZW1zLihbXWFueSkKCWZvciBpLCB2IDo9IHJhbmdlIFtdaW50ezU0LCA3NywgODJ9IHsKCQlhc3NlcnQuVHJ1ZShpIDwgbGVuKGl0ZW1zKSkKCQlhc3NlcnQuRXF1YWwodiwgaXRlbXNbaV0uKGludCkpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDiffuseOneTierComplex",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDiffuseOneTierComplex(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyIGVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiYXJyYXkiXSA9IFtdc3RyaW5neyJmaXJzdCIsICJ0aGlyZCIsICJmaWZ0aCJ9CglpbnB1dFsibnVtYXJ5Il0gPSBbXWludHs5LCA3LCAzfQoJaW5wdXRbInRoaW5ncyJdID0gbWFwW3N0cmluZ11pbnR7Im9uZSI6IDEsICJ0d28iOiAyLCAidGhyZWUiOiAzfQoJb3V0cHV0LCBlcnIgPSBEaWZmdXNlTWFwKGlucHV0LCAiLiIpCglhc3NlcnQuTm9FcnJvcihlcnIpCglfLCBvayA6PSBvdXRwdXRbImFycmF5Il0KCWFzc2VydC5UcnVlKG9rKQoJZm9yIGksIHYgOj0gcmFuZ2Ugb3V0cHV0WyJhcnJheSJdLihbXXN0cmluZykgewoJCWFzc2VydC5FcXVhbCh2LCBpbnB1dFsiYXJyYXkiXS4oW11zdHJpbmcpW2ldKQoJfQoJXywgb2sgPSBvdXRwdXRbIm51bWFyeSJdCglhc3NlcnQuVHJ1ZShvaykKCWZvciBpLCB2IDo9IHJhbmdlIG91dHB1dFsibnVtYXJ5Il0uKFtdaW50KSB7CgkJYXNzZXJ0LkVxdWFsKHYsIGlucHV0WyJudW1hcnkiXS4oW11pbnQpW2ldKQoJfQoJXywgb2sgPSBvdXRwdXRbInRoaW5ncyJdCglhc3NlcnQuVHJ1ZShvaykKCWZvciBrLCB2IDo9IHJhbmdlIG91dHB1dFsidGhpbmdzIl0uKG1hcFtzdHJpbmddaW50KSB7CgkJaW5wdXRWYWx1ZSwgb2sgOj0gaW5wdXRbInRoaW5ncyJdLihtYXBbc3RyaW5nXWludClba10KCQlhc3NlcnQuVHJ1ZShvaykKCQlhc3NlcnQuRXF1YWwodiwgaW5wdXRWYWx1ZSkKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDiffuseOneTierScalar",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDiffuseOneTierScalar(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJyIGVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaWQiXSA9ICJ0ZXN0IgoJaW5wdXRbImVuYWJsZWQiXSA9IHRydWUKCWlucHV0WyJmbG9hdCJdID0gMi43CglvdXRwdXQsIGVyciA9IERpZmZ1c2VNYXAoaW5wdXQsICIuIikKCWFzc2VydC5Ob0Vycm9yKGVycikKCXYsIG9rIDo9IG91dHB1dFsiaWQiXQoJYXNzZXJ0LlRydWUob2spCglhc3NlcnQuRXF1YWwoInRlc3QiLCB2KQoJdiwgb2sgPSBvdXRwdXRbImVuYWJsZWQiXQoJYXNzZXJ0LlRydWUob2spCglhc3NlcnQuRXF1YWwodHJ1ZSwgdikKCXYsIG9rID0gb3V0cHV0WyJmbG9hdCJdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbCgyLjcsIHYpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDiffuseTypedMultiTierComplex",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDiffuseTypedMultiTierComplex(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJycyBbXWVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsic3RyOml0ZW1zLjAubmFtZSJdID0gIkZpcnN0IgoJaW5wdXRbImludDppdGVtcy4wLmFnZSJdID0gNTQKCWlucHV0WyJzdHI6aXRlbXMuMS5uYW1lIl0gPSAiU2Vjb25kIgoJaW5wdXRbImludDppdGVtcy4xLmFnZSJdID0gNzcKCWlucHV0WyJzdHI6aXRlbXMuMi5uYW1lIl0gPSAiVGhpcmQiCglpbnB1dFsiaW50Oml0ZW1zLjIuYWdlIl0gPSA4MgoJb3V0cHV0LCBlcnJzID0gRGlmZnVzZU1hcFR5cGVkKGlucHV0LCAiLiIsICI6IikKCWFzc2VydC5MZW4oZXJycywgMCkKCWFzc2VydC5MZW4ob3V0cHV0WyJpdGVtcyJdLCAzKQoJaWYgaV9pdGVtcywgb2sgOj0gb3V0cHV0WyJpdGVtcyJdOyBvayB7CgkJdmFyIGl0ZW1zID0gaV9pdGVtcy4oW11hbnkpCgkJZm9yIGl0ZW1faWQsIG9iaiA6PSByYW5nZSBpdGVtcyB7CgkJCWZvciBrLCB2IDo9IHJhbmdlIE0ob2JqKS5NYXBOYXRpdmUoKSB7CgkJCQlzd2l0Y2ggayB7CgkJCQljYXNlIGBuYW1lYDoKCQkJCQlhc3NlcnQuRXF1YWwodiwgaW5wdXRbZm10LlNwcmludGYoInN0cjppdGVtcy4lZC4lcyIsIGl0ZW1faWQsIGspXSkKCQkJCWNhc2UgYGFnZWA6CgkJCQkJYXNzZXJ0LkVxdWFsVmFsdWVzKHYsIGlucHV0W2ZtdC5TcHJpbnRmKCJpbnQ6aXRlbXMuJWQuJXMiLCBpdGVtX2lkLCBrKV0pCgkJCQl9CgkJCX0KCQl9Cgl9IGVsc2UgewoJCXQuRXJyb3JmKCJLZXkgJ2l0ZW1zJyBpcyBtaXNzaW5nIGZyb20gb3V0cHV0OiAldiIsIG91dHB1dCkKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDiffuseTypedMultiTierMixed",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDiffuseTypedMultiTierMixed(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJycyBbXWVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaXRlbXMuMC50YWdzIl0gPSBbXXN0cmluZ3siYmFzZSIsICJvdGhlciJ9CglpbnB1dFsiaXRlbXMuMS50YWdzIl0gPSBbXXN0cmluZ3sidGhpbmciLCAic3RpbGwtb3RoZXIiLCAibW9yZS1vdGhlciJ9CglpbnB1dFsiaXRlbXMuMi50YWdzIl0gPSBbXXN0cmluZ3sibGFzdCJ9CglvdXRwdXQsIGVycnMgPSBEaWZmdXNlTWFwVHlwZWQoaW5wdXQsICIuIiwgIjoiKQoJYXNzZXJ0LkxlbihlcnJzLCAwKQoJaWYgaV9pdGVtcywgb2sgOj0gb3V0cHV0WyJpdGVtcyJdOyBvayB7CgkJdmFyIGl0ZW1zID0gaV9pdGVtcy4oW11hbnkpCgkJaWYgbGVuKGl0ZW1zKSAhPSAzIHsKCQkJdC5FcnJvcmYoIktleSAnaXRlbXMnIHNob3VsZCBiZSBhbiBhcnJheSB3aXRoIDMgZWxlbWVudHMsIGdvdCAldiIsIGlfaXRlbXMpCgkJfQoJCWZvciBpdGVtX2lkLCBvYmogOj0gcmFuZ2UgaXRlbXMgewoJCQlmb3IgaywgdiA6PSByYW5nZSBNKG9iaikuTWFwTmF0aXZlKCkgewoJCQkJdmFyIHZBcnkgPSBzbGljZXV0aWwuU3RyaW5naWZ5KHYpCgkJCQlpZiBpblZhbHVlLCBvayA6PSBpbnB1dFtmbXQuU3ByaW50ZigiaXRlbXMuJWQuJXMiLCBpdGVtX2lkLCBrKV07ICFvayB7CgkJCQkJdC5FcnJvcmYoIktleSAlcyBJbmNvcnJlY3QsIGV4cGVjdGVkICVzLCBnb3QgJXMiLCBmbXQuU3ByaW50ZigiaXRlbXMuJWQuJXMiLCBpdGVtX2lkLCBrKSwgaW5WYWx1ZSwgdikKCQkJCX0gZWxzZSB7CgkJCQkJdmFyIGluVmFsdWVBcnkgPSBpblZhbHVlLihbXXN0cmluZykKCQkJCQlmb3IgaSwgdkFyeVYgOj0gcmFuZ2UgdkFyeSB7CgkJCQkJCWlmIHZBcnlWICE9IGluVmFsdWVBcnlbaV0gewoJCQkJCQkJdC5FcnJvcmYoIktleSAlc1slZF0gSW5jb3JyZWN0LCBleHBlY3RlZCAlcywgZ290ICVzIiwgZm10LlNwcmludGYoIml0ZW1zLiVkLiVzIiwgaXRlbV9pZCwgayksIGksIGluVmFsdWVBcnlbaV0sIHZBcnlWKQoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoJfSBlbHNlIHsKCQl0LkVycm9yZigiS2V5ICdpdGVtcycgaXMgbWlzc2luZyBmcm9tIG91dHB1dDogJXYiLCBvdXRwdXQpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDiffuseTypedMultiTierScalar",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDiffuseTypedMultiTierScalar(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJycyBbXWVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsiaW50Oml0ZW1zLjAiXSA9IDU0CglpbnB1dFsiaW50Oml0ZW1zLjEiXSA9IDc3CglpbnB1dFsiaW50Oml0ZW1zLjIiXSA9IDgyCglvdXRwdXQsIGVycnMgPSBEaWZmdXNlTWFwVHlwZWQoaW5wdXQsICIuIiwgIjoiKQoJYXNzZXJ0LkxlbihlcnJzLCAwKQoJYXNzZXJ0LkVsZW1lbnRzTWF0Y2gob3V0cHV0WyJpdGVtcyJdLCBbXWludDY0ezU0LCA3NywgODJ9KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDiffuseTypedOneTierComplex",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDiffuseTypedOneTierComplex(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZXJycyBbXWVycm9yCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIG91dHB1dCA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglpbnB1dFsic3RyOmFycmF5Il0gPSBbXXN0cmluZ3siZmlyc3QiLCAidGhpcmQiLCAiZmlmdGgifQoJaW5wdXRbImFycmF5MiJdID0gW11zdHJpbmd7ImZpcnN0IiwgInRoaXJkIiwgImZpZnRoIn0KCWlucHV0WyJpbnQ6bnVtYXJ5LjAiXSA9ICI5IgoJaW5wdXRbImludDpudW1hcnkuMSJdID0gIjciCglpbnB1dFsiaW50Om51bWFyeS4yIl0gPSAiMyIKCWlucHV0WyJpbnQ6dGhpbmdzLm9uZSJdID0gIjEiCglpbnB1dFsiaW50OnRoaW5ncy50d28iXSA9ICIyIgoJaW5wdXRbImludDp0aGluZ3MudGhyZWUiXSA9ICIzIgoJaWYgb3V0cHV0LCBlcnJzID0gRGlmZnVzZU1hcFR5cGVkKGlucHV0LCAiLiIsICI6Iik7IGxlbihlcnJzKSA+IDAgewoJCWZvciBfLCBlcnIgOj0gcmFuZ2UgZXJycyB7CgkJCWFzc2VydC5Ob0Vycm9yKGVycikKCQl9Cgl9Cglhc3NlcnQuQ29udGFpbnMob3V0cHV0LCBgYXJyYXlgKQoJYXNzZXJ0LkxlbihvdXRwdXRbYGFycmF5YF0sIDMpCglmb3IgaSwgdiA6PSByYW5nZSBvdXRwdXRbImFycmF5Il0uKFtdc3RyaW5nKSB7CgkJYXNzZXJ0LkVxdWFsKHYsIGlucHV0WyJzdHI6YXJyYXkiXS4oW11zdHJpbmcpW2ldKQoJfQoJYXNzZXJ0LkNvbnRhaW5zKG91dHB1dCwgYGFycmF5MmApCglhc3NlcnQuTGVuKG91dHB1dFtgYXJyYXkyYF0sIDMpCglmb3IgaSwgdiA6PSByYW5nZSBvdXRwdXRbImFycmF5MiJdLihbXXN0cmluZykgewoJCWFzc2VydC5FcXVhbCh2LCBpbnB1dFsiYXJyYXkyIl0uKFtdc3RyaW5nKVtpXSkKCX0KCWFzc2VydC5Db250YWlucyhvdXRwdXQsIGBudW1hcnlgKQoJYXNzZXJ0LkxlbihvdXRwdXRbYG51bWFyeWBdLCAzKQoJYXNzZXJ0LkVsZW1lbnRzTWF0Y2gob3V0cHV0WyJudW1hcnkiXSwgW11pbnQ2NHs5LCA3LCAzfSkKCWFzc2VydC5Db250YWlucyhvdXRwdXQsIGB0aGluZ3NgKQoJZm9yIGssIHYgOj0gcmFuZ2Ugb3V0cHV0WyJ0aGluZ3MiXS4obWFwW3N0cmluZ11hbnkpIHsKCQlzd2l0Y2ggayB7CgkJY2FzZSBgb25lYDoKCQkJaWYgdi4oaW50NjQpICE9IDEgewoJCQkJdC5FcnJvcmYoIkV4cGVjdGVkIHRoaW5nc1snb25lJ10gPSAxLCBnb3QgJXYiLCB2KQoJCQl9CgkJY2FzZSBgdHdvYDoKCQkJaWYgdi4oaW50NjQpICE9IDIgewoJCQkJdC5FcnJvcmYoIkV4cGVjdGVkIHRoaW5nc1sndHdvJ10gPSAyLCBnb3QgJXYiLCB2KQoJCQl9CgkJY2FzZSBgdGhyZWVgOgoJCQlpZiB2LihpbnQ2NCkgIT0gMyB7CgkJCQl0LkVycm9yZigiRXhwZWN0ZWQgdGhpbmdzWyd0aHJlZSddID0gMywgZ290ICV2IiwgdikKCQkJfQoJCX0KCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDiffuseTypedOneTierScalar",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDiffuseTypedOneTierScalar(t *testing.T)",
            "Source": "ewoJdmFyIGVycnMgW11lcnJvcgoJdmFyIGlucHV0ID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCXZhciBvdXRwdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJaW5wdXRbInN0cjppZCJdID0gInRlc3QiCglpbnB1dFsibmFtZSJdID0gImRlZmF1bHQtc3RyaW5nIgoJaW5wdXRbImJvb2w6ZW5hYmxlZCJdID0gInRydWUiCglpbnB1dFsiZmxvYXQ6ZmxvYXQiXSA9ICIyLjciCglpZiBvdXRwdXQsIGVycnMgPSBEaWZmdXNlTWFwVHlwZWQoaW5wdXQsICIuIiwgIjoiKTsgbGVuKGVycnMpID4gMCB7CgkJZm9yIF8sIGVyciA6PSByYW5nZSBlcnJzIHsKCQkJdC5FcnJvcmYoIiVzXG4iLCBlcnIpCgkJfQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0WyJpZCJdOyAhb2sgfHwgdiAhPSAidGVzdCIgewoJCXQuRXJyb3JmKCJJbmNvcnJlY3QgdmFsdWUgJyVzJyBmb3Iga2V5ICVzIiwgdiwgImlkIikKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFsibmFtZSJdOyAhb2sgfHwgdiAhPSAiZGVmYXVsdC1zdHJpbmciIHsKCQl0LkVycm9yZigiSW5jb3JyZWN0IHZhbHVlICclcycgZm9yIGtleSAlcyIsIHYsICJkZWZhdWx0LXN0cmluZyIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbImVuYWJsZWQiXTsgIW9rIHx8IHYgIT0gdHJ1ZSB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAiZW5hYmxlZCIpCgl9CglpZiB2LCBvayA6PSBvdXRwdXRbImZsb2F0Il07ICFvayB8fCB2ICE9IDIuNyB7CgkJdC5FcnJvcmYoIkluY29ycmVjdCB2YWx1ZSAnJXMnIGZvciBrZXkgJXMiLCB2LCAiZmxvYXQiKQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestGetNil",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestGetNil(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJdmFyIGxldmVsMSA9IG1ha2UobWFwW3N0cmluZ11hbnkpCglsZXZlbDFbIm5pbHZhbHVlIl0gPSBuaWwKCWlucHV0WyJ0ZXN0Il0gPSBsZXZlbDEKCWFzc2VydC5OaWwoRGVlcEdldChpbnB1dCwgW11zdHJpbmd7InRlc3QiLCAibmlsdmFsdWUifSwgIm5vcGUiKSkKCWFzc2VydC5OaWwoRGVlcEdldChpbnB1dCwgW11zdHJpbmd7InRlc3QiLCAibmlsdmFsdWUifSwgbmlsKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestJSONPath",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestJSONPath(t *testing.T)",
            "Source": "ewoJdmFyIGZuID0gZnVuYyhxdWVyeSBzdHJpbmcpIGFueSB7CgkJdmFyIG91dCwgZXJyID0gSlNPTlBhdGgodGVzdEpzb25QYXRoRGF0YSwgcXVlcnkpCgkJYXNzZXJ0Lk5vRXJyb3IodCwgZXJyLCBxdWVyeSkKCQlyZXR1cm4gb3V0Cgl9Cglmb3IgcXVlcnksIHdhbnRlZCA6PSByYW5nZSBtYXBbc3RyaW5nXWFueXtgJC5zdG9yZS5ib29rWypdLmF1dGhvcmA6IFtdYW55eyJOaWdlbCBSZWVzIiwgIkV2ZWx5biBXYXVnaCIsICJIZXJtYW4gTWVsdmlsbGUiLCAiSi4gUi4gUi4gVG9sa2llbiJ9LCBgJC4uYXV0aG9yYDogW11hbnl7Ik5pZ2VsIFJlZXMiLCAiRXZlbHluIFdhdWdoIiwgIkhlcm1hbiBNZWx2aWxsZSIsICJKLiBSLiBSLiBUb2xraWVuIn0sIGAkLi5wcmljZWA6IFtdYW55ezguOTUsIDEyLjk5LCA4Ljk5LCAyMi45OSwgMTkuOTV9LCBgJC4uYm9va1s/KC5wcmljZSA8PSA4Ljk5KV0udGl0bGVgOiBbXWFueXsiTW9ieSBEaWNrIiwgIlNheWluZ3Mgb2YgdGhlIENlbnR1cnkifSwgYCQuLmJvb2tbPygucHJpY2UgPiAxMC4wKV0udGl0bGVgOiBbXWFueXsiU3dvcmQgb2YgSG9ub3VyIiwgIlRoZSBMb3JkIG9mIHRoZSBSaW5ncyJ9fSB7CgkJYXNzZXJ0LkVsZW1lbnRzTWF0Y2godCwgd2FudGVkLCBmbihxdWVyeSksIHF1ZXJ5KQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestM",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestM(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBNKG1hcFtzdHJpbmddYW55e2BmaXJzdGA6IHRydWUsIGBzZWNvbmRgOiBtYXBbc3RyaW5nXWFueXtgczFgOiBgdGVzdGAsIGB2YWx1ZXNgOiBbXWludHsxLCAyLCAzLCA0fSwgYHRydXRoeWA6IGBUcnVlYCwgYHN0cm51bWA6IGA0MmAsIGB0aGVuYDogYDIwMDYtMDEtMDJgfSwgYG5vd2A6IHRpbWUuTm93KCksIGB0aGlyZGA6IDMuMTQxNSwgYGZvdXJ0aGA6IDQyLCBgbWFwc2xpY2VgOiBbXWFueXttYXBbc3RyaW5nXWFueXtgaWRgOiAxfSwgbWFwW3N0cmluZ11hbnl7YGlkYDogMn0sIG1hcFtzdHJpbmddYW55e2BpZGA6IDN9fX0pCglhc3NlcnQuRXF1YWwoYGAsIE0obmlsKS5TdHJpbmcoYGxvbGApKQoJYXNzZXJ0LkZhbHNlKE0obmlsKS5Cb29sKGBsb2xgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgwKSwgTShuaWwpLkludChgbG9sYCkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgwKSwgTShuaWwpLkZsb2F0KGBsb2xgKSkKCWFzc2VydC5MZW4oTShuaWwpLlNsaWNlKGBsb2xgKSwgMCkKCWFzc2VydC5OaWwoTShuaWwpLkF1dG8oYHNlY29uZC5zdHJudW1gKSkKCWFzc2VydC5aZXJvKE0obmlsKS5UaW1lKGBub3dgKSkKCWFzc2VydC5FcXVhbChgdGVzdGAsIGlucHV0LlN0cmluZyhgc2Vjb25kLnMxYCkpCglhc3NlcnQuVHJ1ZShpbnB1dC5Cb29sKGBmaXJzdGApKQoJYXNzZXJ0LlRydWUoaW5wdXQuQm9vbChgc2Vjb25kLnRydXRoeWApKQoJYXNzZXJ0LlRydWUoaW5wdXQuQm9vbChgc2Vjb25kLnMxYCkpCglhc3NlcnQuRXF1YWwoMy4xNDE1LCBpbnB1dC5GbG9hdChgdGhpcmRgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgzKSwgaW5wdXQuSW50KGB0aGlyZGApKQoJYXNzZXJ0LkVxdWFsKGludDY0KDQyKSwgaW5wdXQuSW50KGBmb3VydGhgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgzKSwgaW5wdXQuSW50KGBzZWNvbmQudmFsdWVzLjJgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgwKSwgaW5wdXQuSW50KGBzZWNvbmQudmFsdWVzLjk5YCkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCg0MiksIGlucHV0LkZsb2F0KGBmb3VydGhgKSkKCWFzc2VydC5MZW4oaW5wdXQuU2xpY2UoYHNlY29uZC52YWx1ZXNgKSwgNCkKCWFzc2VydC5FcXVhbChpbnQ2NCg0MiksIGlucHV0LkF1dG8oYHNlY29uZC5zdHJudW1gKSkKCWFzc2VydC5FcXVhbCh0aW1lLkRhdGUoMjAwNiwgMSwgMiwgMCwgMCwgMCwgMCwgdGltZS5VVEMpLCBpbnB1dC5UaW1lKGBzZWNvbmQudGhlbmApKQoJdmFyIG1hcHZhbHMgW11pbnQ2NAoJZm9yIF8sIG1zIDo9IHJhbmdlIGlucHV0LlNsaWNlT2ZNYXBzKGBtYXBzbGljZWApIHsKCQltYXB2YWxzID0gYXBwZW5kKG1hcHZhbHMsIG1zLkludChgaWRgKSkKCX0KCWFzc2VydC5FcXVhbChbXWludDY0ezEsIDIsIDN9LCBtYXB2YWxzKQoJYXNzZXJ0LkVxdWFsKDIsIGlucHV0LkpTT05QYXRoKGAkLi52YWx1ZXNbMV1gLCA0MikpCglhc3NlcnQuRXF1YWwoNDIsIGlucHV0LkpTT05QYXRoKGAkLi52YWx1ZXNbOTldYCwgNDIpKQoJYXNzZXJ0LkVxdWFsKDYsIGlucHV0LkxlbigpKQoJdmFyIGsgPSBtYWtlKFtdc3RyaW5nLCA2KQoJdmFyIGkgPSAwCglhc3NlcnQuTm9FcnJvcihpbnB1dC5FYWNoKGZ1bmMoa2V5IHN0cmluZywgdmFsdWUgdHlwZXV0aWwuVmFyaWFudCkgZXJyb3IgewoJCWtbaV0gPSBrZXkKCQlpKysKCQlyZXR1cm4gbmlsCgl9KSkKCWFzc2VydC5FbGVtZW50c01hdGNoKGssIFtdc3RyaW5ne2BmaXJzdGAsIGBzZWNvbmRgLCBgdGhpcmRgLCBgZm91cnRoYCwgYG5vd2AsIGBtYXBzbGljZWB9KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMHttpHeader",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMHttpHeader(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBNKGh0dHAuSGVhZGVye2BhYDogW11zdHJpbmd7YDFgfSwgYGJgOiBbXXN0cmluZ3t9LCBgY2A6IFtdc3RyaW5ne2AyYCwgYDNgfX0pCglhc3NlcnQuRXF1YWwoYDFgLCBpbnB1dC5TdHJpbmcoYGFgKSkKCWFzc2VydC5FcXVhbFZhbHVlcygxLCBpbnB1dC5JbnQoYGFgKSkKCWFzc2VydC5FcXVhbChgYCwgaW5wdXQuU3RyaW5nKGBiYCkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgwKSwgaW5wdXQuRmxvYXQoYGJgKSkKCWFzc2VydC5OaWwoaW5wdXQuQXV0byhgYmApKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2AyYCwgYDNgfSwgaW5wdXQuU3RyaW5ncyhgY2ApKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMIter",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMIter(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBNKG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGJgOiAyLCBgY2A6IDMsIGBkYDogNH0pCgl2YXIga2V5cyBbXXN0cmluZwoJdmFyIHZhbHMgW11pbnQKCWZvciBpdGVtIDo9IHJhbmdlIGlucHV0Lkl0ZXIoKSB7CgkJa2V5cyA9IGFwcGVuZChrZXlzLCBpdGVtLkspCgkJdmFscyA9IGFwcGVuZCh2YWxzLCBpbnQoaXRlbS5WLkludCgpKSkKCX0KCWFzc2VydC5FbGVtZW50c01hdGNoKFtdc3RyaW5ne2BjYCwgYGRgLCBgYWAsIGBiYH0sIGtleXMpCglhc3NlcnQuRWxlbWVudHNNYXRjaChbXWludHs0LCAyLCAzLCAxfSwgdmFscykKCWtleXMgPSBuaWwKCXZhbHMgPSBuaWwKCWZvciBpdGVtIDo9IHJhbmdlIGlucHV0Lkl0ZXIoSXRlck9wdGlvbnN7U29ydEtleXM6IHRydWV9KSB7CgkJa2V5cyA9IGFwcGVuZChrZXlzLCBpdGVtLkspCgkJdmFscyA9IGFwcGVuZCh2YWxzLCBpbnQoaXRlbS5WLkludCgpKSkKCX0KCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgYWAsIGBiYCwgYGNgLCBgZGB9LCBrZXlzKQoJYXNzZXJ0LkVxdWFsKFtdaW50ezEsIDIsIDMsIDR9LCB2YWxzKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMJson",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMJson(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbSA9IE0oYHsiaGVsbG8iOiAidGhlcmUiLCAiZ2VuZXJhbCI6ICJrZW5vYmkifWApCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YGhlbGxvYDogYHRoZXJlYCwgYGdlbmVyYWxgOiBga2Vub2JpYH0sIG0uTWFwTmF0aXZlKCkpCglhc3NlcnQuRXF1YWwoYHRoZXJlYCwgbS5TdHJpbmcoYGhlbGxvYCkpCglhc3NlcnQuRXF1YWwoYGtlbm9iaWAsIG0uU3RyaW5nKGBnZW5lcmFsYCkpCgltLkRlbGV0ZShgZ2VuZXJhbGApCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YGhlbGxvYDogYHRoZXJlYH0sIG0uTWFwTmF0aXZlKCkpCglhc3NlcnQuRXF1YWwoW11ieXRlKGB7ImhlbGxvIjoidGhlcmUifWApLCBtLkpTT04oKSkKCWFzc2VydC5FcXVhbChbXWJ5dGUoIntcbi4uXCJoZWxsb1wiOiBcInRoZXJlXCJcbn0iKSwgbS5KU09OKGAuLmApKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMMarshalJSON",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMMarshalJSON(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbSA9IE0obWFwW3N0cmluZ11hbnl7YGhlbGxvYDogMSwgYHRoZXJlYDogdHJ1ZSwgYGdlbmVyYWxgOiBtYXBbc3RyaW5nXWFueXtga2Vub2JpYDogdHJ1ZX0sIGB4eXpgOiBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgYHp6emA6IFtdbWFwW3N0cmluZ11hbnl7bWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgYWAsIGB2YWx1ZWA6IDB9LCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBiYCwgYHZhbHVlYDogMX0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYGNgLCBgdmFsdWVgOiAyfX19KQoJb3V0LCBlcnIgOj0ganNvbi5NYXJzaGFsKG0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoW11ieXRlKGB7ImdlbmVyYWwiOnsia2Vub2JpIjp0cnVlfSwiaGVsbG8iOjEsInRoZXJlIjp0cnVlLCJ4eXoiOlsiYSIsImIiLCJjIl0sInp6eiI6W3sibmFtZSI6ImEiLCJ2YWx1ZSI6MH0seyJuYW1lIjoiYiIsInZhbHVlIjoxfSx7Im5hbWUiOiJjIiwidmFsdWUiOjJ9XX1gKSwgb3V0KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMMarshalXML",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMMarshalXML(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbSA9IE0obWFwW3N0cmluZ11hbnl7YGhlbGxvYDogMSwgYHRoZXJlYDogdHJ1ZSwgYGdlbmVyYWxgOiBtYXBbc3RyaW5nXWFueXtga2Vub2JpYDogdHJ1ZX0sIGB4eXpgOiBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfSwgYHp6emA6IFtdbWFwW3N0cmluZ11hbnl7bWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgYWAsIGB2YWx1ZWA6IDB9LCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBiYCwgYHZhbHVlYDogMX0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYGNgLCBgdmFsdWVgOiAyfX19KQoJb3V0LCBlcnIgOj0geG1sLk1hcnNoYWwobSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChbXWJ5dGUoYDxkYXRhPjxnZW5lcmFsPjxrZW5vYmk+dHJ1ZTwva2Vub2JpPjwvZ2VuZXJhbD48aGVsbG8+MTwvaGVsbG8+PHRoZXJlPnRydWU8L3RoZXJlPjx4eXo+PGVsZW1lbnQ+YTwvZWxlbWVudD48ZWxlbWVudD5iPC9lbGVtZW50PjxlbGVtZW50PmM8L2VsZW1lbnQ+PC94eXo+PHp6ej48ZWxlbWVudD48bmFtZT5hPC9uYW1lPjx2YWx1ZT4wPC92YWx1ZT48L2VsZW1lbnQ+PGVsZW1lbnQ+PG5hbWU+YjwvbmFtZT48dmFsdWU+MTwvdmFsdWU+PC9lbGVtZW50PjxlbGVtZW50PjxuYW1lPmM8L25hbWU+PHZhbHVlPjI8L3ZhbHVlPjwvZWxlbWVudD48L3p6ej48L2RhdGE+YCksIG91dCkKCW0uU2V0Um9vdFRhZ05hbWUoYG51Yl9udWJgKQoJb3V0LCBlcnIgPSB4bWwuTWFyc2hhbChtKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKFtdYnl0ZShgPG51Yl9udWI+PGdlbmVyYWw+PGtlbm9iaT50cnVlPC9rZW5vYmk+PC9nZW5lcmFsPjxoZWxsbz4xPC9oZWxsbz48dGhlcmU+dHJ1ZTwvdGhlcmU+PHh5ej48ZWxlbWVudD5hPC9lbGVtZW50PjxlbGVtZW50PmI8L2VsZW1lbnQ+PGVsZW1lbnQ+YzwvZWxlbWVudD48L3h5ej48enp6PjxlbGVtZW50PjxuYW1lPmE8L25hbWU+PHZhbHVlPjA8L3ZhbHVlPjwvZWxlbWVudD48ZWxlbWVudD48bmFtZT5iPC9uYW1lPjx2YWx1ZT4xPC92YWx1ZT48L2VsZW1lbnQ+PGVsZW1lbnQ+PG5hbWU+YzwvbmFtZT48dmFsdWU+MjwvdmFsdWU+PC9lbGVtZW50Pjwvenp6PjwvbnViX251Yj5gKSwgb3V0KQoJbS5TZXRNYXJzaGFsWG1sR2VuZXJpYyh0cnVlKQoJb3V0LCBlcnIgPSB4bWwuTWFyc2hhbChtKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKFtdYnl0ZShgPG51Yl9udWI+PGl0ZW0gdHlwZT0ib2JqZWN0IiBrZXk9ImdlbmVyYWwiPjxpdGVtIGtleT0ia2Vub2JpIiB0eXBlPSJib29sIj50cnVlPC9pdGVtPjwvaXRlbT48aXRlbSBrZXk9ImhlbGxvIiB0eXBlPSJpbnQiPjE8L2l0ZW0+PGl0ZW0ga2V5PSJ0aGVyZSIgdHlwZT0iYm9vbCI+dHJ1ZTwvaXRlbT48aXRlbSB0eXBlPSJhcnJheSIga2V5PSJ4eXoiPjxpdGVtIGtleT0iZWxlbWVudCIgdHlwZT0ic3RyIj5hPC9pdGVtPjxpdGVtIGtleT0iZWxlbWVudCIgdHlwZT0ic3RyIj5iPC9pdGVtPjxpdGVtIGtleT0iZWxlbWVudCIgdHlwZT0ic3RyIj5jPC9pdGVtPjwvaXRlbT48aXRlbSB0eXBlPSJhcnJheSIga2V5PSJ6enoiPjxpdGVtIHR5cGU9Im9iamVjdCIga2V5PSJlbGVtZW50Ij48aXRlbSBrZXk9Im5hbWUiIHR5cGU9InN0ciI+YTwvaXRlbT48aXRlbSBrZXk9InZhbHVlIiB0eXBlPSJpbnQiPjA8L2l0ZW0+PC9pdGVtPjxpdGVtIHR5cGU9Im9iamVjdCIga2V5PSJlbGVtZW50Ij48aXRlbSBrZXk9Im5hbWUiIHR5cGU9InN0ciI+YjwvaXRlbT48aXRlbSBrZXk9InZhbHVlIiB0eXBlPSJpbnQiPjE8L2l0ZW0+PC9pdGVtPjxpdGVtIHR5cGU9Im9iamVjdCIga2V5PSJlbGVtZW50Ij48aXRlbSBrZXk9Im5hbWUiIHR5cGU9InN0ciI+YzwvaXRlbT48aXRlbSBrZXk9InZhbHVlIiB0eXBlPSJpbnQiPjI8L2l0ZW0+PC9pdGVtPjwvaXRlbT48L251Yl9udWI+YCksIG91dCkKCW0uU2V0TWFyc2hhbFhtbEdlbmVyaWMoZmFsc2UpCgltLlNldE1hcnNoYWxYbWxLZXlGdW5jKGZ1bmMoaW4gc3RyaW5nKSBzdHJpbmcgewoJCXJldHVybiBzdHJpbmd1dGlsLkNhbWVsaXplKGluKQoJfSkKCW91dCwgZXJyID0geG1sLk1hcnNoYWwobSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChbXWJ5dGUoYDxOdWJOdWI+PEdlbmVyYWw+PEtlbm9iaT50cnVlPC9LZW5vYmk+PC9HZW5lcmFsPjxIZWxsbz4xPC9IZWxsbz48VGhlcmU+dHJ1ZTwvVGhlcmU+PFh5ej48RWxlbWVudD5hPC9FbGVtZW50PjxFbGVtZW50PmI8L0VsZW1lbnQ+PEVsZW1lbnQ+YzwvRWxlbWVudD48L1h5ej48Wnp6PjxFbGVtZW50PjxOYW1lPmE8L05hbWU+PFZhbHVlPjA8L1ZhbHVlPjwvRWxlbWVudD48RWxlbWVudD48TmFtZT5iPC9OYW1lPjxWYWx1ZT4xPC9WYWx1ZT48L0VsZW1lbnQ+PEVsZW1lbnQ+PE5hbWU+YzwvTmFtZT48VmFsdWU+MjwvVmFsdWU+PC9FbGVtZW50PjwvWnp6PjwvTnViTnViPmApLCBvdXQpCgltLlNldE1hcnNoYWxYbWxHZW5lcmljKHRydWUpCglvdXQsIGVyciA9IHhtbC5NYXJzaGFsKG0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoW11ieXRlKGA8TnViTnViPjxpdGVtIHR5cGU9Im9iamVjdCIga2V5PSJHZW5lcmFsIj48aXRlbSBrZXk9Iktlbm9iaSIgdHlwZT0iYm9vbCI+dHJ1ZTwvaXRlbT48L2l0ZW0+PGl0ZW0ga2V5PSJIZWxsbyIgdHlwZT0iaW50Ij4xPC9pdGVtPjxpdGVtIGtleT0iVGhlcmUiIHR5cGU9ImJvb2wiPnRydWU8L2l0ZW0+PGl0ZW0gdHlwZT0iYXJyYXkiIGtleT0iWHl6Ij48aXRlbSBrZXk9IkVsZW1lbnQiIHR5cGU9InN0ciI+YTwvaXRlbT48aXRlbSBrZXk9IkVsZW1lbnQiIHR5cGU9InN0ciI+YjwvaXRlbT48aXRlbSBrZXk9IkVsZW1lbnQiIHR5cGU9InN0ciI+YzwvaXRlbT48L2l0ZW0+PGl0ZW0gdHlwZT0iYXJyYXkiIGtleT0iWnp6Ij48aXRlbSB0eXBlPSJvYmplY3QiIGtleT0iRWxlbWVudCI+PGl0ZW0ga2V5PSJOYW1lIiB0eXBlPSJzdHIiPmE8L2l0ZW0+PGl0ZW0ga2V5PSJWYWx1ZSIgdHlwZT0iaW50Ij4wPC9pdGVtPjwvaXRlbT48aXRlbSB0eXBlPSJvYmplY3QiIGtleT0iRWxlbWVudCI+PGl0ZW0ga2V5PSJOYW1lIiB0eXBlPSJzdHIiPmI8L2l0ZW0+PGl0ZW0ga2V5PSJWYWx1ZSIgdHlwZT0iaW50Ij4xPC9pdGVtPjwvaXRlbT48aXRlbSB0eXBlPSJvYmplY3QiIGtleT0iRWxlbWVudCI+PGl0ZW0ga2V5PSJOYW1lIiB0eXBlPSJzdHIiPmM8L2l0ZW0+PGl0ZW0ga2V5PSJWYWx1ZSIgdHlwZT0iaW50Ij4yPC9pdGVtPjwvaXRlbT48L2l0ZW0+PC9OdWJOdWI+YCksIG91dCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMMerge",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMMerge(t *testing.T)",
            "Source": "ewoJdmFyIG0gPSBOZXdNYXAoKQoJYXNzZXJ0LkVxdWFsKHQsIG1hcFtzdHJpbmddYW55e30sIG0uTWFwTmF0aXZlKCkpCgltLk1lcmdlKG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGJgOiAyfSkKCWFzc2VydC5FcXVhbCh0LCBtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogMn0sIG0uTWFwTmF0aXZlKCkpCgltLk1lcmdlKG1hcFtzdHJpbmddYW55e2BiYDogMi4xLCBgY2A6IDN9KQoJYXNzZXJ0LkVxdWFsKHQsIG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGJgOiAyLjEsIGBjYDogM30sIG0uTWFwTmF0aXZlKCkpCgltLk1lcmdlKG1hcFtzdHJpbmddYW55e2BiYDogbmlsfSkKCWFzc2VydC5FcXVhbCh0LCBtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogbmlsLCBgY2A6IDN9LCBtLk1hcE5hdGl2ZSgpKQoJbS5Db21wYWN0KCkKCWFzc2VydC5FcXVhbCh0LCBtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBjYDogM30sIG0uTWFwTmF0aXZlKCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMSet",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMSet(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBNKG5pbCkKCWFzc2VydC5FcXVhbChgYCwgaW5wdXQuU3RyaW5nKGBsb2xgKSkKCWFzc2VydC5FcXVhbChgMmZ1bm55NG1lYCwgaW5wdXQuU2V0KGBsb2xgLCBgMmZ1bm55NG1lYCkuU3RyaW5nKCkpCglhc3NlcnQuRXF1YWwoYDJmdW5ueTRtZWAsIGlucHV0LlN0cmluZyhgbG9sYCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMStruct",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMStruct(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBNKCZ0ZXN0TXN0cnVjdHtJRDogYDEyM2AsIE5hbWU6IGB0ZXN0ZXJgLCBGYWN0b3I6IDMuMTR9KQoJYXNzZXJ0LkVxdWFsKGAxMjNgLCBpbnB1dC5TdHJpbmcoYGlkYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMTIzLCBpbnB1dC5JbnQoYGlkYCkpCglhc3NlcnQuRXF1YWwoYHRlc3RlcmAsIGlucHV0LlN0cmluZyhgTmFtZWApKQoJYXNzZXJ0LkVxdWFsKDMuMTQsIGlucHV0LkZsb2F0KGBGYWN0b3JgKSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgaWRgOiBgMTIzYCwgYE5hbWVgOiBgdGVzdGVyYCwgYEZhY3RvcmA6IDMuMTR9LCBpbnB1dC5NYXBOYXRpdmUoKSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgX2lkYDogYDEyM2AsIGBOQU1FYDogYHRlc3RlcmAsIGBGYWN0b3JgOiAzLjE0fSwgaW5wdXQuTWFwTmF0aXZlKGBqc29uYCkpCgl2YXIga2V5cyBbXXN0cmluZwoJdmFyIHZhbHVlcyBbXWFueQoJZm9yIGl0ZW0gOj0gcmFuZ2UgaW5wdXQuSXRlcigpIHsKCQlrZXlzID0gYXBwZW5kKGtleXMsIGl0ZW0uSykKCQl2YWx1ZXMgPSBhcHBlbmQodmFsdWVzLCBpdGVtLlZhbHVlKQoJfQoJYXNzZXJ0LkVsZW1lbnRzTWF0Y2goW11zdHJpbmd7YGlkYCwgYE5hbWVgLCBgRmFjdG9yYH0sIGtleXMpCglhc3NlcnQuRWxlbWVudHNNYXRjaChbXWFueXtgMTIzYCwgYHRlc3RlcmAsIGZsb2F0NjQoMy4xNCl9LCB2YWx1ZXMpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMStructNested",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMStructNested(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIG1zZWNvbmQgc3RydWN0IHsKCQlTMSAgICAgc3RyaW5nCgkJVmFsdWVzIFtdaW50CgkJVHJ1dGh5IGFueQoJCVN0cm51bSBzdHJpbmcKCQlUaGVuICAgc3RyaW5nCgl9Cgl0eXBlIG10b3Agc3RydWN0IHsKCQlGaXJzdCAgYm9vbAoJCVNlY29uZCBtc2Vjb25kCgkJTm93ICAgIHRpbWUuVGltZQoJCVRoaXJkICBmbG9hdDY0CgkJRm91cnRoIGludAoJfQoJdmFyIGlucHV0ID0gTShtdG9we0ZpcnN0OiB0cnVlLCBTZWNvbmQ6IG1zZWNvbmR7UzE6IGB0ZXN0YCwgVmFsdWVzOiBbXWludHsxLCAyLCAzLCA0fSwgVHJ1dGh5OiBgVHJ1ZWAsIFN0cm51bTogYDQyYCwgVGhlbjogYDIwMDYtMDEtMDJgfSwgTm93OiB0aW1lLk5vdygpLCBUaGlyZDogMy4xNDE1LCBGb3VydGg6IDQyfSkKCWFzc2VydC5FcXVhbChgdGVzdGAsIGlucHV0LlN0cmluZyhgU2Vjb25kLlMxYCkpCglhc3NlcnQuVHJ1ZShpbnB1dC5Cb29sKGBGaXJzdGApKQoJYXNzZXJ0LlRydWUoaW5wdXQuQm9vbChgU2Vjb25kLlRydXRoeWApKQoJYXNzZXJ0LlRydWUoaW5wdXQuQm9vbChgU2Vjb25kLlMxYCkpCglhc3NlcnQuRXF1YWwoMy4xNDE1LCBpbnB1dC5GbG9hdChgVGhpcmRgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgzKSwgaW5wdXQuSW50KGBUaGlyZGApKQoJYXNzZXJ0LkVxdWFsKGludDY0KDQyKSwgaW5wdXQuSW50KGBGb3VydGhgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgzKSwgaW5wdXQuSW50KGBTZWNvbmQuVmFsdWVzLjJgKSkKCWFzc2VydC5FcXVhbChpbnQ2NCgwKSwgaW5wdXQuSW50KGBTZWNvbmQuVmFsdWVzLjk5YCkpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCg0MiksIGlucHV0LkZsb2F0KGBGb3VydGhgKSkKCWFzc2VydC5MZW4oaW5wdXQuU2xpY2UoYFNlY29uZC5WYWx1ZXNgKSwgNCkKCWFzc2VydC5FcXVhbChpbnQ2NCg0MiksIGlucHV0LkF1dG8oYFNlY29uZC5TdHJudW1gKSkKCWFzc2VydC5FcXVhbCh0aW1lLkRhdGUoMjAwNiwgMSwgMiwgMCwgMCwgMCwgMCwgdGltZS5VVEMpLCBpbnB1dC5UaW1lKGBTZWNvbmQuVGhlbmApKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMUnmarshalJSON",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMUnmarshalJSON(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIganMgPSBbXWJ5dGUoYHsiZ2VuZXJhbCI6eyJrZW5vYmkiOnRydWV9LCJoZWxsbyI6MSwidGhlcmUiOnRydWUsInh5eiI6WyJhIiwiYiIsImMiXSwienp6IjpbeyJuYW1lIjoiYSIsInZhbHVlIjowfSx7Im5hbWUiOiJiIiwidmFsdWUiOjF9LHsibmFtZSI6ImMiLCJ2YWx1ZSI6Mn1dfWApCgl2YXIgbSBNYXAKCWFzc2VydC5Ob0Vycm9yKGpzb24uVW5tYXJzaGFsKGpzLCAmbSkpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YGhlbGxvYDogZmxvYXQ2NCgxKSwgYHRoZXJlYDogdHJ1ZSwgYGdlbmVyYWxgOiBtYXBbc3RyaW5nXWFueXtga2Vub2JpYDogdHJ1ZX0sIGB4eXpgOiBbXWFueXtgYWAsIGBiYCwgYGNgfSwgYHp6emA6IFtdYW55e21hcFtzdHJpbmddYW55e2BuYW1lYDogYGFgLCBgdmFsdWVgOiBmbG9hdDY0KDApfSwgbWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgYmAsIGB2YWx1ZWA6IGZsb2F0NjQoMSl9LCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBjYCwgYHZhbHVlYDogZmxvYXQ2NCgyKX19fSwgbS5kYXRhKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEsIG0uSW50KGBoZWxsb2ApKQoJYXNzZXJ0LlRydWUobS5Cb29sKGB0aGVyZWApKQoJYXNzZXJ0LkVxdWFsKHRydWUsIG0uQm9vbChgZ2VuZXJhbC5rZW5vYmlgKSkKCWFzc2VydC5FcXVhbFZhbHVlcygyLCBtLkZsb2F0KGB6enouMi52YWx1ZWApKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMUrlValues",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMUrlValues(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBNKHVybC5WYWx1ZXN7YGFgOiBbXXN0cmluZ3tgMWB9LCBgYmA6IFtdc3RyaW5ne30sIGBjYDogW11zdHJpbmd7YDJgLCBgM2B9fSkKCWFzc2VydC5FcXVhbChgMWAsIGlucHV0LlN0cmluZyhgYWApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEsIGlucHV0LkludChgYWApKQoJYXNzZXJ0LkVxdWFsKGBgLCBpbnB1dC5TdHJpbmcoYGJgKSkKCWFzc2VydC5FcXVhbChmbG9hdDY0KDApLCBpbnB1dC5GbG9hdChgYmApKQoJYXNzZXJ0Lk5pbChpbnB1dC5BdXRvKGBiYCkpCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YDJgLCBgM2B9LCBpbnB1dC5TdHJpbmdzKGBjYCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMapAppend",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMapAppend(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7fSwgQXBwZW5kKCkpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YGFgOiAxLCBgYmA6IHRydWUsIGBjYDogYFRocmVlYH0sIEFwcGVuZChtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogdHJ1ZSwgYGNgOiBgVGhyZWVgfSkpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YGFgOiAxLCBgYmA6IHRydWUsIGBjYDogYFRocmVlYH0sIEFwcGVuZChuaWwsIG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGJgOiB0cnVlLCBgY2A6IGBUaHJlZWB9LCBuaWwpKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddYW55e2BhYDogMSwgYGJgOiB0cnVlLCBgY2A6IGBUaHJlZWAsIGBkYDogNCwgYGVgOiBmYWxzZSwgYGZgOiA2LjF9LCBBcHBlbmQobWFwW3N0cmluZ11hbnl7YGFgOiAxLCBgYmA6IHRydWUsIGBjYDogYFRocmVlYH0sIG1hcFtzdHJpbmddYW55e2BkYDogNCwgYGVgOiBmYWxzZSwgYGZgOiA2LjF9KSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogdHJ1ZSwgYGNgOiBgRml2ZWB9LCBBcHBlbmQobWFwW3N0cmluZ11hbnl7YGFgOiAxLCBgYmA6IHRydWUsIGBjYDogYFRocmVlYH0sIG1hcFtzdHJpbmddYW55e2BjYDogYEZpdmVgfSkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMapJoin",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMapJoin(t *testing.T)",
            "Source": "ewoJdmFyIGlucHV0ID0gbWFwW3N0cmluZ11hbnl7YGtleTFgOiBgdmFsdWUxYCwgYGtleTJgOiB0cnVlLCBga2V5M2A6IDN9Cgl2YXIgb3V0cHV0ID0gSm9pbihpbnB1dCwgYD1gLCBgJmApCglpZiBvdXRwdXQgPT0gYGAgewoJCXQuRXJyb3IoIk91dHB1dCBzaG91bGQgbm90IGJlIGVtcHR5IikKCX0KCWlmICFzdHJpbmdzLkNvbnRhaW5zKG91dHB1dCwgYGtleTE9dmFsdWUxYCkgewoJCXQuRXJyb3JmKCJPdXRwdXQgc2hvdWxkIGNvbnRhaW4gJyVzJyIsIGBrZXkxPXZhbHVlMWApCgl9CglpZiAhc3RyaW5ncy5Db250YWlucyhvdXRwdXQsIGBrZXkyPXRydWVgKSB7CgkJdC5FcnJvcmYoIk91dHB1dCBzaG91bGQgY29udGFpbiAnJXMnIiwgYGtleTI9dHJ1ZWApCgl9CglpZiAhc3RyaW5ncy5Db250YWlucyhvdXRwdXQsIGBrZXkzPTNgKSB7CgkJdC5FcnJvcmYoIk91dHB1dCBzaG91bGQgY29udGFpbiAnJXMnIiwgYGtleTM9M2ApCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMapMerge",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMapMerge(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglvdXQsIGVyciA6PSBNZXJnZShuaWwsIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FbXB0eShvdXQpCglvdXQsIGVyciA9IE1lcmdlKG1hcFtzdHJpbmddYW55e2BuYW1lYDogYEZpcnN0YH0sIG1hcFtzdHJpbmddYW55e2BhZ2VgOiAyfSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBGaXJzdGAsIGBhZ2VgOiAyfSwgb3V0KQoJb3V0LCBlcnIgPSBNZXJnZShtYXBbc3RyaW5nXWFueXtgbmFtZWA6IFtdc3RyaW5ne2BGaXJzdGAsIGBTZWNvbmRgfX0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFRoaXJkYH0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YG5hbWVgOiBbXWFueXtgRmlyc3RgLCBgU2Vjb25kYCwgYFRoaXJkYH19LCBvdXQpCglvdXQsIGVyciA9IE1lcmdlKG1hcFtzdHJpbmddYW55e2BuYW1lYDogYEZpcnN0YH0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYEZpcnN0YH0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgRmlyc3RgfSwgb3V0KQoJb3V0LCBlcnIgPSBNZXJnZShtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBGaXJzdGAsIGBlbmFibGVkYDogdHJ1ZX0sIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBGaXJzdGAsIGBlbmFibGVkYDogdHJ1ZX0sIG91dCkKCW91dCwgZXJyID0gTWVyZ2UobmlsLCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBTZWNvbmRgLCBgZW5hYmxlZGA6IHRydWV9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFNlY29uZGAsIGBlbmFibGVkYDogdHJ1ZX0sIG91dCkKCW91dCwgZXJyID0gTWVyZ2UobWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgRmlyc3RgfSwgbWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgU2Vjb25kYCwgYGFnZWA6IDJ9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFNlY29uZGAsIGBhZ2VgOiAyfSwgb3V0KQoJb3V0LCBlcnIgPSBNZXJnZShtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBGaXJzdGB9LCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBTZWNvbmRgLCBgYWdlYDogMn0sIEFwcGVuZFZhbHVlcykKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgbmFtZWA6IFtdYW55e2BGaXJzdGAsIGBTZWNvbmRgfSwgYGFnZWA6IDJ9LCBvdXQpCglvdXQsIGVyciA9IE1lcmdlKG1hcFtzdHJpbmddYW55e2BuYW1lYDogYEZpcnN0YCwgYGVuYWJsZWRgOiBuaWx9LCBtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBTZWNvbmRgLCBgZW5hYmxlZGA6IHRydWV9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFNlY29uZGAsIGBlbmFibGVkYDogdHJ1ZX0sIG91dCkKCW91dCwgZXJyID0gTWVyZ2UobWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgRmlyc3RgLCBgZW5hYmxlZGA6IG5pbH0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFNlY29uZGAsIGBlbmFibGVkYDogdHJ1ZX0sIEFwcGVuZFZhbHVlcykKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgbmFtZWA6IFtdYW55e2BGaXJzdGAsIGBTZWNvbmRgfSwgYGVuYWJsZWRgOiB0cnVlfSwgb3V0KQoJb3V0LCBlcnIgPSBNZXJnZShtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBGaXJzdGAsIGBhZ2VgOiBgeWVzYH0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFNlY29uZGAsIGBhZ2VgOiA0Mn0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgU2Vjb25kYCwgYGFnZWA6IDQyfSwgb3V0KQoJb3V0LCBlcnIgPSBNZXJnZShtYXBbc3RyaW5nXWFueXtgbmFtZWA6IGBGaXJzdGAsIGBhZ2VgOiBgeWVzYH0sIG1hcFtzdHJpbmddYW55e2BuYW1lYDogYFNlY29uZGAsIGBhZ2VgOiA0Mn0sIEFwcGVuZFZhbHVlcykKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWFueXtgbmFtZWA6IFtdYW55e2BGaXJzdGAsIGBTZWNvbmRgfSwgYGFnZWA6IFtdYW55e2B5ZXNgLCA0Mn19LCBvdXQpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMapPluck",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMapPluck(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRW1wdHkoUGx1Y2sobmlsLCBuaWwpKQoJYXNzZXJ0LkVtcHR5KFBsdWNrKG5pbCwgW11zdHJpbmd7YG5hbWVgfSkpCglhc3NlcnQuRW1wdHkoUGx1Y2soYHRlc3RgLCBbXXN0cmluZ3tgbmFtZWB9KSkKCWFzc2VydC5FbXB0eShQbHVjayhbXXN0cmluZ3tgdGVzdGAsIGB2YWx1ZXNgfSwgW11zdHJpbmd7YG5hbWVgfSkpCglhc3NlcnQuRXF1YWwoW11hbnl7YEFsaWNlYCwgYEJvYmAsIGBNYWxsb3J5YH0sIFBsdWNrKFtdbWFwW3N0cmluZ11zdHJpbmd7bWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQWxpY2VgfSwgbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQm9iYH0sIG1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYE1hbGxvcnlgfX0sIFtdc3RyaW5ne2BuYW1lYH0pKQoJYXNzZXJ0LkVxdWFsKFtdYW55e2BBbGljZWAsIGBNYWxsb3J5YH0sIFBsdWNrKFtdbWFwW3N0cmluZ11zdHJpbmd7bWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQWxpY2VgfSwgbWFwW3N0cmluZ11zdHJpbmd7YE5BTUVgOiBgQm9iYH0sIG1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYE1hbGxvcnlgfX0sIFtdc3RyaW5ne2BuYW1lYH0pKQoJYXNzZXJ0LkVxdWFsKFtdYW55e2BBbGljZWAsIGBCb2JgLCBgTWFsbG9yeWB9LCBQbHVjayhbXW1hcFtzdHJpbmddbWFwW3N0cmluZ11hbnl7bWFwW3N0cmluZ11tYXBbc3RyaW5nXWFueXtgaW5mb2A6IG1hcFtzdHJpbmddYW55e2BuYW1lYDogYEFsaWNlYH19LCBtYXBbc3RyaW5nXW1hcFtzdHJpbmddYW55e2BpbmZvYDogbWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgQm9iYH19LCBtYXBbc3RyaW5nXW1hcFtzdHJpbmddYW55e2BpbmZvYDogbWFwW3N0cmluZ11hbnl7YG5hbWVgOiBgTWFsbG9yeWB9fX0sIFtdc3RyaW5ne2BpbmZvYCwgYG5hbWVgfSkpCglhc3NlcnQuRXF1YWwoW11hbnl7YEFsaWNlYCwgYEJvYmAsIGBNYWxsb3J5YH0sIFBsdWNrKFtdbWFwW2FueV1tYXBbYW55XWFueXttYXBbYW55XW1hcFthbnldYW55e2BpbmZvYDogbWFwW2FueV1hbnl7YG5hbWVgOiBgQWxpY2VgfX0sIG1hcFthbnldbWFwW2FueV1hbnl7YGluZm9gOiBtYXBbYW55XWFueXtgbmFtZWA6IGBCb2JgfX0sIG1hcFthbnldbWFwW2FueV1hbnl7YGluZm9gOiBtYXBbYW55XWFueXtgbmFtZWA6IGBNYWxsb3J5YH19fSwgW11zdHJpbmd7YGluZm9gLCBgbmFtZWB9KSkKCWFzc2VydC5FcXVhbChbXWFueXtgQWxpY2VgLCBgQm9iYCwgYE1hbGxvcnlgfSwgUGx1Y2soW11hbnl7bWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQWxpY2VgfSwgbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQm9iYH0sIG1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYE1hbGxvcnlgfX0sIFtdc3RyaW5ne2BuYW1lYH0pKQoJYXNzZXJ0LkVxdWFsKFtdYW55e2BBbGljZWAsIGBCb2JgLCBgTWFsbG9yeWB9LCBQbHVjayhbXWFueXsmbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQWxpY2VgfSwgJm1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYEJvYmB9LCAmbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgTWFsbG9yeWB9fSwgW11zdHJpbmd7YG5hbWVgfSkpCglhc3NlcnQuRXF1YWwoW11hbnl7YEFsaWNlYCwgYEJvYmAsIGBNYWxsb3J5YH0sIFBsdWNrKCZbXWFueXsmbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQWxpY2VgfSwgJm1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYEJvYmB9LCAmbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgTWFsbG9yeWB9fSwgW11zdHJpbmd7YG5hbWVgfSkpCglhc3NlcnQuRXF1YWwoW11hbnl7YEFsaWNlYCwgYEJvYmAsIGBNYWxsb3J5YH0sIFBsdWNrKCZbXWFueXtbXWFueXsmbWFwW3N0cmluZ11zdHJpbmd7YG5hbWVgOiBgQWxpY2VgfSwgJm1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYEJvYmB9fSwgW11hbnl7Jm1hcFtzdHJpbmddc3RyaW5ne2BuYW1lYDogYE1hbGxvcnlgfX19LCBbXXN0cmluZ3tgKmAsIGBuYW1lYH0pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMapSplit",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMapSplit(t *testing.T)",
            "Source": "ewoJdmFyIGlucHV0ID0gYGtleTE9dmFsdWUxJmtleTI9dHJ1ZSZrZXkzPTNgCgl2YXIgb3V0cHV0ID0gU3BsaXQoaW5wdXQsIGA9YCwgYCZgKQoJaWYgbGVuKG91dHB1dCkgPT0gMCB7CgkJdC5FcnJvcigiT3V0cHV0IHNob3VsZCBub3QgYmUgZW1wdHkiKQoJfQoJaWYgdiwgb2sgOj0gb3V0cHV0W2BrZXkxYF07ICFvayB8fCB2ICE9IGB2YWx1ZTFgIHsKCQl0LkVycm9yZigiT3V0cHV0IHNob3VsZCBjb250YWluIGtleSAlcyA9PiAnJXMnIiwgYGtleTFgLCBgdmFsdWUxYCkKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFtga2V5MmBdOyAhb2sgfHwgdiAhPSBgdHJ1ZWAgewoJCXQuRXJyb3JmKCJPdXRwdXQgc2hvdWxkIGNvbnRhaW4ga2V5ICVzID0+ICclcyciLCBga2V5MmAsIGB0cnVlYCkKCX0KCWlmIHYsIG9rIDo9IG91dHB1dFtga2V5M2BdOyAhb2sgfHwgdiAhPSBgM2AgewoJCXQuRXJyb3JmKCJPdXRwdXQgc2hvdWxkIGNvbnRhaW4ga2V5ICVzID0+ICclcyciLCBga2V5M2AsIGAzYCkKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMapWalkFlatMap",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMapWalkFlatMap(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogdHJ1ZSwgYGNgOiBgVGhyZWVgfQoJdmFyIGNoZWNrQW5zd2VycyA9IGZ1bmMoY2FsbFNpZ25hdHVyZXMgbWFwW3N0cmluZ11mbkNhbGxTaWduYXR1cmUpIHsKCQl2LCBvayA6PSBjYWxsU2lnbmF0dXJlc1tgYF0KCQlhc3NlcnQuVHJ1ZShvaykKCQlhc3NlcnQuRXF1YWwoZm5DYWxsU2lnbmF0dXJle2lucHV0LCBuaWwsIGZhbHNlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BhYF0KCQlhc3NlcnQuVHJ1ZShvaykKCQlhc3NlcnQuRXF1YWwoZm5DYWxsU2lnbmF0dXJlezEsIFtdc3RyaW5ne2BhYH0sIHRydWV9LCB2KQoJCXYsIG9rID0gY2FsbFNpZ25hdHVyZXNbYGJgXQoJCWFzc2VydC5UcnVlKG9rKQoJCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7dHJ1ZSwgW11zdHJpbmd7YGJgfSwgdHJ1ZX0sIHYpCgkJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgY2BdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtgVGhyZWVgLCBbXXN0cmluZ3tgY2B9LCB0cnVlfSwgdikKCX0KCXZhciBjYWxsU2lnbmF0dXJlcyA9IG1ha2UobWFwW3N0cmluZ11mbkNhbGxTaWduYXR1cmUpCglhc3NlcnQuTmlsKFdhbGsoaW5wdXQsIGZ1bmModmFsdWUgYW55LCBwYXRoIFtdc3RyaW5nLCBpc0xlYWYgYm9vbCkgZXJyb3IgewoJCWNhbGxTaWduYXR1cmVzW3N0cmluZ3MuSm9pbihwYXRoLCBgLmApXSA9IGZuQ2FsbFNpZ25hdHVyZXtWYWx1ZTogdmFsdWUsIFBhdGg6IHBhdGgsIElzTGVhZjogaXNMZWFmfQoJCXJldHVybiBuaWwKCX0pKQoJY2hlY2tBbnN3ZXJzKGNhbGxTaWduYXR1cmVzKQoJY2FsbFNpZ25hdHVyZXMgPSBtYWtlKG1hcFtzdHJpbmddZm5DYWxsU2lnbmF0dXJlKQoJYXNzZXJ0Lk5pbChXYWxrKCZpbnB1dCwgZnVuYyh2YWx1ZSBhbnksIHBhdGggW11zdHJpbmcsIGlzTGVhZiBib29sKSBlcnJvciB7CgkJY2FsbFNpZ25hdHVyZXNbc3RyaW5ncy5Kb2luKHBhdGgsIGAuYCldID0gZm5DYWxsU2lnbmF0dXJle1ZhbHVlOiB2YWx1ZSwgUGF0aDogcGF0aCwgSXNMZWFmOiBpc0xlYWZ9CgkJcmV0dXJuIG5pbAoJfSkpCgljaGVja0Fuc3dlcnMoY2FsbFNpZ25hdHVyZXMpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMapWalkNestedMap",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMapWalkNestedMap(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgY2FsbFNpZ25hdHVyZXMgPSBtYWtlKG1hcFtzdHJpbmddZm5DYWxsU2lnbmF0dXJlKQoJdmFyIGIyYV9tYXAgPSBtYXBbc3RyaW5nXWFueXtgYWA6IHRydWV9Cgl2YXIgYjJiX21hcCA9IG1hcFtzdHJpbmddYW55e2BhYDogNDJ9Cgl2YXIgYjJfc2xpY2UgPSBbXW1hcFtzdHJpbmddYW55e2IyYV9tYXAsIGIyYl9tYXB9Cgl2YXIgYl9tYXAgPSBtYXBbc3RyaW5nXWFueXtgYjFgOiAxMSwgYGIyYDogYjJfc2xpY2V9Cgl2YXIgaW5wdXQgPSBtYXBbc3RyaW5nXWFueXtgYWA6IDEsIGBiYDogYl9tYXB9CglXYWxrKGlucHV0LCBmdW5jKHZhbHVlIGFueSwgcGF0aCBbXXN0cmluZywgaXNMZWFmIGJvb2wpIGVycm9yIHsKCQljYWxsU2lnbmF0dXJlc1tzdHJpbmdzLkpvaW4ocGF0aCwgYC5gKV0gPSBmbkNhbGxTaWduYXR1cmV7VmFsdWU6IHZhbHVlLCBQYXRoOiBwYXRoLCBJc0xlYWY6IGlzTGVhZn0KCQlyZXR1cm4gbmlsCgl9KQoJdiwgb2sgOj0gY2FsbFNpZ25hdHVyZXNbYGBdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7aW5wdXQsIG5pbCwgZmFsc2V9LCB2KQoJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgYWBdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7MSwgW11zdHJpbmd7YGFgfSwgdHJ1ZX0sIHYpCgl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BiYF0KCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtiX21hcCwgW11zdHJpbmd7YGJgfSwgZmFsc2V9LCB2KQoJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgYi5iMWBdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7MTEsIFtdc3RyaW5ne2BiYCwgYGIxYH0sIHRydWV9LCB2KQoJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgYi5iMmBdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7YjJfc2xpY2UsIFtdc3RyaW5ne2BiYCwgYGIyYH0sIGZhbHNlfSwgdikKCXYsIG9rID0gY2FsbFNpZ25hdHVyZXNbYGIuYjIuMGBdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7YjJhX21hcCwgW11zdHJpbmd7YGJgLCBgYjJgLCBgMGB9LCBmYWxzZX0sIHYpCgl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BiLmIyLjAuYWBdCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7dHJ1ZSwgW11zdHJpbmd7YGJgLCBgYjJgLCBgMGAsIGBhYH0sIHRydWV9LCB2KQoJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgYi5iMi4xLmFgXQoJYXNzZXJ0LlRydWUob2spCglhc3NlcnQuRXF1YWwoZm5DYWxsU2lnbmF0dXJlezQyLCBbXXN0cmluZ3tgYmAsIGBiMmAsIGAxYCwgYGFgfSwgdHJ1ZX0sIHYpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMapWalkScalar",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMapWalkScalar(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuTmlsKFdhbGsobmlsLCBuaWwpKQoJdmFyIGkgPSAwCglhc3NlcnQuTmlsKFdhbGsoNDIsIGZ1bmModmFsdWUgYW55LCBwYXRoIFtdc3RyaW5nLCBpc0xlYWYgYm9vbCkgZXJyb3IgewoJCWkgKz0gMQoJCWFzc2VydC5FcXVhbCg0MiwgdmFsdWUpCgkJYXNzZXJ0Lk5pbChwYXRoKQoJCWFzc2VydC5UcnVlKGlzTGVhZikKCQlyZXR1cm4gbmlsCgl9KSkKCWFzc2VydC5FcXVhbCgxLCBpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMapWalkStruct",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMapWalkStruct(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSB3YWxrVGVzdFN0cnVjdHtOYW1lOiBgRmlyc3RgLCBWYWx1ZTogNDIsIEZsYWdzOiBbXWJvb2x7dHJ1ZSwgdHJ1ZSwgZmFsc2UsIHRydWV9LCBTdWJtYXA6IG1hcFtzdHJpbmddc3RyaW5ne2BhYDogYDFgLCBgYmA6IGB0cnVlYCwgYGNgOiBgVGhyZWVgfX0KCXZhciBjaGVja0Fuc3dlcnMgPSBmdW5jKGNhbGxTaWduYXR1cmVzIG1hcFtzdHJpbmddZm5DYWxsU2lnbmF0dXJlKSB7CgkJdiwgb2sgOj0gY2FsbFNpZ25hdHVyZXNbYGBdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtpbnB1dCwgbmlsLCBmYWxzZX0sIHYpCgkJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgTmFtZWBdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtgRmlyc3RgLCBbXXN0cmluZ3tgTmFtZWB9LCB0cnVlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BWYWx1ZWBdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtpbnQ2NCg0MiksIFtdc3RyaW5ne2BWYWx1ZWB9LCB0cnVlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BGbGFnc2BdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtpbnB1dC5GbGFncywgW11zdHJpbmd7YEZsYWdzYH0sIGZhbHNlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BGbGFncy4wYF0KCQlhc3NlcnQuVHJ1ZShvaykKCQlhc3NlcnQuRXF1YWwoZm5DYWxsU2lnbmF0dXJle3RydWUsIFtdc3RyaW5ne2BGbGFnc2AsIGAwYH0sIHRydWV9LCB2KQoJCXYsIG9rID0gY2FsbFNpZ25hdHVyZXNbYEZsYWdzLjFgXQoJCWFzc2VydC5UcnVlKG9rKQoJCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7dHJ1ZSwgW11zdHJpbmd7YEZsYWdzYCwgYDFgfSwgdHJ1ZX0sIHYpCgkJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgRmxhZ3MuMmBdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtmYWxzZSwgW11zdHJpbmd7YEZsYWdzYCwgYDJgfSwgdHJ1ZX0sIHYpCgkJdiwgb2sgPSBjYWxsU2lnbmF0dXJlc1tgRmxhZ3MuM2BdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXt0cnVlLCBbXXN0cmluZ3tgRmxhZ3NgLCBgM2B9LCB0cnVlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BTdWJtYXBgXQoJCWFzc2VydC5UcnVlKG9rKQoJCWFzc2VydC5FcXVhbChmbkNhbGxTaWduYXR1cmV7aW5wdXQuU3VibWFwLCBbXXN0cmluZ3tgU3VibWFwYH0sIGZhbHNlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BTdWJtYXAuYWBdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtgMWAsIFtdc3RyaW5ne2BTdWJtYXBgLCBgYWB9LCB0cnVlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BTdWJtYXAuYmBdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtgdHJ1ZWAsIFtdc3RyaW5ne2BTdWJtYXBgLCBgYmB9LCB0cnVlfSwgdikKCQl2LCBvayA9IGNhbGxTaWduYXR1cmVzW2BTdWJtYXAuY2BdCgkJYXNzZXJ0LlRydWUob2spCgkJYXNzZXJ0LkVxdWFsKGZuQ2FsbFNpZ25hdHVyZXtgVGhyZWVgLCBbXXN0cmluZ3tgU3VibWFwYCwgYGNgfSwgdHJ1ZX0sIHYpCgl9Cgl2YXIgY2FsbFNpZ25hdHVyZXMgPSBtYWtlKG1hcFtzdHJpbmddZm5DYWxsU2lnbmF0dXJlKQoJYXNzZXJ0Lk5pbChXYWxrU3RydWN0KGlucHV0LCBmdW5jKHZhbHVlIGFueSwgcGF0aCBbXXN0cmluZywgaXNMZWFmIGJvb2wpIGVycm9yIHsKCQljYWxsU2lnbmF0dXJlc1tzdHJpbmdzLkpvaW4ocGF0aCwgYC5gKV0gPSBmbkNhbGxTaWduYXR1cmV7VmFsdWU6IHZhbHVlLCBQYXRoOiBwYXRoLCBJc0xlYWY6IGlzTGVhZn0KCQlyZXR1cm4gbmlsCgl9KSkKCWNoZWNrQW5zd2VycyhjYWxsU2lnbmF0dXJlcykKCWNhbGxTaWduYXR1cmVzID0gbWFrZShtYXBbc3RyaW5nXWZuQ2FsbFNpZ25hdHVyZSkKCWFzc2VydC5OaWwoV2Fsa1N0cnVjdCgmaW5wdXQsIGZ1bmModmFsdWUgYW55LCBwYXRoIFtdc3RyaW5nLCBpc0xlYWYgYm9vbCkgZXJyb3IgewoJCWNhbGxTaWduYXR1cmVzW3N0cmluZ3MuSm9pbihwYXRoLCBgLmApXSA9IGZuQ2FsbFNpZ25hdHVyZXtWYWx1ZTogdmFsdWUsIFBhdGg6IHBhdGgsIElzTGVhZjogaXNMZWFmfQoJCXJldHVybiBuaWwKCX0pKQoJY2hlY2tBbnN3ZXJzKGNhbGxTaWduYXR1cmVzKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRxMapFmt",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRxMapFmt(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgbSA9IHJ4dXRpbC5NYXRjaChyeE1hcEZtdCwgYCR7dGVzdGluZy50aGUudGhpbmd9YCkKCWFzc2VydC5Ob3ROaWwobSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXXN0cmluZ3tga2V5YDogYHRlc3RpbmcudGhlLnRoaW5nYCwgYGZhbGxiYWNrYDogYGAsIGBmbXRgOiBgYH0sIG0uTmFtZWRDYXB0dXJlcygpKQoJbSA9IHJ4dXRpbC5NYXRjaChyeE1hcEZtdCwgYCR7dGVzdGluZy50aGUudGhpbmc6JTQ4c31gKQoJYXNzZXJ0Lk5vdE5pbChtKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddc3RyaW5ne2BrZXlgOiBgdGVzdGluZy50aGUudGhpbmdgLCBgZmFsbGJhY2tgOiBgYCwgYGZtdGA6IGAlNDhzYH0sIG0uTmFtZWRDYXB0dXJlcygpKQoJbSA9IHJ4dXRpbC5NYXRjaChyeE1hcEZtdCwgYCR7dGVzdGluZy50aGUudGhpbmd8ZmFsbGJhY2sudmFsdWV9YCkKCWFzc2VydC5Ob3ROaWwobSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXXN0cmluZ3tga2V5YDogYHRlc3RpbmcudGhlLnRoaW5nYCwgYGZhbGxiYWNrYDogYGZhbGxiYWNrLnZhbHVlYCwgYGZtdGA6IGBgfSwgbS5OYW1lZENhcHR1cmVzKCkpCgltID0gcnh1dGlsLk1hdGNoKHJ4TWFwRm10LCBgJHt0ZXN0aW5nfHRoZXx0aGluZ3xmYWxsYmFjay52YWx1ZX1gKQoJYXNzZXJ0Lk5vdE5pbChtKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddc3RyaW5ne2BrZXlgOiBgdGVzdGluZ2AsIGBmYWxsYmFja2A6IGB0aGV8dGhpbmd8ZmFsbGJhY2sudmFsdWVgLCBgZm10YDogYGB9LCBtLk5hbWVkQ2FwdHVyZXMoKSkKCW0gPSByeHV0aWwuTWF0Y2gocnhNYXBGbXQsIGAke3Rlc3Rpbmd8dGhlfHRoaW5nfGZhbGxiYWNrLnZhbHVlOiU0OHN9YCkKCWFzc2VydC5Ob3ROaWwobSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXXN0cmluZ3tga2V5YDogYHRlc3RpbmdgLCBgZmFsbGJhY2tgOiBgdGhlfHRoaW5nfGZhbGxiYWNrLnZhbHVlYCwgYGZtdGA6IGAlNDhzYH0sIG0uTmFtZWRDYXB0dXJlcygpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestSliceOfMaps",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestSliceOfMaps(t *testing.T)",
            "Source": "ewoJcmVxdWlyZS5MZW4odCwgU2xpY2VPZk1hcHMobmlsKSwgMCkKCXJlcXVpcmUuTGVuKHQsIFNsaWNlT2ZNYXBzKFtdaW50ezF9KSwgMSkKCXZhciBzbTEgPSBTbGljZU9mTWFwcyhbXW1hcFtzdHJpbmddYW55e3tgaWRgOiBgb25lYH0sIHtgaWRgOiBgdHdvYH0sIHtgaWRgOiBgdGhyZWVgfX0pCglyZXF1aXJlLkxlbih0LCBzbTEsIDMpCglmb3IgaSwgbSA6PSByYW5nZSBzbTEgewoJCXN3aXRjaCBpIHsKCQljYXNlIDA6CgkJCXJlcXVpcmUuVHJ1ZSh0LCBtLlN0cmluZyhgaWRgKSA9PSBgb25lYCkKCQljYXNlIDE6CgkJCXJlcXVpcmUuVHJ1ZSh0LCBtLlN0cmluZyhgaWRgKSA9PSBgdHdvYCkKCQljYXNlIDI6CgkJCXJlcXVpcmUuVHJ1ZSh0LCBtLlN0cmluZyhgaWRgKSA9PSBgdGhyZWVgKQoJCX0KCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestSprintf",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestSprintf(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYEhlbGxvIGd1ZXN0ISBZb3VyIElQIGlzOiAodW5rbm93bilgLCBTcHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0fSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pfSIpKQoJYXNzZXJ0LkVxdWFsKGBIZWxsbyBndWVzdCEgWW91ciBJUCBpczogMTI3LjAuMC4xYCwgU3ByaW50ZigiSGVsbG8gJHt1c2VybmFtZXxndWVzdH0hIFlvdXIgSVAgaXM6ICR7aXBhZGRyZXNzfCh1bmtub3duKX0iLCBtYXBbc3RyaW5nXWFueXtgaXBhZGRyZXNzYDogYDEyNy4wLjAuMWB9KSkKCWFzc2VydC5FcXVhbChgSGVsbG8gZ3Vlc3QhIFlvdXIgSVAgaXM6IDEyNy4wLjAuMWAsIFNwcmludGYoIkhlbGxvICR7dXNlcm5hbWV8Z3Vlc3R9ISBZb3VyIElQIGlzOiAke2lwYWRkcmVzc3wodW5rbm93bil9IiwgbWFwW3N0cmluZ11hbnl7YHVzZXJuYW1lYDogYGAsIGBpcGFkZHJlc3NgOiBgMTI3LjAuMC4xYH0pKQoJYXNzZXJ0LkVxdWFsKGBIZWxsbyBmcmllbmQhIFlvdXIgSVAgaXM6ICh1bmtub3duKWAsIFNwcmludGYoIkhlbGxvICR7dXNlcm5hbWV8Z3Vlc3R9ISBZb3VyIElQIGlzOiAke2lwYWRkcmVzc3wodW5rbm93bil9IiwgbWFwW3N0cmluZ11hbnl7YHVzZXJuYW1lYDogYGZyaWVuZGB9KSkKCWFzc2VydC5FcXVhbChgSGVsbG8gZnJpZW5kISBZb3VyIElQIGlzOiAodW5rbm93bilgLCBTcHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0fSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pfSIsIG1hcFtzdHJpbmddYW55e2B1c2VybmFtZWA6IGBmcmllbmRgLCBgaXBhZGRyZXNzYDogYGB9KSkKCWFzc2VydC5FcXVhbChgSGVsbG8gZnJpZW5kISBZb3VyIElQIGlzOiAxMjcuMC4wLjFgLCBTcHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0fSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pfSIsIG1hcFtzdHJpbmddYW55e2B1c2VybmFtZWA6IGBmcmllbmRgLCBgaXBhZGRyZXNzYDogYDEyNy4wLjAuMWB9KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestSprintfFormatTime",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestSprintfFormatTime(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYHRoZSB0aW1lIGlzOiAyMDA2LTAxLTAyVDE1OjA0OjA1LTA3OjAwYCwgU3ByaW50ZigidGhlIHRpbWUgaXM6ICR7bm93fSIsIG1hcFtzdHJpbmddYW55e2Bub3dgOiB0aW1ldXRpbC5SZWZlcmVuY2VUaW1lKCl9KSkKCWFzc2VydC5FcXVhbChgdGhlIHRpbWUgaXM6IEphbnVhcnkgMiwgMjAwNiAoMzowNHBtKWAsIFNwcmludGYoInRoZSB0aW1lIGlzOiAke25vdzolSmFudWFyeSAyLCAyMDA2ICgzOjA0cG0pfSIsIG1hcFtzdHJpbmddYW55e2Bub3dgOiB0aW1ldXRpbC5SZWZlcmVuY2VUaW1lKCl9KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestSprintfFormatting",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestSprintfFormatting(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYEhlbGxvIGd1ZXN0ICAgICAhIFlvdXIgSVAgaXM6ICAgICAgICh1bmtub3duKWAsIFNwcmludGYoIkhlbGxvICR7dXNlcm5hbWV8Z3Vlc3Q6JS0xMHN9ISBZb3VyIElQIGlzOiAke2lwYWRkcmVzc3wodW5rbm93bik6JTE1c30iKSkKCWFzc2VydC5FcXVhbChgSGVsbG8gZ3Vlc3QgICAgICEgWW91ciBJUCBpczogICAgICAgMTI3LjAuMC4xYCwgU3ByaW50ZigiSGVsbG8gJHt1c2VybmFtZXxndWVzdDolLTEwc30hIFlvdXIgSVAgaXM6ICR7aXBhZGRyZXNzfCh1bmtub3duKTolMTVzfSIsIG1hcFtzdHJpbmddYW55e2BpcGFkZHJlc3NgOiBgMTI3LjAuMC4xYH0pKQoJYXNzZXJ0LkVxdWFsKGBIZWxsbyBndWVzdCAgICAgISBZb3VyIElQIGlzOiAgICAgICAxMjcuMC4wLjFgLCBTcHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0OiUtMTBzfSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pOiUxNXN9IiwgbWFwW3N0cmluZ11hbnl7YHVzZXJuYW1lYDogYGAsIGBpcGFkZHJlc3NgOiBgMTI3LjAuMC4xYH0pKQoJYXNzZXJ0LkVxdWFsKGBIZWxsbyBmcmllbmQgICAgISBZb3VyIElQIGlzOiAgICAgICAodW5rbm93bilgLCBTcHJpbnRmKCJIZWxsbyAke3VzZXJuYW1lfGd1ZXN0OiUtMTBzfSEgWW91ciBJUCBpczogJHtpcGFkZHJlc3N8KHVua25vd24pOiUxNXN9IiwgbWFwW3N0cmluZ11hbnl7YHVzZXJuYW1lYDogYGZyaWVuZGB9KSkKCWFzc2VydC5FcXVhbChgSGVsbG8gZnJpZW5kICAgICEgWW91ciBJUCBpczogICAgICAgKHVua25vd24pYCwgU3ByaW50ZigiSGVsbG8gJHt1c2VybmFtZXxndWVzdDolLTEwc30hIFlvdXIgSVAgaXM6ICR7aXBhZGRyZXNzfCh1bmtub3duKTolMTVzfSIsIG1hcFtzdHJpbmddYW55e2B1c2VybmFtZWA6IGBmcmllbmRgLCBgaXBhZGRyZXNzYDogYGB9KSkKCWFzc2VydC5FcXVhbChgSGVsbG8gZnJpZW5kICAgICEgWW91ciBJUCBpczogICAgICAgMTI3LjAuMC4xYCwgU3ByaW50ZigiSGVsbG8gJHt1c2VybmFtZXxndWVzdDolLTEwc30hIFlvdXIgSVAgaXM6ICR7aXBhZGRyZXNzfCh1bmtub3duKTolMTVzfSIsIG1hcFtzdHJpbmddYW55e2B1c2VybmFtZWA6IGBmcmllbmRgLCBgaXBhZGRyZXNzYDogYDEyNy4wLjAuMWB9KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestStringKeys",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestStringKeys(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaTEgPSBtYXBbc3RyaW5nXWFueXtgMWA6IDEsIGAyYDogdHJ1ZSwgYDNgOiBgdGhyZWVgfQoJdmFyIGkyID0gbWFwW3N0cmluZ11ib29se2AxYDogdHJ1ZSwgYDJgOiBmYWxzZSwgYDNgOiB0cnVlfQoJdmFyIGkzID0gbWFwW3N0cmluZ11NeVRlc3RUaGluZ3tgMWA6IE15VGVzdFRoaW5ne30sIGAyYDogTXlUZXN0VGhpbmd7fSwgYDNgOiBNeVRlc3RUaGluZ3t9fQoJdmFyIGk0IHN5bmMuTWFwCglpNC5TdG9yZShgMWAsIE15VGVzdFRoaW5ne30pCglpNC5TdG9yZShgMmAsIDIpCglpNC5TdG9yZShgM2AsIDMuMTQpCgl2YXIgb3V0cHV0ID0gW11zdHJpbmd7YDFgLCBgMmAsIGAzYH0KCWFzc2VydC5FbXB0eShTdHJpbmdLZXlzKG5pbCkpCglhc3NlcnQuRXF1YWwob3V0cHV0LCBTdHJpbmdLZXlzKGkxKSkKCWFzc2VydC5FcXVhbChvdXRwdXQsIFN0cmluZ0tleXMoaTIpKQoJYXNzZXJ0LkVxdWFsKG91dHB1dCwgU3RyaW5nS2V5cyhpMykpCglhc3NlcnQuRXF1YWwob3V0cHV0LCBTdHJpbmdLZXlzKCZpNCkpCglhc3NlcnQuRW1wdHkoU3RyaW5nS2V5cyh0cnVlKSkKCWFzc2VydC5FbXB0eShTdHJpbmdLZXlzKDQpKQoJYXNzZXJ0LkVtcHR5KFN0cmluZ0tleXMoW11pbnR7MSwgMiwgM30pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestStructFromMap",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestStructFromMap(t *testing.T)",
            "Source": "ewoJdmFyIGFzc2VydCA9IHJlcXVpcmUuTmV3KHQpCgl2YXIgaW5wdXQgPSBtYXBbc3RyaW5nXWFueXtgTmFtZWA6IGBGb28gQmFyYCwgYGFjdGl2ZWA6IHRydWUsIGBzaG91bGRfbm90X3NldGA6IDQsIGBzdWJ0eXBlMmA6IG1hcFtzdHJpbmddYW55e2BBYDogMywgYGJgOiA0fSwgYFRpbWVUZXN0YDogMTUwMDAwMDAwMDAsIGBTdWJ0eXBlMWA6IG1hcFtzdHJpbmddYW55e2BBYDogMTExMSwgYGJgOiAyMjIyfSwgYEludFRlc3RgOiBpbnQ2NCg1KSwgYFByb3BlcnRpZXNgOiBtYXBbc3RyaW5nXWFueXtgZmlyc3RgOiAxLCBgc2Vjb25kYDogdHJ1ZSwgYHRoaXJkYDogYHRocmVlYH0sIGBTdHJTbGljZVRlc3RgOiBbXXN0cmluZ3tgb25lYCwgYHR3b2AsIGB0aHJlZWB9LCBgSW50ZXJmYWNlU3RyU2xpY2VUZXN0YDogW11hbnl7YG9uZWAsIGB0d29gLCBgdGhyZWVgfSwgYFN0cnVjdFNsaWNlVGVzdGA6IFtdU3VidHlwZVRlc3Rlcnt7MTAsIDExfSwgezEyLCAxM30sIHsxNCwgMTV9fSwgYFN0cnVjdFNsaWNlVGVzdDJgOiBbXW1hcFtzdHJpbmddYW55e3tgQWA6IDEwLCBgYmA6IDExfSwge2BBYDogMTIsIGBiYDogMTN9LCB7YEFgOiAxNCwgYGJgOiAxNX19LCBgU3RydWN0U2xpY2VUZXN0M2A6IFtdYW55e21hcFtzdHJpbmddYW55e2BBYDogMTAsIGBiYDogMTF9LCBtYXBbc3RyaW5nXWFueXtgQWA6IDEyLCBgYmA6IDEzfSwgbWFwW3N0cmluZ11hbnl7YEFgOiAxNCwgYGJgOiAxNX19fQoJdmFyIG91dHB1dCA9IE15U3RydWN0VGVzdGVye30KCXZhciBlcnIgPSBTdHJ1Y3RGcm9tTWFwKGlucHV0LCAmb3V0cHV0KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBGb28gQmFyYCwgb3V0cHV0Lk5hbWUpCglhc3NlcnQuVHJ1ZShvdXRwdXQuQWN0aXZlKQoJYXNzZXJ0Llplcm8ob3V0cHV0Lm5vbmV4cG9ydGVkKQoJYXNzZXJ0LkVxdWFsKDExMTEsIG91dHB1dC5TdWJ0eXBlMS5BKQoJYXNzZXJ0LkVxdWFsKDIyMjIsIG91dHB1dC5TdWJ0eXBlMS5CKQoJYXNzZXJ0Lk5vdE5pbChvdXRwdXQuU3VidHlwZTIpCglhc3NlcnQuRXF1YWwoMywgb3V0cHV0LlN1YnR5cGUyLkEpCglhc3NlcnQuRXF1YWwoNCwgb3V0cHV0LlN1YnR5cGUyLkIpCglhc3NlcnQuRXF1YWwodGltZS5EdXJhdGlvbigxNSkqdGltZS5TZWNvbmQsIG91dHB1dC5UaW1lVGVzdCkKCWFzc2VydC5FcXVhbChpbnQzMig1KSwgb3V0cHV0LkludFRlc3QpCglhc3NlcnQuTm90TmlsKG91dHB1dC5Qcm9wZXJ0aWVzKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEsIG91dHB1dC5Qcm9wZXJ0aWVzW2BmaXJzdGBdKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKHRydWUsIG91dHB1dC5Qcm9wZXJ0aWVzW2BzZWNvbmRgXSkKCWFzc2VydC5FcXVhbChgdGhyZWVgLCBvdXRwdXQuUHJvcGVydGllc1tgdGhpcmRgXSkKCWFzc2VydC5Ob3ROaWwob3V0cHV0LlN0clNsaWNlVGVzdCkKCWFzc2VydC5MZW4ob3V0cHV0LlN0clNsaWNlVGVzdCwgMykKCWFzc2VydC5FcXVhbChgb25lYCwgb3V0cHV0LlN0clNsaWNlVGVzdFswXSkKCWFzc2VydC5FcXVhbChgdHdvYCwgb3V0cHV0LlN0clNsaWNlVGVzdFsxXSkKCWFzc2VydC5FcXVhbChgdGhyZWVgLCBvdXRwdXQuU3RyU2xpY2VUZXN0WzJdKQoJYXNzZXJ0Lk5vdE5pbChvdXRwdXQuSW50ZXJmYWNlU3RyU2xpY2VUZXN0KQoJYXNzZXJ0LkxlbihvdXRwdXQuSW50ZXJmYWNlU3RyU2xpY2VUZXN0LCAzKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGBvbmVgLCBvdXRwdXQuSW50ZXJmYWNlU3RyU2xpY2VUZXN0WzBdKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGB0d29gLCBvdXRwdXQuSW50ZXJmYWNlU3RyU2xpY2VUZXN0WzFdKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGB0aHJlZWAsIG91dHB1dC5JbnRlcmZhY2VTdHJTbGljZVRlc3RbMl0pCglhc3NlcnQuTm90TmlsKG91dHB1dC5TdHJ1Y3RTbGljZVRlc3QpCglhc3NlcnQuTGVuKG91dHB1dC5TdHJ1Y3RTbGljZVRlc3QsIDMpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMTAsIG91dHB1dC5TdHJ1Y3RTbGljZVRlc3RbMF0uQSkKCWFzc2VydC5FcXVhbFZhbHVlcygxMSwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdFswXS5CKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEyLCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0WzFdLkEpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMTMsIG91dHB1dC5TdHJ1Y3RTbGljZVRlc3RbMV0uQikKCWFzc2VydC5FcXVhbFZhbHVlcygxNCwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdFsyXS5BKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDE1LCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0WzJdLkIpCglhc3NlcnQuTm90TmlsKG91dHB1dC5TdHJ1Y3RTbGljZVRlc3QyKQoJYXNzZXJ0LkxlbihvdXRwdXQuU3RydWN0U2xpY2VUZXN0MiwgMykKCWFzc2VydC5FcXVhbFZhbHVlcygxMCwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdDJbMF0uQSkKCWFzc2VydC5FcXVhbFZhbHVlcygxMSwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdDJbMF0uQikKCWFzc2VydC5FcXVhbFZhbHVlcygxMiwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdDJbMV0uQSkKCWFzc2VydC5FcXVhbFZhbHVlcygxMywgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdDJbMV0uQikKCWFzc2VydC5FcXVhbFZhbHVlcygxNCwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdDJbMl0uQSkKCWFzc2VydC5FcXVhbFZhbHVlcygxNSwgb3V0cHV0LlN0cnVjdFNsaWNlVGVzdDJbMl0uQikKCWFzc2VydC5Ob3ROaWwob3V0cHV0LlN0cnVjdFNsaWNlVGVzdDMpCglhc3NlcnQuTGVuKG91dHB1dC5TdHJ1Y3RTbGljZVRlc3QzLCAzKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEwLCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0M1swXS5BKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDExLCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0M1swXS5CKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEyLCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0M1sxXS5BKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEzLCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0M1sxXS5CKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDE0LCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0M1syXS5BKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDE1LCBvdXRwdXQuU3RydWN0U2xpY2VUZXN0M1syXS5CKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestStructFromMapEmbedded",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestStructFromMapEmbedded(t *testing.T)",
            "Source": "ewoJdHlwZSB0QWRkcmVzcyBzdHJ1Y3QgewoJCU51bWJlciAgIHN0cmluZwoJCVN0cmVldCAgIHN0cmluZwoJCUNpdHkgICAgIHN0cmluZyBgcG90YXRvOiJjaXR5ImAKCQlTdGF0ZSAgICBzdHJpbmcgYHBvdGF0bzoic3RhdGUiYAoJCUNvdW50cnkgIHN0cmluZyBgcG90YXRvOiJjb3VudHJ5ImAKCQlMb2FkZWRBdCB0aW1lLlRpbWUKCX0KCXR5cGUgdFBlcnNvbiBzdHJ1Y3QgewoJCU5hbWUgICAgc3RyaW5nCgkJQWdlICAgICBpbnQgYHBvdGF0bzoiYWdlImAKCQlBZGRyZXNzICp0QWRkcmVzcwoJfQoJdHlwZSB0VXNlciBzdHJ1Y3QgewoJCXRQZXJzb24KCQlFbWFpbCAgc3RyaW5nIGBwb3RhdG86ImVtYWlsImAKCQlBY3RpdmUgYm9vbCAgIGBwb3RhdG86IkFDVElWRSJgCgl9Cgl2YXIgYXNzZXJ0ID0gcmVxdWlyZS5OZXcodCkKCXZhciB0Z3QgdFVzZXIKCWFzc2VydC5Ob0Vycm9yKFRhZ2dlZFN0cnVjdEZyb21NYXAobWFwW3N0cmluZ11hbnl7YE5hbWVgOiBgUnVzdHkgU2hhY2tsZWZvcmRgLCBgYWdlYDogNDIwLCBgZW1haWxgOiBgbm9uZStvZkB5b3VyLmJpemAsIGBBQ1RJVkVgOiB0cnVlLCBgQWRkcmVzc2A6IG1hcFtzdHJpbmddYW55e2BOdW1iZXJgOiAzNTAsIGBTdHJlZXRgOiBgRmlmdGggQXZlbnVlYCwgYGNpdHlgOiBgTmV3IFlvcmtgLCBgc3RhdGVgOiBgTllgLCBgY291bnRyeWA6IGBVU2AsIGBMb2FkZWRBdGA6IGAyMDA2LTAxLTAyYH19LCAmdGd0LCBgcG90YXRvYCkpCglhc3NlcnQuRXF1YWwoYG5vbmUrb2ZAeW91ci5iaXpgLCB0Z3QuRW1haWwpCglhc3NlcnQuVHJ1ZSh0Z3QuQWN0aXZlKQp9",
            "IsPackageLevel": true
        }
    ],
    "Types": {
        "ApplyFunc": {
            "Name": "ApplyFunc",
            "Source": "dHlwZSBBcHBseUZ1bmMgZnVuYyhrZXkgW11zdHJpbmcsIHZhbHVlIGFueSkgKGFueSwgYm9vbCk="
        },
        "ConversionFunc": {
            "Name": "ConversionFunc",
            "Source": "dHlwZSBDb252ZXJzaW9uRnVuYyBmdW5jKGZyb20gcmVmbGVjdC5UeXBlLCB0byByZWZsZWN0LlR5cGUsIGRhdGEgYW55KSAoYW55LCBlcnJvcik="
        },
        "Item": {
            "Name": "Item",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "Set",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "value",
                            "Type": "any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Set(value any) error",
                    "IsPackageLevel": false
                }
            ],
            "Fields": [
                {
                    "Name": "Key",
                    "Type": "any"
                },
                {
                    "Name": "Value",
                    "Type": "any"
                },
                {
                    "Name": "K",
                    "Type": "string"
                },
                {
                    "Name": "V",
                    "Type": "typeutil.Variant"
                }
            ],
            "Source": "dHlwZSBJdGVtIHN0cnVjdCB7CglLZXkgICBhbnkKCVZhbHVlIGFueQoJSyAgICAgc3RyaW5nCglWICAgICB0eXBldXRpbC5WYXJpYW50Cgp9Cg==",
            "HasUnexportedFields": true
        },
        "ItemFunc": {
            "Name": "ItemFunc",
            "Source": "dHlwZSBJdGVtRnVuYyBmdW5jKGtleSBzdHJpbmcsIHZhbHVlIHR5cGV1dGlsLlZhcmlhbnQpIGVycm9y"
        },
        "IterOptions": {
            "Name": "IterOptions",
            "MetaType": "struct",
            "Fields": [
                {
                    "Name": "TagName",
                    "Type": "string"
                },
                {
                    "Name": "SortKeys",
                    "Type": "bool"
                }
            ],
            "Source": "dHlwZSBJdGVyT3B0aW9ucyBzdHJ1Y3QgewoJVGFnTmFtZSAgc3RyaW5nCglTb3J0S2V5cyBib29sCn0="
        },
        "KeyTransformFunc": {
            "Name": "KeyTransformFunc",
            "Source": "dHlwZSBLZXlUcmFuc2Zvcm1GdW5jIGZ1bmMoc3RyaW5nKSBzdHJpbmc="
        },
        "Map": {
            "Name": "Map",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "Auto",
                    "Comment": "Return the value at key as an automatically converted value.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallbacks",
                            "Type": "...any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "any"
                        }
                    ],
                    "Signature": "Auto(key string, fallbacks ...any) any",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Bool",
                    "Comment": "Return the value at key as a bool.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "Bool(key string) bool",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Bytes",
                    "Comment": "Return the value at key as a byte slice.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "[]byte"
                        }
                    ],
                    "Signature": "Bytes(key string) []byte",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Compact",
                    "Comment": "Reject all nil values from the map.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "*Map"
                        }
                    ],
                    "Signature": "Compact() *Map",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Delete",
                    "Comment": "Delete a value from the map.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        }
                    ],
                    "Signature": "Delete(key string)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Duration",
                    "Comment": "Return the value at key interpreted as a Duration.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallbacks",
                            "Type": "...any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "time.Duration"
                        }
                    ],
                    "Signature": "Duration(key string, fallbacks ...any) time.Duration",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Each",
                    "Comment": "Iterate through each item in the map.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "ItemFunc"
                        },
                        {
                            "Name": "tagName",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Each(fn ItemFunc, tagName ...string) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Err",
                    "Comment": "Return the value at key as an error, or nil if the value is not an error.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Err(key string) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Float",
                    "Comment": "Return the value at key as a float.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallbacks",
                            "Type": "...any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "float64"
                        }
                    ],
                    "Signature": "Float(key string, fallbacks ...any) float64",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Fprintf",
                    "Comment": "Uses the extended Fprintf in this package, passing this map as the data used in the given format string.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "w",
                            "Type": "io.Writer"
                        },
                        {
                            "Name": "format",
                            "Type": "string"
                        }
                    ],
                    "Signature": "Fprintf(w io.Writer, format string)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Get",
                    "Comment": "Retrieve a value from the Map by the given dot.separated key, or return a fallback\nvalue.  Return values are a typeutil.Variant, which can be easily coerced into\nvarious types.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallbacks",
                            "Type": "...any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "typeutil.Variant"
                        }
                    ],
                    "Signature": "Get(key string, fallbacks ...any) typeutil.Variant",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Int",
                    "Comment": "Return the value at key as an integer.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallbacks",
                            "Type": "...any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "int64"
                        }
                    ],
                    "Signature": "Int(key string, fallbacks ...any) int64",
                    "IsPackageLevel": false
                },
                {
                    "Name": "IsZero",
                    "Comment": "Return whether the value at the given key is that type's zero value.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "IsZero(key string) bool",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Iter",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "opts",
                            "Type": "...IterOptions"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": ""
                        }
                    ],
                    "Signature": "Iter(opts ...IterOptions) ",
                    "IsPackageLevel": false
                },
                {
                    "Name": "JSON",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "indent",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Name": "data",
                            "Type": "[]byte"
                        }
                    ],
                    "Signature": "JSON(indent ...string) data []byte",
                    "IsPackageLevel": false
                },
                {
                    "Name": "JSONPath",
                    "Comment": "Performs a JSONPath query against the given object and returns the results.\nSee JSONPath for details.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "query",
                            "Type": "string"
                        },
                        {
                            "Name": "fallback",
                            "Type": "...any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "any"
                        }
                    ],
                    "Signature": "JSONPath(query string, fallback ...any) any",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Keys",
                    "Comment": "Return the keys in this Map object.  You may specify the name of a struct tag on the underlying\nobject to use for generating key names.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "tagName",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "[]any"
                        }
                    ],
                    "Signature": "Keys(tagName ...string) []any",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Len",
                    "Comment": "Return the length of the Map.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "int"
                        }
                    ],
                    "Signature": "Len() int",
                    "IsPackageLevel": false
                },
                {
                    "Name": "M",
                    "Comment": "Create a new Variant map object from the given value.  A wide range of values are accepted, and\nthe best effort is made to convert those values into a usable map. Accepted values include typeutil.Variant,\nany value with a reflect.Kind of reflect.Map, sync.Map, another maputil.Map, url.Values,\nhttp.Header, or a string or []byte which will be decoded using json.Unmarshal if and only if the\nstring begins with \"{\" and ends with \"}\".",
                    "Arguments": [
                        {
                            "Name": "data",
                            "Type": "any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Map"
                        }
                    ],
                    "Signature": "M(data any) *Map",
                    "Source": "ewoJaWYgZGF0YVYsIG9rIDo9IGRhdGEuKHR5cGV1dGlsLlZhcmlhbnQpOyBvayB7CgkJZGF0YSA9IGRhdGFWLlZhbHVlCgl9IGVsc2UgaWYgZGF0YU0sIG9rIDo9IGRhdGEuKCpNYXApOyBvayB7CgkJcmV0dXJuIGRhdGFNCgl9IGVsc2UgaWYgZGF0YU0sIG9rIDo9IGRhdGEuKE1hcCk7IG9rIHsKCQlyZXR1cm4gJmRhdGFNCgl9IGVsc2UgaWYgZGF0YVNNLCBvayA6PSBkYXRhLigqc3luYy5NYXApOyBvayB7CgkJdmFyIGRhdGFNID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCQlkYXRhU00uUmFuZ2UoZnVuYyhrZXksIHZhbHVlIGFueSkgYm9vbCB7CgkJCWRhdGFNW3R5cGV1dGlsLlN0cmluZyhrZXkpXSA9IHZhbHVlCgkJCXJldHVybiB0cnVlCgkJfSkKCQlkYXRhID0gZGF0YU0KCX0gZWxzZSBpZiB1Viwgb2sgOj0gZGF0YS4odXJsLlZhbHVlcyk7IG9rIHsKCQl2YXIgZGF0YU0gPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJCWZvciBrLCB2IDo9IHJhbmdlIHVWIHsKCQkJc3dpdGNoIGxlbih2KSB7CgkJCWNhc2UgMDoKCQkJCWJyZWFrCgkJCWNhc2UgMToKCQkJCWRhdGFNW2tdID0gdHlwZXV0aWwuQXV0byh2WzBdKQoJCQlkZWZhdWx0OgoJCQkJZGF0YU1ba10gPSBzbGljZXV0aWwuQXV0b3R5cGUodikKCQkJfQoJCX0KCQlkYXRhID0gZGF0YU0KCX0gZWxzZSBpZiBoViwgb2sgOj0gZGF0YS4oaHR0cC5IZWFkZXIpOyBvayB7CgkJdmFyIGRhdGFNID0gbWFrZShtYXBbc3RyaW5nXWFueSkKCQlmb3IgaywgdiA6PSByYW5nZSBoViB7CgkJCXN3aXRjaCBsZW4odikgewoJCQljYXNlIDA6CgkJCQlicmVhawoJCQljYXNlIDE6CgkJCQlkYXRhTVtrXSA9IHR5cGV1dGlsLkF1dG8odlswXSkKCQkJZGVmYXVsdDoKCQkJCWRhdGFNW2tdID0gc2xpY2V1dGlsLkF1dG90eXBlKHYpCgkJCX0KCQl9CgkJZGF0YSA9IGRhdGFNCgl9IGVsc2UgaWYgZFMsIG9rIDo9IGRhdGEuKHN0cmluZyk7IG9rIHsKCQlpZiBzdHJpbmd1dGlsLklzU3Vycm91bmRlZEJ5KHN0cmluZ3MuVHJpbVNwYWNlKGRTKSwgYHtgLCBgfWApIHsKCQkJZGF0YSA9IG1ha2UobWFwW3N0cmluZ11hbnkpCgkJCWpzb24uVW5tYXJzaGFsKFtdYnl0ZShkUyksICZkYXRhKQoJCX0KCX0gZWxzZSBpZiBkQiwgb2sgOj0gZGF0YS4oW11ieXRlKTsgb2sgewoJCWlmIHN0cmluZ3V0aWwuSXNTdXJyb3VuZGVkQnkoc3RyaW5ncy5UcmltU3BhY2Uoc3RyaW5nKGRCKSksIGB7YCwgYH1gKSB7CgkJCWRhdGEgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJCQlqc29uLlVubWFyc2hhbChkQiwgJmRhdGEpCgkJfQoJfQoJaWYgZGF0YSA9PSBuaWwgewoJCWRhdGEgPSBtYWtlKG1hcFtzdHJpbmddYW55KQoJfQoJcmV0dXJuICZNYXB7ZGF0YTogZGF0YSwgc3RydWN0VGFnS2V5OiBVbm1hcnNoYWxTdHJ1Y3RUYWd9Cn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "Map",
                    "Comment": "Return the value at key as a Map.  If the resulting value is nil or not a\nmap type, a null Map will be returned.  All values retrieved from a null\nMap will return that type's zero value.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "tagName",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "map[typeutil.Variant]typeutil.Variant"
                        }
                    ],
                    "Signature": "Map(key string, tagName ...string) map[typeutil.Variant]typeutil.Variant",
                    "IsPackageLevel": false
                },
                {
                    "Name": "MapNative",
                    "Comment": "Return the value as a map[string]any.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "tagName",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "map[string]any"
                        }
                    ],
                    "Signature": "MapNative(tagName ...string) map[string]any",
                    "IsPackageLevel": false
                },
                {
                    "Name": "MapString",
                    "Comment": "Return the value as a map[string]string.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "tagName",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "map[string]string"
                        }
                    ],
                    "Signature": "MapString(tagName ...string) map[string]string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "MarshalJSON",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "[]byte"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "MarshalJSON() ([]byte, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "MarshalXML",
                    "Comment": "Marshals the current data into XML.  Nested maps are output as nested elements.  Map values that\nare scalars (strings, numbers, bools, dates/times) will appear as attributes on the parent element.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "e",
                            "Type": "*xml.Encoder"
                        },
                        {
                            "Name": "start",
                            "Type": "xml.StartElement"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "MarshalXML(e *xml.Encoder, start xml.StartElement) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Merge",
                    "Comment": "Copy the items from a map into this one.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "other",
                            "Type": "any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "int"
                        }
                    ],
                    "Signature": "Merge(other any) int",
                    "IsPackageLevel": false
                },
                {
                    "Name": "NInt",
                    "Comment": "Return the value at key as a native integer.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallbacks",
                            "Type": "...any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "int"
                        }
                    ],
                    "Signature": "NInt(key string, fallbacks ...any) int",
                    "IsPackageLevel": false
                },
                {
                    "Name": "NewMap",
                    "Returns": [
                        {
                            "Type": "*Map"
                        }
                    ],
                    "Signature": "NewMap() *Map",
                    "Source": "ewoJcmV0dXJuIE0obmlsKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "Set",
                    "Comment": "Set a value in the Map at the given dot.separated key to a value.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "value",
                            "Type": "any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "typeutil.Variant"
                        }
                    ],
                    "Signature": "Set(key string, value any) typeutil.Variant",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetFunc",
                    "Comment": "Set a value in the Map using a function.  The map will be locked to\nother modifications for the duration of the function's execution.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "vfunc",
                            "Type": "MapSetFunc"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "typeutil.Variant"
                        }
                    ],
                    "Signature": "SetFunc(key string, vfunc MapSetFunc) typeutil.Variant",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetIfZero",
                    "Comment": "Set a value in the Map at the given dot.separated key to a value, but only if the\ncurrent value at that key is that type's zero value.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "value",
                            "Type": "any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "typeutil.Variant"
                        },
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "SetIfZero(key string, value any) (typeutil.Variant, bool)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetMarshalXmlGeneric",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "yes",
                            "Type": "bool"
                        }
                    ],
                    "Signature": "SetMarshalXmlGeneric(yes bool)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetMarshalXmlKeyFunc",
                    "Comment": "Set a function that will be used to generate XML tag names when calling MarshalXML.  This works\nfor all keys, including ones that appear inside of maps.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "KeyTransformFunc"
                        }
                    ],
                    "Signature": "SetMarshalXmlKeyFunc(fn KeyTransformFunc)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetRootTagName",
                    "Comment": "set the name of the root XML tag, used by MarshalXML.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "root",
                            "Type": "string"
                        }
                    ],
                    "Signature": "SetRootTagName(root string)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetValueIfNonZero",
                    "Comment": "Set a value in the Map at the given dot.separated key to a value, but only if the\nnew value is not a zero value.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "value",
                            "Type": "any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "typeutil.Variant"
                        },
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "SetValueIfNonZero(key string, value any) (typeutil.Variant, bool)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Slice",
                    "Comment": "Return the value at key as a slice.  Scalar values will be returned as a slice containing\nonly that value.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "[]typeutil.Variant"
                        }
                    ],
                    "Signature": "Slice(key string) []typeutil.Variant",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SliceOfMaps",
                    "Comment": "Convert the given value to a slice using typeutil.Slice, then return each element as a Map.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "[]*Map"
                        }
                    ],
                    "Signature": "SliceOfMaps(key string) []*Map",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Sprintf",
                    "Comment": "Uses the extended Sprintf in this package, passing this map as the data used in the given format string.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "format",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "Sprintf(format string) string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "String",
                    "Comment": "Return the value at key as a string.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallbacks",
                            "Type": "...any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "String(key string, fallbacks ...any) string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "StringKeys",
                    "Comment": "A string slice version of Keys()",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "tagName",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "[]string"
                        }
                    ],
                    "Signature": "StringKeys(tagName ...string) []string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Strings",
                    "Comment": "Same as Slice(), but returns a []string",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "[]string"
                        }
                    ],
                    "Signature": "Strings(key string) []string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Tag",
                    "Comment": "Specify which struct tag to honor for generating field names when then\nunderlying data is a struct.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Map"
                        }
                    ],
                    "Signature": "Tag(key string) *Map",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Time",
                    "Comment": "Return the value at key interpreted as a Time.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallbacks",
                            "Type": "...any"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "time.Time"
                        }
                    ],
                    "Signature": "Time(key string, fallbacks ...any) time.Time",
                    "IsPackageLevel": false
                },
                {
                    "Name": "UnmarshalJSON",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "data",
                            "Type": "[]byte"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "UnmarshalJSON(data []byte) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Value",
                    "Comment": "Return the underlying value the M-object was created with.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "any"
                        }
                    ],
                    "Signature": "Value() any",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Walk",
                    "Comment": "A recursive walk form of Each()",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "WalkFunc"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Walk(fn WalkFunc) error",
                    "IsPackageLevel": false
                }
            ],
            "Comment": "A Map object (or \"M\" object) is a utility struct that makes it straightforward to\nwork with interface data types that contain map-like data (has a reflect.Kind equal\nto reflect.Map).",
            "Source": "dHlwZSBNYXAgc3RydWN0IHsKCn0vLyBBIE1hcCBvYmplY3QgKG9yICJNIiBvYmplY3QpIGlzIGEgdXRpbGl0eSBzdHJ1Y3QgdGhhdCBtYWtlcyBpdCBzdHJhaWdodGZvcndhcmQgdG8KLy8gd29yayB3aXRoIGludGVyZmFjZSBkYXRhIHR5cGVzIHRoYXQgY29udGFpbiBtYXAtbGlrZSBkYXRhIChoYXMgYSByZWZsZWN0LktpbmQgZXF1YWwKLy8gdG8gcmVmbGVjdC5NYXApLgoK",
            "HasUnexportedFields": true
        },
        "MapSetFunc": {
            "Name": "MapSetFunc",
            "Source": "dHlwZSBNYXBTZXRGdW5jIGZ1bmMobSAqTWFwLCBrZXkgc3RyaW5nKSBhbnk="
        },
        "MergeOption": {
            "Name": "MergeOption",
            "MetaType": "int",
            "Source": "dHlwZSBNZXJnZU9wdGlvbiBpbnQ="
        },
        "MergeOptions": {
            "Name": "MergeOptions",
            "Methods": [
                {
                    "Name": "Has",
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "option",
                            "Type": "MergeOption"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "Has(option MergeOption) bool",
                    "IsPackageLevel": false
                }
            ],
            "Source": "dHlwZSBNZXJnZU9wdGlvbnMgW11NZXJnZU9wdGlvbg=="
        },
        "MyStructTester": {
            "Name": "MyStructTester",
            "MetaType": "struct",
            "Fields": [
                {
                    "Name": "Name",
                    "Type": "string"
                },
                {
                    "Name": "Subtype1",
                    "Type": "SubtypeTester"
                },
                {
                    "Name": "Active",
                    "Type": "bool"
                },
                {
                    "Name": "Subtype2",
                    "Type": "*SubtypeTester"
                },
                {
                    "Name": "TimeTest",
                    "Type": "time.Duration"
                },
                {
                    "Name": "IntTest",
                    "Type": "int32"
                },
                {
                    "Name": "Properties",
                    "Type": "map[string]any"
                },
                {
                    "Name": "StrSliceTest",
                    "Type": "[]string"
                },
                {
                    "Name": "InterfaceStrSliceTest",
                    "Type": "[]string"
                },
                {
                    "Name": "StructSliceTest",
                    "Type": "[]SubtypeTester"
                },
                {
                    "Name": "StructSliceTest2",
                    "Type": "[]SubtypeTester"
                },
                {
                    "Name": "StructSliceTest3",
                    "Type": "[]SubtypeTester"
                }
            ],
            "Source": "dHlwZSBNeVN0cnVjdFRlc3RlciBzdHJ1Y3QgewoJTmFtZSAgICAgICAgICAgICAgICAgIHN0cmluZwoJU3VidHlwZTEgICAgICAgICAgICAgIFN1YnR5cGVUZXN0ZXIKCUFjdGl2ZSAgICAgICAgICAgICAgICBib29sICAgICAgICAgICBgbWFwdXRpbDoiYWN0aXZlImAKCVN1YnR5cGUyICAgICAgICAgICAgICAqU3VidHlwZVRlc3RlciBgbWFwdXRpbDoic3VidHlwZTIiYAoJVGltZVRlc3QgICAgICAgICAgICAgIHRpbWUuRHVyYXRpb24KCUludFRlc3QgICAgICAgICAgICAgICBpbnQzMgoJUHJvcGVydGllcyAgICAgICAgICAgIG1hcFtzdHJpbmddYW55CglTdHJTbGljZVRlc3QgICAgICAgICAgW11zdHJpbmcKCUludGVyZmFjZVN0clNsaWNlVGVzdCBbXXN0cmluZwoJU3RydWN0U2xpY2VUZXN0ICAgICAgIFtdU3VidHlwZVRlc3RlcgoJU3RydWN0U2xpY2VUZXN0MiAgICAgIFtdU3VidHlwZVRlc3RlcgoJU3RydWN0U2xpY2VUZXN0MyAgICAgIFtdU3VidHlwZVRlc3RlcgoKfQo=",
            "HasUnexportedFields": true
        },
        "MyTestThing": {
            "Name": "MyTestThing",
            "MetaType": "struct",
            "Fields": [
                {
                    "Name": "Name",
                    "Type": "string"
                },
                {
                    "Name": "Other",
                    "Type": "int"
                }
            ],
            "Source": "dHlwZSBNeVRlc3RUaGluZyBzdHJ1Y3QgewoJTmFtZSAgc3RyaW5nCglPdGhlciBpbnQKfQ=="
        },
        "SubtypeTester": {
            "Name": "SubtypeTester",
            "MetaType": "struct",
            "Fields": [
                {
                    "Name": "A",
                    "Type": "int"
                },
                {
                    "Name": "B",
                    "Type": "int"
                }
            ],
            "Source": "dHlwZSBTdWJ0eXBlVGVzdGVyIHN0cnVjdCB7CglBIGludAoJQiBpbnQgYG1hcHV0aWw6ImIiYAp9"
        },
        "WalkFunc": {
            "Name": "WalkFunc",
            "Source": "dHlwZSBXYWxrRnVuYyBmdW5jKHZhbHVlIGFueSwgcGF0aCBbXXN0cmluZywgaXNMZWFmIGJvb2wpIGVycm9y"
        }
    }
}
