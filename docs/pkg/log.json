{
    "Name": "log",
    "CanonicalImportPath": "github.com/ghetzel/go-stockutil/log",
    "ImportPath": "log",
    "ParentPackage": "stockutil",
    "URL": "https://github.com/ghetzel/go-stockutil",
    "Synopsis": "Package log package provides convenient and flexible utilities for logging messages.\n\nOverview\n\nLogging is done by calling functions in this package that correspond to the\nseverity of the log message being output.  At the package level, a minimum\nseverity can be set.  Messages less severe than this minimum logging level will\nnot be output.\n\nColor Expressions\n\nIn addition to the standard printf-style formatting options (as defined in the\nstandard fmt package), this package supports inline expressions that control the\noutput of ANSI terminal escape sequences.  These expressions allow for a simple\nmechanism to colorize log output, as well as applying graphical effects like\nbold, underline, and blinking text (for terminals that support it).\n\nBy default, color expressions will only be honored if os.Stdin is attached to a\npseudoterminal.  This is the case when the program is run on the command line\nand is not piped or redirected to another file.  This default ensures that the\ncolors are visible only in a visual context, but do not corrupt files or\npipelines with ANSI escape sequences.  Color sequences can be explicitly enabled\nor disabled by setting the EnableColorExpressions package variable.\n\nUsing color expressions in format strings is done by wrapping the expression in\n${expr}.  The general format for color expressions is:\n\n\tforegroundColor[+attributes[:backgroundColor[+attributes]]]\n\nColors (foreground and background):\n\tblack\n\tred\n\tgreen\n\tyellow\n\tblue\n\tmagenta\n\tcyan\n\twhite\n\t[0-255]: numeric 8-bit color (for 256 color terminals)\n\treset: Reset all color and graphics attributes to their defaults\n\nForeground Attributes:\n\tb: bold text\n\tB: blinking text\n\th: high-intensity (bright text)\n\ti: inverted/reverse colors\n\ts: strikethrough\n\tu: underline\n\nBackground Attributes:\n\th: high-intensity (bright text)\n\nExamples\n\nBelow are some examples showing various formatting options for logs.\n\n\tlog.Info(\"Hello, world!\")\n\t// [11:22:33 0001] INFO Hello, world!\n\n\tlog.Warningf(\"The %q operation could not be completed.\", \"add\")\n\t// [11:22:33 0002] WARN The \"add\" operation could not be completed.\n\n\tlog.Errorf(\"There was an ${red}error${reset} opening file ${blue+b:white}%s${reset}\", filename)\n\t// [11:22:33 0003] ERRO There was an error opening file /tmp/file.txt\n\t//                                   ^^^^^              ^^^^^^^^^^^^^\n\t//                                   red text           blue text on white background\n\nLog Interception\n\nIt is sometimes useful to be able to act on logs as they are emitted, especially in cases where this\npackage is used in other projects that are imported.  Log Interceptors are called before each log\nline is emitted.  The LogInterceptFunc is called with the level the message was emitted with, the\nmessage itself as a string, and a stack trace struct that defines exactly where the log was emitted\nfrom.\n\n\t// print a complete stack trace before every debug-level message that is encountered\n\tlog.AddLogIntercept(func(level log.Level, line string, stack log.StackItems){\n\t\tif level == log.DEBUG {\n\t\t\tfor _, item := range stack {\n\t\t\t\tfmt.Println(item.String())\n\t\t\t}\n\t\t}\n\t})\n\nWritable Logger\n\nThe WritableLogger implements the io.Writer interface, acting as a bridge between byte streams from\nvarious sources and the log package.  This is frequently useful in situations like parsing the\noutput of other programs.  A WritableLogger accepts a custom LogParseFunc that allows individual\nlines being written to the WritableLogger to be parsed, rewritten, and given a log severity level.\n\n\timport (\n\t\t\"os/exec\"\n\t\t\"github.com/ghetzel/go-stockutil/log\"\n\t)\n\n\twr := log.NewWritableLogger(log.INFO, `ls: `)\n\n\twr.SetParserFunc(func(line string) (log.Level, string) {\n\t\tif strings.Contains(line, `root`) {\n\t\t\t// root-owned files show up as errors\n\t\t\treturn log.ERROR, line\n\t\t} else if strings.Contains(line, os.Getenv(`USER`)) {\n\t\t\t// current user files are notices\n\t\t\treturn log.NOTICE, line\n\t\t} else {\n\t\t\t// all other lines are not logged at all\n\t\t\treturn log.DEBUG, ``\n\t\t}\n\t})\n\n\tls := exec.Command(`ls`, `-l`)\n\tls.Stdout = wr\n\tls.Run()\n",
    "MainFunction": false,
    "CommentWordCount": 1052,
    "LineCount": 907,
    "SourceLineCount": 690,
    "FunctionCount": 54,
    "TypeCount": 9,
    "ConstantCount": 8,
    "VariableCount": 8,
    "Statistics": {
        "Mean": 0.242,
        "StdDev": 0.4247,
        "GeometricMean": 0,
        "HarmonicMean": 1,
        "Median": 0,
        "Minimum": 0,
        "Maximum": 1
    },
    "Files": [
        {
            "Name": "colors.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "regexp",
                    "Alias": "regexp"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/rxutil",
                    "Alias": "rxutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/mgutz/ansi",
                    "Alias": "ansi"
                }
            ],
            "Size": 1599,
            "LineCount": 61,
            "SourceLineCount": 43,
            "FunctionCount": 4,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 2
        },
        {
            "Name": "colors_test.go",
            "Imports": [
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 3181,
            "LineCount": 49,
            "SourceLineCount": 40,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "debugging.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "runtime",
                    "Alias": "runtime"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                }
            ],
            "Size": 1476,
            "LineCount": 77,
            "SourceLineCount": 58,
            "FunctionCount": 3,
            "TypeCount": 2,
            "ConstantCount": 0,
            "VariableCount": 1
        },
        {
            "Name": "doc.go",
            "Size": 4097,
            "LineCount": 120,
            "SourceLineCount": 84,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "errors.go",
            "Imports": [
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                }
            ],
            "Size": 1372,
            "LineCount": 50,
            "SourceLineCount": 36,
            "FunctionCount": 3,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "errors_test.go",
            "Imports": [
                {
                    "PackageName": "errors",
                    "Alias": "errors"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 1304,
            "LineCount": 52,
            "SourceLineCount": 43,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "levels.go",
            "Imports": [
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                }
            ],
            "Size": 803,
            "LineCount": 61,
            "SourceLineCount": 55,
            "FunctionCount": 2,
            "TypeCount": 1,
            "ConstantCount": 8,
            "VariableCount": 0
        },
        {
            "Name": "log.go",
            "Imports": [
                {
                    "PackageName": "encoding/json",
                    "Alias": "json"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "sync",
                    "Alias": "sync"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/hashicorp/go-multierror",
                    "Alias": "multierror"
                },
                {
                    "PackageName": "github.com/mattn/go-isatty",
                    "Alias": "isatty"
                },
                {
                    "PackageName": "github.com/op/go-logging",
                    "Alias": "go-logging"
                }
            ],
            "Size": 8103,
            "LineCount": 344,
            "SourceLineCount": 257,
            "FunctionCount": 34,
            "TypeCount": 3,
            "ConstantCount": 0,
            "VariableCount": 5
        },
        {
            "Name": "timing.go",
            "Imports": [
                {
                    "PackageName": "time",
                    "Alias": "time"
                }
            ],
            "Size": 738,
            "LineCount": 48,
            "SourceLineCount": 39,
            "FunctionCount": 5,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "writable.go",
            "Imports": [
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                }
            ],
            "Size": 787,
            "LineCount": 45,
            "SourceLineCount": 35,
            "FunctionCount": 3,
            "TypeCount": 2,
            "ConstantCount": 0,
            "VariableCount": 0
        }
    ],
    "Constants": [
        {
            "Name": "CRITICAL",
            "Immutable": true
        },
        {
            "Name": "DEBUG",
            "Immutable": true
        },
        {
            "Name": "ERROR",
            "Immutable": true
        },
        {
            "Name": "FATAL",
            "Immutable": true
        },
        {
            "Name": "INFO",
            "Immutable": true
        },
        {
            "Name": "NOTICE",
            "Immutable": true
        },
        {
            "Name": "PANIC",
            "Type": "Level",
            "Immutable": true,
            "Expression": "iota"
        },
        {
            "Name": "WARNING",
            "Immutable": true
        }
    ],
    "Variables": [
        {
            "Name": "DefaultInterceptStackDepth",
            "Type": "int",
            "Expression": "5"
        },
        {
            "Name": "EnableColorExpressions"
        },
        {
            "Name": "LogLevel",
            "Type": "Level",
            "Comment": "The LOGLEVEL environment variable has final say over the effective log level\nfor all users of this package."
        },
        {
            "Name": "MaxStackTraceDepth",
            "Expression": "32"
        },
        {
            "Name": "ModuleName",
            "Expression": "``"
        },
        {
            "Name": "SynchronousIntercepts",
            "Expression": "false"
        },
        {
            "Name": "TerminalEscapePrefix",
            "Expression": "`\\[`",
            "Value": "\\["
        },
        {
            "Name": "TerminalEscapeSuffix",
            "Expression": "`\\]`",
            "Value": "\\]"
        }
    ],
    "Functions": [
        {
            "Name": "AddLogIntercept",
            "Comment": "Append a function to be called (asynchronously in its own goroutine, or\nsynchronously if SynchronousIntercepts is true) for every line logged.\nReturns a UUID that can be later used to deregister the intercept function.",
            "Arguments": [
                {
                    "Name": "fn",
                    "Type": "LogInterceptFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "AddLogIntercept(fn LogInterceptFunc) string",
            "Source": "ewoJaWQgOj0gc3RyaW5ndXRpbC5VVUlEKCkuU3RyaW5nKCkKCWludGVyY2VwdHMuU3RvcmUoaWQsIGZuKQoJcmV0dXJuIGlkCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "AppendError",
            "Comment": "Appends one error to another, allowing for operations that return multiple errors\nto remain compatible within a single-valued context.",
            "Arguments": [
                {
                    "Name": "base",
                    "Type": "error"
                },
                {
                    "Name": "err",
                    "Type": "error"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "AppendError(base error, err error) error",
            "Source": "ewoJaWYgZXJyID09IG5pbCB7CgkJcmV0dXJuIGJhc2UKCX0gZWxzZSB7CgkJcmV0dXJuIG11bHRpZXJyb3IuQXBwZW5kKGJhc2UsIGVycikKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "CFPrintf",
            "Arguments": [
                {
                    "Name": "w",
                    "Type": "io.Writer"
                },
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "int"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "CFPrintf(w io.Writer, format string, args ...interface{}) (int, error)",
            "Source": "ewoJcmV0dXJuIGZtdC5GcHJpbnQodywgQ1NwcmludGYoZm9ybWF0LCBhcmdzLi4uKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "CSprintf",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "CSprintf(format string, args ...interface{}) string",
            "Source": "ewoJcmV0dXJuIGNzcHJpbnRmKGZhbHNlLCB0cnVlLCBmb3JtYXQsIGFyZ3MuLi4pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "CStripf",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "CStripf(format string, args ...interface{}) string",
            "Source": "ewoJcmV0dXJuIGNzcHJpbnRmKGZhbHNlLCBmYWxzZSwgZm9ybWF0LCBhcmdzLi4uKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Confirm",
            "Arguments": [
                {
                    "Name": "prompt",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "Confirm(prompt string) bool",
            "Source": "ewoJcmV0dXJuIENvbmZpcm1mKHByb21wdCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Confirmf",
            "Comment": "Present a confirmation prompt. The function returns true if the user interactively responds\nwith \"yes\" or \"y\". Otherwise the function returns false.",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "Confirmf(format string, args ...interface{}) bool",
            "Source": "ewoJdmFyIHJlc3BvbnNlIHN0cmluZwoJZm10LlByaW50Zihmb3JtYXQsIGFyZ3MuLi4pCglpZiBfLCBlcnIgOj0gZm10LlNjYW5sbigmcmVzcG9uc2UpOyBlcnIgIT0gbmlsIHsKCQlwYW5pYyhlcnIuRXJyb3IoKSkKCX0KCWZvciBfLCBva2F5IDo9IHJhbmdlIFtdc3RyaW5ne2B5YCwgYHllc2B9IHsKCQlpZiBzdHJpbmdzLlRvTG93ZXIob2theSkgPT0gc3RyaW5ncy5Ub0xvd2VyKHJlc3BvbnNlKSB7CgkJCXJldHVybiB0cnVlCgkJfQoJfQoJcmV0dXJuIGZhbHNlCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Critical",
            "Arguments": [
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Critical(args ...interface{})",
            "Source": "ewoJTG9nKENSSVRJQ0FMLCBhcmdzLi4uKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Criticalf",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Criticalf(format string, args ...interface{})",
            "Source": "ewoJTG9nZihDUklUSUNBTCwgZm9ybWF0LCBhcmdzLi4uKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Debug",
            "Arguments": [
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Debug(args ...interface{})",
            "Source": "ewoJTG9nKERFQlVHLCBhcmdzLi4uKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "DebugStack",
            "Comment": "Logs the current stack trace as debug log output.",
            "Signature": "DebugStack()",
            "Source": "ewoJRGVidWcoIlN0YWNrIHRyYWNlOiIpCglmb3IgaSwgaXRlbSA6PSByYW5nZSBTdGFja1RyYWNlKDMpIHsKCQlmb3IgaiwgbGluZSA6PSByYW5nZSBzdHJpbmdzLlNwbGl0KGl0ZW0uU3RyaW5nKCksICJcbiIpIHsKCQkJaWYgaiA9PSAwIHsKCQkJCURlYnVnZigiICAlIDJkOiAldiIsIGksIGxpbmUpCgkJCX0gZWxzZSB7CgkJCQlEZWJ1Z2YoIiAgICAgICAgICAldiIsIGxpbmUpCgkJCX0KCQl9Cgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Debugf",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Debugf(format string, args ...interface{})",
            "Source": "ewoJTG9nZihERUJVRywgZm9ybWF0LCBhcmdzLi4uKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Debugging",
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "Debugging() bool",
            "Source": "ewoJcmV0dXJuIChMb2dMZXZlbCA9PSBERUJVRykKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Dump",
            "Comment": "Pretty-print the given arguments to the log at debug-level.",
            "Arguments": [
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Dump(args ...interface{})",
            "Source": "ewoJZm9yIF8sIGFyZyA6PSByYW5nZSBhcmdzIHsKCQlMb2coTG9nTGV2ZWwsIHR5cGV1dGlsLkR1bXAoYXJnKSkKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "DumpJSON",
            "Comment": "Marshal the arguments as indented JSON and log them at debug-level.",
            "Arguments": [
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "DumpJSON(args ...interface{})",
            "Source": "ewoJZm9yIF8sIGFyZyA6PSByYW5nZSBhcmdzIHsKCQlpZiBkYXRhLCBlcnIgOj0ganNvbi5NYXJzaGFsSW5kZW50KGFyZywgYGAsIGAgIGApOyBlcnIgPT0gbmlsIHsKCQkJTG9nKExvZ0xldmVsLCBzdHJpbmcoZGF0YSkpCgkJfSBlbHNlIHsKCQkJTG9nZihMb2dMZXZlbCwgIkR1bXBKU09OOiAldiIsIGVycikKCQl9Cgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Dumpf",
            "Comment": "Same as Dump, but accepts a format string.",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Dumpf(format string, args ...interface{})",
            "Source": "ewoJZm9yIF8sIGFyZyA6PSByYW5nZSBhcmdzIHsKCQlMb2dmKExvZ0xldmVsLCBmb3JtYXQsIHR5cGV1dGlsLkR1bXAoYXJnKSkKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "ErrContains",
            "Comment": "Return whether the given error contains with the given message.  Message can\nbe a string or another error.  If either is nil, this function returns false.",
            "Arguments": [
                {
                    "Name": "err",
                    "Type": "error"
                },
                {
                    "Name": "message",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "ErrContains(err error, message interface{}) bool",
            "Source": "ewoJaWYgZW1zZywgbXNnLCBvayA6PSBwcmVjaGVjayhlcnIsIG1lc3NhZ2UpOyBvayB7CgkJcmV0dXJuIHN0cmluZ3MuQ29udGFpbnMoZW1zZywgbXNnKQoJfSBlbHNlIHsKCQlyZXR1cm4gZmFsc2UKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "ErrHasPrefix",
            "Comment": "Return whether the given error is prefixed with the given message.  Message can\nbe a string or another error.  If either is nil, this function returns false.",
            "Arguments": [
                {
                    "Name": "err",
                    "Type": "error"
                },
                {
                    "Name": "message",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "ErrHasPrefix(err error, message interface{}) bool",
            "Source": "ewoJaWYgZW1zZywgbXNnLCBvayA6PSBwcmVjaGVjayhlcnIsIG1lc3NhZ2UpOyBvayB7CgkJcmV0dXJuIHN0cmluZ3MuSGFzUHJlZml4KGVtc2csIG1zZykKCX0gZWxzZSB7CgkJcmV0dXJuIGZhbHNlCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ErrHasSuffix",
            "Comment": "Return whether the given error is suffixed with the given message.  Message can\nbe a string or another error.  If either is nil, this function returns false.",
            "Arguments": [
                {
                    "Name": "err",
                    "Type": "error"
                },
                {
                    "Name": "message",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "ErrHasSuffix(err error, message interface{}) bool",
            "Source": "ewoJaWYgZW1zZywgbXNnLCBvayA6PSBwcmVjaGVjayhlcnIsIG1lc3NhZ2UpOyBvayB7CgkJcmV0dXJuIHN0cmluZ3MuSGFzU3VmZml4KGVtc2csIG1zZykKCX0gZWxzZSB7CgkJcmV0dXJuIGZhbHNlCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Error",
            "Arguments": [
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Error(args ...interface{})",
            "Source": "ewoJTG9nKEVSUk9SLCBhcmdzLi4uKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Errorf",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Errorf(format string, args ...interface{})",
            "Source": "ewoJTG9nZihFUlJPUiwgZm9ybWF0LCBhcmdzLi4uKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Fatal",
            "Arguments": [
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Fatal(args ...interface{})",
            "Source": "ewoJTG9nKEZBVEFMLCBhcmdzLi4uKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "FatalIf",
            "Comment": "Invoke Fatal() if the given error is not nil.",
            "Arguments": [
                {
                    "Name": "err",
                    "Type": "error"
                }
            ],
            "Signature": "FatalIf(err error)",
            "Source": "ewoJaWYgZXJyICE9IG5pbCB7CgkJRmF0YWwoZXJyKQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Fatalf",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Fatalf(format string, args ...interface{})",
            "Source": "ewoJTG9nZihGQVRBTCwgZm9ybWF0LCBhcmdzLi4uKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "FatalfIf",
            "Comment": "Invoke Fatalf() if the given error is not nil.",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "err",
                    "Type": "error"
                }
            ],
            "Signature": "FatalfIf(format string, err error)",
            "Source": "ewoJaWYgZXJyICE9IG5pbCB7CgkJRmF0YWxmKGZvcm1hdCwgZXJyKQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Info",
            "Arguments": [
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Info(args ...interface{})",
            "Source": "ewoJTG9nKElORk8sIGFyZ3MuLi4pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Infof",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Infof(format string, args ...interface{})",
            "Source": "ewoJTG9nZihJTkZPLCBmb3JtYXQsIGFyZ3MuLi4pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Log",
            "Arguments": [
                {
                    "Name": "level",
                    "Type": "Level"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Log(level Level, args ...interface{})",
            "Source": "ewoJaWYgbGV2ZWwgPT0gRkFUQUwgJiYgbGVuKGFyZ3MpID09IDEgJiYgYXJnc1swXSA9PSBuaWwgewoJCXJldHVybgoJfQoJaW5pdExvZ2dpbmcoKQoJY2FsbEludGVyY2VwdHMobGV2ZWwsIHN0cmluZ3MuSm9pbihzbGljZXV0aWwuU3RyaW5naWZ5KGFyZ3MpLCBgIGApLCBTdGFja1RyYWNlKERlZmF1bHRJbnRlcmNlcHRTdGFja0RlcHRoKSkKCWxvZyhsZXZlbCwgYXJncy4uLikKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Logf",
            "Arguments": [
                {
                    "Name": "level",
                    "Type": "Level"
                },
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Logf(level Level, format string, args ...interface{})",
            "Source": "ewoJaW5pdExvZ2dpbmcoKQoJY2FsbEludGVyY2VwdHMobGV2ZWwsIGZtdC5TcHJpbnRmKGZvcm1hdCwgYXJncy4uLiksIFN0YWNrVHJhY2UoRGVmYXVsdEludGVyY2VwdFN0YWNrRGVwdGgpKQoJaWYgRW5hYmxlQ29sb3JFeHByZXNzaW9ucyB7CgkJbG9nKGxldmVsLCBDU3ByaW50Zihmb3JtYXQsIGFyZ3MuLi4pKQoJfSBlbHNlIHsKCQlsb2cobGV2ZWwsIENTdHJpcGYoZm9ybWF0LCBhcmdzLi4uKSkKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Logger",
            "Returns": [
                {
                    "Type": "*logging.Logger"
                }
            ],
            "Signature": "Logger() *logging.Logger",
            "Source": "ewoJaW5pdExvZ2dpbmcoKQoJcmV0dXJuIGRlZmF1bHRMb2dnZXIKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Notice",
            "Arguments": [
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Notice(args ...interface{})",
            "Source": "ewoJTG9nKE5PVElDRSwgYXJncy4uLikKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Noticef",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Noticef(format string, args ...interface{})",
            "Source": "ewoJTG9nZihOT1RJQ0UsIGZvcm1hdCwgYXJncy4uLikKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Panic",
            "Arguments": [
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Panic(args ...interface{})",
            "Source": "ewoJTG9nKFBBTklDLCBhcmdzLi4uKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Panicf",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Panicf(format string, args ...interface{})",
            "Source": "ewoJTG9nZihQQU5JQywgZm9ybWF0LCBhcmdzLi4uKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "RemoveLogIntercept",
            "Comment": "Remove the previously-added log intercept function.",
            "Arguments": [
                {
                    "Name": "id",
                    "Type": "string"
                }
            ],
            "Signature": "RemoveLogIntercept(id string)",
            "Source": "ewoJaW50ZXJjZXB0cy5EZWxldGUoaWQpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "SetLevel",
            "Arguments": [
                {
                    "Name": "level",
                    "Type": "Level"
                },
                {
                    "Name": "modules",
                    "Type": "...string"
                }
            ],
            "Signature": "SetLevel(level Level, modules ...string)",
            "Source": "ewoJaW5pdExvZ2dpbmcoKQoJaWYgbHZsLCBlcnIgOj0gbG9nZ2luZy5Mb2dMZXZlbChsZXZlbC5TdHJpbmcoKSk7IGVyciA9PSBuaWwgewoJCWlmIGxlbihtb2R1bGVzKSA9PSAwIHsKCQkJbGV2ZWxlZC5TZXRMZXZlbChsdmwsIGBgKQoJCX0gZWxzZSB7CgkJCWZvciBfLCBtb2R1bGUgOj0gcmFuZ2UgbW9kdWxlcyB7CgkJCQlsZXZlbGVkLlNldExldmVsKGx2bCwgbW9kdWxlKQoJCQl9CgkJfQoJfSBlbHNlIHsKCQlmbXQuUHJpbnRmKCJbSU5WQUxJRCBMRVZFTCAldl0gIiwgbGV2ZWwpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "SetLevelString",
            "Arguments": [
                {
                    "Name": "level",
                    "Type": "string"
                },
                {
                    "Name": "modules",
                    "Type": "...string"
                }
            ],
            "Signature": "SetLevelString(level string, modules ...string)",
            "Source": "ewoJU2V0TGV2ZWwoR2V0TGV2ZWwobGV2ZWwpLCBtb2R1bGVzLi4uKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "SetOutput",
            "Comment": "Set the destination Writer where logs will henceforth be written.",
            "Arguments": [
                {
                    "Name": "w",
                    "Type": "io.Writer"
                }
            ],
            "Signature": "SetOutput(w io.Writer)",
            "Source": "ewoJaW5pdExvZ2dpbmcoKQoJYmFja2VuZC5Mb2dnZXIuU2V0T3V0cHV0KHcpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TermSprintf",
            "Comment": "Same as CSprintf, but wraps all replaced color sequences with terminal escape sequences\nas defined in TerminalEscapePrefix and TerminalEscapeSuffix",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "TermSprintf(format string, args ...interface{}) string",
            "Source": "ewoJcmV0dXJuIGNzcHJpbnRmKHRydWUsIHRydWUsIGZvcm1hdCwgYXJncy4uLikKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "VeryDebugging",
            "Arguments": [
                {
                    "Name": "features",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "VeryDebugging(features ...string) bool",
            "Source": "ewoJaWYgRGVidWdnaW5nKCkgewoJCWVudkZlYXR1cmVzIDo9IHN0cmluZ3MuU3BsaXQob3MuR2V0ZW52KGBERUJVR2ApLCBgLGApCgkJZm9yIF8sIGZlYXR1cmUgOj0gcmFuZ2UgZmVhdHVyZXMgewoJCQlmb3IgXywgZWYgOj0gcmFuZ2UgZW52RmVhdHVyZXMgewoJCQkJaWYgdHlwZXV0aWwuQm9vbChlZikgewoJCQkJCXJldHVybiB0cnVlCgkJCQl9IGVsc2UgaWYgc3RyaW5ncy5Ub0xvd2VyKGZlYXR1cmUpID09IHN0cmluZ3MuVG9Mb3dlcihlZikgewoJCQkJCXJldHVybiB0cnVlCgkJCQl9CgkJCX0KCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Warning",
            "Arguments": [
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Warning(args ...interface{})",
            "Source": "ewoJTG9nKFdBUk5JTkcsIGFyZ3MuLi4pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Warningf",
            "Arguments": [
                {
                    "Name": "format",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "Warningf(format string, args ...interface{})",
            "Source": "ewoJTG9nZihXQVJOSU5HLCBmb3JtYXQsIGFyZ3MuLi4pCn0=",
            "IsPackageLevel": true
        }
    ],
    "Tests": [
        {
            "Name": "TestCSprintf",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCSprintf(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlszMG1ibGFja1x4MWJbMG0gd29yZCIsIENTcHJpbnRmKCJ0aGlzICR7YmxhY2t9YmxhY2ske3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlszMW1yZWRceDFiWzBtIHdvcmQiLCBDU3ByaW50ZigidGhpcyAke3JlZH1yZWQke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlszMm1ncmVlblx4MWJbMG0gd29yZCIsIENTcHJpbnRmKCJ0aGlzICR7Z3JlZW59Z3JlZW4ke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlszM215ZWxsb3dceDFiWzBtIHdvcmQiLCBDU3ByaW50ZigidGhpcyAke3llbGxvd315ZWxsb3cke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlszNG1ibHVlXHgxYlswbSB3b3JkIiwgQ1NwcmludGYoInRoaXMgJHtibHVlfWJsdWUke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlszNW1tYWdlbnRhXHgxYlswbSB3b3JkIiwgQ1NwcmludGYoInRoaXMgJHttYWdlbnRhfW1hZ2VudGEke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlszNm1jeWFuXHgxYlswbSB3b3JkIiwgQ1NwcmludGYoInRoaXMgJHtjeWFufWN5YW4ke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYlszN213aGl0ZVx4MWJbMG0gd29yZCIsIENTcHJpbnRmKCJ0aGlzICR7d2hpdGV9d2hpdGUke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYls5MG1ibGFja1x4MWJbMG0gd29yZCIsIENTcHJpbnRmKCJ0aGlzICR7YmxhY2sraH1ibGFjayR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBceDFiWzkxbXJlZFx4MWJbMG0gd29yZCIsIENTcHJpbnRmKCJ0aGlzICR7cmVkK2h9cmVkJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFx4MWJbOTJtZ3JlZW5ceDFiWzBtIHdvcmQiLCBDU3ByaW50ZigidGhpcyAke2dyZWVuK2h9Z3JlZW4ke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYls5M215ZWxsb3dceDFiWzBtIHdvcmQiLCBDU3ByaW50ZigidGhpcyAke3llbGxvdytofXllbGxvdyR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBceDFiWzk0bWJsdWVceDFiWzBtIHdvcmQiLCBDU3ByaW50ZigidGhpcyAke2JsdWUraH1ibHVlJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFx4MWJbOTVtbWFnZW50YVx4MWJbMG0gd29yZCIsIENTcHJpbnRmKCJ0aGlzICR7bWFnZW50YStofW1hZ2VudGEke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXHgxYls5Nm1jeWFuXHgxYlswbSB3b3JkIiwgQ1NwcmludGYoInRoaXMgJHtjeWFuK2h9Y3lhbiR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBceDFiWzk3bXdoaXRlXHgxYlswbSB3b3JkIiwgQ1NwcmludGYoInRoaXMgJHt3aGl0ZStofXdoaXRlJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFxcW1x4MWJbOTBtXFxdYmxhY2tcXFtceDFiWzBtXFxdIHdvcmQiLCBUZXJtU3ByaW50ZigidGhpcyAke2JsYWNrK2h9YmxhY2ske3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXFxbXHgxYls5MW1cXF1yZWRcXFtceDFiWzBtXFxdIHdvcmQiLCBUZXJtU3ByaW50ZigidGhpcyAke3JlZCtofXJlZCR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBcXFtceDFiWzkybVxcXWdyZWVuXFxbXHgxYlswbVxcXSB3b3JkIiwgVGVybVNwcmludGYoInRoaXMgJHtncmVlbitofWdyZWVuJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFxcW1x4MWJbOTNtXFxdeWVsbG93XFxbXHgxYlswbVxcXSB3b3JkIiwgVGVybVNwcmludGYoInRoaXMgJHt5ZWxsb3craH15ZWxsb3cke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXFxbXHgxYls5NG1cXF1ibHVlXFxbXHgxYlswbVxcXSB3b3JkIiwgVGVybVNwcmludGYoInRoaXMgJHtibHVlK2h9Ymx1ZSR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBcXFtceDFiWzk1bVxcXW1hZ2VudGFcXFtceDFiWzBtXFxdIHdvcmQiLCBUZXJtU3ByaW50ZigidGhpcyAke21hZ2VudGEraH1tYWdlbnRhJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIFxcW1x4MWJbOTZtXFxdY3lhblxcW1x4MWJbMG1cXF0gd29yZCIsIFRlcm1TcHJpbnRmKCJ0aGlzICR7Y3lhbitofWN5YW4ke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgXFxbXHgxYls5N21cXF13aGl0ZVxcW1x4MWJbMG1cXF0gd29yZCIsIFRlcm1TcHJpbnRmKCJ0aGlzICR7d2hpdGUraH13aGl0ZSR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBibGFjayB3b3JkIiwgQ1N0cmlwZigidGhpcyAke2JsYWNrK2h9YmxhY2ske3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgcmVkIHdvcmQiLCBDU3RyaXBmKCJ0aGlzICR7cmVkK2h9cmVkJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIGdyZWVuIHdvcmQiLCBDU3RyaXBmKCJ0aGlzICR7Z3JlZW4raH1ncmVlbiR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyB5ZWxsb3cgd29yZCIsIENTdHJpcGYoInRoaXMgJHt5ZWxsb3craH15ZWxsb3cke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgYmx1ZSB3b3JkIiwgQ1N0cmlwZigidGhpcyAke2JsdWUraH1ibHVlJHtyZXNldH0gd29yZCIpKQoJYXNzZXJ0LkVxdWFsKCJ0aGlzIG1hZ2VudGEgd29yZCIsIENTdHJpcGYoInRoaXMgJHttYWdlbnRhK2h9bWFnZW50YSR7cmVzZXR9IHdvcmQiKSkKCWFzc2VydC5FcXVhbCgidGhpcyBjeWFuIHdvcmQiLCBDU3RyaXBmKCJ0aGlzICR7Y3lhbitofWN5YW4ke3Jlc2V0fSB3b3JkIikpCglhc3NlcnQuRXF1YWwoInRoaXMgd2hpdGUgd29yZCIsIENTdHJpcGYoInRoaXMgJHt3aGl0ZStofXdoaXRlJHtyZXNldH0gd29yZCIpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestErrors",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestErrors(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgllMW0gOj0gYGVycm9yIDFgCgllMSA6PSBlcnJvcnMuTmV3KGUxbSkKCWUybSA6PSBgZXJyb3JgCgllMiA6PSBlcnJvcnMuTmV3KGUybSkKCWFzc2VydC5GYWxzZShFcnJDb250YWlucyhuaWwsIG5pbCkpCglhc3NlcnQuRmFsc2UoRXJyQ29udGFpbnMoZTEsIG5pbCkpCglhc3NlcnQuRmFsc2UoRXJyQ29udGFpbnMobmlsLCBlMikpCglhc3NlcnQuRmFsc2UoRXJyQ29udGFpbnMobmlsLCBlMm0pKQoJYXNzZXJ0LlRydWUoRXJyQ29udGFpbnMoZTEsIGUxKSkKCWFzc2VydC5UcnVlKEVyckNvbnRhaW5zKGUxLCBlMW0pKQoJYXNzZXJ0LlRydWUoRXJyQ29udGFpbnMoZTIsIGUyKSkKCWFzc2VydC5UcnVlKEVyckNvbnRhaW5zKGUyLCBlMm0pKQoJYXNzZXJ0LlRydWUoRXJyQ29udGFpbnMoZTEsIGUyKSkKCWFzc2VydC5UcnVlKEVyckNvbnRhaW5zKGUxLCBlMm0pKQoJYXNzZXJ0LkZhbHNlKEVyckNvbnRhaW5zKGUyLCBlMSkpCglhc3NlcnQuRmFsc2UoRXJyQ29udGFpbnMoZTIsIGUxbSkpCglhc3NlcnQuVHJ1ZShFcnJIYXNQcmVmaXgoZTEsIGUxKSkKCWFzc2VydC5UcnVlKEVyckhhc1ByZWZpeChlMSwgZTFtKSkKCWFzc2VydC5UcnVlKEVyckhhc1ByZWZpeChlMiwgZTIpKQoJYXNzZXJ0LlRydWUoRXJySGFzUHJlZml4KGUyLCBlMm0pKQoJYXNzZXJ0LlRydWUoRXJySGFzUHJlZml4KGUxLCBlMikpCglhc3NlcnQuVHJ1ZShFcnJIYXNQcmVmaXgoZTEsIGUybSkpCglhc3NlcnQuRmFsc2UoRXJySGFzUHJlZml4KGUxLCBgbm9wZWApKQoJYXNzZXJ0LkZhbHNlKEVyckhhc1ByZWZpeChlMiwgZTEpKQoJYXNzZXJ0LkZhbHNlKEVyckhhc1ByZWZpeChlMiwgZTFtKSkKCWFzc2VydC5GYWxzZShFcnJIYXNTdWZmaXgoZTEsIGUyKSkKCWFzc2VydC5GYWxzZShFcnJIYXNTdWZmaXgoZTEsIGUybSkpCglhc3NlcnQuVHJ1ZShFcnJIYXNTdWZmaXgoZTEsIGAxYCkpCglhc3NlcnQuRmFsc2UoRXJySGFzU3VmZml4KGUyLCBlMSkpCglhc3NlcnQuRmFsc2UoRXJySGFzU3VmZml4KGUyLCBlMW0pKQoJYXNzZXJ0LlRydWUoRXJySGFzU3VmZml4KGUxLCBlMSkpCglhc3NlcnQuVHJ1ZShFcnJIYXNTdWZmaXgoZTEsIGUxbSkpCglhc3NlcnQuVHJ1ZShFcnJIYXNTdWZmaXgoZTIsIGUyKSkKCWFzc2VydC5UcnVlKEVyckhhc1N1ZmZpeChlMiwgZTJtKSkKfQ==",
            "IsPackageLevel": true
        }
    ],
    "Types": {
        "FormattedLogFunc": {
            "Name": "FormattedLogFunc",
            "Source": "dHlwZSBGb3JtYXR0ZWRMb2dGdW5jIGZ1bmMoZm9ybWF0IHN0cmluZywgYXJncyAuLi5pbnRlcmZhY2V7fSk="
        },
        "Level": {
            "Name": "Level",
            "MetaType": "int",
            "Methods": [
                {
                    "Name": "String",
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "String() string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetLevel",
                    "Arguments": [
                        {
                            "Name": "level",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "Level"
                        }
                    ],
                    "Signature": "GetLevel(level string) Level",
                    "Source": "ewoJc3dpdGNoIHN0cmluZ3MuVG9Mb3dlcihsZXZlbCkgewoJY2FzZSBgcGFuaWNgOgoJCXJldHVybiBQQU5JQwoJY2FzZSBgZmF0YWxgOgoJCXJldHVybiBGQVRBTAoJY2FzZSBgY3JpdGljYWxgLCBgY3JpdGA6CgkJcmV0dXJuIENSSVRJQ0FMCgljYXNlIGBlcnJvcmAsIGBlcnJgOgoJCXJldHVybiBFUlJPUgoJY2FzZSBgd2FybmluZ2AsIGB3YXJuYDoKCQlyZXR1cm4gV0FSTklORwoJY2FzZSBgbm90aWNlYDoKCQlyZXR1cm4gTk9USUNFCgljYXNlIGBpbmZvYDoKCQlyZXR1cm4gSU5GTwoJY2FzZSBgZGVidWdgOgoJCXJldHVybiBERUJVRwoJZGVmYXVsdDoKCQlyZXR1cm4gREVCVUcKCX0KfQ==",
                    "IsPackageLevel": true
                }
            ],
            "Source": "dHlwZSBMZXZlbCBpbnQ="
        },
        "LogFunc": {
            "Name": "LogFunc",
            "Source": "dHlwZSBMb2dGdW5jIGZ1bmMoYXJncyAuLi5pbnRlcmZhY2V7fSk="
        },
        "LogInterceptFunc": {
            "Name": "LogInterceptFunc",
            "Source": "dHlwZSBMb2dJbnRlcmNlcHRGdW5jIGZ1bmMobGV2ZWwgTGV2ZWwsIGxpbmUgc3RyaW5nLCBzdGFjayBTdGFja0l0ZW1zKQ=="
        },
        "LogParseFunc": {
            "Name": "LogParseFunc",
            "Source": "dHlwZSBMb2dQYXJzZUZ1bmMgZnVuYyhsaW5lIHN0cmluZykgKExldmVsLCBzdHJpbmcp"
        },
        "StackItem": {
            "Name": "StackItem",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "String",
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "String() string",
                    "IsPackageLevel": false
                }
            ],
            "Fields": [
                {
                    "Name": "ProgramCounter",
                    "Type": "uintptr"
                },
                {
                    "Name": "Filename",
                    "Type": "string"
                },
                {
                    "Name": "Line",
                    "Type": "int"
                },
                {
                    "Name": "Function",
                    "Type": "string"
                }
            ],
            "Source": "dHlwZSBTdGFja0l0ZW0gc3RydWN0IHsKCVByb2dyYW1Db3VudGVyIHVpbnRwdHIKCUZpbGVuYW1lICAgICAgIHN0cmluZwoJTGluZSAgICAgICAgICAgaW50CglGdW5jdGlvbiAgICAgICBzdHJpbmcKfQ=="
        },
        "StackItems": {
            "Name": "StackItems",
            "Methods": [
                {
                    "Name": "StackTrace",
                    "Comment": "Retrieves details about the call stack that led to this function call.",
                    "Arguments": [
                        {
                            "Name": "skip",
                            "Type": "int"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "StackItems"
                        }
                    ],
                    "Signature": "StackTrace(skip int) StackItems",
                    "Source": "ewoJcGMgOj0gbWFrZShbXXVpbnRwdHIsIE1heFN0YWNrVHJhY2VEZXB0aCkKCWl0ZW1zIDo9IG1ha2UoU3RhY2tJdGVtcywgMCkKCWlmIG4gOj0gcnVudGltZS5DYWxsZXJzKHNraXAsIHBjKTsgbiA8PSBsZW4ocGMpIHsKCQlwYyA9IHBjWzpuXQoJCWlmIGZyYW1lcyA6PSBydW50aW1lLkNhbGxlcnNGcmFtZXMocGMpOyBmcmFtZXMgIT0gbmlsIHsKCQkJZm9yIGkgOj0gMDsgbGVuKGl0ZW1zKSA8PSBsZW4ocGMpOyBpKysgewoJCQkJZnJhbWUsIG1vcmUgOj0gZnJhbWVzLk5leHQoKQoJCQkJaXRlbXMgPSBhcHBlbmQoaXRlbXMsIFN0YWNrSXRlbXtQcm9ncmFtQ291bnRlcjogZnJhbWUuUEMsIEZ1bmN0aW9uOiBmcmFtZS5GdW5jdGlvbiwgRmlsZW5hbWU6IGZyYW1lLkZpbGUsIExpbmU6IGZyYW1lLkxpbmV9KQoJCQkJaWYgIW1vcmUgewoJCQkJCWJyZWFrCgkJCQl9CgkJCX0KCQl9Cgl9CglyZXR1cm4gaXRlbXMKfQ==",
                    "IsPackageLevel": true
                }
            ],
            "Source": "dHlwZSBTdGFja0l0ZW1zIFtdU3RhY2tJdGVt"
        },
        "Timing": {
            "Name": "Timing",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "Done",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "time.Duration"
                        }
                    ],
                    "Signature": "Done() time.Duration",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Reset",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Signature": "Reset()",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Then",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Timing"
                        }
                    ],
                    "Signature": "Then(name string) *Timing",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Time",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Timing"
                        }
                    ],
                    "Signature": "Time(name string) *Timing",
                    "Source": "ewoJcmV0dXJuICZUaW1pbmd7bmFtZTogbmFtZSwgc3RhcnRlZDogdGltZS5Ob3coKX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TimeFunc",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        },
                        {
                            "Name": "fn",
                            "Type": ""
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Timing"
                        }
                    ],
                    "Signature": "TimeFunc(name string, fn ) *Timing",
                    "Source": "ewoJaWYgZm4gPT0gbmlsIHsKCQlwYW5pYygiQ2Fubm90IGNhbGwgbG9nLlRpbWVGdW5jIHdpdGggYSBuaWwgZnVuY3Rpb24iKQoJfQoJdG0gOj0gVGltZShuYW1lKQoJZm4oKQoJdG0uRG9uZSgpCglyZXR1cm4gdG0KfQ==",
                    "IsPackageLevel": true
                }
            ],
            "Source": "dHlwZSBUaW1pbmcgc3RydWN0IHsKCn0K",
            "HasUnexportedFields": true
        },
        "WritableLogger": {
            "Name": "WritableLogger",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "NewWritableLogger",
                    "Arguments": [
                        {
                            "Name": "level",
                            "Type": "Level"
                        },
                        {
                            "Name": "prefix",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*WritableLogger"
                        }
                    ],
                    "Signature": "NewWritableLogger(level Level, prefix ...string) *WritableLogger",
                    "Source": "ewoJcmV0dXJuICZXcml0YWJsZUxvZ2dlcntsZXZlbDogbGV2ZWwsIHByZWZpeDogc3RyaW5ncy5Kb2luKHByZWZpeCwgYGApfQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "SetParserFunc",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "LogParseFunc"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*WritableLogger"
                        }
                    ],
                    "Signature": "SetParserFunc(fn LogParseFunc) *WritableLogger",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Write",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "p",
                            "Type": "[]byte"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "int"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Write(p []byte) (int, error)",
                    "IsPackageLevel": false
                }
            ],
            "Source": "dHlwZSBXcml0YWJsZUxvZ2dlciBzdHJ1Y3QgewoKfQo=",
            "HasUnexportedFields": true
        }
    }
}
