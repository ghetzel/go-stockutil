{
    "Name": "httputil",
    "CanonicalImportPath": "github.com/ghetzel/go-stockutil/httputil",
    "ImportPath": "httputil",
    "ParentPackage": "stockutil",
    "URL": "https://github.com/ghetzel/go-stockutil",
    "Synopsis": "Utilities for extracting and formatting data encountered in HTTP requests\n",
    "MainFunction": false,
    "CommentWordCount": 1258,
    "LineCount": 2052,
    "SourceLineCount": 1458,
    "FunctionCount": 78,
    "TypeCount": 14,
    "ConstantCount": 13,
    "VariableCount": 7,
    "Statistics": {
        "Mean": 0.6593,
        "StdDev": 0.4504,
        "GeometricMean": 0,
        "HarmonicMean": 0,
        "Median": 1,
        "Minimum": 0,
        "Maximum": 1
    },
    "Files": [
        {
            "Name": "client.go",
            "Imports": [
                {
                    "PackageName": "bytes",
                    "Alias": "bytes"
                },
                {
                    "PackageName": "crypto/tls",
                    "Alias": "tls"
                },
                {
                    "PackageName": "crypto/x509",
                    "Alias": "x509"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "io/ioutil",
                    "Alias": "ioutil"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "net/http/httputil",
                    "Alias": "gohttputil"
                },
                {
                    "PackageName": "net/url",
                    "Alias": "url"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                    "Alias": "fileutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/log",
                    "Alias": "log"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                }
            ],
            "Size": 16452,
            "LineCount": 572,
            "SourceLineCount": 409,
            "FunctionCount": 34,
            "TypeCount": 2,
            "ConstantCount": 0,
            "VariableCount": 3
        },
        {
            "Name": "client_test.go",
            "Imports": [
                {
                    "PackageName": "bytes",
                    "Alias": "bytes"
                },
                {
                    "PackageName": "errors",
                    "Alias": "errors"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "net/http/httptest",
                    "Alias": "httptest"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/alecthomas/assert",
                    "Alias": "assert"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                    "Alias": "fileutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 5742,
            "LineCount": 226,
            "SourceLineCount": 173,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "codecs.go",
            "Imports": [
                {
                    "PackageName": "bytes",
                    "Alias": "bytes"
                },
                {
                    "PackageName": "encoding/json",
                    "Alias": "json"
                },
                {
                    "PackageName": "encoding/xml",
                    "Alias": "xml"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "mime/multipart",
                    "Alias": "multipart"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                    "Alias": "maputil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                }
            ],
            "Size": 3963,
            "LineCount": 144,
            "SourceLineCount": 114,
            "FunctionCount": 4,
            "TypeCount": 7,
            "ConstantCount": 0,
            "VariableCount": 1
        },
        {
            "Name": "context.go",
            "Imports": [
                {
                    "PackageName": "context",
                    "Alias": "context"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                }
            ],
            "Size": 611,
            "LineCount": 25,
            "SourceLineCount": 18,
            "FunctionCount": 2,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "context_test.go",
            "Imports": [
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 621,
            "LineCount": 24,
            "SourceLineCount": 17,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "decoders.go",
            "Imports": [
                {
                    "PackageName": "compress/bzip2",
                    "Alias": "bzip2"
                },
                {
                    "PackageName": "compress/flate",
                    "Alias": "flate"
                },
                {
                    "PackageName": "compress/gzip",
                    "Alias": "gzip"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "github.com/dsnet/compress/brotli",
                    "Alias": "brotli"
                }
            ],
            "Size": 1178,
            "LineCount": 58,
            "SourceLineCount": 41,
            "FunctionCount": 1,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "decoders_test.go",
            "Size": 2003,
            "LineCount": 71,
            "SourceLineCount": 1,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "logger.go",
            "Imports": [
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "github.com/op/go-logging",
                    "Alias": "go-logging"
                }
            ],
            "Size": 965,
            "LineCount": 52,
            "SourceLineCount": 41,
            "FunctionCount": 2,
            "TypeCount": 2,
            "ConstantCount": 6,
            "VariableCount": 1
        },
        {
            "Name": "netrc.go",
            "Imports": [
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                    "Alias": "fileutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/jdxcode/netrc",
                    "Alias": "netrc"
                }
            ],
            "Size": 982,
            "LineCount": 35,
            "SourceLineCount": 25,
            "FunctionCount": 1,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 1
        },
        {
            "Name": "netrc_test.go",
            "Imports": [
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                    "Alias": "fileutil"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 844,
            "LineCount": 43,
            "SourceLineCount": 30,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "querystrings.go",
            "Imports": [
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "net/url",
                    "Alias": "url"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/timeutil",
                    "Alias": "timeutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                }
            ],
            "Size": 3965,
            "LineCount": 164,
            "SourceLineCount": 118,
            "FunctionCount": 13,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "querystrings_test.go",
            "Imports": [
                {
                    "PackageName": "net/url",
                    "Alias": "url"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 1446,
            "LineCount": 72,
            "SourceLineCount": 51,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "request_logger_middleware.go",
            "Imports": [
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/urfave/negroni",
                    "Alias": "negroni"
                }
            ],
            "Size": 678,
            "LineCount": 33,
            "SourceLineCount": 23,
            "FunctionCount": 2,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "responses.go",
            "Imports": [
                {
                    "PackageName": "encoding/json",
                    "Alias": "json"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "mime",
                    "Alias": "mime"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "net/url",
                    "Alias": "url"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/log",
                    "Alias": "log"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                    "Alias": "maputil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                }
            ],
            "Size": 5086,
            "LineCount": 177,
            "SourceLineCount": 126,
            "FunctionCount": 12,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 1
        },
        {
            "Name": "responses_test.go",
            "Imports": [
                {
                    "PackageName": "net/url",
                    "Alias": "url"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 1779,
            "LineCount": 62,
            "SourceLineCount": 54,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "types.go",
            "Imports": [
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                }
            ],
            "Size": 373,
            "LineCount": 24,
            "SourceLineCount": 18,
            "FunctionCount": 1,
            "TypeCount": 1,
            "ConstantCount": 7,
            "VariableCount": 0
        },
        {
            "Name": "util.go",
            "Imports": [
                {
                    "PackageName": "crypto/tls",
                    "Alias": "tls"
                },
                {
                    "PackageName": "crypto/x509",
                    "Alias": "x509"
                },
                {
                    "PackageName": "encoding/base64",
                    "Alias": "base64"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "mime",
                    "Alias": "mime"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "net/url",
                    "Alias": "url"
                },
                {
                    "PackageName": "path/filepath",
                    "Alias": "filepath"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                    "Alias": "fileutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                }
            ],
            "Size": 4495,
            "LineCount": 159,
            "SourceLineCount": 123,
            "FunctionCount": 6,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "util_test.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "net/http/httptest",
                    "Alias": "httptest"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 3019,
            "LineCount": 111,
            "SourceLineCount": 76,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        }
    ],
    "Constants": [
        {
            "Name": "Debug",
            "Type": "LogLevel",
            "Immutable": true,
            "Expression": "iota"
        },
        {
            "Name": "Delete",
            "Immutable": true,
            "Expression": "`DELETE`",
            "Value": "DELETE"
        },
        {
            "Name": "Error",
            "Immutable": true
        },
        {
            "Name": "Fatal",
            "Immutable": true
        },
        {
            "Name": "Get",
            "Type": "Method",
            "Immutable": true,
            "Expression": "`GET`",
            "Value": "GET"
        },
        {
            "Name": "Head",
            "Immutable": true,
            "Expression": "`HEAD`",
            "Value": "HEAD"
        },
        {
            "Name": "Info",
            "Immutable": true
        },
        {
            "Name": "Notice",
            "Immutable": true
        },
        {
            "Name": "Options",
            "Immutable": true,
            "Expression": "`OPTIONS`",
            "Value": "OPTIONS"
        },
        {
            "Name": "Patch",
            "Immutable": true,
            "Expression": "`PATCH`",
            "Value": "PATCH"
        },
        {
            "Name": "Post",
            "Immutable": true,
            "Expression": "`POST`",
            "Value": "POST"
        },
        {
            "Name": "Put",
            "Immutable": true,
            "Expression": "`PUT`",
            "Value": "PUT"
        },
        {
            "Name": "Warning",
            "Immutable": true
        }
    ],
    "Variables": [
        {
            "Name": "DebugOutputBoxWidth",
            "Expression": "60"
        },
        {
            "Name": "DefaultClient",
            "Expression": "MustClient(``)"
        },
        {
            "Name": "DefaultMultipartFormFileField",
            "Expression": "`filename`",
            "Value": "filename"
        },
        {
            "Name": "FormUnmarshalStructTag",
            "Expression": "`json`",
            "Value": "json"
        },
        {
            "Name": "Logger",
            "Expression": "logging.MustGetLogger(`httputil`)"
        },
        {
            "Name": "NetrcFile",
            "Expression": "`~/.netrc`",
            "Value": "~/.netrc"
        },
        {
            "Name": "WaitForPollInterval",
            "Expression": "time.Second"
        }
    ],
    "Functions": [
        {
            "Name": "AddQ",
            "Comment": "Appends a query string from then given url.URL",
            "Arguments": [
                {
                    "Name": "u",
                    "Type": "*url.URL"
                },
                {
                    "Name": "key",
                    "Type": "string"
                },
                {
                    "Name": "values",
                    "Type": "...interface{}"
                }
            ],
            "Signature": "AddQ(u *url.URL, key string, values ...interface{})",
            "Source": "ewoJcXMgOj0gdS5RdWVyeSgpCglmb3IgXywgdmFsdWUgOj0gcmFuZ2UgdmFsdWVzIHsKCQlxcy5BZGQoa2V5LCBzdHJpbmd1dGlsLk11c3RTdHJpbmcodmFsdWUpKQoJfQoJdS5SYXdRdWVyeSA9IHFzLkVuY29kZSgpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "AddQString",
            "Comment": "A version of AddQ that accepts a URL string and makes a best-effort to modify it.\nWill return the modified URL or the original URL if an error occurred.",
            "Arguments": [
                {
                    "Name": "u",
                    "Type": "string"
                },
                {
                    "Name": "key",
                    "Type": "string"
                },
                {
                    "Name": "value",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "AddQString(u string, key string, value interface{}) string",
            "Source": "ewoJaWYgdXIsIGVyciA6PSB1cmwuUGFyc2UodSk7IGVyciA9PSBuaWwgewoJCUFkZFEodXIsIGtleSwgdmFsdWUpCgkJcmV0dXJuIHVyLlN0cmluZygpCgl9CglyZXR1cm4gdQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "DecodeResponse",
            "Comment": "Takes an http.Response and returns an io.Reader that will return the contents\nof the Response Body decoded according to the values (if any) of the Content-Encoding\nresponse header.",
            "Arguments": [
                {
                    "Name": "response",
                    "Type": "*http.Response"
                }
            ],
            "Returns": [
                {
                    "Type": "io.Reader"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "DecodeResponse(response *http.Response) (io.Reader, error)",
            "Source": "ewoJdmFyIG91dHB1dCBpby5SZWFkZXIgPSByZXNwb25zZS5Cb2R5Cgljb250ZW50RW5jb2RpbmdzIDo9IHN0cmluZ3MuU3BsaXQocmVzcG9uc2UuSGVhZGVyLkdldChgQ29udGVudC1FbmNvZGluZ2ApLCBgLGApCglmb3IgXywgZW5jIDo9IHJhbmdlIGNvbnRlbnRFbmNvZGluZ3MgewoJCWVuYyA9IHN0cmluZ3MuVHJpbVNwYWNlKGVuYykKCQllbmMgPSBzdHJpbmdzLlRyaW1QcmVmaXgoZW5jLCBgeC1gKQoJCWlmIGMsIGVyciA6PSBkZWNvZGUob3V0cHV0LCBlbmMpOyBlcnIgPT0gbmlsIHsKCQkJb3V0cHV0ID0gYwoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGVycgoJCX0KCX0KCXJldHVybiBvdXRwdXQsIG5pbAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "DelQ",
            "Comment": "Deletes a query string from then given url.URL",
            "Arguments": [
                {
                    "Name": "u",
                    "Type": "*url.URL"
                },
                {
                    "Name": "key",
                    "Type": "string"
                }
            ],
            "Signature": "DelQ(u *url.URL, key string)",
            "Source": "ewoJcXMgOj0gdS5RdWVyeSgpCglxcy5EZWwoa2V5KQoJdS5SYXdRdWVyeSA9IHFzLkVuY29kZSgpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "DelQString",
            "Comment": "A version of DelQ that accepts a URL string and makes a best-effort to modify it.\nWill return the modified URL or the original URL if an error occurred.",
            "Arguments": [
                {
                    "Name": "u",
                    "Type": "string"
                },
                {
                    "Name": "key",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "DelQString(u string, key string) string",
            "Source": "ewoJaWYgdXIsIGVyciA6PSB1cmwuUGFyc2UodSk7IGVyciA9PSBuaWwgewoJCURlbFEodXIsIGtleSkKCQlyZXR1cm4gdXIuU3RyaW5nKCkKCX0KCXJldHVybiB1Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "EncodeBasicAuth",
            "Comment": "Encode the username and password into a value than can be used in the Authorization HTTP header.",
            "Arguments": [
                {
                    "Name": "username",
                    "Type": "string"
                },
                {
                    "Name": "password",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "EncodeBasicAuth(username string, password string) string",
            "Source": "ewoJcmV0dXJuIGZtdC5TcHJpbnRmKCJCYXNpYyAlcyIsIGJhc2U2NC5TdGRFbmNvZGluZy5FbmNvZGVUb1N0cmluZyhbXWJ5dGUoZm10LlNwcmludGYoIiVzOiVzIiwgdXNlcm5hbWUsIHBhc3N3b3JkKSkpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "GetBody",
            "Comment": "A simplified GET function using the package-level default client.  Will return the\nresponse body as bytes.",
            "Arguments": [
                {
                    "Name": "url",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "[]byte"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "GetBody(url string) ([]byte, error)",
            "Source": "ewoJaWYgcmVzLCBlcnIgOj0gRGVmYXVsdENsaWVudC5HZXQodXJsLCBuaWwsIG5pbCk7IGVyciA9PSBuaWwgewoJCXZhciBkYXRhLCBlcnIgPSBpb3V0aWwuUmVhZEFsbChyZXMuQm9keSkKCQlyZXMuQm9keS5DbG9zZSgpCgkJcmV0dXJuIGRhdGEsIGVycgoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "Is1xx",
            "Comment": "Returns whether the given status code is 100 \u003c= s \u003c= 199",
            "Arguments": [
                {
                    "Name": "code",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "Is1xx(code int) bool",
            "Source": "ewoJcmV0dXJuIChjb2RlID49IDEwMCkgJiYgKGNvZGUgPD0gMTk5KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Is2xx",
            "Comment": "Returns whether the given status code is 200 \u003c= s \u003c= 299",
            "Arguments": [
                {
                    "Name": "code",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "Is2xx(code int) bool",
            "Source": "ewoJcmV0dXJuIChjb2RlID49IDIwMCkgJiYgKGNvZGUgPD0gMjk5KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Is3xx",
            "Comment": "Returns whether the given status code is 300 \u003c= s \u003c= 399",
            "Arguments": [
                {
                    "Name": "code",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "Is3xx(code int) bool",
            "Source": "ewoJcmV0dXJuIChjb2RlID49IDMwMCkgJiYgKGNvZGUgPD0gMzk5KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Is4xx",
            "Comment": "Returns whether the given status code is 400 \u003c= s \u003c= 499",
            "Arguments": [
                {
                    "Name": "code",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "Is4xx(code int) bool",
            "Source": "ewoJcmV0dXJuIChjb2RlID49IDQwMCkgJiYgKGNvZGUgPD0gNDk5KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Is5xx",
            "Comment": "Returns whether the given status code is 500 \u003c= s \u003c= 599",
            "Arguments": [
                {
                    "Name": "code",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "Is5xx(code int) bool",
            "Source": "ewoJcmV0dXJuIChjb2RlID49IDUwMCkgJiYgKGNvZGUgPD0gNTk5KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "IsHttpErr",
            "Arguments": [
                {
                    "Name": "err",
                    "Type": "error"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "IsHttpErr(err error) bool",
            "Source": "ewoJaWYgZXJyICE9IG5pbCAmJiBzdHJpbmdzLkhhc1ByZWZpeChlcnIuRXJyb3IoKSwgYEhUVFAgYCkgewoJCXJldHVybiB0cnVlCgl9CglyZXR1cm4gZmFsc2UKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "IsMediaType",
            "Comment": "Returns whether the Content-Type of the given request matches any of the supplied options.\nThe mediaTypes arguments may be either complete media types (e.g.: \"text/html\", \"application/javascript\")\nor major type classes (e.g.: \"text/\", \"video/\").  The trailing slash (/) indicates that any media type\nthat begins with that text will match.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "mediaTypes",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "IsMediaType(req *http.Request, mediaTypes ...string) bool",
            "Source": "ewoJbWVkaWFUeXBlIDo9IE1lZGlhVHlwZShyZXEpCglmb3IgXywgbXQgOj0gcmFuZ2UgbWVkaWFUeXBlcyB7CgkJaWYgc3RyaW5ncy5IYXNTdWZmaXgobXQsIGAvYCkgewoJCQlpZiBzdHJpbmdzLkhhc1ByZWZpeChtZWRpYVR5cGUsIG10KSB7CgkJCQlyZXR1cm4gdHJ1ZQoJCQl9CgkJfSBlbHNlIGlmIG10ID09IG1lZGlhVHlwZSB7CgkJCXJldHVybiB0cnVlCgkJfQoJfQoJcmV0dXJuIGZhbHNlCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "JSONDecoder",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "io.Reader"
                },
                {
                    "Name": "out",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "JSONDecoder(in io.Reader, out interface{}) error",
            "Source": "ewoJcmV0dXJuIGpzb24uTmV3RGVjb2RlcihpbikuRGVjb2RlKG91dCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "JSONEncoder",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "io.Reader"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "JSONEncoder(in interface{}) (io.Reader, error)",
            "Source": "ewoJaWYgcmVxLCBvayA6PSBpbi4oKmh0dHAuUmVxdWVzdCk7IG9rIHsKCQlyZXEuSGVhZGVyLlNldChgQ29udGVudC1UeXBlYCwgYGFwcGxpY2F0aW9uL2pzb25gKQoJCXJldHVybiBuaWwsIG5pbAoJfSBlbHNlIGlmIGRhdGEsIGVyciA6PSBqc29uLk1hcnNoYWwoaW4pOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gYnl0ZXMuTmV3QnVmZmVyKGRhdGEpLCBuaWwKCX0gZWxzZSB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "LoadCertPool",
            "Comment": "Loads certificates from the given file and returns a usable x509.CertPool",
            "Arguments": [
                {
                    "Name": "filename",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "*x509.CertPool"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "LoadCertPool(filename string) (*x509.CertPool, error)",
            "Source": "ewoJaWYgZGF0YSwgZXJyIDo9IGZpbGV1dGlsLlJlYWRBbGwoZmlsZW5hbWUpOyBlcnIgPT0gbmlsIHsKCQlwb29sIDo9IHg1MDkuTmV3Q2VydFBvb2woKQoJCWlmIHBvb2wuQXBwZW5kQ2VydHNGcm9tUEVNKGRhdGEpIHsKCQkJcmV0dXJuIHBvb2wsIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkFuIGVycm9yIG9jY3VycmVkIGFkZGluZyB0aGUgcHJvdmlkZWQgY2VydGlmaWNhdGUocykiKQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiZmFpbGVkIHRvIHJlYWQgY2VydGlmaWNhdGUgZmlsZTogJXYiLCBlcnIpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "MediaType",
            "Comment": "Returns the media type from the request's Content-Type.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "MediaType(req *http.Request) string",
            "Source": "ewoJY29udGVudFR5cGUgOj0gcmVxLkhlYWRlci5HZXQoYENvbnRlbnQtVHlwZWApCglpZiBtZWRpYVR5cGUsIF8sIGVyciA6PSBtaW1lLlBhcnNlTWVkaWFUeXBlKGNvbnRlbnRUeXBlKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIG1lZGlhVHlwZQoJfSBlbHNlIHsKCQlyZXR1cm4gY29udGVudFR5cGUKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "MultipartFormEncoder",
            "Comment": "Specifies that the given data should be encoded as a multipart/form-data request.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "io.Reader"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "MultipartFormEncoder(in interface{}) (io.Reader, error)",
            "Source": "ewoJaWYgcmVxLCBvayA6PSBpbi4oKmh0dHAuUmVxdWVzdCk7IG9rIHsKCQlyZXEuSGVhZGVyLlNldChgQ29udGVudC1UeXBlYCwgYG11bHRpcGFydC9mb3JtLWRhdGFgKQoJCXJldHVybiBuaWwsIG5pbAoJfSBlbHNlIHsKCQlvdXRwdXQgOj0gYnl0ZXMuTmV3QnVmZmVyKG5pbCkKCQltcCA6PSBtdWx0aXBhcnQuTmV3V3JpdGVyKG91dHB1dCkKCQlmaWVsZHMgOj0gbWFrZShtYXBbc3RyaW5nXWludGVyZmFjZXt9KQoJCWlmIHR5cGV1dGlsLklzTWFwKGluKSB7CgkJCWZpZWxkcyA9IG1hcHV0aWwuTShpbikuTWFwTmF0aXZlKCkKCQl9IGVsc2UgaWYgaW5SLCBvayA6PSBpbi4oaW8uUmVhZGVyKTsgb2sgewoJCQlmaWVsZHNbRGVmYXVsdE11bHRpcGFydEZvcm1GaWxlRmllbGRdID0gaW5SCgkJfQoJCWZvciBmaWVsZCwgdmFsdWUgOj0gcmFuZ2UgZmllbGRzIHsKCQkJdmFyIGZpbGVuYW1lIHN0cmluZwoJCQlpZiB2Qnl0ZXMsIG9rIDo9IHZhbHVlLihbXWJ5dGUpOyBvayB7CgkJCQl2YWx1ZSA9IGJ5dGVzLk5ld0J1ZmZlcih2Qnl0ZXMpCgkJCX0KCQkJaWYgdkZpbGUsIG9rIDo9IHZhbHVlLigqb3MuRmlsZSk7IG9rIHsKCQkJCWZpbGVuYW1lID0gdkZpbGUuTmFtZSgpCgkJCX0gZWxzZSB7CgkJCQl2YXIgdk1QRkYgKk11bHRpcGFydEZvcm1GaWxlCgkJCQlpZiB2LCBvayA6PSB2YWx1ZS4oTXVsdGlwYXJ0Rm9ybUZpbGUpOyBvayB7CgkJCQkJdk1QRkYgPSAmdgoJCQkJfSBlbHNlIGlmIHYsIG9rIDo9IHZhbHVlLigqTXVsdGlwYXJ0Rm9ybUZpbGUpOyBvayB7CgkJCQkJdk1QRkYgPSB2CgkJCQl9CgkJCQlpZiB2TVBGRiAhPSBuaWwgewoJCQkJCWZpbGVuYW1lID0gdk1QRkYuRmlsZW5hbWUKCQkJCQlpZiB2TVBGRi5EYXRhICE9IG5pbCB7CgkJCQkJCXZhbHVlID0gdk1QRkYuRGF0YQoJCQkJCX0gZWxzZSBpZiBmLCBlcnIgOj0gb3MuT3BlbihmaWxlbmFtZSk7IGVyciA9PSBuaWwgewoJCQkJCQlkZWZlciBmLkNsb3NlKCkKCQkJCQkJdmFsdWUgPSBmCgkJCQkJfSBlbHNlIHsKCQkJCQkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiQ2Fubm90IGFkZCBtdWx0aXBhcnQgZmlsZSAlcTogJXYiLCBmaWxlbmFtZSwgZXJyKQoJCQkJCX0KCQkJCX0KCQkJfQoJCQlpZiB2YWx1ZVIsIG9rIDo9IHZhbHVlLihpby5SZWFkZXIpOyBvayB7CgkJCQlpZiBmaWxlbmFtZSAhPSBgYCB7CgkJCQkJaWYgb3V0VywgZXJyIDo9IG1wLkNyZWF0ZUZvcm1GaWxlKGZpZWxkLCBmaWxlbmFtZSk7IGVyciA9PSBuaWwgewoJCQkJCQlpZiBfLCBlcnIgOj0gaW8uQ29weShvdXRXLCB2YWx1ZVIpOyBlcnIgIT0gbmlsIHsKCQkJCQkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkNhbm5vdCB3cml0ZSBtdWx0aXBhcnQgZm9ybSBmaWVsZCAlcTogJXYiLCBmaWVsZCwgZXJyKQoJCQkJCQl9CgkJCQkJfSBlbHNlIHsKCQkJCQkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiQ2Fubm90IGNyZWF0ZSBtdWx0aXBhcnQgZm9ybSBmaWVsZCAlcTogJXYiLCBmaWVsZCwgZXJyKQoJCQkJCX0KCQkJCX0gZWxzZSBpZiBvdXRXLCBlcnIgOj0gbXAuQ3JlYXRlRm9ybUZpZWxkKGZpZWxkKTsgZXJyID09IG5pbCB7CgkJCQkJaWYgXywgZXJyIDo9IGlvLkNvcHkob3V0VywgdmFsdWVSKTsgZXJyICE9IG5pbCB7CgkJCQkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkNhbm5vdCB3cml0ZSBtdWx0aXBhcnQgZm9ybSBmaWVsZCAlcTogJXYiLCBmaWVsZCwgZXJyKQoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiQ2Fubm90IGNyZWF0ZSBtdWx0aXBhcnQgZm9ybSBmaWVsZCAlcTogJXYiLCBmaWVsZCwgZXJyKQoJCQkJfQoJCQl9IGVsc2UgaWYgZXJyIDo9IG1wLldyaXRlRmllbGQoZmllbGQsIHR5cGV1dGlsLlN0cmluZyh2YWx1ZSkpOyBlcnIgIT0gbmlsIHsKCQkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkNhbm5vdCBlbmNvZGUgbXVsdGlwYXJ0IGZvcm0gZmllbGQgJXE6ICV2IiwgZmllbGQsIGVycikKCQkJfQoJCX0KCQlyZXR1cm4gJm11bHRpcGFydEZvcm1SZXF1ZXN0e2RhdGE6IG91dHB1dCwgYm91bmRhcnk6IG1wLkJvdW5kYXJ5KCksIGNvbnRlbnRUeXBlOiBtcC5Gb3JtRGF0YUNvbnRlbnRUeXBlKCl9LCBtcC5DbG9zZSgpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "NetrcCredentials",
            "Comment": "Retreive the plaintext username and password from the netrc-formatted file in the\nNetrcFile package variable.  The final return argument will be true if and only if\nthe .netrc file exists, is readable, and the username OR password matched to the given\ndomain is non-empty.",
            "Arguments": [
                {
                    "Name": "domain",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                },
                {
                    "Type": "string"
                },
                {
                    "Type": "bool"
                }
            ],
            "Signature": "NetrcCredentials(domain string) (string, string, bool)",
            "Source": "ewoJaWYgZG9tYWluICE9IGBgIHsKCQlpZiBwYXRoLCBlcnIgOj0gZmlsZXV0aWwuRXhwYW5kVXNlcihOZXRyY0ZpbGUpOyBlcnIgPT0gbmlsIHsKCQkJaWYgbnJjLCBlcnIgOj0gbmV0cmMuUGFyc2UocGF0aCk7IGVyciA9PSBuaWwgewoJCQkJaWYgbSA6PSBucmMuTWFjaGluZShkb21haW4pOyBtICE9IG5pbCB7CgkJCQkJdmFyIHVzZXIgPSBzbGljZXV0aWwuT3JTdHJpbmcobS5HZXQoYGxvZ2luYCksIG0uR2V0KGB1c2VybmFtZWApKQoJCQkJCXZhciBwYXNzID0gbS5HZXQoYHBhc3N3b3JkYCkKCQkJCQlpZiB1c2VyICE9IGBgIHx8IHBhc3MgIT0gYGAgewoJCQkJCQlyZXR1cm4gdXNlciwgcGFzcywgdHJ1ZQoJCQkJCX0KCQkJCX0gZWxzZSBpZiBkb21haW4gIT0gYCpgIHsKCQkJCQlyZXR1cm4gTmV0cmNDcmVkZW50aWFscyhgKmApCgkJCQl9CgkJCX0KCQl9Cgl9CglyZXR1cm4gYGAsIGBgLCBmYWxzZQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ParseFormRequest",
            "Comment": "Parses the form values for a Request and unmarshals into the given value.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "into",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "ParseFormRequest(req *http.Request, into interface{}) error",
            "Source": "ewoJaWYgZXJyIDo9IHJlcS5QYXJzZUZvcm0oKTsgZXJyID09IG5pbCB7CgkJaWYgcmVxLk1ldGhvZCA9PSBgUE9TVGAgewoJCQlyZXR1cm4gUGFyc2VGb3JtVmFsdWVzKHJlcS5Qb3N0Rm9ybSwgaW50bykKCQl9IGVsc2UgewoJCQlyZXR1cm4gUGFyc2VGb3JtVmFsdWVzKHJlcS5Gb3JtLCBpbnRvKQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIGVycgoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ParseFormValues",
            "Comment": "Parses a set of values received from an HTML form (usually the value of the\nhttp.Request.Form property) and unmarshals into the given value.",
            "Arguments": [
                {
                    "Name": "formValues",
                    "Type": "url.Values"
                },
                {
                    "Name": "into",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "ParseFormValues(formValues url.Values, into interface{}) error",
            "Source": "ewoJdmFyIGRhdGEgPSBtYWtlKG1hcFtzdHJpbmddaW50ZXJmYWNle30pCglmb3Iga2V5LCB2YWx1ZXMgOj0gcmFuZ2UgZm9ybVZhbHVlcyB7CgkJdmFsdWVzID0gc2xpY2V1dGlsLkNvbXBhY3RTdHJpbmcodmFsdWVzKQoJCXZhciBpc0FycmF5IGJvb2wKCQlpZiBzdHJpbmdzLkhhc1N1ZmZpeChrZXksIGBbXWApIHsKCQkJaXNBcnJheSA9IHRydWUKCQkJa2V5ID0gc3RyaW5ncy5UcmltU3VmZml4KGtleSwgYFtdYCkKCQl9IGVsc2UgaWYgbGVuKHZhbHVlcykgPiAxIHsKCQkJaXNBcnJheSA9IHRydWUKCQl9IGVsc2UgaWYgc3RyaW5ncy5Db250YWlucyhrZXksIGBbYCkgJiYgc3RyaW5ncy5Db250YWlucyhrZXksIGBdYCkgewoJCQlrZXkgPSBzdHJpbmdzLlJlcGxhY2VBbGwoa2V5LCBgW2AsIGAuYCkKCQkJa2V5ID0gc3RyaW5ncy5SZXBsYWNlQWxsKGtleSwgYF1gLCBgYCkKCQl9CgkJdmFyIHBhcnRzID0gc3RyaW5ncy5TcGxpdChrZXksIGAuYCkKCQlpZiBpc0FycmF5IHsKCQkJbWFwdXRpbC5EZWVwU2V0KGRhdGEsIHBhcnRzLCBzbGljZXV0aWwuQXV0b3R5cGUodmFsdWVzKSkKCQl9IGVsc2UgaWYgbGVuKHZhbHVlcykgPiAwIHsKCQkJbWFwdXRpbC5EZWVwU2V0KGRhdGEsIHBhcnRzLCBzdHJpbmd1dGlsLkF1dG90eXBlKHZhbHVlc1swXSkpCgkJfSBlbHNlIHsKCQkJbWFwdXRpbC5EZWVwU2V0KGRhdGEsIHBhcnRzLCBuaWwpCgkJfQoJfQoJcmV0dXJuIG1hcHV0aWwuVGFnZ2VkU3RydWN0RnJvbU1hcChkYXRhLCBpbnRvLCBGb3JtVW5tYXJzaGFsU3RydWN0VGFnKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ParseJSON",
            "Comment": "Parses a given reader as a JSON document and unmarshals into the given value.",
            "Arguments": [
                {
                    "Name": "r",
                    "Type": "io.Reader"
                },
                {
                    "Name": "into",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "ParseJSON(r io.Reader, into interface{}) error",
            "Source": "ewoJcmV0dXJuIGpzb24uTmV3RGVjb2RlcihyKS5EZWNvZGUoaW50bykKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "ParseJSONRequest",
            "Comment": "Parses the Request as JSON and unmarshals into the given value.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "into",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "ParseJSONRequest(req *http.Request, into interface{}) error",
            "Source": "ewoJcmV0dXJuIFBhcnNlSlNPTihyZXEuQm9keSwgaW50bykKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "ParseRequest",
            "Comment": "Autodetect the Content-Type of the given request and unmarshals into the\ngiven value.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "into",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "ParseRequest(req *http.Request, into interface{}) error",
            "Source": "ewoJY29udGVudFR5cGUgOj0gcmVxLkhlYWRlci5HZXQoYENvbnRlbnQtVHlwZWApCglpZiBwYXJzZXIsIG9rIDo9IHBhcnNlcnNbY29udGVudFR5cGVdOyBvayB7CgkJcmV0dXJuIHBhcnNlcihyZXEsIGludG8pCgl9IGVsc2UgaWYgbWVkaWFUeXBlLCBfLCBlcnIgOj0gbWltZS5QYXJzZU1lZGlhVHlwZShjb250ZW50VHlwZSk7IGVyciA9PSBuaWwgewoJCWlmIHBhcnNlciwgb2sgOj0gcGFyc2Vyc1ttZWRpYVR5cGVdOyBvayB7CgkJCXJldHVybiBwYXJzZXIocmVxLCBpbnRvKQoJCX0gZWxzZSBpZiBwYXJzZXIsIG9rIDo9IHBhcnNlcnNbYGBdOyBvayB7CgkJCXJldHVybiBwYXJzZXIocmVxLCBpbnRvKQoJCX0gZWxzZSB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJObyBwYXJzZXIgY291bGQgYmUgZm91bmQgZm9yIENvbnRlbnQtVHlwZSAlcSIsIGNvbnRlbnRUeXBlKQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIGVycgoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Q",
            "Comment": "Parses the named query string from a request as a string.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "key",
                    "Type": "string"
                },
                {
                    "Name": "fallbacks",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "Q(req *http.Request, key string, fallbacks ...string) string",
            "Source": "ewoJaWYgdiA6PSByZXEuVVJMLlF1ZXJ5KCkuR2V0KGtleSk7IHYgIT0gYGAgewoJCWlmIHZTLCBlcnIgOj0gdXJsLlF1ZXJ5VW5lc2NhcGUodik7IGVyciA9PSBuaWwgewoJCQlyZXR1cm4gdlMKCQl9Cgl9CglpZiBsZW4oZmFsbGJhY2tzKSA+IDAgewoJCXJldHVybiBmYWxsYmFja3NbMF0KCX0gZWxzZSB7CgkJcmV0dXJuIGBgCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "QBool",
            "Comment": "Parses the named query string from a request as a boolean value.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "key",
                    "Type": "string"
                },
                {
                    "Name": "fallbacks",
                    "Type": "...bool"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "QBool(req *http.Request, key string, fallbacks ...bool) bool",
            "Source": "ewoJaWYgdiA6PSBRKHJlcSwga2V5KTsgdiA9PSBgYCAmJiBsZW4oZmFsbGJhY2tzKSA+IDAgewoJCXJldHVybiBmYWxsYmFja3NbMF0KCX0gZWxzZSBpZiB0eXBldXRpbC5Cb29sKHYpIHsKCQlyZXR1cm4gdHJ1ZQoJfQoJcmV0dXJuIGZhbHNlCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "QDuration",
            "Comment": "Parses the named query string from a request as a duration string.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "key",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "time.Duration"
                }
            ],
            "Signature": "QDuration(req *http.Request, key string) time.Duration",
            "Source": "ewoJaWYgdiA6PSBRKHJlcSwga2V5KTsgdiAhPSBgYCB7CgkJaWYgZCwgZXJyIDo9IHRpbWV1dGlsLlBhcnNlRHVyYXRpb24odik7IGVyciA9PSBuaWwgewoJCQlyZXR1cm4gZAoJCX0KCX0KCXJldHVybiAwCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "QFloat",
            "Comment": "Parses the named query string from a request as a float.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "key",
                    "Type": "string"
                },
                {
                    "Name": "fallbacks",
                    "Type": "...float64"
                }
            ],
            "Returns": [
                {
                    "Type": "float64"
                }
            ],
            "Signature": "QFloat(req *http.Request, key string, fallbacks ...float64) float64",
            "Source": "ewoJaWYgdiA6PSBRKHJlcSwga2V5KTsgdiAhPSBgYCB7CgkJaWYgaSwgZXJyIDo9IHN0cmluZ3V0aWwuQ29udmVydFRvRmxvYXQodik7IGVyciA9PSBuaWwgewoJCQlyZXR1cm4gaQoJCX0KCX0KCWlmIGxlbihmYWxsYmFja3MpID4gMCB7CgkJcmV0dXJuIGZhbGxiYWNrc1swXQoJfSBlbHNlIHsKCQlyZXR1cm4gMAoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "QInt",
            "Comment": "Parses the named query string from a request as an integer.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "key",
                    "Type": "string"
                },
                {
                    "Name": "fallbacks",
                    "Type": "...int64"
                }
            ],
            "Returns": [
                {
                    "Type": "int64"
                }
            ],
            "Signature": "QInt(req *http.Request, key string, fallbacks ...int64) int64",
            "Source": "ewoJaWYgdiA6PSBRKHJlcSwga2V5KTsgdiAhPSBgYCB7CgkJaWYgaSwgZXJyIDo9IHN0cmluZ3V0aWwuQ29udmVydFRvSW50ZWdlcih2KTsgZXJyID09IG5pbCB7CgkJCXJldHVybiBpCgkJfQoJfQoJaWYgbGVuKGZhbGxiYWNrcykgPiAwIHsKCQlyZXR1cm4gZmFsbGJhY2tzWzBdCgl9IGVsc2UgewoJCXJldHVybiAwCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "QStrings",
            "Comment": "Parses the named query string from a request as a delimiter-separated string slice.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "key",
                    "Type": "string"
                },
                {
                    "Name": "delimiter",
                    "Type": "string"
                },
                {
                    "Name": "fallbacks",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "QStrings(req *http.Request, key string, delimiter string, fallbacks ...string) []string",
            "Source": "ewoJaWYgc3RycyA6PSBzbGljZXV0aWwuQ29tcGFjdFN0cmluZyhzdHJpbmdzLlNwbGl0KFEocmVxLCBrZXkpLCBkZWxpbWl0ZXIpKTsgbGVuKHN0cnMpID4gMCB7CgkJcmV0dXJuIHN0cnMKCX0gZWxzZSBpZiBsZW4oZmFsbGJhY2tzKSA+IDAgewoJCXJldHVybiBzbGljZXV0aWwuU3RyaW5naWZ5KHNsaWNldXRpbC5GbGF0dGVuKGZhbGxiYWNrcykpCgl9IGVsc2UgewoJCXJldHVybiBtYWtlKFtdc3RyaW5nLCAwKQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "QTime",
            "Comment": "Parses the named query string from a request as a date/time value.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "key",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "time.Time"
                }
            ],
            "Signature": "QTime(req *http.Request, key string) time.Time",
            "Source": "ewoJaWYgdiA6PSBRKHJlcSwga2V5KTsgdiAhPSBgYCB7CgkJaWYgaSwgZXJyIDo9IHN0cmluZ3V0aWwuQ29udmVydFRvVGltZSh2KTsgZXJyID09IG5pbCB7CgkJCXJldHVybiBpCgkJfQoJfQoJcmV0dXJuIHRpbWUuVGltZXt9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "RequestGetValue",
            "Comment": "Retrieve an arbitrary value from the context of a given request.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "key",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "typeutil.Variant"
                }
            ],
            "Signature": "RequestGetValue(req *http.Request, key string) typeutil.Variant",
            "Source": "ewoJaWYgdmFsdWUgOj0gcmVxLkNvbnRleHQoKS5WYWx1ZShrZXkpOyB2YWx1ZSAhPSBuaWwgewoJCXJldHVybiB0eXBldXRpbC5WKHZhbHVlKQoJfSBlbHNlIHsKCQlyZXR1cm4gdHlwZXV0aWwuVihuaWwpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "RequestSetValue",
            "Comment": "attach an arbitrary value to the context of a given request.",
            "Arguments": [
                {
                    "Name": "req",
                    "Type": "*http.Request"
                },
                {
                    "Name": "key",
                    "Type": "string"
                },
                {
                    "Name": "value",
                    "Type": "interface{}"
                }
            ],
            "Signature": "RequestSetValue(req *http.Request, key string, value interface{})",
            "Source": "ewoJcGFyZW50IDo9IHJlcS5Db250ZXh0KCkKCXdpdGhWYWx1ZSA6PSBjb250ZXh0LldpdGhWYWx1ZShwYXJlbnQsIGtleSwgdmFsdWUpCgkqcmVxID0gKnJlcS5XaXRoQ29udGV4dCh3aXRoVmFsdWUpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "RespondJSON",
            "Comment": "Marshal the given data as a JSON document and write the output to the given ResponseWriter. If\na status is given, that will be used as the HTTP response status.  If data is an error, and no\nstatus is given, the status will be \"500 Internal Server Error\"; if data is nil, the status will\nbe \"204 No Content\".  The Content-Type of the response is \"application/json\".",
            "Arguments": [
                {
                    "Name": "w",
                    "Type": "http.ResponseWriter"
                },
                {
                    "Name": "data",
                    "Type": "interface{}"
                },
                {
                    "Name": "status",
                    "Type": "...int"
                }
            ],
            "Signature": "RespondJSON(w http.ResponseWriter, data interface{}, status ...int)",
            "Source": "ewoJdy5IZWFkZXIoKS5TZXQoYENvbnRlbnQtVHlwZWAsIGBhcHBsaWNhdGlvbi9qc29uYCkKCXZhciBoZWFkZXJTZW50IGJvb2wKCXZhciBmaW5hbFN0YXR1cyBpbnQKCWlmIGVyciwgb2sgOj0gZGF0YS4oZXJyb3IpOyBvayAmJiBlcnIgIT0gbmlsIHsKCQlkYXRhID0gbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgc3VjY2Vzc2A6IGZhbHNlLCBgZXJyb3JgOiBlcnIuRXJyb3IoKX0KCQlpZiBsZW4oc3RhdHVzKSA9PSAwIHsKCQkJc3RhdHVzID0gW11pbnR7aHR0cC5TdGF0dXNJbnRlcm5hbFNlcnZlckVycm9yfQoJCX0KCX0KCWlmIGxlbihzdGF0dXMpID4gMCB7CgkJZmluYWxTdGF0dXMgPSBzdGF0dXNbMF0KCQl3LldyaXRlSGVhZGVyKGZpbmFsU3RhdHVzKQoJCWhlYWRlclNlbnQgPSB0cnVlCgl9CglpZiBkYXRhICE9IG5pbCB7CgkJaWYgZXJyIDo9IGpzb24uTmV3RW5jb2Rlcih3KS5FbmNvZGUoZGF0YSk7IGVyciAhPSBuaWwgewoJCQlpZiAhbG9nLkVyckNvbnRhaW5zKGVyciwgYHN0YXR1cyBjb2RlIGRvZXMgbm90IGFsbG93IGJvZHlgKSB7CgkJCQlMb2dnZXIuV2FybmluZ2YoIkZhaWxlZCB0byBlbmNvZGUgcmVzcG9uc2UgYm9keTogJXYiLCBlcnIpCgkJCX0KCQl9Cgl9IGVsc2UgaWYgIWhlYWRlclNlbnQgewoJCXcuV3JpdGVIZWFkZXIoaHR0cC5TdGF0dXNOb0NvbnRlbnQpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "SetContentTypeParser",
            "Comment": "Sets a parser implementation for the given HTTP content type.",
            "Arguments": [
                {
                    "Name": "contentType",
                    "Type": "string"
                },
                {
                    "Name": "parser",
                    "Type": "RequestParseFunc"
                }
            ],
            "Signature": "SetContentTypeParser(contentType string, parser RequestParseFunc)",
            "Source": "ewoJaWYgcGFyc2VyICE9IG5pbCB7CgkJcGFyc2Vyc1tjb250ZW50VHlwZV0gPSBwYXJzZXIKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "SetQ",
            "Comment": "Sets a query string to the given value in the given url.URL",
            "Arguments": [
                {
                    "Name": "u",
                    "Type": "*url.URL"
                },
                {
                    "Name": "key",
                    "Type": "string"
                },
                {
                    "Name": "value",
                    "Type": "interface{}"
                }
            ],
            "Signature": "SetQ(u *url.URL, key string, value interface{})",
            "Source": "ewoJcXMgOj0gdS5RdWVyeSgpCglxcy5TZXQoa2V5LCBzdHJpbmd1dGlsLk11c3RTdHJpbmcodmFsdWUpKQoJdS5SYXdRdWVyeSA9IHFzLkVuY29kZSgpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "SetQString",
            "Comment": "A version of SetQ that accepts a URL string and makes a best-effort to modify it.\nWill return the modified URL or the original URL if an error occurred.",
            "Arguments": [
                {
                    "Name": "u",
                    "Type": "string"
                },
                {
                    "Name": "key",
                    "Type": "string"
                },
                {
                    "Name": "value",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "SetQString(u string, key string, value interface{}) string",
            "Source": "ewoJaWYgdXIsIGVyciA6PSB1cmwuUGFyc2UodSk7IGVyciA9PSBuaWwgewoJCVNldFEodXIsIGtleSwgdmFsdWUpCgkJcmV0dXJuIHVyLlN0cmluZygpCgl9CglyZXR1cm4gdQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "SetRootCABundle",
            "Comment": "Configures the given http.Client to accept TLS certificates validated by the given PEM-encoded CA bundle file",
            "Arguments": [
                {
                    "Name": "client",
                    "Type": "*http.Client"
                },
                {
                    "Name": "caBundle",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "SetRootCABundle(client *http.Client, caBundle string) error",
            "Source": "ewoJcmV0dXJuIHVwZGF0ZVJvb3RDQUJ1bmRsZShmYWxzZSwgY2xpZW50LCBjYUJ1bmRsZSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "UrlPathJoin",
            "Comment": "UrlPathJoin takes a string or *url.URL and joins the existing URL path component with the given path.\nThe new path may also contain query string values, which will be added to the base URL.  Existing keys will\nbe replaced with new ones, except for repeated keys (e.g.: ?x=1\u0026x=2\u0026x=3).  In this case, the new values will\nbe added to the existing ones.  The *url.URL returned from this function is a copy, and the original URL (if\none is provided) will not be modified in any way.",
            "Arguments": [
                {
                    "Name": "baseurl",
                    "Type": "interface{}"
                },
                {
                    "Name": "path",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "*url.URL"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "UrlPathJoin(baseurl interface{}, path string) (*url.URL, error)",
            "Source": "ewoJdmFyIGluICp1cmwuVVJMCgl2YXIgb3V0ICp1cmwuVVJMCglpZiB1LCBvayA6PSBiYXNldXJsLigqdXJsLlVSTCk7IG9rIHsKCQlpbiA9IHUKCX0gZWxzZSBpZiB1LCBlcnIgOj0gdXJsLlBhcnNlKHR5cGV1dGlsLlN0cmluZyhiYXNldXJsKSk7IGVyciA9PSBuaWwgewoJCWluID0gdQoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCW5ld3BhdGgsIHFzIDo9IHN0cmluZ3V0aWwuU3BsaXRQYWlyKHBhdGgsIGA/YCkKCXZhciB0cmFpbCBzdHJpbmcKCWlmIHN0cmluZ3MuSGFzU3VmZml4KG5ld3BhdGgsIGAvYCkgewoJCW5ld3BhdGggPSBzdHJpbmdzLlRyaW1TdWZmaXgobmV3cGF0aCwgYC9gKQoJCWluLlBhdGggPSBzdHJpbmdzLlRyaW1TdWZmaXgoaW4uUGF0aCwgYC9gKQoJCXRyYWlsID0gYC9gCgl9CglvdXQgPSBuZXcodXJsLlVSTCkKCW91dC5TY2hlbWUgPSBpbi5TY2hlbWUKCW91dC5PcGFxdWUgPSBpbi5PcGFxdWUKCW91dC5Vc2VyID0gaW4uVXNlcgoJb3V0Lkhvc3QgPSBpbi5Ib3N0CglvdXQuUGF0aCA9IGZpbGVwYXRoLkpvaW4oaW4uUGF0aCwgbmV3cGF0aCkgKyB0cmFpbAoJb3V0LlJhd1BhdGggPSBpbi5SYXdQYXRoCglvdXQuRm9yY2VRdWVyeSA9IGluLkZvcmNlUXVlcnkKCW91dC5SYXdRdWVyeSA9IGluLlJhd1F1ZXJ5CglvdXQuRnJhZ21lbnQgPSBpbi5GcmFnbWVudAoJaWYgcXMgIT0gYGAgewoJCWlmIHFzdiwgZXJyIDo9IHVybC5QYXJzZVF1ZXJ5KHFzKTsgZXJyID09IG5pbCB7CgkJCWZvciBrLCB2cyA6PSByYW5nZSBxc3YgewoJCQkJaWYgbGVuKHZzKSA9PSAxIHsKCQkJCQlTZXRRKG91dCwgaywgdnNbMF0pCgkJCQl9IGVsc2UgewoJCQkJCUFkZFEob3V0LCBrLCBzbGljZXV0aWwuU2xpY2VpZnkodnMpLi4uKQoJCQkJfQoJCQl9CgkJfSBlbHNlIHsKCQkJcmV0dXJuIG5pbCwgZXJyCgkJfQoJfQoJcmV0dXJuIG91dCwgbmlsCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "WaitForHTTP",
            "Comment": "Periodically performs a GET request against the given URL, waiting up to timeout\nfor a 200-series HTTP response code.",
            "Arguments": [
                {
                    "Name": "url",
                    "Type": "string"
                },
                {
                    "Name": "timeout",
                    "Type": "time.Duration"
                },
                {
                    "Name": "c",
                    "Type": "...*http.Client"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "WaitForHTTP(url string, timeout time.Duration, c ...*http.Client) error",
            "Source": "ewoJdmFyIGNsaWVudCAqaHR0cC5DbGllbnQKCWlmIGxlbihjKSA+IDAgJiYgY1swXSAhPSBuaWwgewoJCWNsaWVudCA9IGNbMF0KCX0gZWxzZSB7CgkJY2xpZW50ID0gaHR0cC5EZWZhdWx0Q2xpZW50Cgl9CglzdGFydCA6PSB0aW1lLk5vdygpCglmb3IgdGltZS5TaW5jZShzdGFydCkgPCB0aW1lb3V0IHsKCQlpZiByZXMsIGVyciA6PSBjbGllbnQuR2V0KHVybCk7IGVyciA9PSBuaWwgewoJCQlpZiByZXMuU3RhdHVzQ29kZSA8IDQwMCB7CgkJCQlyZXR1cm4gbmlsCgkJCX0KCQl9CgkJdGltZS5TbGVlcChXYWl0Rm9yUG9sbEludGVydmFsKQoJfQoJcmV0dXJuIGZtdC5FcnJvcmYoIlJlcXVlc3QgdG8gJXMgZGlkIG5vdCBzdWNjZWVkIGluICV2IiwgdXJsLCB0aW1lb3V0KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "XMLDecoder",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "io.Reader"
                },
                {
                    "Name": "out",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "XMLDecoder(in io.Reader, out interface{}) error",
            "Source": "ewoJcmV0dXJuIHhtbC5OZXdEZWNvZGVyKGluKS5EZWNvZGUob3V0KQp9",
            "IsPackageLevel": true
        }
    ],
    "Examples": [
        {
            "Name": "ExampleIsMediaType_mediaTypePrefix",
            "Label": "MediaTypePrefix",
            "For": "IsMediaType",
            "Signature": "ExampleIsMediaType_mediaTypePrefix()",
            "Source": "ewoJcmVxIDo9IGh0dHB0ZXN0Lk5ld1JlcXVlc3QoYEdFVGAsIGAvYCwgbmlsKQoJcmVxLkhlYWRlci5TZXQoYENvbnRlbnQtVHlwZWAsIGB0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThgKQoJZm10LlByaW50bG4oSXNNZWRpYVR5cGUocmVxLCBgdGV4dC9gKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "ExampleIsMediaType_multipleMediaTypes",
            "Label": "MultipleMediaTypes",
            "For": "IsMediaType",
            "Signature": "ExampleIsMediaType_multipleMediaTypes()",
            "Source": "ewoJcmVxIDo9IGh0dHB0ZXN0Lk5ld1JlcXVlc3QoYEdFVGAsIGAvYCwgbmlsKQoJcmVxLkhlYWRlci5TZXQoYENvbnRlbnQtVHlwZWAsIGB0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThgKQoJZm10LlByaW50bG4oSXNNZWRpYVR5cGUocmVxLCBgdGV4dC9odG1sYCwgYHRleHQvcGxhaW5gKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "ExampleIsMediaType_nonMatchingPrefix",
            "Label": "NonMatchingPrefix",
            "For": "IsMediaType",
            "Signature": "ExampleIsMediaType_nonMatchingPrefix()",
            "Source": "ewoJcmVxIDo9IGh0dHB0ZXN0Lk5ld1JlcXVlc3QoYEdFVGAsIGAvYCwgbmlsKQoJcmVxLkhlYWRlci5TZXQoYENvbnRlbnQtVHlwZWAsIGB0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThgKQoJZm10LlByaW50bG4oSXNNZWRpYVR5cGUocmVxLCBgdmlkZW8vYCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ExampleIsMediaType_singleMediaType",
            "Label": "SingleMediaType",
            "For": "IsMediaType",
            "Signature": "ExampleIsMediaType_singleMediaType()",
            "Source": "ewoJcmVxIDo9IGh0dHB0ZXN0Lk5ld1JlcXVlc3QoYEdFVGAsIGAvYCwgbmlsKQoJcmVxLkhlYWRlci5TZXQoYENvbnRlbnQtVHlwZWAsIGB0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThgKQoJZm10LlByaW50bG4oSXNNZWRpYVR5cGUocmVxLCBgdGV4dC9odG1sYCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ExampleUrlPathJoin_emptyJoin",
            "Label": "EmptyJoin",
            "For": "UrlPathJoin",
            "Signature": "ExampleUrlPathJoin_emptyJoin()",
            "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2dvb2dsZS5jb20vYCwgYGApCglmbXQuUHJpbnRsbih1cmwuU3RyaW5nKCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ExampleUrlPathJoin_joinToExistingQueryStrings",
            "Label": "JoinToExistingQueryStrings",
            "For": "UrlPathJoin",
            "Signature": "ExampleUrlPathJoin_joinToExistingQueryStrings()",
            "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2dvb2dsZS5jb20vc2VhcmNoYCwgYD9xPWhlbGxvYCkKCWZtdC5QcmludGxuKHVybC5TdHJpbmcoKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "ExampleUrlPathJoin_joinWithQueryString",
            "Label": "JoinWithQueryString",
            "For": "UrlPathJoin",
            "Signature": "ExampleUrlPathJoin_joinWithQueryString()",
            "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2dvb2dsZS5jb20vYCwgYC9zZWFyY2g/cT1oZWxsb2ApCglmbXQuUHJpbnRsbih1cmwuU3RyaW5nKCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ExampleUrlPathJoin_pathAndQuery",
            "Label": "PathAndQuery",
            "For": "UrlPathJoin",
            "Signature": "ExampleUrlPathJoin_pathAndQuery()",
            "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2V4YW1wbGUuY29tL2FwaS92MT9oZWxsbz10aGVyZWAsIGAvdGhpbmdzL25ldz9leGFtcGxlPXRydWVgKQoJZm10LlByaW50bG4odXJsLlN0cmluZygpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ExampleUrlPathJoin_pathAndQueryTrailingSlash",
            "Label": "PathAndQueryTrailingSlash",
            "For": "UrlPathJoin",
            "Signature": "ExampleUrlPathJoin_pathAndQueryTrailingSlash()",
            "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2V4YW1wbGUuY29tL2FwaS92MT9oZWxsbz10aGVyZWAsIGAvdGhpbmdzL25ldy8/ZXhhbXBsZT10cnVlYCkKCWZtdC5QcmludGxuKHVybC5TdHJpbmcoKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "ExampleUrlPathJoin_simpleJoin",
            "Label": "SimpleJoin",
            "For": "UrlPathJoin",
            "Signature": "ExampleUrlPathJoin_simpleJoin()",
            "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2dvb2dsZS5jb21gLCBgL3NlYXJjaGApCglmbXQuUHJpbnRsbih1cmwuU3RyaW5nKCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ExampleUrlPathJoin_slashJoin",
            "Label": "SlashJoin",
            "For": "UrlPathJoin",
            "Signature": "ExampleUrlPathJoin_slashJoin()",
            "Source": "ewoJdXJsLCBfIDo9IFVybFBhdGhKb2luKGBodHRwczovL2dvb2dsZS5jb20vYCwgYC9gKQoJZm10LlByaW50bG4odXJsLlN0cmluZygpKQp9",
            "IsPackageLevel": true
        }
    ],
    "Tests": [
        {
            "Name": "TestAttachAndRetrieveValue",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestAttachAndRetrieveValue(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglyZXEsIGVyciA6PSBodHRwLk5ld1JlcXVlc3QoYEdFVGAsIGBhYm91dDpibGFua2AsIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCVJlcXVlc3RTZXRWYWx1ZShyZXEsIGB0ZXN0LXZhbHVlYCwgYDEyMzQ1Njc4OWApCglhc3NlcnQuRmFsc2UoUmVxdWVzdEdldFZhbHVlKHJlcSwgYHRlc3QtdmFsdWVgKS5Jc05pbCgpKQoJYXNzZXJ0LkZhbHNlKFJlcXVlc3RHZXRWYWx1ZShyZXEsIGB0ZXN0LXZhbHVlYCkuSXNaZXJvKCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoMTIzNDU2Nzg5LCBSZXF1ZXN0R2V0VmFsdWUocmVxLCBgdGVzdC12YWx1ZWApLkludCgpKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGAxMjM0NTY3ODlgLCBSZXF1ZXN0R2V0VmFsdWUocmVxLCBgdGVzdC12YWx1ZWApLlN0cmluZygpKQoJYXNzZXJ0LlRydWUoUmVxdWVzdEdldFZhbHVlKHJlcSwgYHRlc3QtdmFsdWVgKS5Cb29sKCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestClient",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestClient(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0IG1hcFtzdHJpbmddaW50ZXJmYWNle30KCXZhciBvdXRTIHN0cmluZwoJc2VydmVyIDo9IHRlc3RIdHRwU2VydmVyKCkKCWRlZmVyIHNlcnZlci5DbG9zZSgpCgljbGllbnQsIGVyciA6PSBOZXdDbGllbnQoc2VydmVyLlVSTCArIGAvYmFzZS8/aGVsbG89dHJ1ZWApCgljbGllbnQuU2V0UGFyYW0oYHRvcHRoaW5nYCwgdHJ1ZSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5Ob3ROaWwoY2xpZW50KQoJcmVzcG9uc2UsIGVyciA6PSBjbGllbnQuR2V0KGAvdGVzdC9wYXRoYCwgbmlsLCBuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuTm90TmlsKHJlc3BvbnNlKQoJYXNzZXJ0Lk5vRXJyb3IoUGFyc2VKU09OKHJlc3BvbnNlLkJvZHksICZvdXQpKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddaW50ZXJmYWNle317YHBhdGhgOiBgL2Jhc2UvdGVzdC9wYXRoYCwgYHFzYDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgaGVsbG9gOiBbXWludGVyZmFjZXt9e2B0cnVlYH0sIGB0b3B0aGluZ2A6IFtdaW50ZXJmYWNle317YHRydWVgfX19LCBvdXQpCglyZXNwb25zZSwgZXJyID0gY2xpZW50LlBvc3QoYC9iYXNlL3Rlc3QvcGF0aGAsIGBwb3N0YWJsZWAsIG1hcFtzdHJpbmddaW50ZXJmYWNle317YHRoaW5nYDogdHJ1ZX0sIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5Ob3ROaWwocmVzcG9uc2UpCglhc3NlcnQuTm9FcnJvcihjbGllbnQuRGVjb2RlKHJlc3BvbnNlLkJvZHksICZvdXRTKSkKCWFzc2VydC5FcXVhbChgcG9zdGFibGVgLCBvdXRTKQoJcmVzcG9uc2UsIGVyciA9IGNsaWVudC5QdXQoYC9iYXNlL3Rlc3QvcGF0aGAsIGBwdXR0YWJsZWAsIG1hcFtzdHJpbmddaW50ZXJmYWNle317YHRoaW5nYDogdHJ1ZX0sIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5Ob3ROaWwocmVzcG9uc2UpCglhc3NlcnQuTm9FcnJvcihjbGllbnQuRGVjb2RlKHJlc3BvbnNlLkJvZHksICZvdXRTKSkKCWFzc2VydC5FcXVhbChgcHV0dGFibGVgLCBvdXRTKQoJcmVzcG9uc2UsIGVyciA9IGNsaWVudC5EZWxldGUoYC9iYXNlL3Rlc3QvcGF0aGAsIG5pbCwgbmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0Lk5vdE5pbChyZXNwb25zZSkKCWFzc2VydC5FcXVhbChodHRwLlN0YXR1c05vQ29udGVudCwgcmVzcG9uc2UuU3RhdHVzQ29kZSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestClientMultipartFormEncoder",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestClientMultipartFormEncoder(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgb3V0IG1hcFtzdHJpbmddaW50ZXJmYWNle30KCXNlcnZlciA6PSB0ZXN0SHR0cFNlcnZlcigpCglkZWZlciBzZXJ2ZXIuQ2xvc2UoKQoJY2xpZW50LCBlcnIgOj0gTmV3Q2xpZW50KHNlcnZlci5VUkwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuTm90TmlsKGNsaWVudCkKCWNsaWVudC5TZXRFcnJvckRlY29kZXIoZnVuYyhyZXMgKmh0dHAuUmVzcG9uc2UpIGVycm9yIHsKCQlhc3NlcnQuTm90TmlsKHJlcy5Cb2R5KQoJCXJldHVybiBlcnJvcnMuTmV3KHR5cGV1dGlsLlN0cmluZyhyZXMuQm9keSkpCgl9KQoJcmVzcG9uc2UsIGVyciA6PSBjbGllbnQuV2l0aEVuY29kZXIoTXVsdGlwYXJ0Rm9ybUVuY29kZXIpLlBvc3QoYC93YXkvY29vbGAsIG1hcFtzdHJpbmddaW50ZXJmYWNle317YGZpbGVgOiBieXRlcy5OZXdCdWZmZXIoW11ieXRlKCJ0ZXN0IGZpbGUgMVxuIikpLCBgb3RoZXJgOiBieXRlcy5OZXdCdWZmZXIoW11ieXRlKCJ0ZXN0IGZpbGUgMlxuIikpLCBga2V5YDogYHZhbHVlYCwgYGVuYWJsZWA6IHRydWV9LCBuaWwsIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5Ob3ROaWwocmVzcG9uc2UpCglhc3NlcnQuRXF1YWwocmVzcG9uc2UuU3RhdHVzQ29kZSwgaHR0cC5TdGF0dXNBY2NlcHRlZCkKCWFzc2VydC5Ob0Vycm9yKFBhcnNlSlNPTihyZXNwb25zZS5Cb2R5LCAmb3V0KSkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BmaWxlYDogW11pbnRlcmZhY2V7fXsidGVzdCBmaWxlIDFcbiJ9LCBgb3RoZXJgOiBbXWludGVyZmFjZXt9eyJ0ZXN0IGZpbGUgMlxuIn0sIGBrZXlgOiBbXWludGVyZmFjZXt9eyJ2YWx1ZSJ9LCBgZW5hYmxlYDogW11pbnRlcmZhY2V7fXsidHJ1ZSJ9fSwgb3V0KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestClientNetrcAuth",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestClientNetrcAuth(t *testing.T)",
            "Source": "ewoJc2VydmVyIDo9IHRlc3RIdHRwU2VydmVyKCkKCWRlZmVyIHNlcnZlci5DbG9zZSgpCgljbGllbnQsIGVyciA6PSBOZXdDbGllbnQoc2VydmVyLlVSTCkKCWFzc2VydC5Ob0Vycm9yKHQsIGVycikKCWFzc2VydC5Ob3ROaWwodCwgY2xpZW50KQoJY2xpZW50LlNldEVycm9yRGVjb2RlcihmdW5jKHJlcyAqaHR0cC5SZXNwb25zZSkgZXJyb3IgewoJCWFzc2VydC5Ob3ROaWwodCwgcmVzLkJvZHkpCgkJcmV0dXJuIGVycm9ycy5OZXcodHlwZXV0aWwuU3RyaW5nKHJlcy5Cb2R5KSkKCX0pCglOZXRyY0ZpbGUgPSBmaWxldXRpbC5NdXN0V3JpdGVUZW1wRmlsZSgibWFjaGluZSAqIGxvZ2luIHRlc3QgcGFzc3dvcmQgdGVzdFxuIiwgInRlc3QtZ2hldHplbC1nby1zdG9ja3V0aWwtaHR0cHV0aWwiKQoJZGVmZXIgb3MuUmVtb3ZlKE5ldHJjRmlsZSkKCWNsaWVudC5TZXRBdXRvbWF0aWNMb2dpbih0cnVlKQoJcmVzcG9uc2UsIGVyciA6PSBjbGllbnQuUmVxdWVzdChQYXRjaCwgYC9gLCBuaWwsIG5pbCwgbmlsKQoJYXNzZXJ0Lk5vRXJyb3IodCwgZXJyKQoJYXNzZXJ0Lk5vdE5pbCh0LCByZXNwb25zZSkKCWFzc2VydC5FcXVhbCh0LCByZXNwb25zZS5TdGF0dXNDb2RlLCBodHRwLlN0YXR1c0FjY2VwdGVkKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDefaultClient",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDefaultClient(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglzZXJ2ZXIgOj0gdGVzdEh0dHBTZXJ2ZXIoKQoJZGVmZXIgc2VydmVyLkNsb3NlKCkKCXZhciBkYXRhLCBlcnIgPSBHZXRCb2R5KHNlcnZlci5VUkwgKyBgL3Rlc3QvcGF0aGApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoWyAvLyBHRVQKCS8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgldYnl0ZSgie1wicGF0aFwiOlwiL3Rlc3QvcGF0aFwiLFwicXNcIjp7fX1cbiIpLCBkYXRhKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestIsMediaType",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestIsMediaType(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglyZXEgOj0gbXQoYHRleHQvcGxhaW47IGNoYXJzZXQ9dXRmLThgKQoJYXNzZXJ0LlRydWUoSXNNZWRpYVR5cGUocmVxLCBgdGV4dC9wbGFpbmApKQoJYXNzZXJ0LlRydWUoSXNNZWRpYVR5cGUocmVxLCBgdGV4dC9wbGFpbmAsIGB0ZXh0L2h0bWxgKSkKCWFzc2VydC5UcnVlKElzTWVkaWFUeXBlKHJlcSwgYHRleHQvYCkpCglhc3NlcnQuRmFsc2UoSXNNZWRpYVR5cGUocmVxKSkKCWFzc2VydC5GYWxzZShJc01lZGlhVHlwZShyZXEsIGB0ZXh0L2h0bWxgKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestMediaType",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestMediaType(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGAsIE1lZGlhVHlwZShtdChgYCkpKQoJYXNzZXJ0LkVxdWFsKGB0ZXh0L3BsYWluYCwgTWVkaWFUeXBlKG10KGB0ZXh0L3BsYWluYCkpKQoJYXNzZXJ0LkVxdWFsKGB0ZXh0L3BsYWluYCwgTWVkaWFUeXBlKG10KGB0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04YCkpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestNetrcPositive",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestNetrcPositive(t *testing.T)",
            "Source": "ewoJTmV0cmNGaWxlID0gZmlsZXV0aWwuTXVzdFdyaXRlVGVtcEZpbGUoIm1hY2hpbmUgc3RvY2staHR0cHV0aWwtdGVzdCBsb2dpbiBoZWxsbyBwYXNzd29yZCB0aGVyZVxubWFjaGluZSBpbnRlbnRpb25hbGx5LWxlZnQtYmxhbmtcbiIsICJ0ZXN0LWdoZXR6ZWwtZ28tc3RvY2t1dGlsLWh0dHB1dGlsIikKCWRlZmVyIG9zLlJlbW92ZShOZXRyY0ZpbGUpCgl2YXIgdSwgcCwgb2sgPSBOZXRyY0NyZWRlbnRpYWxzKGBgKQoJcmVxdWlyZS5GYWxzZSh0LCBvaykKCXJlcXVpcmUuRW1wdHkodCwgdSkKCXJlcXVpcmUuRW1wdHkodCwgcCkKCXUsIHAsIG9rID0gTmV0cmNDcmVkZW50aWFscyhgbm9wZWApCglyZXF1aXJlLkZhbHNlKHQsIG9rKQoJcmVxdWlyZS5FbXB0eSh0LCB1KQoJcmVxdWlyZS5FbXB0eSh0LCBwKQoJdSwgcCwgb2sgPSBOZXRyY0NyZWRlbnRpYWxzKGBpbnRlbnRpb25hbGx5LWxlZnQtYmxhbmtgKQoJcmVxdWlyZS5GYWxzZSh0LCBvaykKCXJlcXVpcmUuRW1wdHkodCwgdSkKCXJlcXVpcmUuRW1wdHkodCwgcCkKCXUsIHAsIG9rID0gTmV0cmNDcmVkZW50aWFscyhgc3RvY2staHR0cHV0aWwtdGVzdGApCglyZXF1aXJlLlRydWUodCwgb2spCglyZXF1aXJlLkVxdWFsKHQsIGBoZWxsb2AsIHUpCglyZXF1aXJlLkVxdWFsKHQsIGB0aGVyZWAsIHApCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestParseFormValues",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestParseFormValues(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl0MSA6PSB0ZXN0T3V0cHV0T25le1VSTDogYGh0dHA6Ly90ZXN0YH0KCWFzc2VydC5Ob0Vycm9yKFBhcnNlRm9ybVZhbHVlcyh1cmwuVmFsdWVze2BuYW1lYDogW11zdHJpbmd7YFRlc3RlcmB9LCBgQ291bnRgOiBbXXN0cmluZ3tgNDJgfSwgYG9rMWA6IFtdc3RyaW5ne2B0cnVlYH0sIGBPazJgOiBbXXN0cmluZ3tgb25gfSwgYE9LM2A6IFtdc3RyaW5ne2BvZmZgfSwgYGxvbC4wYDogW11zdHJpbmd7YHplcm9gfSwgYGxvbC4xYDogW11zdHJpbmd7YG9uZWB9LCBgbG9sLjJgOiBbXXN0cmluZ3tgdHdvYH0sIGBuaWxvbFtdYDogW11zdHJpbmd7YGZpcnN0YCwgYHNlY29uZGAsIGB0aGlyZGB9LCBgb25lc2llW11gOiBbXXN0cmluZ3tgdW5vYH0sIGB0d29zaWVbMF1baGVsbG9dYDogW11zdHJpbmd7YHRoZXJlYH0sIGBlbXB0eWA6IG5pbH0sICZ0MSkpCglhc3NlcnQuRXF1YWwoYGAsIHQxLkVtcHR5KQoJYXNzZXJ0LkVxdWFsKGBUZXN0ZXJgLCB0MS5OYW1lKQoJYXNzZXJ0LkVxdWFsKGBodHRwOi8vdGVzdGAsIHQxLlVSTCkKCWFzc2VydC5FcXVhbChpbnQ2NCg0MiksIHQxLkNvdW50KQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2B6ZXJvYCwgYG9uZWAsIGB0d29gfSwgdDEuTE9MKQoJYXNzZXJ0LkVxdWFsKFtdc3RyaW5ne2BmaXJzdGAsIGBzZWNvbmRgLCBgdGhpcmRgfSwgdDEuTm9uSW5kZXhlZExPTCkKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgdW5vYH0sIHQxLk9uZXNpZSkKCWFzc2VydC5FcXVhbChbXW1hcFtzdHJpbmddaW50ZXJmYWNle317e2BoZWxsb2A6IGB0aGVyZWB9fSwgdDEuVHdvc2llKQoJYXNzZXJ0LlRydWUodDEuT2sxKQoJYXNzZXJ0LlRydWUodDEuT2syKQoJYXNzZXJ0LkZhbHNlKHQxLk9rMykKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestQueryStringModify",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestQueryStringModify(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl1LCBlcnIgOj0gdXJsLlBhcnNlKGBodHRwczovL2V4YW1wbGUuY29tYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5Ob3ROaWwodSkKCVNldFEodSwgYHRlc3RgLCBmYWxzZSkKCVNldFEodSwgYHRlc3RgLCB0cnVlKQoJQWRkUSh1LCBgdGVzdDJgLCAxKQoJQWRkUSh1LCBgdGVzdDJgLCAzKQoJU2V0USh1LCBgbm9wZWAsIHRydWUpCglEZWxRKHUsIGBub3BlYCkKCWFzc2VydC5FcXVhbCh1LlN0cmluZygpLCBgaHR0cHM6Ly9leGFtcGxlLmNvbT90ZXN0PXRydWUmdGVzdDI9MSZ0ZXN0Mj0zYCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestQueryStringStringModify",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestQueryStringStringModify(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGh0dHBzOi8vZXhhbXBsZS5jb20/dGVzdD1mYWxzZWAsIFNldFFTdHJpbmcoYGh0dHBzOi8vZXhhbXBsZS5jb21gLCBgdGVzdGAsIGZhbHNlKSkKCWFzc2VydC5FcXVhbChgaHR0cHM6Ly9leGFtcGxlLmNvbT90ZXN0PXRydWVgLCBTZXRRU3RyaW5nKGBodHRwczovL2V4YW1wbGUuY29tYCwgYHRlc3RgLCB0cnVlKSkKCXggOj0gYGh0dHBzOi8vZXhhbXBsZS5jb21gCgl4ID0gQWRkUVN0cmluZyh4LCBgdGVzdDJgLCAxKQoJeCA9IEFkZFFTdHJpbmcoeCwgYHRlc3QyYCwgMykKCWFzc2VydC5FcXVhbChgaHR0cHM6Ly9leGFtcGxlLmNvbT90ZXN0Mj0xJnRlc3QyPTNgLCB4KQoJYXNzZXJ0LkVxdWFsKGBodHRwczovL2V4YW1wbGUuY29tYCwgRGVsUVN0cmluZyhgaHR0cHM6Ly9leGFtcGxlLmNvbT9ub3BlPWxvbGAsIGBub3BlYCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestQueryStringStringModifyPathOnly",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestQueryStringStringModifyPathOnly(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYC9zb21lL3BhdGg/dGVzdD1mYWxzZWAsIFNldFFTdHJpbmcoYC9zb21lL3BhdGhgLCBgdGVzdGAsIGZhbHNlKSkKCWFzc2VydC5FcXVhbChgL3NvbWUvcGF0aD90ZXN0PXRydWVgLCBTZXRRU3RyaW5nKGAvc29tZS9wYXRoYCwgYHRlc3RgLCB0cnVlKSkKCXggOj0gYC9zb21lL3BhdGhgCgl4ID0gQWRkUVN0cmluZyh4LCBgdGVzdDJgLCAxKQoJeCA9IEFkZFFTdHJpbmcoeCwgYHRlc3QyYCwgMykKCWFzc2VydC5FcXVhbChgL3NvbWUvcGF0aD90ZXN0Mj0xJnRlc3QyPTNgLCB4KQoJYXNzZXJ0LkVxdWFsKGAvc29tZS9wYXRoYCwgRGVsUVN0cmluZyhgL3NvbWUvcGF0aD9ub3BlPWxvbGAsIGBub3BlYCkpCn0=",
            "IsPackageLevel": true
        }
    ],
    "Types": {
        "Client": {
            "Name": "Client",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "AppendTrustedRootCA",
                    "Comment": "Append one or more trusted certificates to the RootCA bundle that is consulted when performing HTTPS requests.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "pemFilenamesOrData",
                            "Type": "...interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "AppendTrustedRootCA(pemFilenamesOrData ...interface{}) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "ClearHeaders",
                    "Comment": "Remove all implicit HTTP request headers.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Signature": "ClearHeaders()",
                    "IsPackageLevel": false
                },
                {
                    "Name": "ClearParams",
                    "Comment": "Remove all implicit querystring parameters.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Signature": "ClearParams()",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Client",
                    "Comment": "Returns the HTTP client used to perform requests",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "*http.Client"
                        }
                    ],
                    "Signature": "Client() *http.Client",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Decode",
                    "Comment": "Decode a response and, if applicable, automatically close the reader.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "r",
                            "Type": "io.Reader"
                        },
                        {
                            "Name": "out",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Decode(r io.Reader, out interface{}) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Delete",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "path",
                            "Type": "string"
                        },
                        {
                            "Name": "params",
                            "Type": "map[string]interface{}"
                        },
                        {
                            "Name": "headers",
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*http.Response"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Delete(path string, params map[string]interface{}, headers map[string]interface{}) (*http.Response, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Encode",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "in",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "[]byte"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Encode(in interface{}) ([]byte, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Get",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "path",
                            "Type": "string"
                        },
                        {
                            "Name": "params",
                            "Type": "map[string]interface{}"
                        },
                        {
                            "Name": "headers",
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*http.Response"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Get(path string, params map[string]interface{}, headers map[string]interface{}) (*http.Response, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetWithBody",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "path",
                            "Type": "string"
                        },
                        {
                            "Name": "body",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "params",
                            "Type": "map[string]interface{}"
                        },
                        {
                            "Name": "headers",
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*http.Response"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "GetWithBody(path string, body interface{}, params map[string]interface{}, headers map[string]interface{}) (*http.Response, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Headers",
                    "Comment": "Return the headers set on this client.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "http.Header"
                        }
                    ],
                    "Signature": "Headers() http.Header",
                    "IsPackageLevel": false
                },
                {
                    "Name": "MustClient",
                    "Arguments": [
                        {
                            "Name": "baseURI",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Client"
                        }
                    ],
                    "Signature": "MustClient(baseURI string) *Client",
                    "Source": "ewoJaWYgYywgZXJyIDo9IE5ld0NsaWVudChiYXNlVVJJKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIGMKCX0gZWxzZSB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9Cn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "NewClient",
                    "Arguments": [
                        {
                            "Name": "baseURI",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Client"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "NewClient(baseURI string) (*Client, error)",
                    "Source": "ewoJdmFyIGNsaWVudCA9ICZDbGllbnR7ZW5jb2RlcjogSlNPTkVuY29kZXIsIGRlY29kZXI6IEpTT05EZWNvZGVyLCBoZWFkZXJzOiBtYWtlKG1hcFtzdHJpbmddaW50ZXJmYWNle30pLCBwYXJhbXM6IG1ha2UobWFwW3N0cmluZ11pbnRlcmZhY2V7fSksIGh0dHBDbGllbnQ6IGh0dHAuRGVmYXVsdENsaWVudH0KCWlmIGJhc2VVUkkgIT0gYGAgewoJCWlmIHVyaSwgZXJyIDo9IHVybC5QYXJzZShiYXNlVVJJKTsgZXJyID09IG5pbCB7CgkJCWNsaWVudC51cmkgPSB1cmkKCQl9IGVsc2UgewoJCQlyZXR1cm4gbmlsLCBlcnIKCQl9Cgl9IGVsc2UgewoJCWNsaWVudC51cmkgPSBuZXcodXJsLlVSTCkKCX0KCWlmIGxvZy5WZXJ5RGVidWdnaW5nKGBnaXRodWIuY29tL2doZXR6ZWwvZ28tc3RvY2t1dGlsL2h0dHB1dGlsYCkgewoJCWNsaWVudC5TZXRQcmVSZXF1ZXN0SG9vayhmdW5jKHJlcSAqaHR0cC5SZXF1ZXN0KSAoaW50ZXJmYWNle30sIGVycm9yKSB7CgkJCWlmIGRhdGEsIGVyciA6PSBnb2h0dHB1dGlsLkR1bXBSZXF1ZXN0KHJlcSwgdHJ1ZSk7IGVyciA9PSBuaWwgewoJCQkJbG9nLkRlYnVnZigiaHR0cHV0aWwgJHtibHVlfVx1MjU2ZFx1MjUwMFsgSFRUUCBSZXF1ZXN0IF0lc1x1MjUwNFx1MjUwNFx1MjUwNCR7cmVzZXR9Iiwgc3RyaW5ncy5SZXBlYXQoIlx1MjUwMCIsIERlYnVnT3V0cHV0Qm94V2lkdGgtMTcpKQoJCQkJbG9nLkRlYnVnZigiaHR0cHV0aWwgJHtibHVlfVx1MjUwMiR7cmVzZXR9IFx1MjFjOSAldiIsIHJlcS5VUkwpCgkJCQlsb2cuRGVidWdmKCJodHRwdXRpbCAke2JsdWV9XHUyNTAyJHtyZXNldH0iKQoJCQkJZm9yIF8sIGxpbmUgOj0gcmFuZ2Ugc3RyaW5ncy5TcGxpdChzdHJpbmcoZGF0YSksICJcbiIpIHsKCQkJCQlsaW5lID0gc3RyaW5ncy5UcmltU3BhY2UobGluZSkKCQkJCQlsb2cuRGVidWdmKCJodHRwdXRpbCAke2JsdWV9XHUyNTAyJHtyZXNldH0gJXYiLCBsaW5lKQoJCQkJfQoJCQkJbG9nLkRlYnVnZigiaHR0cHV0aWwgJHtibHVlfVx1MjU3MCVzXHUyNTA0XHUyNTA0XHUyNTA0JHtyZXNldH0iLCBzdHJpbmdzLlJlcGVhdCgiXHUyNTAwIiwgRGVidWdPdXRwdXRCb3hXaWR0aCkpCgkJCX0KCQkJcmV0dXJuIG5pbCwgbmlsCgkJfSkKCQljbGllbnQuU2V0UG9zdFJlcXVlc3RIb29rKGZ1bmMocmVzICpodHRwLlJlc3BvbnNlLCBfIGludGVyZmFjZXt9KSBlcnJvciB7CgkJCWlmIGRhdGEsIGVyciA6PSBnb2h0dHB1dGlsLkR1bXBSZXNwb25zZShyZXMsIHRydWUpOyBlcnIgPT0gbmlsIHsKCQkJCWxvZy5EZWJ1Z2YoImh0dHB1dGlsIFx1MjU2ZFx1MjUwMFsgSFRUUCBSZXNwb25zZSBdJXNcdTI1MDRcdTI1MDRcdTI1MDQiLCBzdHJpbmdzLlJlcGVhdCgiXHUyNTAwIiwgRGVidWdPdXRwdXRCb3hXaWR0aC0xOCkpCgkJCQlpZiByZXMuUmVxdWVzdCAhPSBuaWwgewoJCQkJCWxvZy5EZWJ1Z2YoImh0dHB1dGlsICR7cmVkfVx1MjUwMiR7cmVzZXR9IFx1MjFjNyAldiIsIHJlcy5SZXF1ZXN0LlVSTCkKCQkJCQlsb2cuRGVidWdmKCJodHRwdXRpbCAke3JlZH1cdTI1MDIke3Jlc2V0fSIpCgkJCQl9CgkJCQlmb3IgXywgbGluZSA6PSByYW5nZSBzdHJpbmdzLlNwbGl0KHN0cmluZyhkYXRhKSwgIlxuIikgewoJCQkJCWxpbmUgPSBzdHJpbmdzLlRyaW1TcGFjZShsaW5lKQoJCQkJCWxvZy5EZWJ1Z2YoImh0dHB1dGlsIFx1MjUwMiAldiIsIGxpbmUpCgkJCQl9CgkJCQlsb2cuRGVidWdmKCJodHRwdXRpbCBcdTI1NzAlc1x1MjUwNFx1MjUwNFx1MjUwNCIsIHN0cmluZ3MuUmVwZWF0KCJcdTI1MDAiLCBEZWJ1Z091dHB1dEJveFdpZHRoKSkKCQkJfQoJCQlyZXR1cm4gbmlsCgkJfSkKCX0KCXJldHVybiBjbGllbnQsIG5pbAp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "Params",
                    "Comment": "Return the params set on this client.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Signature": "Params() map[string]interface{}",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Post",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "path",
                            "Type": "string"
                        },
                        {
                            "Name": "body",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "params",
                            "Type": "map[string]interface{}"
                        },
                        {
                            "Name": "headers",
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*http.Response"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Post(path string, body interface{}, params map[string]interface{}, headers map[string]interface{}) (*http.Response, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Put",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "path",
                            "Type": "string"
                        },
                        {
                            "Name": "body",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "params",
                            "Type": "map[string]interface{}"
                        },
                        {
                            "Name": "headers",
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*http.Response"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Put(path string, body interface{}, params map[string]interface{}, headers map[string]interface{}) (*http.Response, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Request",
                    "Comment": "Perform an HTTP request",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "method",
                            "Type": "Method"
                        },
                        {
                            "Name": "path",
                            "Type": "string"
                        },
                        {
                            "Name": "body",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "params",
                            "Type": "map[string]interface{}"
                        },
                        {
                            "Name": "headers",
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*http.Response"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Request(method Method, path string, body interface{}, params map[string]interface{}, headers map[string]interface{}) (*http.Response, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetAutomaticLogin",
                    "Comment": "Specify that the NetrcFile (default: ~/.netrc) should be consulted before each\nrequest to supply basic authentication.  If a non-empty username or password is\nfound for the",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "on",
                            "Type": "bool"
                        }
                    ],
                    "Signature": "SetAutomaticLogin(on bool)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetBasicAuth",
                    "Comment": "Set the username and password to be included in the Authorization header.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "username",
                            "Type": "string"
                        },
                        {
                            "Name": "password",
                            "Type": "string"
                        }
                    ],
                    "Signature": "SetBasicAuth(username string, password string)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetClient",
                    "Comment": "Replace the default HTTP client with a user-provided one",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "client",
                            "Type": "*http.Client"
                        }
                    ],
                    "Signature": "SetClient(client *http.Client)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetDecoder",
                    "Comment": "Specify a decoder that will be used to deserialize data in the response body.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "DecoderFunc"
                        }
                    ],
                    "Signature": "SetDecoder(fn DecoderFunc)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetEncoder",
                    "Comment": "Specify an encoder that will be used to serialize data in the request body.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "EncoderFunc"
                        }
                    ],
                    "Signature": "SetEncoder(fn EncoderFunc)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetErrorDecoder",
                    "Comment": "Specify a different decoder used to deserialize non 2xx/3xx HTTP responses.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "ErrorDecoderFunc"
                        }
                    ],
                    "Signature": "SetErrorDecoder(fn ErrorDecoderFunc)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetHeader",
                    "Comment": "Add an HTTP request header by name that will be included in every request. If\nvalue is nil, the named header will be removed instead.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        },
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        }
                    ],
                    "Signature": "SetHeader(name string, value interface{})",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetInitHook",
                    "Comment": "Specify a function that will be called immediately before the first request is sent.\nThis function has an opportunity to read and modify the outgoing request, and\nif it returns a non-nil error, the request will not be sent.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "InitRequestFunc"
                        }
                    ],
                    "Signature": "SetInitHook(fn InitRequestFunc)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetInsecureTLS",
                    "Comment": "Set or unset insecure TLS requests that will proceed even if the peer certificate cannot be verified.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "insecure",
                            "Type": "bool"
                        }
                    ],
                    "Signature": "SetInsecureTLS(insecure bool)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetParam",
                    "Comment": "Add a querystring parameter by name that will be included in every request. If\nvalue is nil, the parameter will be removed instead.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        },
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        }
                    ],
                    "Signature": "SetParam(name string, value interface{})",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetPostRequestHook",
                    "Comment": "Specify a function tht will be called immediately after a response is received.\nThis function is given the first opportunity to inspect the response, and if it\nreturns a non-nil error, no additional processing (including the Error Decoder function)\nwill be performed.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "InterceptResponseFunc"
                        }
                    ],
                    "Signature": "SetPostRequestHook(fn InterceptResponseFunc)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetPreRequestHook",
                    "Comment": "Specify a function that will be called immediately before a request is sent.\nThis function has an opportunity to read and modify the outgoing request, and\nif it returns a non-nil error, the request will not be sent.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "InterceptRequestFunc"
                        }
                    ],
                    "Signature": "SetPreRequestHook(fn InterceptRequestFunc)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetRootCA",
                    "Comment": "Replace the existing RootCA bundle with an explicit set of trusted certificates.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "pemFilenamesOrData",
                            "Type": "...interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "SetRootCA(pemFilenamesOrData ...interface{}) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "URI",
                    "Comment": "Return the base URI for this client.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "*url.URL"
                        }
                    ],
                    "Signature": "URI() *url.URL",
                    "IsPackageLevel": false
                },
                {
                    "Name": "WithDecoder",
                    "Comment": "Return a copy of the current client that uses a different decoder.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "DecoderFunc"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Client"
                        }
                    ],
                    "Signature": "WithDecoder(fn DecoderFunc) *Client",
                    "IsPackageLevel": false
                },
                {
                    "Name": "WithEncoder",
                    "Comment": "Return a copy of the current client that uses a different encoder.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "EncoderFunc"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Client"
                        }
                    ],
                    "Signature": "WithEncoder(fn EncoderFunc) *Client",
                    "IsPackageLevel": false
                }
            ],
            "Source": "dHlwZSBDbGllbnQgc3RydWN0IHsKCn0K",
            "HasUnexportedFields": true
        },
        "DecoderFunc": {
            "Name": "DecoderFunc",
            "Source": "dHlwZSBEZWNvZGVyRnVuYyBmdW5jKGlvLlJlYWRlciwgaW50ZXJmYWNle30pIGVycm9y"
        },
        "EncoderFunc": {
            "Name": "EncoderFunc",
            "Source": "dHlwZSBFbmNvZGVyRnVuYyBmdW5jKGludGVyZmFjZXt9KSAoaW8uUmVhZGVyLCBlcnJvcik="
        },
        "ErrorDecoderFunc": {
            "Name": "ErrorDecoderFunc",
            "Source": "dHlwZSBFcnJvckRlY29kZXJGdW5jIGZ1bmMoKmh0dHAuUmVzcG9uc2UpIGVycm9y"
        },
        "InitRequestFunc": {
            "Name": "InitRequestFunc",
            "Source": "dHlwZSBJbml0UmVxdWVzdEZ1bmMgZnVuYygpIGVycm9y"
        },
        "InterceptRequestFunc": {
            "Name": "InterceptRequestFunc",
            "Source": "dHlwZSBJbnRlcmNlcHRSZXF1ZXN0RnVuYyBmdW5jKCpodHRwLlJlcXVlc3QpIChpbnRlcmZhY2V7fSwgZXJyb3Ip"
        },
        "InterceptResponseFunc": {
            "Name": "InterceptResponseFunc",
            "Source": "dHlwZSBJbnRlcmNlcHRSZXNwb25zZUZ1bmMgZnVuYygqaHR0cC5SZXNwb25zZSwgaW50ZXJmYWNle30pIGVycm9y"
        },
        "Literal": {
            "Name": "Literal",
            "Source": "dHlwZSBMaXRlcmFsIFtdYnl0ZQ=="
        },
        "LogLevel": {
            "Name": "LogLevel",
            "MetaType": "int",
            "Source": "dHlwZSBMb2dMZXZlbCBpbnQ="
        },
        "Method": {
            "Name": "Method",
            "MetaType": "string",
            "Source": "dHlwZSBNZXRob2Qgc3RyaW5n"
        },
        "MultipartFormFile": {
            "Name": "MultipartFormFile",
            "MetaType": "struct",
            "Fields": [
                {
                    "Name": "Filename",
                    "Type": "string"
                },
                {
                    "Name": "Data",
                    "Type": "io.Reader"
                }
            ],
            "Source": "dHlwZSBNdWx0aXBhcnRGb3JtRmlsZSBzdHJ1Y3QgewoJRmlsZW5hbWUgc3RyaW5nICAgIGBqc29uOiJmaWxlbmFtZSJgCglEYXRhICAgICBpby5SZWFkZXIgYGpzb246ImRhdGEiYAp9"
        },
        "RequestLogger": {
            "Name": "RequestLogger",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "NewRequestLogger",
                    "Returns": [
                        {
                            "Type": "*RequestLogger"
                        }
                    ],
                    "Signature": "NewRequestLogger() *RequestLogger",
                    "Source": "ewoJcmV0dXJuICZSZXF1ZXN0TG9nZ2Vye30KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ServeHTTP",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "rw",
                            "Type": "http.ResponseWriter"
                        },
                        {
                            "Name": "req",
                            "Type": "*http.Request"
                        },
                        {
                            "Name": "next",
                            "Type": "http.HandlerFunc"
                        }
                    ],
                    "Signature": "ServeHTTP(rw http.ResponseWriter, req *http.Request, next http.HandlerFunc)",
                    "IsPackageLevel": false
                }
            ],
            "Comment": "Deprecated: this type will go away in 1.9.x",
            "Source": "dHlwZSBSZXF1ZXN0TG9nZ2VyIHN0cnVjdHt9IC8vIERlcHJlY2F0ZWQ6IHRoaXMgdHlwZSB3aWxsIGdvIGF3YXkgaW4gMS45LngK"
        },
        "RequestParseFunc": {
            "Name": "RequestParseFunc",
            "Source": "dHlwZSBSZXF1ZXN0UGFyc2VGdW5jIGZ1bmMoKmh0dHAuUmVxdWVzdCwgaW50ZXJmYWNle30pIGVycm9y"
        },
        "WritableLogger": {
            "Name": "WritableLogger",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "NewWritableLogger",
                    "Arguments": [
                        {
                            "Name": "level",
                            "Type": "LogLevel"
                        },
                        {
                            "Name": "prefix",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*WritableLogger"
                        }
                    ],
                    "Signature": "NewWritableLogger(level LogLevel, prefix ...string) *WritableLogger",
                    "Source": "ewoJcmV0dXJuICZXcml0YWJsZUxvZ2dlcntwcmVmaXg6IHN0cmluZ3MuSm9pbihwcmVmaXgsIGBgKX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "Write",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "p",
                            "Type": "[]byte"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "int"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Write(p []byte) (int, error)",
                    "IsPackageLevel": false
                }
            ],
            "Source": "dHlwZSBXcml0YWJsZUxvZ2dlciBzdHJ1Y3QgewoKfQo=",
            "HasUnexportedFields": true
        }
    }
}
