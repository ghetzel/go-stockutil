package typeutil

// Code generated by peg -inline sigparse.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruletypeutilFunctionSignatureSpec
	rule_
	ruleKW_FUNC
	ruleIDENT
	ruleSIGNATURE
	ruleRETURNS
	rulePUNC_SIG_OPEN
	rulePUNC_SIG_CLOSE
	rulePUNC_COMMA
	ruleARGS
	ruleDATATYPE
	ruleBOOL
	ruleINT
	ruleFLOAT
	ruleSTRING
	ruleERROR
	ruleCUSTOM_TYPE
)

var rul3s = [...]string{
	"Unknown",
	"typeutilFunctionSignatureSpec",
	"_",
	"KW_FUNC",
	"IDENT",
	"SIGNATURE",
	"RETURNS",
	"PUNC_SIG_OPEN",
	"PUNC_SIG_CLOSE",
	"PUNC_COMMA",
	"ARGS",
	"DATATYPE",
	"BOOL",
	"INT",
	"FLOAT",
	"STRING",
	"ERROR",
	"CUSTOM_TYPE",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type typeutilFunctionSignatureSpec struct {
	functionSignatureGrammarMixin

	Buffer string
	buffer []rune
	rules  [18]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *typeutilFunctionSignatureSpec) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *typeutilFunctionSignatureSpec) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *typeutilFunctionSignatureSpec
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *typeutilFunctionSignatureSpec) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *typeutilFunctionSignatureSpec) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *typeutilFunctionSignatureSpec) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*typeutilFunctionSignatureSpec) error {
	return func(p *typeutilFunctionSignatureSpec) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*typeutilFunctionSignatureSpec) error {
	return func(p *typeutilFunctionSignatureSpec) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *typeutilFunctionSignatureSpec) Init(options ...func(*typeutilFunctionSignatureSpec) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 typeutilFunctionSignatureSpec <- <((KW_FUNC / IDENT) _ SIGNATURE _ RETURNS? !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if buffer[position] != rune('f') {
							goto l3
						}
						position++
						if buffer[position] != rune('u') {
							goto l3
						}
						position++
						if buffer[position] != rune('n') {
							goto l3
						}
						position++
						if buffer[position] != rune('c') {
							goto l3
						}
						position++
						add(ruleKW_FUNC, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position5 := position
						{
							position6, tokenIndex6 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l7
							}
							position++
							goto l6
						l7:
							position, tokenIndex = position6, tokenIndex6
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l8
							}
							position++
							goto l6
						l8:
							position, tokenIndex = position6, tokenIndex6
							if buffer[position] != rune('_') {
								goto l0
							}
							position++
						}
					l6:
					l9:
						{
							position10, tokenIndex10 := position, tokenIndex
							{
								position11, tokenIndex11 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l12
								}
								position++
								goto l11
							l12:
								position, tokenIndex = position11, tokenIndex11
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l13
								}
								position++
								goto l11
							l13:
								position, tokenIndex = position11, tokenIndex11
								{
									position15, tokenIndex15 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l16
									}
									position++
									goto l15
								l16:
									position, tokenIndex = position15, tokenIndex15
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l14
									}
									position++
								}
							l15:
								goto l11
							l14:
								position, tokenIndex = position11, tokenIndex11
								if buffer[position] != rune('_') {
									goto l10
								}
								position++
							}
						l11:
							goto l9
						l10:
							position, tokenIndex = position10, tokenIndex10
						}
						add(ruleIDENT, position5)
					}
				}
			l2:
				if !_rules[rule_]() {
					goto l0
				}
				{
					position17 := position
					if !_rules[rulePUNC_SIG_OPEN]() {
						goto l0
					}
				l18:
					{
						position19, tokenIndex19 := position, tokenIndex
						if !_rules[ruleARGS]() {
							goto l19
						}
						goto l18
					l19:
						position, tokenIndex = position19, tokenIndex19
					}
					if !_rules[rulePUNC_SIG_CLOSE]() {
						goto l0
					}
					add(ruleSIGNATURE, position17)
				}
				if !_rules[rule_]() {
					goto l0
				}
				{
					position20, tokenIndex20 := position, tokenIndex
					{
						position22 := position
						{
							position23, tokenIndex23 := position, tokenIndex
							if !_rules[ruleDATATYPE]() {
								goto l24
							}
							goto l23
						l24:
							position, tokenIndex = position23, tokenIndex23
							if !_rules[rulePUNC_SIG_OPEN]() {
								goto l20
							}
						l25:
							{
								position26, tokenIndex26 := position, tokenIndex
								if !_rules[ruleARGS]() {
									goto l26
								}
								goto l25
							l26:
								position, tokenIndex = position26, tokenIndex26
							}
							if !_rules[rulePUNC_SIG_CLOSE]() {
								goto l20
							}
						}
					l23:
						add(ruleRETURNS, position22)
					}
					goto l21
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
			l21:
				{
					position27, tokenIndex27 := position, tokenIndex
					if !matchDot() {
						goto l27
					}
					goto l0
				l27:
					position, tokenIndex = position27, tokenIndex27
				}
				add(ruletypeutilFunctionSignatureSpec, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 _ <- <(' ' / '\t' / '\r' / '\n')*> */
		func() bool {
			{
				position29 := position
			l30:
				{
					position31, tokenIndex31 := position, tokenIndex
					{
						position32, tokenIndex32 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l33
						}
						position++
						goto l32
					l33:
						position, tokenIndex = position32, tokenIndex32
						if buffer[position] != rune('\t') {
							goto l34
						}
						position++
						goto l32
					l34:
						position, tokenIndex = position32, tokenIndex32
						if buffer[position] != rune('\r') {
							goto l35
						}
						position++
						goto l32
					l35:
						position, tokenIndex = position32, tokenIndex32
						if buffer[position] != rune('\n') {
							goto l31
						}
						position++
					}
				l32:
					goto l30
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
				add(rule_, position29)
			}
			return true
		},
		/* 2 KW_FUNC <- <('f' 'u' 'n' 'c')> */
		nil,
		/* 3 IDENT <- <(([a-z] / [A-Z] / '_') ([a-z] / [A-Z] / ([0-9] / [0-9]) / '_')*)> */
		nil,
		/* 4 SIGNATURE <- <(PUNC_SIG_OPEN ARGS* PUNC_SIG_CLOSE)> */
		nil,
		/* 5 RETURNS <- <(DATATYPE / (PUNC_SIG_OPEN ARGS* PUNC_SIG_CLOSE))> */
		nil,
		/* 6 PUNC_SIG_OPEN <- <(_ '(' _)> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				if !_rules[rule_]() {
					goto l40
				}
				if buffer[position] != rune('(') {
					goto l40
				}
				position++
				if !_rules[rule_]() {
					goto l40
				}
				add(rulePUNC_SIG_OPEN, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 7 PUNC_SIG_CLOSE <- <(_ ')' _)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if !_rules[rule_]() {
					goto l42
				}
				if buffer[position] != rune(')') {
					goto l42
				}
				position++
				if !_rules[rule_]() {
					goto l42
				}
				add(rulePUNC_SIG_CLOSE, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 8 PUNC_COMMA <- <(_ ',' _)> */
		nil,
		/* 9 ARGS <- <(DATATYPE PUNC_COMMA?)> */
		func() bool {
			position45, tokenIndex45 := position, tokenIndex
			{
				position46 := position
				if !_rules[ruleDATATYPE]() {
					goto l45
				}
				{
					position47, tokenIndex47 := position, tokenIndex
					{
						position49 := position
						if !_rules[rule_]() {
							goto l47
						}
						if buffer[position] != rune(',') {
							goto l47
						}
						position++
						if !_rules[rule_]() {
							goto l47
						}
						add(rulePUNC_COMMA, position49)
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				add(ruleARGS, position46)
			}
			return true
		l45:
			position, tokenIndex = position45, tokenIndex45
			return false
		},
		/* 10 DATATYPE <- <('*'? (BOOL / INT / FLOAT / STRING / ERROR / CUSTOM_TYPE))> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				{
					position52, tokenIndex52 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l52
					}
					position++
					goto l53
				l52:
					position, tokenIndex = position52, tokenIndex52
				}
			l53:
				{
					position54, tokenIndex54 := position, tokenIndex
					{
						position56 := position
						if buffer[position] != rune('b') {
							goto l55
						}
						position++
						if buffer[position] != rune('o') {
							goto l55
						}
						position++
						if buffer[position] != rune('o') {
							goto l55
						}
						position++
						if buffer[position] != rune('l') {
							goto l55
						}
						position++
						add(ruleBOOL, position56)
					}
					goto l54
				l55:
					position, tokenIndex = position54, tokenIndex54
					{
						position58 := position
						if buffer[position] != rune('i') {
							goto l57
						}
						position++
						if buffer[position] != rune('n') {
							goto l57
						}
						position++
						if buffer[position] != rune('t') {
							goto l57
						}
						position++
						add(ruleINT, position58)
					}
					goto l54
				l57:
					position, tokenIndex = position54, tokenIndex54
					{
						position60 := position
						if buffer[position] != rune('f') {
							goto l59
						}
						position++
						if buffer[position] != rune('l') {
							goto l59
						}
						position++
						if buffer[position] != rune('o') {
							goto l59
						}
						position++
						if buffer[position] != rune('a') {
							goto l59
						}
						position++
						if buffer[position] != rune('t') {
							goto l59
						}
						position++
						add(ruleFLOAT, position60)
					}
					goto l54
				l59:
					position, tokenIndex = position54, tokenIndex54
					{
						position62 := position
						if buffer[position] != rune('s') {
							goto l61
						}
						position++
						if buffer[position] != rune('t') {
							goto l61
						}
						position++
						if buffer[position] != rune('r') {
							goto l61
						}
						position++
						if buffer[position] != rune('i') {
							goto l61
						}
						position++
						if buffer[position] != rune('n') {
							goto l61
						}
						position++
						if buffer[position] != rune('g') {
							goto l61
						}
						position++
						add(ruleSTRING, position62)
					}
					goto l54
				l61:
					position, tokenIndex = position54, tokenIndex54
					{
						position64 := position
						if buffer[position] != rune('e') {
							goto l63
						}
						position++
						if buffer[position] != rune('r') {
							goto l63
						}
						position++
						if buffer[position] != rune('r') {
							goto l63
						}
						position++
						if buffer[position] != rune('o') {
							goto l63
						}
						position++
						if buffer[position] != rune('r') {
							goto l63
						}
						position++
						add(ruleERROR, position64)
					}
					goto l54
				l63:
					position, tokenIndex = position54, tokenIndex54
					{
						position65 := position
						{
							position66, tokenIndex66 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l67
							}
							position++
							goto l66
						l67:
							position, tokenIndex = position66, tokenIndex66
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l68
							}
							position++
							goto l66
						l68:
							position, tokenIndex = position66, tokenIndex66
							if buffer[position] != rune('_') {
								goto l50
							}
							position++
						}
					l66:
					l69:
						{
							position70, tokenIndex70 := position, tokenIndex
							{
								position71, tokenIndex71 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l72
								}
								position++
								goto l71
							l72:
								position, tokenIndex = position71, tokenIndex71
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l73
								}
								position++
								goto l71
							l73:
								position, tokenIndex = position71, tokenIndex71
								{
									position75, tokenIndex75 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l76
									}
									position++
									goto l75
								l76:
									position, tokenIndex = position75, tokenIndex75
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l74
									}
									position++
								}
							l75:
								goto l71
							l74:
								position, tokenIndex = position71, tokenIndex71
								if buffer[position] != rune('_') {
									goto l70
								}
								position++
							}
						l71:
							goto l69
						l70:
							position, tokenIndex = position70, tokenIndex70
						}
						add(ruleCUSTOM_TYPE, position65)
					}
				}
			l54:
				add(ruleDATATYPE, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 11 BOOL <- <('b' 'o' 'o' 'l')> */
		nil,
		/* 12 INT <- <('i' 'n' 't')> */
		nil,
		/* 13 FLOAT <- <('f' 'l' 'o' 'a' 't')> */
		nil,
		/* 14 STRING <- <('s' 't' 'r' 'i' 'n' 'g')> */
		nil,
		/* 15 ERROR <- <('e' 'r' 'r' 'o' 'r')> */
		nil,
		/* 16 CUSTOM_TYPE <- <(([a-z] / [A-Z] / '_') ([a-z] / [A-Z] / ([0-9] / [0-9]) / '_')*)> */
		nil,
	}
	p.rules = _rules
	return nil
}
