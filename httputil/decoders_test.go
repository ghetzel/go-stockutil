package httputil

// import (
// 	"bytes"
// 	"io"
// 	"io/ioutil"
// 	"testing"

// 	"github.com/ghetzel/testify/require"
// )

// var lipsum = []byte{
// 	0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70,
// 	0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f,
// 	0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d,
// 	0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73,
// 	0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20,
// 	0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69,
// 	0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2e,
// 	0x0a,
// }

// var lipsum_br = []byte{
// 	0x0b, 0x1c, 0x80, 0x4c, 0x6f, 0x72, 0x65, 0x6d,
// 	0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64,
// 	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74,
// 	0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63,
// 	0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74,
// 	0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69,
// 	0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c,
// 	0x69, 0x74, 0x2e, 0x0a, 0x03,
// }

// var lipsum_gzip = []byte{
// 	0x1F, 0x8B, 0x08, 0x00, 0xE9, 0x12, 0x07, 0x5B,
// 	0x00, 0x03, 0x05, 0xC1, 0xD1, 0x09, 0xC0, 0x20,
// 	0x0C, 0x05, 0xC0, 0xFF, 0x4E, 0xF1, 0x06, 0x28,
// 	0x9D, 0xC4, 0x25, 0x24, 0x06, 0x79, 0x60, 0x8C,
// 	0x24, 0x71, 0xFF, 0xDE, 0x35, 0x0F, 0x35, 0xF0,
// 	0xE4, 0x35, 0x0C, 0x5F, 0x1E, 0x48, 0x16, 0xBA,
// 	0x69, 0xBD, 0x10, 0xDF, 0xA9, 0x52, 0x5A, 0x37,
// 	0xD0, 0x07, 0x0F, 0x53, 0xB8, 0x27, 0x74, 0xB1,
// 	0xBE, 0xE7, 0x07, 0x3A, 0xED, 0x29, 0xFA, 0x39,
// 	0x00, 0x00, 0x00,
// }

// func read(in io.Reader) []byte {
// 	out, err := io.ReadAll(in)

// 	if err != nil {
// 		panic(err.Error())
// 	}

// 	return out
// }

// func TestParseDecodeResponse(t *testing.T) {
// 	assert := require.New(t)

// 	var out io.Reader
// 	var err error

// 	out, err = decode(bytes.NewBuffer(lipsum), `gzip`)
// 	assert.NoError(err)
// 	assert.Equal(lipsum_gzip, read(out))

// 	// out, err = decode(bytes.NewBuffer(lipsum), `br`)
// 	// assert.NoError(err)
// 	// assert.Equal(lipsum_br, read(out))
// }
